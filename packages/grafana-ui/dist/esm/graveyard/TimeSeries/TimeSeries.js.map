{"version":3,"file":"TimeSeries.js","sources":["../../../../src/graveyard/TimeSeries/TimeSeries.tsx"],"sourcesContent":["import React, { Component } from 'react';\n\nimport { DataFrame, TimeRange } from '@grafana/data';\n\nimport { PanelContextRoot } from '../../components/PanelChrome/PanelContext';\nimport { hasVisibleLegendSeries, PlotLegend } from '../../components/uPlot/PlotLegend';\nimport { UPlotConfigBuilder } from '../../components/uPlot/config/UPlotConfigBuilder';\nimport { withTheme2 } from '../../themes/ThemeContext';\nimport { GraphNG, GraphNGProps, PropDiffFn } from '../GraphNG/GraphNG';\n\nimport { preparePlotConfigBuilder } from './utils';\n\nconst propsToDiff: Array<string | PropDiffFn> = ['legend', 'options', 'theme'];\n\ntype TimeSeriesProps = Omit<GraphNGProps, 'prepConfig' | 'propsToDiff' | 'renderLegend'>;\n\nexport class UnthemedTimeSeries extends Component<TimeSeriesProps> {\n  static contextType = PanelContextRoot;\n  declare context: React.ContextType<typeof PanelContextRoot>;\n\n  prepConfig = (alignedFrame: DataFrame, allFrames: DataFrame[], getTimeRange: () => TimeRange) => {\n    const { sync } = this.context;\n    const { theme, timeZone, renderers, tweakAxis, tweakScale } = this.props;\n\n    return preparePlotConfigBuilder({\n      frame: alignedFrame,\n      theme,\n      timeZones: Array.isArray(timeZone) ? timeZone : [timeZone],\n      getTimeRange,\n      sync,\n      allFrames,\n      renderers,\n      tweakScale,\n      tweakAxis,\n    });\n  };\n\n  renderLegend = (config: UPlotConfigBuilder) => {\n    const { legend, frames } = this.props;\n\n    if (!config || (legend && !legend.showLegend) || !hasVisibleLegendSeries(config, frames)) {\n      return null;\n    }\n\n    return <PlotLegend data={frames} config={config} {...legend} />;\n  };\n\n  render() {\n    return (\n      <GraphNG\n        {...this.props}\n        prepConfig={this.prepConfig}\n        propsToDiff={propsToDiff}\n        renderLegend={this.renderLegend}\n      />\n    );\n  }\n}\n\nexport const TimeSeries = withTheme2(UnthemedTimeSeries);\nTimeSeries.displayName = 'TimeSeries';\n"],"names":["React"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA,MAAM,WAA0C,GAAA,CAAC,QAAU,EAAA,SAAA,EAAW,OAAO,CAAA,CAAA;AAItE,MAAM,2BAA2B,SAA2B,CAAA;AAAA,EAA5D,WAAA,GAAA;AAAA,IAAA,KAAA,CAAA,GAAA,SAAA,CAAA,CAAA;AAIL,IAAa,aAAA,CAAA,IAAA,EAAA,YAAA,EAAA,CAAC,YAAyB,EAAA,SAAA,EAAwB,YAAkC,KAAA;AAC/F,MAAM,MAAA,EAAE,IAAK,EAAA,GAAI,IAAK,CAAA,OAAA,CAAA;AACtB,MAAA,MAAM,EAAE,KAAO,EAAA,QAAA,EAAU,WAAW,SAAW,EAAA,UAAA,KAAe,IAAK,CAAA,KAAA,CAAA;AAEnE,MAAA,OAAO,wBAAyB,CAAA;AAAA,QAC9B,KAAO,EAAA,YAAA;AAAA,QACP,KAAA;AAAA,QACA,WAAW,KAAM,CAAA,OAAA,CAAQ,QAAQ,CAAI,GAAA,QAAA,GAAW,CAAC,QAAQ,CAAA;AAAA,QACzD,YAAA;AAAA,QACA,IAAA;AAAA,QACA,SAAA;AAAA,QACA,SAAA;AAAA,QACA,UAAA;AAAA,QACA,SAAA;AAAA,OACD,CAAA,CAAA;AAAA,KACH,CAAA,CAAA;AAEA,IAAA,aAAA,CAAA,IAAA,EAAA,cAAA,EAAe,CAAC,MAA+B,KAAA;AAC7C,MAAA,MAAM,EAAE,MAAA,EAAQ,MAAO,EAAA,GAAI,IAAK,CAAA,KAAA,CAAA;AAEhC,MAAI,IAAA,CAAC,MAAW,IAAA,MAAA,IAAU,CAAC,MAAA,CAAO,cAAe,CAAC,sBAAA,CAAuB,MAAQ,EAAA,MAAM,CAAG,EAAA;AACxF,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAEA,MAAA,uBAAQA,cAAA,CAAA,aAAA,CAAA,UAAA,EAAA,cAAA,CAAA,EAAW,IAAM,EAAA,MAAA,EAAQ,UAAoB,MAAQ,CAAA,CAAA,CAAA;AAAA,KAC/D,CAAA,CAAA;AAAA,GAAA;AAAA,EAEA,MAAS,GAAA;AACP,IACE,uBAAAA,cAAA,CAAA,aAAA;AAAA,MAAC,OAAA;AAAA,MAAA,aAAA,CAAA,cAAA,CAAA,EAAA,EACK,KAAK,KADV,CAAA,EAAA;AAAA,QAEC,YAAY,IAAK,CAAA,UAAA;AAAA,QACjB,WAAA;AAAA,QACA,cAAc,IAAK,CAAA,YAAA;AAAA,OAAA,CAAA;AAAA,KACrB,CAAA;AAAA,GAEJ;AACF,CAAA;AAxCE,aAAA,CADW,oBACJ,aAAc,EAAA,gBAAA,CAAA,CAAA;AA0CV,MAAA,UAAA,GAAa,WAAW,kBAAkB,EAAA;AACvD,UAAA,CAAW,WAAc,GAAA,YAAA;;;;"}