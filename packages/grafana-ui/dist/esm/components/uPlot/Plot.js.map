{"version":3,"file":"Plot.js","sources":["../../../../src/components/uPlot/Plot.tsx"],"sourcesContent":["import React, { Component, createRef } from 'react';\nimport uPlot, { AlignedData, Options } from 'uplot';\n\nimport { PlotProps } from './types';\nimport { pluginLog } from './utils';\n\nimport 'uplot/dist/uPlot.min.css';\n\nfunction sameDims(prevProps: PlotProps, nextProps: PlotProps) {\n  return nextProps.width === prevProps.width && nextProps.height === prevProps.height;\n}\n\nfunction sameData(prevProps: PlotProps, nextProps: PlotProps) {\n  return nextProps.data === prevProps.data;\n}\n\nfunction sameConfig(prevProps: PlotProps, nextProps: PlotProps) {\n  return nextProps.config === prevProps.config;\n}\n\ntype UPlotChartState = {\n  plot: uPlot | null;\n};\n\n/**\n * @internal\n * uPlot abstraction responsible for plot initialisation, setup and refresh\n * Receives a data frame that is x-axis aligned, as of https://github.com/leeoniya/uPlot/tree/master/docs#data-format\n * Exposes context for uPlot instance access\n */\nexport class UPlotChart extends Component<PlotProps, UPlotChartState> {\n  plotContainer = createRef<HTMLDivElement>();\n  plotCanvasBBox = createRef<DOMRect>();\n\n  constructor(props: PlotProps) {\n    super(props);\n\n    this.state = {\n      plot: null,\n    };\n  }\n\n  reinitPlot() {\n    let { width, height, plotRef } = this.props;\n\n    this.state.plot?.destroy();\n\n    if (width === 0 && height === 0) {\n      return;\n    }\n\n    this.props.config.addHook('setSize', (u) => {\n      const canvas = u.over;\n      if (!canvas) {\n        return;\n      }\n    });\n\n    const config: Options = {\n      width: Math.floor(this.props.width),\n      height: Math.floor(this.props.height),\n      ...this.props.config.getConfig(),\n    };\n\n    pluginLog('UPlot', false, 'Reinitializing plot', config);\n    const plot = new uPlot(config, this.props.data as AlignedData, this.plotContainer!.current!);\n\n    if (plotRef) {\n      plotRef(plot);\n    }\n\n    this.setState({ plot });\n  }\n\n  componentDidMount() {\n    this.reinitPlot();\n  }\n\n  componentWillUnmount() {\n    this.state.plot?.destroy();\n  }\n\n  componentDidUpdate(prevProps: PlotProps) {\n    let { plot } = this.state;\n\n    if (!sameDims(prevProps, this.props)) {\n      plot?.setSize({\n        width: Math.floor(this.props.width),\n        height: Math.floor(this.props.height),\n      });\n    } else if (!sameConfig(prevProps, this.props)) {\n      this.reinitPlot();\n    } else if (!sameData(prevProps, this.props)) {\n      plot?.setData(this.props.data as AlignedData);\n    }\n  }\n\n  render() {\n    return (\n      <div style={{ position: 'relative' }}>\n        <div ref={this.plotContainer} data-testid=\"uplot-main-div\" />\n        {this.props.children}\n      </div>\n    );\n  }\n}\n"],"names":["React"],"mappings":"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"}