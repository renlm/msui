{"version":3,"file":"VizLegendTable.js","sources":["../../../../src/components/VizLegend/VizLegendTable.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes/ThemeContext';\nimport { Icon } from '../Icon/Icon';\n\nimport { LegendTableItem } from './VizLegendTableItem';\nimport { VizLegendItem, VizLegendTableProps } from './types';\n\nconst nameSortKey = 'Name';\nconst naturalCompare = new Intl.Collator(undefined, { numeric: true, sensitivity: 'base' }).compare;\n\n/**\n * @internal\n */\nexport const VizLegendTable = <T extends unknown>({\n  items,\n  sortBy: sortKey,\n  sortDesc,\n  itemRenderer,\n  className,\n  onToggleSort,\n  onLabelClick,\n  onLabelMouseOver,\n  onLabelMouseOut,\n  readonly,\n  isSortable,\n}: VizLegendTableProps<T>): JSX.Element => {\n  const styles = useStyles2(getStyles);\n  const header: Record<string, string> = {};\n\n  if (isSortable) {\n    header[nameSortKey] = '';\n  }\n\n  for (const item of items) {\n    if (item.getDisplayValues) {\n      for (const displayValue of item.getDisplayValues()) {\n        header[displayValue.title ?? '?'] = displayValue.description ?? '';\n      }\n    }\n  }\n\n  if (sortKey != null) {\n    let itemVals = new Map<VizLegendItem, number>();\n\n    items.forEach((item) => {\n      if (sortKey !== nameSortKey && item.getDisplayValues) {\n        const stat = item.getDisplayValues().find((stat) => stat.title === sortKey);\n        const val = stat == null || Number.isNaN(stat.numeric) ? -Infinity : stat.numeric;\n        itemVals.set(item, val);\n      }\n    });\n\n    let sortMult = sortDesc ? -1 : 1;\n\n    if (sortKey === nameSortKey) {\n      // string sort\n      items.sort((a, b) => {\n        return sortMult * naturalCompare(a.label, b.label);\n      });\n    } else {\n      // numeric sort\n      items.sort((a, b) => {\n        const aVal = itemVals.get(a) ?? 0;\n        const bVal = itemVals.get(b) ?? 0;\n\n        return sortMult * (aVal - bVal);\n      });\n    }\n  }\n\n  if (!itemRenderer) {\n    /* eslint-disable-next-line react/display-name */\n    itemRenderer = (item, index) => (\n      <LegendTableItem\n        key={`${item.label}-${index}`}\n        item={item}\n        onLabelClick={onLabelClick}\n        onLabelMouseOver={onLabelMouseOver}\n        onLabelMouseOut={onLabelMouseOut}\n        readonly={readonly}\n      />\n    );\n  }\n\n  return (\n    <table className={cx(styles.table, className)}>\n      <thead>\n        <tr>\n          {!isSortable && <th></th>}\n          {Object.keys(header).map((columnTitle) => (\n            <th\n              title={header[columnTitle]}\n              key={columnTitle}\n              className={cx(styles.header, onToggleSort && styles.headerSortable, isSortable && styles.nameHeader, {\n                [styles.withIcon]: sortKey === columnTitle,\n              })}\n              onClick={() => {\n                if (onToggleSort) {\n                  onToggleSort(columnTitle);\n                }\n              }}\n            >\n              {columnTitle}\n              {sortKey === columnTitle && <Icon size=\"xs\" name={sortDesc ? 'angle-down' : 'angle-up'} />}\n            </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>{items.map(itemRenderer!)}</tbody>\n    </table>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  table: css({\n    width: '100%',\n    'th:first-child': {\n      width: '100%',\n      borderBottom: `1px solid ${theme.colors.border.weak}`,\n    },\n  }),\n  header: css({\n    color: theme.colors.primary.text,\n    fontWeight: theme.typography.fontWeightMedium,\n    borderBottom: `1px solid ${theme.colors.border.weak}`,\n    padding: theme.spacing(0.25, 1, 0.25, 1),\n    fontSize: theme.typography.bodySmall.fontSize,\n    textAlign: 'right',\n    whiteSpace: 'nowrap',\n  }),\n  nameHeader: css({\n    textAlign: 'left',\n    paddingLeft: '30px',\n  }),\n  // This needs to be padding-right - icon size(xs==12) to avoid jumping\n  withIcon: css({\n    paddingRight: '4px',\n  }),\n  headerSortable: css({\n    cursor: 'pointer',\n  }),\n});\n"],"names":["stat","_a","_b","React"],"mappings":";;;;;;AAWA,MAAM,WAAc,GAAA,MAAA,CAAA;AACpB,MAAM,cAAA,GAAiB,IAAI,IAAA,CAAK,QAAS,CAAA,KAAA,CAAA,EAAW,EAAE,OAAA,EAAS,IAAM,EAAA,WAAA,EAAa,MAAO,EAAC,CAAE,CAAA,OAAA,CAAA;AAKrF,MAAM,iBAAiB,CAAoB;AAAA,EAChD,KAAA;AAAA,EACA,MAAQ,EAAA,OAAA;AAAA,EACR,QAAA;AAAA,EACA,YAAA;AAAA,EACA,SAAA;AAAA,EACA,YAAA;AAAA,EACA,YAAA;AAAA,EACA,gBAAA;AAAA,EACA,eAAA;AAAA,EACA,QAAA;AAAA,EACA,UAAA;AACF,CAA2C,KAAA;AA7B3C,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AA8BE,EAAM,MAAA,MAAA,GAAS,WAAW,SAAS,CAAA,CAAA;AACnC,EAAA,MAAM,SAAiC,EAAC,CAAA;AAExC,EAAA,IAAI,UAAY,EAAA;AACd,IAAA,MAAA,CAAO,WAAW,CAAI,GAAA,EAAA,CAAA;AAAA,GACxB;AAEA,EAAA,KAAA,MAAW,QAAQ,KAAO,EAAA;AACxB,IAAA,IAAI,KAAK,gBAAkB,EAAA;AACzB,MAAW,KAAA,MAAA,YAAA,IAAgB,IAAK,CAAA,gBAAA,EAAoB,EAAA;AAClD,QAAA,MAAA,CAAA,CAAO,kBAAa,KAAb,KAAA,IAAA,GAAA,EAAA,GAAsB,GAAG,CAAI,GAAA,CAAA,EAAA,GAAA,YAAA,CAAa,gBAAb,IAA4B,GAAA,EAAA,GAAA,EAAA,CAAA;AAAA,OAClE;AAAA,KACF;AAAA,GACF;AAEA,EAAA,IAAI,WAAW,IAAM,EAAA;AACnB,IAAI,IAAA,QAAA,uBAAe,GAA2B,EAAA,CAAA;AAE9C,IAAM,KAAA,CAAA,OAAA,CAAQ,CAAC,IAAS,KAAA;AACtB,MAAI,IAAA,OAAA,KAAY,WAAe,IAAA,IAAA,CAAK,gBAAkB,EAAA;AACpD,QAAM,MAAA,IAAA,GAAO,KAAK,gBAAiB,EAAA,CAAE,KAAK,CAACA,KAAAA,KAASA,KAAK,CAAA,KAAA,KAAU,OAAO,CAAA,CAAA;AAC1E,QAAM,MAAA,GAAA,GAAM,QAAQ,IAAQ,IAAA,MAAA,CAAO,MAAM,IAAK,CAAA,OAAO,CAAI,GAAA,CAAA,QAAA,GAAY,IAAK,CAAA,OAAA,CAAA;AAC1E,QAAS,QAAA,CAAA,GAAA,CAAI,MAAM,GAAG,CAAA,CAAA;AAAA,OACxB;AAAA,KACD,CAAA,CAAA;AAED,IAAI,IAAA,QAAA,GAAW,WAAW,CAAK,CAAA,GAAA,CAAA,CAAA;AAE/B,IAAA,IAAI,YAAY,WAAa,EAAA;AAE3B,MAAM,KAAA,CAAA,IAAA,CAAK,CAAC,CAAA,EAAG,CAAM,KAAA;AACnB,QAAA,OAAO,QAAW,GAAA,cAAA,CAAe,CAAE,CAAA,KAAA,EAAO,EAAE,KAAK,CAAA,CAAA;AAAA,OAClD,CAAA,CAAA;AAAA,KACI,MAAA;AAEL,MAAM,KAAA,CAAA,IAAA,CAAK,CAAC,CAAA,EAAG,CAAM,KAAA;AAjE3B,QAAA,IAAAC,GAAAC,EAAAA,GAAAA,CAAAA;AAkEQ,QAAA,MAAM,QAAOD,GAAA,GAAA,QAAA,CAAS,IAAI,CAAC,CAAA,KAAd,OAAAA,GAAmB,GAAA,CAAA,CAAA;AAChC,QAAA,MAAM,QAAOC,GAAA,GAAA,QAAA,CAAS,IAAI,CAAC,CAAA,KAAd,OAAAA,GAAmB,GAAA,CAAA,CAAA;AAEhC,QAAA,OAAO,YAAY,IAAO,GAAA,IAAA,CAAA,CAAA;AAAA,OAC3B,CAAA,CAAA;AAAA,KACH;AAAA,GACF;AAEA,EAAA,IAAI,CAAC,YAAc,EAAA;AAEjB,IAAe,YAAA,GAAA,CAAC,MAAM,KACpB,qBAAAC,cAAA,CAAA,aAAA;AAAA,MAAC,eAAA;AAAA,MAAA;AAAA,QACC,GAAK,EAAA,CAAA,EAAG,IAAK,CAAA,KAAK,IAAI,KAAK,CAAA,CAAA;AAAA,QAC3B,IAAA;AAAA,QACA,YAAA;AAAA,QACA,gBAAA;AAAA,QACA,eAAA;AAAA,QACA,QAAA;AAAA,OAAA;AAAA,KACF,CAAA;AAAA,GAEJ;AAEA,EACE,uBAAAA,cAAA,CAAA,aAAA,CAAC,WAAM,SAAW,EAAA,EAAA,CAAG,OAAO,KAAO,EAAA,SAAS,CAC1C,EAAA,kBAAAA,cAAA,CAAA,aAAA,CAAC,OACC,EAAA,IAAA,kBAAAA,cAAA,CAAA,aAAA,CAAC,YACE,CAAC,UAAA,oBAAeA,cAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAG,CACnB,EAAA,MAAA,CAAO,KAAK,MAAM,CAAA,CAAE,GAAI,CAAA,CAAC,WACxB,qBAAAA,cAAA,CAAA,aAAA;AAAA,IAAC,IAAA;AAAA,IAAA;AAAA,MACC,KAAA,EAAO,OAAO,WAAW,CAAA;AAAA,MACzB,GAAK,EAAA,WAAA;AAAA,MACL,SAAA,EAAW,GAAG,MAAO,CAAA,MAAA,EAAQ,gBAAgB,MAAO,CAAA,cAAA,EAAgB,UAAc,IAAA,MAAA,CAAO,UAAY,EAAA;AAAA,QACnG,CAAC,MAAA,CAAO,QAAQ,GAAG,OAAY,KAAA,WAAA;AAAA,OAChC,CAAA;AAAA,MACD,SAAS,MAAM;AACb,QAAA,IAAI,YAAc,EAAA;AAChB,UAAA,YAAA,CAAa,WAAW,CAAA,CAAA;AAAA,SAC1B;AAAA,OACF;AAAA,KAAA;AAAA,IAEC,WAAA;AAAA,IACA,OAAA,KAAY,+BAAgBA,cAAA,CAAA,aAAA,CAAA,IAAA,EAAA,EAAK,MAAK,IAAK,EAAA,IAAA,EAAM,QAAW,GAAA,YAAA,GAAe,UAAY,EAAA,CAAA;AAAA,GAE3F,CACH,CACF,CACA,kBAAAA,cAAA,CAAA,aAAA,CAAC,eAAO,KAAM,CAAA,GAAA,CAAI,YAAa,CAAE,CACnC,CAAA,CAAA;AAEJ,EAAA;AAEA,MAAM,SAAA,GAAY,CAAC,KAA0B,MAAA;AAAA,EAC3C,OAAO,GAAI,CAAA;AAAA,IACT,KAAO,EAAA,MAAA;AAAA,IACP,gBAAkB,EAAA;AAAA,MAChB,KAAO,EAAA,MAAA;AAAA,MACP,YAAc,EAAA,CAAA,UAAA,EAAa,KAAM,CAAA,MAAA,CAAO,OAAO,IAAI,CAAA,CAAA;AAAA,KACrD;AAAA,GACD,CAAA;AAAA,EACD,QAAQ,GAAI,CAAA;AAAA,IACV,KAAA,EAAO,KAAM,CAAA,MAAA,CAAO,OAAQ,CAAA,IAAA;AAAA,IAC5B,UAAA,EAAY,MAAM,UAAW,CAAA,gBAAA;AAAA,IAC7B,YAAc,EAAA,CAAA,UAAA,EAAa,KAAM,CAAA,MAAA,CAAO,OAAO,IAAI,CAAA,CAAA;AAAA,IACnD,SAAS,KAAM,CAAA,OAAA,CAAQ,IAAM,EAAA,CAAA,EAAG,MAAM,CAAC,CAAA;AAAA,IACvC,QAAA,EAAU,KAAM,CAAA,UAAA,CAAW,SAAU,CAAA,QAAA;AAAA,IACrC,SAAW,EAAA,OAAA;AAAA,IACX,UAAY,EAAA,QAAA;AAAA,GACb,CAAA;AAAA,EACD,YAAY,GAAI,CAAA;AAAA,IACd,SAAW,EAAA,MAAA;AAAA,IACX,WAAa,EAAA,MAAA;AAAA,GACd,CAAA;AAAA;AAAA,EAED,UAAU,GAAI,CAAA;AAAA,IACZ,YAAc,EAAA,KAAA;AAAA,GACf,CAAA;AAAA,EACD,gBAAgB,GAAI,CAAA;AAAA,IAClB,MAAQ,EAAA,SAAA;AAAA,GACT,CAAA;AACH,CAAA,CAAA;;;;"}