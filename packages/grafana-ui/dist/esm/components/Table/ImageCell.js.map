{"version":3,"file":"ImageCell.js","sources":["../../../../src/components/Table/ImageCell.tsx"],"sourcesContent":["import React from 'react';\n\nimport { getCellLinks } from '../../utils';\nimport { DataLinksContextMenu } from '../DataLinks/DataLinksContextMenu';\n\nimport { TableCellProps } from './types';\n\nconst DATALINKS_HEIGHT_OFFSET = 10;\n\nexport const ImageCell = (props: TableCellProps) => {\n  const { field, cell, tableStyles, row, cellProps } = props;\n\n  const displayValue = field.display!(cell.value);\n\n  const hasLinks = Boolean(getCellLinks(field, row)?.length);\n\n  return (\n    <div {...cellProps} className={tableStyles.cellContainer}>\n      {!hasLinks && (\n        <img\n          style={{ height: tableStyles.cellHeight - DATALINKS_HEIGHT_OFFSET, width: 'auto' }}\n          src={displayValue.text}\n          className={tableStyles.imageCell}\n          alt=\"\"\n        />\n      )}\n      {hasLinks && (\n        <DataLinksContextMenu\n          style={{ height: tableStyles.cellHeight - DATALINKS_HEIGHT_OFFSET, width: 'auto' }}\n          links={() => getCellLinks(field, row) || []}\n        >\n          {(api) => {\n            const img = (\n              <img\n                style={{ height: tableStyles.cellHeight - DATALINKS_HEIGHT_OFFSET, width: 'auto' }}\n                src={displayValue.text}\n                className={tableStyles.imageCell}\n                alt=\"\"\n              />\n            );\n            if (api.openMenu) {\n              return (\n                <div\n                  onClick={api.openMenu}\n                  role=\"button\"\n                  tabIndex={0}\n                  onKeyDown={(e: React.KeyboardEvent) => {\n                    if (e.key === 'Enter' && api.openMenu) {\n                      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/consistent-type-assertions\n                      api.openMenu(e as any);\n                    }\n                  }}\n                >\n                  {img}\n                </div>\n              );\n            } else {\n              return img;\n            }\n          }}\n        </DataLinksContextMenu>\n      )}\n    </div>\n  );\n};\n"],"names":["React"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,MAAM,uBAA0B,GAAA,EAAA,CAAA;AAEnB,MAAA,SAAA,GAAY,CAAC,KAA0B,KAAA;AATpD,EAAA,IAAA,EAAA,CAAA;AAUE,EAAA,MAAM,EAAE,KAAO,EAAA,IAAA,EAAM,WAAa,EAAA,GAAA,EAAK,WAAc,GAAA,KAAA,CAAA;AAErD,EAAA,MAAM,YAAe,GAAA,KAAA,CAAM,OAAS,CAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AAE9C,EAAA,MAAM,WAAW,OAAQ,CAAA,CAAA,EAAA,GAAA,YAAA,CAAa,OAAO,GAAG,CAAA,KAAvB,mBAA0B,MAAM,CAAA,CAAA;AAEzD,EACE,uBAAAA,cAAA,CAAA,aAAA,CAAC,wCAAQ,SAAR,CAAA,EAAA,EAAmB,WAAW,WAAY,CAAA,aAAA,EAAA,CAAA,EACxC,CAAC,QACA,oBAAAA,cAAA,CAAA,aAAA;AAAA,IAAC,KAAA;AAAA,IAAA;AAAA,MACC,OAAO,EAAE,MAAA,EAAQ,YAAY,UAAa,GAAA,uBAAA,EAAyB,OAAO,MAAO,EAAA;AAAA,MACjF,KAAK,YAAa,CAAA,IAAA;AAAA,MAClB,WAAW,WAAY,CAAA,SAAA;AAAA,MACvB,GAAI,EAAA,EAAA;AAAA,KAAA;AAAA,KAGP,QACC,oBAAAA,cAAA,CAAA,aAAA;AAAA,IAAC,oBAAA;AAAA,IAAA;AAAA,MACC,OAAO,EAAE,MAAA,EAAQ,YAAY,UAAa,GAAA,uBAAA,EAAyB,OAAO,MAAO,EAAA;AAAA,MACjF,OAAO,MAAM,YAAA,CAAa,KAAO,EAAA,GAAG,KAAK,EAAC;AAAA,KAAA;AAAA,IAEzC,CAAC,GAAQ,KAAA;AACR,MAAA,MAAM,GACJ,mBAAAA,cAAA,CAAA,aAAA;AAAA,QAAC,KAAA;AAAA,QAAA;AAAA,UACC,OAAO,EAAE,MAAA,EAAQ,YAAY,UAAa,GAAA,uBAAA,EAAyB,OAAO,MAAO,EAAA;AAAA,UACjF,KAAK,YAAa,CAAA,IAAA;AAAA,UAClB,WAAW,WAAY,CAAA,SAAA;AAAA,UACvB,GAAI,EAAA,EAAA;AAAA,SAAA;AAAA,OACN,CAAA;AAEF,MAAA,IAAI,IAAI,QAAU,EAAA;AAChB,QACE,uBAAAA,cAAA,CAAA,aAAA;AAAA,UAAC,KAAA;AAAA,UAAA;AAAA,YACC,SAAS,GAAI,CAAA,QAAA;AAAA,YACb,IAAK,EAAA,QAAA;AAAA,YACL,QAAU,EAAA,CAAA;AAAA,YACV,SAAA,EAAW,CAAC,CAA2B,KAAA;AACrC,cAAA,IAAI,CAAE,CAAA,GAAA,KAAQ,OAAW,IAAA,GAAA,CAAI,QAAU,EAAA;AAErC,gBAAA,GAAA,CAAI,SAAS,CAAQ,CAAA,CAAA;AAAA,eACvB;AAAA,aACF;AAAA,WAAA;AAAA,UAEC,GAAA;AAAA,SACH,CAAA;AAAA,OAEG,MAAA;AACL,QAAO,OAAA,GAAA,CAAA;AAAA,OACT;AAAA,KACF;AAAA,GAGN,CAAA,CAAA;AAEJ;;;;"}