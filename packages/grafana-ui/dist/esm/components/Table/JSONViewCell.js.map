{"version":3,"file":"JSONViewCell.js","sources":["../../../../src/components/Table/JSONViewCell.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport { isString } from 'lodash';\nimport React from 'react';\n\nimport { useStyles2 } from '../../themes';\nimport { getCellLinks } from '../../utils';\nimport { Button, clearLinkButtonStyles } from '../Button';\nimport { DataLinksContextMenu } from '../DataLinks/DataLinksContextMenu';\n\nimport { CellActions } from './CellActions';\nimport { TableCellProps } from './types';\n\nexport function JSONViewCell(props: TableCellProps): JSX.Element {\n  const { cell, tableStyles, cellProps, field, row } = props;\n  const inspectEnabled = Boolean(field.config.custom?.inspect);\n  const txt = css({\n    cursor: 'pointer',\n    fontFamily: 'monospace',\n  });\n\n  let value = cell.value;\n  let displayValue = value;\n\n  if (isString(value)) {\n    try {\n      value = JSON.parse(value);\n    } catch {} // ignore errors\n  } else {\n    displayValue = JSON.stringify(value, null, ' ');\n  }\n\n  const hasLinks = Boolean(getCellLinks(field, row)?.length);\n  const clearButtonStyle = useStyles2(clearLinkButtonStyles);\n\n  return (\n    <div {...cellProps} className={inspectEnabled ? tableStyles.cellContainerNoOverflow : tableStyles.cellContainer}>\n      <div className={cx(tableStyles.cellText, txt)}>\n        {!hasLinks && <div className={tableStyles.cellText}>{displayValue}</div>}\n        {hasLinks && (\n          <DataLinksContextMenu links={() => getCellLinks(field, row) || []}>\n            {(api) => {\n              if (api.openMenu) {\n                return (\n                  <Button className={cx(clearButtonStyle)} onClick={api.openMenu}>\n                    {displayValue}\n                  </Button>\n                );\n              } else {\n                return <>{displayValue}</>;\n              }\n            }}\n          </DataLinksContextMenu>\n        )}\n      </div>\n      {inspectEnabled && <CellActions {...props} previewMode=\"code\" />}\n    </div>\n  );\n}\n"],"names":["React"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYO,SAAS,aAAa,KAAoC,EAAA;AAZjE,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAaE,EAAA,MAAM,EAAE,IAAM,EAAA,WAAA,EAAa,SAAW,EAAA,KAAA,EAAO,KAAQ,GAAA,KAAA,CAAA;AACrD,EAAA,MAAM,iBAAiB,OAAQ,CAAA,CAAA,EAAA,GAAA,KAAA,CAAM,MAAO,CAAA,MAAA,KAAb,mBAAqB,OAAO,CAAA,CAAA;AAC3D,EAAA,MAAM,MAAM,GAAI,CAAA;AAAA,IACd,MAAQ,EAAA,SAAA;AAAA,IACR,UAAY,EAAA,WAAA;AAAA,GACb,CAAA,CAAA;AAED,EAAA,IAAI,QAAQ,IAAK,CAAA,KAAA,CAAA;AACjB,EAAA,IAAI,YAAe,GAAA,KAAA,CAAA;AAEnB,EAAI,IAAA,QAAA,CAAS,KAAK,CAAG,EAAA;AACnB,IAAI,IAAA;AACF,MAAQ,KAAA,GAAA,IAAA,CAAK,MAAM,KAAK,CAAA,CAAA;AAAA,KAClB,CAAA,OAAA,CAAA,EAAA;AAAA,KAAC;AAAA,GACJ,MAAA;AACL,IAAA,YAAA,GAAe,IAAK,CAAA,SAAA,CAAU,KAAO,EAAA,IAAA,EAAM,GAAG,CAAA,CAAA;AAAA,GAChD;AAEA,EAAA,MAAM,WAAW,OAAQ,CAAA,CAAA,EAAA,GAAA,YAAA,CAAa,OAAO,GAAG,CAAA,KAAvB,mBAA0B,MAAM,CAAA,CAAA;AACzD,EAAM,MAAA,gBAAA,GAAmB,WAAW,qBAAqB,CAAA,CAAA;AAEzD,EAAA,oDACG,KAAQ,EAAA,aAAA,CAAA,cAAA,CAAA,EAAA,EAAA,SAAA,CAAA,EAAR,EAAmB,SAAA,EAAW,iBAAiB,WAAY,CAAA,uBAAA,GAA0B,WAAY,CAAA,aAAA,EAAA,CAAA,+CAC/F,KAAI,EAAA,EAAA,SAAA,EAAW,GAAG,WAAY,CAAA,QAAA,EAAU,GAAG,CACzC,EAAA,EAAA,CAAC,QAAY,oBAAAA,cAAA,CAAA,aAAA,CAAC,SAAI,SAAW,EAAA,WAAA,CAAY,YAAW,YAAa,CAAA,EACjE,4BACEA,cAAA,CAAA,aAAA,CAAA,oBAAA,EAAA,EAAqB,KAAO,EAAA,MAAM,aAAa,KAAO,EAAA,GAAG,KAAK,EAAC,EAAA,EAC7D,CAAC,GAAQ,KAAA;AACR,IAAA,IAAI,IAAI,QAAU,EAAA;AAChB,MACE,uBAAAA,cAAA,CAAA,aAAA,CAAC,UAAO,SAAW,EAAA,EAAA,CAAG,gBAAgB,CAAG,EAAA,OAAA,EAAS,GAAI,CAAA,QAAA,EAAA,EACnD,YACH,CAAA,CAAA;AAAA,KAEG,MAAA;AACL,MAAA,mFAAU,YAAa,CAAA,CAAA;AAAA,KACzB;AAAA,GAEJ,CAEJ,CAAA,EACC,cAAkB,oBAAAA,cAAA,CAAA,aAAA,CAAC,8CAAgB,KAAhB,CAAA,EAAA,EAAuB,WAAY,EAAA,MAAA,EAAA,CAAO,CAChE,CAAA,CAAA;AAEJ;;;;"}