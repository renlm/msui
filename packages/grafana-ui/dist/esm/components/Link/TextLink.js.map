{"version":3,"file":"TextLink.js","sources":["../../../../src/components/Link/TextLink.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { AnchorHTMLAttributes, forwardRef } from 'react';\n\nimport { GrafanaTheme2, locationUtil, textUtil, ThemeTypographyVariantTypes } from '@grafana/data';\n\nimport { useTheme2 } from '../../themes';\nimport { IconName, IconSize } from '../../types';\nimport { Icon } from '../Icon/Icon';\nimport { customWeight } from '../Text/utils';\n\nimport { Link } from './Link';\n\ntype TextLinkVariants = keyof Omit<ThemeTypographyVariantTypes, 'code'>;\n\ninterface TextLinkProps extends Omit<AnchorHTMLAttributes<HTMLAnchorElement>, 'target' | 'rel'> {\n  /** url to which redirect the user, external or internal */\n  href: string;\n  /** Color to use for text */\n  color?: keyof GrafanaTheme2['colors']['text'];\n  /** Specify if the link will redirect users to a page in or out Grafana */\n  external?: boolean;\n  /** True when the link will be displayed inline with surrounding text, false if it will be displayed as a block. Depending on this prop correspondant default styles will be applied */\n  inline?: boolean;\n  /** The default variant is 'body'. To fit another styles set the correspondent variant as it is necessary also to adjust the icon size. `code` is excluded, as it is not fit for links. */\n  variant?: TextLinkVariants;\n  /** Override the default weight for the used variant */\n  weight?: 'light' | 'regular' | 'medium' | 'bold';\n  /** Set the icon to be shown. An external link will show the 'external-link-alt' icon as default.*/\n  icon?: IconName;\n  children: string;\n}\n\nconst svgSizes: {\n  [key in TextLinkVariants]: IconSize;\n} = {\n  h1: 'xl',\n  h2: 'xl',\n  h3: 'lg',\n  h4: 'lg',\n  h5: 'md',\n  h6: 'md',\n  body: 'md',\n  bodySmall: 'xs',\n};\n\nexport const TextLink = forwardRef<HTMLAnchorElement, TextLinkProps>(\n  (\n    { href, color = 'link', external = false, inline = true, variant = 'body', weight, icon, children, ...rest },\n    ref\n  ) => {\n    const validUrl = textUtil.sanitizeUrl(href ?? '');\n\n    const theme = useTheme2();\n    const styles = getLinkStyles(theme, inline, variant, weight, color);\n    const externalIcon = icon || 'external-link-alt';\n\n    if (external) {\n      return (\n        <a href={validUrl} ref={ref} {...rest} target=\"_blank\" rel=\"noreferrer\" className={styles}>\n          {children}\n          <Icon size={svgSizes[variant] || 'md'} name={externalIcon} />\n        </a>\n      );\n    }\n\n    const strippedUrl = locationUtil.stripBaseFromUrl(validUrl);\n\n    return (\n      <Link ref={ref} href={strippedUrl} {...rest} className={styles}>\n        {children}\n        {icon && <Icon name={icon} size={svgSizes[variant] || 'md'} />}\n      </Link>\n    );\n  }\n);\n\nTextLink.displayName = 'TextLink';\n\nexport const getLinkStyles = (\n  theme: GrafanaTheme2,\n  inline: boolean,\n  variant?: keyof ThemeTypographyVariantTypes,\n  weight?: TextLinkProps['weight'],\n  color?: TextLinkProps['color']\n) => {\n  return css([\n    variant && {\n      ...theme.typography[variant],\n    },\n    weight && {\n      fontWeight: customWeight(weight, theme),\n    },\n    color && {\n      color: theme.colors.text[color],\n    },\n    {\n      alignItems: 'center',\n      gap: '0.25em',\n      display: 'inline-flex',\n      textDecoration: 'none',\n      '&:hover': {\n        textDecoration: 'underline',\n        color: theme.colors.text.link,\n      },\n    },\n    inline && {\n      textDecoration: 'underline',\n      '&:hover': {\n        textDecoration: 'none',\n      },\n    },\n  ]);\n};\n"],"names":["React"],"mappings":"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"}