{"version":3,"file":"SingleStatBaseOptions.js","sources":["../../../../src/components/SingleStatShared/SingleStatBaseOptions.ts"],"sourcesContent":["import { cloneDeep, isNumber, omit } from 'lodash';\n\nimport {\n  convertOldAngularValueMappings,\n  FieldColorModeId,\n  FieldConfig,\n  fieldReducers,\n  PanelModel,\n  ReduceDataOptions,\n  ReducerID,\n  sortThresholds,\n  Threshold,\n  ThresholdsConfig,\n  ThresholdsMode,\n  validateFieldConfig,\n  ValueMapping,\n  VizOrientation,\n} from '@grafana/data';\nimport { OptionsWithTextFormatting } from '@grafana/schema';\n\nexport interface SingleStatBaseOptions extends OptionsWithTextFormatting {\n  reduceOptions: ReduceDataOptions;\n  orientation: VizOrientation;\n}\n\nconst optionsToKeep = ['reduceOptions', 'orientation'];\n\nexport function sharedSingleStatPanelChangedHandler(\n  panel: PanelModel<Partial<SingleStatBaseOptions>> | any,\n  prevPluginId: string,\n  prevOptions: any\n) {\n  let options = panel.options;\n\n  panel.fieldConfig = panel.fieldConfig || {\n    defaults: {},\n    overrides: [],\n  };\n\n  // Migrating from angular singlestat\n  if (prevPluginId === 'singlestat' && prevOptions.angular) {\n    return migrateFromAngularSinglestat(panel, prevOptions);\n  }\n\n  for (const k of optionsToKeep) {\n    if (prevOptions.hasOwnProperty(k)) {\n      options[k] = cloneDeep(prevOptions[k]);\n    }\n  }\n\n  return options;\n}\n\nfunction migrateFromAngularSinglestat(panel: PanelModel<Partial<SingleStatBaseOptions>> | any, prevOptions: any) {\n  const prevPanel = prevOptions.angular;\n  const reducer = fieldReducers.getIfExists(prevPanel.valueName);\n  const options = {\n    reduceOptions: {\n      calcs: [reducer ? reducer.id : ReducerID.mean],\n    },\n    orientation: VizOrientation.Horizontal,\n  } as any;\n\n  const defaults: FieldConfig = {};\n\n  if (prevPanel.format) {\n    defaults.unit = prevPanel.format;\n  }\n\n  if (prevPanel.tableColumn) {\n    options.reduceOptions.fields = `/^${prevPanel.tableColumn}$/`;\n  }\n\n  if (prevPanel.nullPointMode) {\n    defaults.nullValueMode = prevPanel.nullPointMode;\n  }\n\n  if (prevPanel.nullText) {\n    defaults.noValue = prevPanel.nullText;\n  }\n\n  if (prevPanel.decimals || prevPanel.decimals === 0) {\n    defaults.decimals = prevPanel.decimals;\n  }\n\n  // Convert thresholds and color values\n  if (prevPanel.thresholds && prevPanel.colors) {\n    const levels = prevPanel.thresholds.split(',').map((strVale: string) => {\n      return Number(strVale.trim());\n    });\n\n    // One more color than threshold\n    const thresholds: Threshold[] = [];\n    for (const color of prevPanel.colors) {\n      const idx = thresholds.length - 1;\n      if (idx >= 0) {\n        thresholds.push({ value: levels[idx], color });\n      } else {\n        thresholds.push({ value: -Infinity, color });\n      }\n    }\n\n    defaults.thresholds = {\n      mode: ThresholdsMode.Absolute,\n      steps: thresholds,\n    };\n  }\n\n  // Convert value mappings\n  const mappings = convertOldAngularValueMappings(prevPanel, defaults.thresholds);\n  if (mappings && mappings.length) {\n    defaults.mappings = mappings;\n  }\n\n  if (prevPanel.gauge && prevPanel.gauge.show) {\n    defaults.min = prevPanel.gauge.minValue;\n    defaults.max = prevPanel.gauge.maxValue;\n  }\n\n  panel.fieldConfig.defaults = defaults;\n\n  return options;\n}\n\nexport function sharedSingleStatMigrationHandler(panel: PanelModel<SingleStatBaseOptions>): SingleStatBaseOptions {\n  if (!panel.options) {\n    // This happens on the first load or when migrating from angular\n    return {} as any;\n  }\n\n  const previousVersion = parseFloat(panel.pluginVersion || '6.1');\n  let options = panel.options as any;\n\n  if (previousVersion < 6.2) {\n    options = migrateFromValueOptions(options);\n  }\n\n  if (previousVersion < 6.3) {\n    options = moveThresholdsAndMappingsToField(options);\n  }\n\n  const { fieldOptions } = options;\n\n  if (previousVersion < 6.6 && fieldOptions) {\n    // discard the old `override` options and enter an empty array\n    if (fieldOptions && fieldOptions.override) {\n      const { override, ...rest } = options.fieldOptions;\n      options = {\n        ...options,\n        fieldOptions: {\n          ...rest,\n          overrides: [],\n        },\n      };\n    }\n\n    // Move thresholds to steps\n    let thresholds = fieldOptions?.defaults?.thresholds;\n    if (thresholds) {\n      delete fieldOptions.defaults.thresholds;\n    } else {\n      thresholds = fieldOptions?.thresholds;\n      delete fieldOptions.thresholds;\n    }\n\n    if (thresholds) {\n      fieldOptions.defaults.thresholds = {\n        mode: ThresholdsMode.Absolute,\n        steps: thresholds,\n      };\n    }\n\n    // Migrate color from simple string to a mode\n    const { defaults } = fieldOptions;\n    if (defaults.color && typeof defaults.color === 'string') {\n      defaults.color = {\n        mode: FieldColorModeId.Fixed,\n        fixedColor: defaults.color,\n      };\n    }\n\n    validateFieldConfig(defaults);\n  }\n\n  if (previousVersion < 7.0) {\n    panel.fieldConfig = panel.fieldConfig || { defaults: {}, overrides: [] };\n    panel.fieldConfig = {\n      defaults:\n        fieldOptions && fieldOptions.defaults\n          ? { ...panel.fieldConfig.defaults, ...fieldOptions.defaults }\n          : panel.fieldConfig.defaults,\n      overrides:\n        fieldOptions && fieldOptions.overrides\n          ? [...panel.fieldConfig.overrides, ...fieldOptions.overrides]\n          : panel.fieldConfig.overrides,\n    };\n\n    if (fieldOptions) {\n      options.reduceOptions = {\n        values: fieldOptions.values,\n        limit: fieldOptions.limit,\n        calcs: fieldOptions.calcs,\n      };\n    }\n\n    delete options.fieldOptions;\n  }\n\n  if (previousVersion < 7.1) {\n    // move title to displayName\n    const oldTitle = (panel.fieldConfig.defaults as any).title;\n    if (oldTitle !== undefined && oldTitle !== null) {\n      panel.fieldConfig.defaults.displayName = oldTitle;\n      delete (panel.fieldConfig.defaults as any).title;\n    }\n  }\n\n  if (previousVersion < 8.0) {\n    // Explicit min/max was removed for percent/percentunit in 8.0\n    const config = panel.fieldConfig?.defaults;\n    let unit = config?.unit;\n    if (unit === 'percent') {\n      if (!isNumber(config.min)) {\n        config.min = 0;\n      }\n      if (!isNumber(config.max)) {\n        config.max = 100;\n      }\n    } else if (unit === 'percentunit') {\n      if (!isNumber(config.min)) {\n        config.min = 0;\n      }\n      if (!isNumber(config.max)) {\n        config.max = 1;\n      }\n    }\n  }\n\n  return options;\n}\n\nexport function moveThresholdsAndMappingsToField(old: any) {\n  const { fieldOptions } = old;\n\n  if (!fieldOptions) {\n    return old;\n  }\n\n  const { mappings, ...rest } = old.fieldOptions;\n\n  let thresholds: ThresholdsConfig | undefined = undefined;\n  if (old.thresholds) {\n    thresholds = {\n      mode: ThresholdsMode.Absolute,\n      steps: migrateOldThresholds(old.thresholds)!,\n    };\n  }\n\n  return {\n    ...old,\n    fieldOptions: {\n      ...rest,\n      defaults: {\n        ...fieldOptions.defaults,\n        mappings,\n        thresholds,\n      },\n    },\n  };\n}\n\n/*\n * Moves valueMappings and thresholds from root to new fieldOptions object\n * Renames valueOptions to to defaults and moves it under fieldOptions\n */\nexport function migrateFromValueOptions(old: any) {\n  const { valueOptions } = old;\n  if (!valueOptions) {\n    return old;\n  }\n\n  const fieldOptions: any = {};\n  const fieldDefaults: any = {};\n\n  fieldOptions.mappings = old.valueMappings;\n  fieldOptions.thresholds = old.thresholds;\n  fieldOptions.defaults = fieldDefaults;\n\n  fieldDefaults.unit = valueOptions.unit;\n  fieldDefaults.decimals = valueOptions.decimals;\n\n  // Make sure the stats have a valid name\n  if (valueOptions.stat) {\n    const reducer = fieldReducers.get(valueOptions.stat);\n    if (reducer) {\n      fieldOptions.calcs = [reducer.id];\n    }\n  }\n\n  fieldDefaults.min = old.minValue;\n  fieldDefaults.max = old.maxValue;\n\n  const newOptions = {\n    ...old,\n    fieldOptions,\n  };\n\n  return omit(newOptions, 'valueMappings', 'thresholds', 'valueOptions', 'minValue', 'maxValue');\n}\n\nexport function migrateOldThresholds(thresholds?: any[]): Threshold[] | undefined {\n  if (!thresholds || !thresholds.length) {\n    return undefined;\n  }\n  const copy = thresholds.map((t) => {\n    return {\n      // Drops 'index'\n      value: t.value === null ? -Infinity : t.value,\n      color: t.color,\n    };\n  });\n  sortThresholds(copy);\n  copy[0].value = -Infinity;\n  return copy;\n}\n\n/**\n * @deprecated use convertOldAngularValueMappings instead\n * Convert the angular single stat mapping to new react style\n */\nexport function convertOldAngularValueMapping(panel: any): ValueMapping[] {\n  return convertOldAngularValueMappings(panel);\n}\n"],"names":[],"mappings":"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"}