{"version":3,"file":"AutoSizeInput.js","sources":["../../../../src/components/Input/AutoSizeInput.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\n\nimport { measureText } from '../../utils/measureText';\n\nimport { Input, Props as InputProps } from './Input';\n\nexport interface Props extends InputProps {\n  /** Sets the min-width to a multiple of 8px. Default value is 10*/\n  minWidth?: number;\n  /** Sets the max-width to a multiple of 8px.*/\n  maxWidth?: number;\n  /** onChange function that will be run on onBlur and onKeyPress with enter*/\n  onCommitChange?: (event: React.FormEvent<HTMLInputElement>) => void;\n}\n\nexport const AutoSizeInput = React.forwardRef<HTMLInputElement, Props>((props, ref) => {\n  const { defaultValue = '', minWidth = 10, maxWidth, onCommitChange, onKeyDown, onBlur, ...restProps } = props;\n  const [value, setValue] = React.useState(defaultValue);\n  const [inputWidth, setInputWidth] = React.useState(minWidth);\n\n  useEffect(() => {\n    setInputWidth(getWidthFor(value.toString(), minWidth, maxWidth));\n  }, [value, maxWidth, minWidth]);\n\n  return (\n    <Input\n      {...restProps}\n      ref={ref}\n      value={value.toString()}\n      onChange={(event) => {\n        setValue(event.currentTarget.value);\n      }}\n      width={inputWidth}\n      onBlur={(event) => {\n        if (onBlur) {\n          onBlur(event);\n        } else if (onCommitChange) {\n          onCommitChange(event);\n        }\n      }}\n      onKeyDown={(event) => {\n        if (onKeyDown) {\n          onKeyDown(event);\n        } else if (event.key === 'Enter' && onCommitChange) {\n          onCommitChange(event);\n        }\n      }}\n      data-testid={'autosize-input'}\n    />\n  );\n});\n\nfunction getWidthFor(value: string, minWidth: number, maxWidth: number | undefined): number {\n  if (!value) {\n    return minWidth;\n  }\n\n  const extraSpace = 3;\n  const realWidth = measureText(value.toString(), 14).width / 8 + extraSpace;\n\n  if (minWidth && realWidth < minWidth) {\n    return minWidth;\n  }\n\n  if (maxWidth && realWidth > maxWidth) {\n    return maxWidth;\n  }\n\n  return realWidth;\n}\n\nAutoSizeInput.displayName = 'AutoSizeInput';\n"],"names":["React"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeO,MAAM,aAAgB,GAAAA,cAAA,CAAM,UAAoC,CAAA,CAAC,OAAO,GAAQ,KAAA;AACrF,EAAA,MAAwG,YAAhG,EAAe,YAAA,GAAA,EAAA,EAAI,WAAW,EAAI,EAAA,QAAA,EAAU,gBAAgB,SAAW,EAAA,MAAA,EAAyB,GAAA,EAAA,EAAd,sBAAc,EAAd,EAAA,CAAlF,gBAAmB,UAAe,EAAA,UAAA,EAAU,kBAAgB,WAAW,EAAA,QAAA,CAAA,CAAA,CAAA;AAC/E,EAAA,MAAM,CAAC,KAAO,EAAA,QAAQ,CAAI,GAAAA,cAAA,CAAM,SAAS,YAAY,CAAA,CAAA;AACrD,EAAA,MAAM,CAAC,UAAY,EAAA,aAAa,CAAI,GAAAA,cAAA,CAAM,SAAS,QAAQ,CAAA,CAAA;AAE3D,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,aAAA,CAAc,YAAY,KAAM,CAAA,QAAA,EAAY,EAAA,QAAA,EAAU,QAAQ,CAAC,CAAA,CAAA;AAAA,GAC9D,EAAA,CAAC,KAAO,EAAA,QAAA,EAAU,QAAQ,CAAC,CAAA,CAAA;AAE9B,EACE,uBAAAA,cAAA,CAAA,aAAA;AAAA,IAAC,KAAA;AAAA,IAAA,aAAA,CAAA,cAAA,CAAA,EAAA,EACK,SADL,CAAA,EAAA;AAAA,MAEC,GAAA;AAAA,MACA,KAAA,EAAO,MAAM,QAAS,EAAA;AAAA,MACtB,QAAA,EAAU,CAAC,KAAU,KAAA;AACnB,QAAS,QAAA,CAAA,KAAA,CAAM,cAAc,KAAK,CAAA,CAAA;AAAA,OACpC;AAAA,MACA,KAAO,EAAA,UAAA;AAAA,MACP,MAAA,EAAQ,CAAC,KAAU,KAAA;AACjB,QAAA,IAAI,MAAQ,EAAA;AACV,UAAA,MAAA,CAAO,KAAK,CAAA,CAAA;AAAA,mBACH,cAAgB,EAAA;AACzB,UAAA,cAAA,CAAe,KAAK,CAAA,CAAA;AAAA,SACtB;AAAA,OACF;AAAA,MACA,SAAA,EAAW,CAAC,KAAU,KAAA;AACpB,QAAA,IAAI,SAAW,EAAA;AACb,UAAA,SAAA,CAAU,KAAK,CAAA,CAAA;AAAA,SACN,MAAA,IAAA,KAAA,CAAM,GAAQ,KAAA,OAAA,IAAW,cAAgB,EAAA;AAClD,UAAA,cAAA,CAAe,KAAK,CAAA,CAAA;AAAA,SACtB;AAAA,OACF;AAAA,MACA,aAAa,EAAA,gBAAA;AAAA,KAAA,CAAA;AAAA,GACf,CAAA;AAEJ,CAAC,EAAA;AAED,SAAS,WAAA,CAAY,KAAe,EAAA,QAAA,EAAkB,QAAsC,EAAA;AAC1F,EAAA,IAAI,CAAC,KAAO,EAAA;AACV,IAAO,OAAA,QAAA,CAAA;AAAA,GACT;AAEA,EAAA,MAAM,UAAa,GAAA,CAAA,CAAA;AACnB,EAAM,MAAA,SAAA,GAAY,YAAY,KAAM,CAAA,QAAA,IAAY,EAAE,CAAA,CAAE,QAAQ,CAAI,GAAA,UAAA,CAAA;AAEhE,EAAI,IAAA,QAAA,IAAY,YAAY,QAAU,EAAA;AACpC,IAAO,OAAA,QAAA,CAAA;AAAA,GACT;AAEA,EAAI,IAAA,QAAA,IAAY,YAAY,QAAU,EAAA;AACpC,IAAO,OAAA,QAAA,CAAA;AAAA,GACT;AAEA,EAAO,OAAA,SAAA,CAAA;AACT,CAAA;AAEA,aAAA,CAAc,WAAc,GAAA,eAAA;;;;"}