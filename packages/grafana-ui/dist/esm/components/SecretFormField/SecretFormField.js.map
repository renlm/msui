{"version":3,"file":"SecretFormField.js","sources":["../../../../src/components/SecretFormField/SecretFormField.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport { omit } from 'lodash';\nimport React, { InputHTMLAttributes } from 'react';\n\nimport { Button } from '../Button/Button';\nimport { FormField } from '../FormField/FormField';\nimport { Field } from '../Forms/Field';\nimport { SecretInput } from '../SecretInput';\nimport { PopoverContent } from '../Tooltip';\n\nexport interface Props extends Omit<InputHTMLAttributes<HTMLInputElement>, 'onReset'> {\n  // Function to use when reset is clicked. Means you have to reset the input value yourself as this is  uncontrolled\n  // component (or do something else if required).\n  onReset: (event: React.SyntheticEvent<HTMLButtonElement>) => void;\n  isConfigured: boolean;\n\n  label?: string;\n  tooltip?: PopoverContent;\n  labelWidth?: number;\n  inputWidth?: number;\n  // Placeholder of the input field when in non configured state.\n  placeholder?: string;\n  interactive?: boolean;\n}\n\nconst getSecretFormFieldStyles = () => {\n  return {\n    noRadiusInput: css({\n      borderBottomRightRadius: '0 !important',\n      borderTopRightRadius: '0 !important',\n    }),\n    noRadiusButton: css({\n      borderBottomLeftRadius: '0 !important',\n      borderTopLeftRadius: '0 !important',\n    }),\n  };\n};\n\n/**\n * Form field that has 2 states configured and not configured. If configured it will not show its contents and adds\n * a reset button that will clear the input and makes it accessible. In non configured state it behaves like normal\n * form field. This is used for passwords or anything that is encrypted on the server and is later returned encrypted\n * to the user (like datasource passwords).\n *\n * @deprecated Please use the {@link SecretInput} component with a {@link Field} instead, {@link https://developers.grafana.com/ui/latest/index.html?path=/story/forms-secretinput--basic as seen in Storybook}\n */\nexport const SecretFormField = ({\n  label = 'Password',\n  labelWidth,\n  inputWidth = 12,\n  onReset,\n  isConfigured,\n  tooltip,\n  placeholder = 'Password',\n  interactive,\n  ...inputProps\n}: Props) => {\n  const styles = getSecretFormFieldStyles();\n  return (\n    <FormField\n      label={label!}\n      tooltip={tooltip}\n      interactive={interactive}\n      labelWidth={labelWidth}\n      inputEl={\n        isConfigured ? (\n          <>\n            <input\n              type=\"text\"\n              className={cx(`gf-form-input width-${inputWidth}`, styles.noRadiusInput)}\n              disabled={true}\n              value=\"configured\"\n              {...omit(inputProps, 'value')}\n            />\n            <Button onClick={onReset} variant=\"secondary\" type=\"button\">\n              Reset\n            </Button>\n          </>\n        ) : (\n          <input\n            type=\"password\"\n            className={`gf-form-input width-${inputWidth}`}\n            placeholder={placeholder}\n            {...inputProps}\n          />\n        )\n      }\n    />\n  );\n};\n\nSecretFormField.displayName = 'SecretFormField';\n"],"names":["React"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,MAAM,2BAA2B,MAAM;AACrC,EAAO,OAAA;AAAA,IACL,eAAe,GAAI,CAAA;AAAA,MACjB,uBAAyB,EAAA,cAAA;AAAA,MACzB,oBAAsB,EAAA,cAAA;AAAA,KACvB,CAAA;AAAA,IACD,gBAAgB,GAAI,CAAA;AAAA,MAClB,sBAAwB,EAAA,cAAA;AAAA,MACxB,mBAAqB,EAAA,cAAA;AAAA,KACtB,CAAA;AAAA,GACH,CAAA;AACF,CAAA,CAAA;AAUa,MAAA,eAAA,GAAkB,CAAC,EAUnB,KAAA;AAVmB,EAC9B,IAAA,EAAA,GAAA,EAAA,EAAA;AAAA,IAAQ,KAAA,GAAA,UAAA;AAAA,IACR,UAAA;AAAA,IACA,UAAa,GAAA,EAAA;AAAA,IACb,OAAA;AAAA,IACA,YAAA;AAAA,IACA,OAAA;AAAA,IACA,WAAc,GAAA,UAAA;AAAA,IACd,WAAA;AAAA,GAtDF,GA8CgC,EAS3B,EAAA,UAAA,GAAA,SAAA,CAT2B,EAS3B,EAAA;AAAA,IARH,OAAA;AAAA,IACA,YAAA;AAAA,IACA,YAAA;AAAA,IACA,SAAA;AAAA,IACA,cAAA;AAAA,IACA,SAAA;AAAA,IACA,aAAA;AAAA,IACA,aAAA;AAAA,GAAA,CAAA,CAAA;AAGA,EAAA,MAAM,SAAS,wBAAyB,EAAA,CAAA;AACxC,EACE,uBAAAA,cAAA,CAAA,aAAA;AAAA,IAAC,SAAA;AAAA,IAAA;AAAA,MACC,KAAA;AAAA,MACA,OAAA;AAAA,MACA,WAAA;AAAA,MACA,UAAA;AAAA,MACA,OAAA,EACE,+BAEIA,cAAA,CAAA,aAAA,CAAAA,cAAA,CAAA,QAAA,EAAA,IAAA,kBAAAA,cAAA,CAAA,aAAA;AAAA,QAAC,OAAA;AAAA,QAAA,cAAA,CAAA;AAAA,UACC,IAAK,EAAA,MAAA;AAAA,UACL,WAAW,EAAG,CAAA,CAAA,oBAAA,EAAuB,UAAU,CAAA,CAAA,EAAI,OAAO,aAAa,CAAA;AAAA,UACvE,QAAU,EAAA,IAAA;AAAA,UACV,KAAM,EAAA,YAAA;AAAA,SACF,EAAA,IAAA,CAAK,YAAY,OAAO,CAAA,CAAA;AAAA,OAC9B,kBACCA,cAAA,CAAA,aAAA,CAAA,MAAA,EAAA,EAAO,OAAS,EAAA,OAAA,EAAS,OAAQ,EAAA,WAAA,EAAY,IAAK,EAAA,QAAA,EAAA,EAAS,OAE5D,CACF,CAEA,mBAAAA,cAAA,CAAA,aAAA;AAAA,QAAC,OAAA;AAAA,QAAA,cAAA,CAAA;AAAA,UACC,IAAK,EAAA,UAAA;AAAA,UACL,SAAA,EAAW,uBAAuB,UAAU,CAAA,CAAA;AAAA,UAC5C,WAAA;AAAA,SACI,EAAA,UAAA,CAAA;AAAA,OACN;AAAA,KAAA;AAAA,GAGN,CAAA;AAEJ,EAAA;AAEA,eAAA,CAAgB,WAAc,GAAA,iBAAA;;;;"}