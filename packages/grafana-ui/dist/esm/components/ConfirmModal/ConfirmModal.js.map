{"version":3,"file":"ConfirmModal.js","sources":["../../../../src/components/ConfirmModal/ConfirmModal.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { useStyles2 } from '../../themes';\nimport { IconName } from '../../types/icon';\nimport { Button, ButtonVariant } from '../Button';\nimport { Input } from '../Input/Input';\nimport { Box } from '../Layout/Box/Box';\nimport { Stack } from '../Layout/Stack/Stack';\nimport { Modal } from '../Modal/Modal';\n\nexport interface ConfirmModalProps {\n  /** Toggle modal's open/closed state */\n  isOpen: boolean;\n  /** Title for the modal header */\n  title: string;\n  /** Modal content */\n  body: React.ReactNode;\n  /** Modal description */\n  description?: React.ReactNode;\n  /** Text for confirm button */\n  confirmText: string;\n  /** Variant for confirm button */\n  confirmVariant?: ButtonVariant;\n  /** Text for dismiss button */\n  dismissText?: string;\n  /** Variant for dismiss button */\n  dismissVariant?: ButtonVariant;\n  /** Icon for the modal header */\n  icon?: IconName;\n  /** Additional styling for modal container */\n  modalClass?: string;\n  /** Text user needs to fill in before confirming */\n  confirmationText?: string;\n  /** Text for alternative button */\n  alternativeText?: string;\n  /** Confirm button variant */\n  confirmButtonVariant?: ButtonVariant;\n  /** Confirm action callback\n   * Return a promise to disable the confirm button until the promise is resolved\n   */\n  onConfirm(): void | Promise<void>;\n  /** Dismiss action callback */\n  onDismiss(): void;\n  /** Alternative action callback */\n  onAlternative?(): void;\n}\n\nexport const ConfirmModal = ({\n  isOpen,\n  title,\n  body,\n  description,\n  confirmText,\n  confirmVariant = 'destructive',\n  confirmationText,\n  dismissText = 'Cancel',\n  dismissVariant = 'secondary',\n  alternativeText,\n  modalClass,\n  icon = 'exclamation-triangle',\n  onConfirm,\n  onDismiss,\n  onAlternative,\n  confirmButtonVariant = 'destructive',\n}: ConfirmModalProps): JSX.Element => {\n  const [disabled, setDisabled] = useState(Boolean(confirmationText));\n  const styles = useStyles2(getStyles);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const onConfirmationTextChange = (event: React.FormEvent<HTMLInputElement>) => {\n    setDisabled(confirmationText?.toLowerCase().localeCompare(event.currentTarget.value.toLowerCase()) !== 0);\n  };\n\n  useEffect(() => {\n    // for some reason autoFocus property did no work on this button, but this does\n    if (isOpen) {\n      buttonRef.current?.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setDisabled(Boolean(confirmationText));\n    }\n  }, [isOpen, confirmationText]);\n\n  const onConfirmClick = async () => {\n    setDisabled(true);\n    try {\n      await onConfirm();\n    } finally {\n      setDisabled(false);\n    }\n  };\n\n  const { handleSubmit } = useForm();\n\n  return (\n    <Modal className={cx(styles.modal, modalClass)} title={title} icon={icon} isOpen={isOpen} onDismiss={onDismiss}>\n      <form onSubmit={handleSubmit(onConfirmClick)}>\n        <div className={styles.modalText}>\n          {body}\n          {description ? <div className={styles.modalDescription}>{description}</div> : null}\n          {confirmationText ? (\n            <div className={styles.modalConfirmationInput}>\n              <Stack alignItems=\"flex-start\">\n                <Box>\n                  <Input placeholder={`Type \"${confirmationText}\" to confirm`} onChange={onConfirmationTextChange} />\n                </Box>\n              </Stack>\n            </div>\n          ) : null}\n        </div>\n        <Modal.ButtonRow>\n          <Button variant={dismissVariant} onClick={onDismiss} fill=\"outline\">\n            {dismissText}\n          </Button>\n          <Button\n            type=\"submit\"\n            variant={confirmButtonVariant}\n            disabled={disabled}\n            ref={buttonRef}\n            data-testid={selectors.pages.ConfirmModal.delete}\n          >\n            {confirmText}\n          </Button>\n          {onAlternative ? (\n            <Button variant=\"primary\" onClick={onAlternative}>\n              {alternativeText}\n            </Button>\n          ) : null}\n        </Modal.ButtonRow>\n      </form>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css({\n    width: '500px',\n  }),\n  modalText: css({\n    fontSize: theme.typography.h5.fontSize,\n    color: theme.colors.text.primary,\n  }),\n  modalDescription: css({\n    fontSize: theme.typography.body.fontSize,\n  }),\n  modalConfirmationInput: css({\n    paddingTop: theme.spacing(1),\n  }),\n});\n"],"names":["React"],"mappings":"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"}