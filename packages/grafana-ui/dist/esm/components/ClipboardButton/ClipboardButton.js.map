{"version":3,"file":"ClipboardButton.js","sources":["../../../../src/components/ClipboardButton/ClipboardButton.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { useCallback, useRef, useState, useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { Trans } from '../../../src/utils/i18n';\nimport { useStyles2 } from '../../themes';\nimport { Button, ButtonProps } from '../Button';\nimport { Icon } from '../Icon/Icon';\nimport { InlineToast } from '../InlineToast/InlineToast';\n\nexport interface Props extends ButtonProps {\n  /** A function that returns text to be copied */\n  getText(): string;\n  /** Callback when the text has been successfully copied */\n  onClipboardCopy?(copiedText: string): void;\n  /** Callback when there was an error copying the text */\n  onClipboardError?(copiedText: string, error: unknown): void;\n}\n\nconst SHOW_SUCCESS_DURATION = 2 * 1000;\n\nexport function ClipboardButton({\n  onClipboardCopy,\n  onClipboardError,\n  children,\n  getText,\n  icon,\n  variant,\n  ...buttonProps\n}: Props) {\n  const styles = useStyles2(getStyles);\n  const [showCopySuccess, setShowCopySuccess] = useState(false);\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>;\n\n    if (showCopySuccess) {\n      timeoutId = setTimeout(() => {\n        setShowCopySuccess(false);\n      }, SHOW_SUCCESS_DURATION);\n    }\n\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [showCopySuccess]);\n\n  const buttonRef = useRef<null | HTMLButtonElement>(null);\n  const copyTextCallback = useCallback(async () => {\n    const textToCopy = getText();\n\n    try {\n      await copyText(textToCopy, buttonRef);\n      setShowCopySuccess(true);\n      onClipboardCopy?.(textToCopy);\n    } catch (e) {\n      onClipboardError?.(textToCopy, e);\n    }\n  }, [getText, onClipboardCopy, onClipboardError]);\n\n  return (\n    <>\n      {showCopySuccess && (\n        <InlineToast placement=\"top\" referenceElement={buttonRef.current}>\n          <Trans i18nKey=\"clipboard-button.inline-toast.success\">Copied</Trans>\n        </InlineToast>\n      )}\n\n      <Button\n        onClick={copyTextCallback}\n        icon={icon}\n        variant={showCopySuccess ? 'success' : variant}\n        aria-label={showCopySuccess ? 'Copied' : undefined}\n        {...buttonProps}\n        className={cx(styles.button, showCopySuccess && styles.successButton, buttonProps.className)}\n        ref={buttonRef}\n      >\n        {children}\n\n        {showCopySuccess && (\n          <div className={styles.successOverlay}>\n            <Icon name=\"check\" />\n          </div>\n        )}\n      </Button>\n    </>\n  );\n}\n\nconst copyText = async (text: string, buttonRef: React.MutableRefObject<HTMLButtonElement | null>) => {\n  if (navigator.clipboard && window.isSecureContext) {\n    return navigator.clipboard.writeText(text);\n  } else {\n    // Use a fallback method for browsers/contexts that don't support the Clipboard API.\n    // See https://web.dev/async-clipboard/#feature-detection.\n    // Use textarea so the user can copy multi-line content.\n    const textarea = document.createElement('textarea');\n    // Normally we'd append this to the body. However if we're inside a focus manager\n    // from react-aria, we can't focus anything outside of the managed area.\n    // Instead, let's append it to the button. Then we're guaranteed to be able to focus + copy.\n    buttonRef.current?.appendChild(textarea);\n    textarea.value = text;\n    textarea.focus();\n    textarea.select();\n    document.execCommand('copy');\n    textarea.remove();\n  }\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    button: css({\n      position: 'relative',\n    }),\n    successButton: css({\n      '> *': css({\n        visibility: 'hidden',\n      }),\n    }),\n    successOverlay: css({\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      right: 0,\n      left: 0,\n      visibility: 'visible', // re-visible the overlay\n    }),\n  };\n};\n"],"names":["React"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,MAAM,wBAAwB,CAAI,GAAA,GAAA,CAAA;AAE3B,SAAS,gBAAgB,EAQtB,EAAA;AARsB,EAC9B,IAAA,EAAA,GAAA,EAAA,EAAA;AAAA,IAAA,eAAA;AAAA,IACA,gBAAA;AAAA,IACA,QAAA;AAAA,IACA,OAAA;AAAA,IACA,IAAA;AAAA,IACA,OAAA;AAAA,GA5BF,GAsBgC,EAO3B,EAAA,WAAA,GAAA,SAAA,CAP2B,EAO3B,EAAA;AAAA,IANH,iBAAA;AAAA,IACA,kBAAA;AAAA,IACA,UAAA;AAAA,IACA,SAAA;AAAA,IACA,MAAA;AAAA,IACA,SAAA;AAAA,GAAA,CAAA,CAAA;AAGA,EAAM,MAAA,MAAA,GAAS,WAAW,SAAS,CAAA,CAAA;AACnC,EAAA,MAAM,CAAC,eAAA,EAAiB,kBAAkB,CAAA,GAAI,SAAS,KAAK,CAAA,CAAA;AAE5D,EAAA,SAAA,CAAU,MAAM;AACd,IAAI,IAAA,SAAA,CAAA;AAEJ,IAAA,IAAI,eAAiB,EAAA;AACnB,MAAA,SAAA,GAAY,WAAW,MAAM;AAC3B,QAAA,kBAAA,CAAmB,KAAK,CAAA,CAAA;AAAA,SACvB,qBAAqB,CAAA,CAAA;AAAA,KAC1B;AAEA,IAAA,OAAO,MAAM;AACX,MAAA,MAAA,CAAO,aAAa,SAAS,CAAA,CAAA;AAAA,KAC/B,CAAA;AAAA,GACF,EAAG,CAAC,eAAe,CAAC,CAAA,CAAA;AAEpB,EAAM,MAAA,SAAA,GAAY,OAAiC,IAAI,CAAA,CAAA;AACvD,EAAM,MAAA,gBAAA,GAAmB,YAAY,YAAY;AAC/C,IAAA,MAAM,aAAa,OAAQ,EAAA,CAAA;AAE3B,IAAI,IAAA;AACF,MAAM,MAAA,QAAA,CAAS,YAAY,SAAS,CAAA,CAAA;AACpC,MAAA,kBAAA,CAAmB,IAAI,CAAA,CAAA;AACvB,MAAkB,eAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,eAAA,CAAA,UAAA,CAAA,CAAA;AAAA,aACX,CAAG,EAAA;AACV,MAAA,gBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,gBAAA,CAAmB,UAAY,EAAA,CAAA,CAAA,CAAA;AAAA,KACjC;AAAA,GACC,EAAA,CAAC,OAAS,EAAA,eAAA,EAAiB,gBAAgB,CAAC,CAAA,CAAA;AAE/C,EAAA,uBAEKA,cAAA,CAAA,aAAA,CAAAA,cAAA,CAAA,QAAA,EAAA,IAAA,EAAA,eAAA,oBACEA,cAAA,CAAA,aAAA,CAAA,WAAA,EAAA,EAAY,WAAU,KAAM,EAAA,gBAAA,EAAkB,SAAU,CAAA,OAAA,EAAA,+CACtD,KAAM,EAAA,EAAA,OAAA,EAAQ,uCAAwC,EAAA,EAAA,QAAM,CAC/D,CAGF,kBAAAA,cAAA,CAAA,aAAA;AAAA,IAAC,MAAA;AAAA,IAAA,aAAA,CAAA,cAAA,CAAA;AAAA,MACC,OAAS,EAAA,gBAAA;AAAA,MACT,IAAA;AAAA,MACA,OAAA,EAAS,kBAAkB,SAAY,GAAA,OAAA;AAAA,MACvC,YAAA,EAAY,kBAAkB,QAAW,GAAA,KAAA,CAAA;AAAA,KAAA,EACrC,WALL,CAAA,EAAA;AAAA,MAMC,SAAA,EAAW,GAAG,MAAO,CAAA,MAAA,EAAQ,mBAAmB,MAAO,CAAA,aAAA,EAAe,YAAY,SAAS,CAAA;AAAA,MAC3F,GAAK,EAAA,SAAA;AAAA,KAAA,CAAA;AAAA,IAEJ,QAAA;AAAA,IAEA,eAAA,oBACEA,cAAA,CAAA,aAAA,CAAA,KAAA,EAAA,EAAI,SAAW,EAAA,MAAA,CAAO,kCACpBA,cAAA,CAAA,aAAA,CAAA,IAAA,EAAA,EAAK,IAAK,EAAA,OAAA,EAAQ,CACrB,CAAA;AAAA,GAGN,CAAA,CAAA;AAEJ,CAAA;AAEA,MAAM,QAAA,GAAW,OAAO,IAAA,EAAc,SAAgE,KAAA;AA1FtG,EAAA,IAAA,EAAA,CAAA;AA2FE,EAAI,IAAA,SAAA,CAAU,SAAa,IAAA,MAAA,CAAO,eAAiB,EAAA;AACjD,IAAO,OAAA,SAAA,CAAU,SAAU,CAAA,SAAA,CAAU,IAAI,CAAA,CAAA;AAAA,GACpC,MAAA;AAIL,IAAM,MAAA,QAAA,GAAW,QAAS,CAAA,aAAA,CAAc,UAAU,CAAA,CAAA;AAIlD,IAAU,CAAA,EAAA,GAAA,SAAA,CAAA,OAAA,KAAV,mBAAmB,WAAY,CAAA,QAAA,CAAA,CAAA;AAC/B,IAAA,QAAA,CAAS,KAAQ,GAAA,IAAA,CAAA;AACjB,IAAA,QAAA,CAAS,KAAM,EAAA,CAAA;AACf,IAAA,QAAA,CAAS,MAAO,EAAA,CAAA;AAChB,IAAA,QAAA,CAAS,YAAY,MAAM,CAAA,CAAA;AAC3B,IAAA,QAAA,CAAS,MAAO,EAAA,CAAA;AAAA,GAClB;AACF,CAAA,CAAA;AAEA,MAAM,SAAA,GAAY,CAAC,KAAyB,KAAA;AAC1C,EAAO,OAAA;AAAA,IACL,QAAQ,GAAI,CAAA;AAAA,MACV,QAAU,EAAA,UAAA;AAAA,KACX,CAAA;AAAA,IACD,eAAe,GAAI,CAAA;AAAA,MACjB,OAAO,GAAI,CAAA;AAAA,QACT,UAAY,EAAA,QAAA;AAAA,OACb,CAAA;AAAA,KACF,CAAA;AAAA,IACD,gBAAgB,GAAI,CAAA;AAAA,MAClB,QAAU,EAAA,UAAA;AAAA,MACV,GAAK,EAAA,CAAA;AAAA,MACL,MAAQ,EAAA,CAAA;AAAA,MACR,KAAO,EAAA,CAAA;AAAA,MACP,IAAM,EAAA,CAAA;AAAA,MACN,UAAY,EAAA,SAAA;AAAA;AAAA,KACb,CAAA;AAAA,GACH,CAAA;AACF,CAAA;;;;"}