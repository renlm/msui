{"version":3,"file":"BasicAuthSettings.js","sources":["../../../../src/components/DataSourceSettings/BasicAuthSettings.tsx"],"sourcesContent":["import React from 'react';\n\nimport { InlineField } from '../../components/Forms/InlineField';\nimport { FormField } from '../FormField/FormField';\nimport { SecretFormField } from '../SecretFormField/SecretFormField';\n\nimport { HttpSettingsProps } from './types';\n\nexport const BasicAuthSettings = ({ dataSourceConfig, onChange }: HttpSettingsProps) => {\n  const password = dataSourceConfig.secureJsonData ? dataSourceConfig.secureJsonData.basicAuthPassword : '';\n\n  const onPasswordReset = () => {\n    onChange({\n      ...dataSourceConfig,\n      secureJsonData: {\n        ...dataSourceConfig.secureJsonData,\n        basicAuthPassword: '',\n      },\n      secureJsonFields: {\n        ...dataSourceConfig.secureJsonFields,\n        basicAuthPassword: false,\n      },\n    });\n  };\n\n  const onPasswordChange = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    onChange({\n      ...dataSourceConfig,\n      secureJsonData: {\n        ...dataSourceConfig.secureJsonData,\n        basicAuthPassword: event.currentTarget.value,\n      },\n    });\n  };\n\n  return (\n    <>\n      <InlineField disabled={dataSourceConfig.readOnly}>\n        <FormField\n          label=\"User\"\n          labelWidth={10}\n          inputWidth={18}\n          placeholder=\"user\"\n          value={dataSourceConfig.basicAuthUser}\n          onChange={(event) => onChange({ ...dataSourceConfig, basicAuthUser: event.currentTarget.value })}\n        />\n      </InlineField>\n      <InlineField disabled={dataSourceConfig.readOnly}>\n        <SecretFormField\n          isConfigured={!!(dataSourceConfig.secureJsonFields && dataSourceConfig.secureJsonFields.basicAuthPassword)}\n          value={password || ''}\n          inputWidth={18}\n          labelWidth={10}\n          onReset={onPasswordReset}\n          onChange={onPasswordChange}\n        />\n      </InlineField>\n    </>\n  );\n};\n"],"names":["React"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAQO,MAAM,iBAAoB,GAAA,CAAC,EAAE,gBAAA,EAAkB,UAAkC,KAAA;AACtF,EAAA,MAAM,QAAW,GAAA,gBAAA,CAAiB,cAAiB,GAAA,gBAAA,CAAiB,eAAe,iBAAoB,GAAA,EAAA,CAAA;AAEvG,EAAA,MAAM,kBAAkB,MAAM;AAC5B,IAAA,QAAA,CAAS,iCACJ,gBADI,CAAA,EAAA;AAAA,MAEP,cAAA,EAAgB,aACX,CAAA,cAAA,CAAA,EAAA,EAAA,gBAAA,CAAiB,cADN,CAAA,EAAA;AAAA,QAEd,iBAAmB,EAAA,EAAA;AAAA,OACrB,CAAA;AAAA,MACA,gBAAA,EAAkB,aACb,CAAA,cAAA,CAAA,EAAA,EAAA,gBAAA,CAAiB,gBADJ,CAAA,EAAA;AAAA,QAEhB,iBAAmB,EAAA,KAAA;AAAA,OACrB,CAAA;AAAA,KACD,CAAA,CAAA,CAAA;AAAA,GACH,CAAA;AAEA,EAAM,MAAA,gBAAA,GAAmB,CAAC,KAAkD,KAAA;AAC1E,IAAA,QAAA,CAAS,iCACJ,gBADI,CAAA,EAAA;AAAA,MAEP,cAAA,EAAgB,aACX,CAAA,cAAA,CAAA,EAAA,EAAA,gBAAA,CAAiB,cADN,CAAA,EAAA;AAAA,QAEd,iBAAA,EAAmB,MAAM,aAAc,CAAA,KAAA;AAAA,OACzC,CAAA;AAAA,KACD,CAAA,CAAA,CAAA;AAAA,GACH,CAAA;AAEA,EAAA,uBAEIA,cAAA,CAAA,aAAA,CAAAA,cAAA,CAAA,QAAA,EAAA,IAAA,kBAAAA,cAAA,CAAA,aAAA,CAAC,WAAY,EAAA,EAAA,QAAA,EAAU,iBAAiB,QACtC,EAAA,kBAAAA,cAAA,CAAA,aAAA;AAAA,IAAC,SAAA;AAAA,IAAA;AAAA,MACC,KAAM,EAAA,MAAA;AAAA,MACN,UAAY,EAAA,EAAA;AAAA,MACZ,UAAY,EAAA,EAAA;AAAA,MACZ,WAAY,EAAA,MAAA;AAAA,MACZ,OAAO,gBAAiB,CAAA,aAAA;AAAA,MACxB,QAAA,EAAU,CAAC,KAAA,KAAU,QAAS,CAAA,aAAA,CAAA,cAAA,CAAA,EAAA,EAAK,gBAAL,CAAA,EAAA,EAAuB,aAAe,EAAA,KAAA,CAAM,aAAc,CAAA,KAAA,EAAO,CAAA,CAAA;AAAA,KAAA;AAAA,GAEnG,CACA,kBAAAA,cAAA,CAAA,aAAA,CAAC,WAAY,EAAA,EAAA,QAAA,EAAU,iBAAiB,QACtC,EAAA,kBAAAA,cAAA,CAAA,aAAA;AAAA,IAAC,eAAA;AAAA,IAAA;AAAA,MACC,cAAc,CAAC,EAAE,gBAAiB,CAAA,gBAAA,IAAoB,iBAAiB,gBAAiB,CAAA,iBAAA,CAAA;AAAA,MACxF,OAAO,QAAY,IAAA,EAAA;AAAA,MACnB,UAAY,EAAA,EAAA;AAAA,MACZ,UAAY,EAAA,EAAA;AAAA,MACZ,OAAS,EAAA,eAAA;AAAA,MACT,QAAU,EAAA,gBAAA;AAAA,KAAA;AAAA,GAEd,CACF,CAAA,CAAA;AAEJ;;;;"}