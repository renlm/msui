{"version":3,"file":"Input.js","sources":["../../../../../../src/components/Forms/Legacy/Input/Input.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport React, { PureComponent, ChangeEvent } from 'react';\n\nimport { ValidationEvents, ValidationRule } from '../../../../types';\nimport { validate, EventsWithValidation, hasValidationEvent } from '../../../../utils';\n\n/** @deprecated Please use the `Input` component, which does not require this enum. */\nexport enum LegacyInputStatus {\n  Invalid = 'invalid',\n  Valid = 'valid',\n}\n\nexport interface Props extends React.HTMLProps<HTMLInputElement> {\n  validationEvents?: ValidationEvents;\n  hideErrorMessage?: boolean;\n  inputRef?: React.LegacyRef<HTMLInputElement>;\n\n  // Override event props and append status as argument\n  onBlur?: (event: React.FocusEvent<HTMLInputElement>, status?: LegacyInputStatus) => void;\n  onFocus?: (event: React.FocusEvent<HTMLInputElement>, status?: LegacyInputStatus) => void;\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>, status?: LegacyInputStatus) => void;\n}\n\ninterface State {\n  error: string | null;\n}\n\n/** @deprecated Please use the `Input` component. {@link https://developers.grafana.com/ui/latest/index.html?path=/story/forms-input--simple See Storybook for example.} */\nexport class Input extends PureComponent<Props, State> {\n  static defaultProps = {\n    className: '',\n  };\n\n  state: State = {\n    error: null,\n  };\n\n  get status() {\n    return this.state.error ? LegacyInputStatus.Invalid : LegacyInputStatus.Valid;\n  }\n\n  get isInvalid() {\n    return this.status === LegacyInputStatus.Invalid;\n  }\n\n  validatorAsync = (validationRules: ValidationRule[]) => {\n    return (evt: ChangeEvent<HTMLInputElement>) => {\n      const errors = validate(evt.target.value, validationRules);\n      this.setState((prevState) => {\n        return { ...prevState, error: errors ? errors[0] : null };\n      });\n    };\n  };\n\n  populateEventPropsWithStatus = (restProps: any, validationEvents: ValidationEvents | undefined) => {\n    const inputElementProps = { ...restProps };\n    if (!validationEvents) {\n      return inputElementProps;\n    }\n    Object.keys(EventsWithValidation).forEach((eventName) => {\n      if (hasValidationEvent(eventName as EventsWithValidation, validationEvents) || restProps[eventName]) {\n        inputElementProps[eventName] = async (evt: ChangeEvent<HTMLInputElement>) => {\n          evt.persist(); // Needed for async. https://reactjs.org/docs/events.html#event-pooling\n          if (hasValidationEvent(eventName as EventsWithValidation, validationEvents)) {\n            await this.validatorAsync(validationEvents[eventName]).apply(this, [evt]);\n          }\n          if (restProps[eventName]) {\n            restProps[eventName].apply(null, [evt, this.status]);\n          }\n        };\n      }\n    });\n    return inputElementProps;\n  };\n\n  render() {\n    const { validationEvents, className, hideErrorMessage, inputRef, ...restProps } = this.props;\n    const { error } = this.state;\n    const inputClassName = classNames('gf-form-input', { invalid: this.isInvalid }, className);\n    const inputElementProps = this.populateEventPropsWithStatus(restProps, validationEvents);\n\n    return (\n      <div style={{ flexGrow: 1 }}>\n        <input {...inputElementProps} ref={inputRef} className={inputClassName} />\n        {error && !hideErrorMessage && <span>{error}</span>}\n      </div>\n    );\n  }\n}\n"],"names":["LegacyInputStatus","React"],"mappings":"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"}