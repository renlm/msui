{"version":3,"file":"dashboard.types.js","sources":["../../../src/veneer/dashboard.types.ts"],"sourcesContent":["import { DataSourceRef as CommonDataSourceRef, DataSourceRef, DataTopic } from '../common/common.gen';\nimport * as raw from '../raw/dashboard/x/dashboard_types.gen';\n\nimport { DataQuery } from './common.types';\n\nexport type { CommonDataSourceRef as DataSourceRef };\n\nexport interface Panel<TOptions = Record<string, unknown>, TCustomFieldConfig = Record<string, unknown>>\n  extends Omit<raw.Panel, 'fieldConfig'> {\n  fieldConfig?: FieldConfigSource<TCustomFieldConfig>;\n}\n\nexport interface RowPanel extends Omit<raw.RowPanel, 'panels'> {\n  panels: Panel[];\n}\n\nexport enum VariableHide {\n  dontHide,\n  hideLabel,\n  hideVariable,\n}\n\nexport interface VariableModel extends Omit<raw.VariableModel, 'datasource'> {\n  datasource?: DataSourceRef | null;\n}\n\nexport interface Dashboard extends Omit<raw.Dashboard, 'templating' | 'annotations' | 'panels'> {\n  panels?: Array<Panel | RowPanel>;\n  annotations?: AnnotationContainer;\n  templating?: {\n    list?: VariableModel[];\n  };\n}\n\nexport interface AnnotationQuery<TQuery extends DataQuery = DataQuery>\n  extends Omit<raw.AnnotationQuery, 'target' | 'datasource'> {\n  datasource?: DataSourceRef | null;\n  target?: TQuery;\n  // TODO: When migrating to snapshot queries, remove this property.\n  // With snapshot queries annotations become a part of the panel snapshot data.\n  snapshotData?: unknown;\n}\n\nexport interface AnnotationContainer extends Omit<raw.AnnotationContainer, 'list'> {\n  list?: AnnotationQuery[]; // use the version from this file\n}\n\nexport interface FieldConfig<TOptions = Record<string, unknown>> extends raw.FieldConfig {\n  custom?: TOptions & Record<string, unknown>;\n}\n\nexport interface FieldConfigSource<TOptions = Record<string, unknown>> extends Omit<raw.FieldConfigSource, 'defaults'> {\n  defaults: FieldConfig<TOptions>;\n}\n\nexport interface MatcherConfig<TConfig = any> extends raw.MatcherConfig {\n  options?: TConfig;\n}\n\nexport interface DataTransformerConfig<TOptions = any> extends raw.DataTransformerConfig {\n  options: TOptions;\n  topic?: DataTopic;\n}\n\nexport interface TimePickerConfig extends raw.TimePickerConfig {}\n\nexport const defaultDashboard = raw.defaultDashboard as Dashboard;\nexport const defaultVariableModel = {\n  ...raw.defaultVariableModel,\n} as VariableModel;\nexport const defaultTimePickerConfig = raw.defaultTimePickerConfig as TimePickerConfig;\nexport const defaultPanel: Partial<Panel> = raw.defaultPanel;\nexport const defaultRowPanel: Partial<Panel> = raw.defaultRowPanel;\nexport const defaultFieldConfig: Partial<FieldConfig> = raw.defaultFieldConfig;\nexport const defaultFieldConfigSource: Partial<FieldConfigSource> = raw.defaultFieldConfigSource;\nexport const defaultMatcherConfig: Partial<MatcherConfig> = raw.defaultMatcherConfig;\nexport const defaultAnnotationQuery: Partial<AnnotationQuery> = raw.defaultAnnotationQuery as AnnotationQuery;\nexport const defaultAnnotationContainer: Partial<AnnotationContainer> =\n  raw.defaultAnnotationContainer as AnnotationContainer;\n"],"names":["VariableHide","raw.defaultDashboard","raw.defaultVariableModel","raw.defaultTimePickerConfig","raw.defaultPanel","raw.defaultRowPanel","raw.defaultFieldConfig","raw.defaultFieldConfigSource","raw.defaultMatcherConfig","raw.defaultAnnotationQuery","raw.defaultAnnotationContainer"],"mappings":";;;;;;;;;;;;;;;;;;AAgBY,IAAA,YAAA,qBAAAA,aAAL,KAAA;AACL,EAAAA,aAAA,CAAA,aAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA,CAAA;AACA,EAAAA,aAAA,CAAA,aAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA,CAAA;AACA,EAAAA,aAAA,CAAA,aAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAA,CAAA;AAHU,EAAAA,OAAAA,aAAAA,CAAAA;AAAA,CAAA,EAAA,YAAA,IAAA,EAAA,EAAA;AAkDL,MAAM,mBAAmBC,mBAAI;AACvB,MAAA,oBAAA,GAAuB,mBAC/BC,sBAAI,EAAA;AAEF,MAAM,0BAA0BC,0BAAI;AACpC,MAAM,eAA+BC,eAAI;AACzC,MAAM,kBAAkCC,kBAAI;AAC5C,MAAM,qBAA2CC,qBAAI;AACrD,MAAM,2BAAuDC,2BAAI;AACjE,MAAM,uBAA+CC,uBAAI;AACzD,MAAM,yBAAmDC,yBAAI;AAC7D,MAAM,6BACXC;;;;"}