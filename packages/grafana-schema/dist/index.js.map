{"version":3,"file":"index.js","sources":["../src/common/common.gen.ts","../src/veneer/common.types.ts","../src/raw/accesspolicy/x/accesspolicy_types.gen.ts","../src/raw/dashboard/x/dashboard_types.gen.ts","../src/veneer/dashboard.types.ts"],"sourcesContent":["// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     kinds/gen.go\n// Using jennies:\n//     CommonSchemaJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\n\n/**\n * A topic is attached to DataFrame metadata in query results.\n * This specifies where the data should be used.\n */\nexport enum DataTopic {\n  AlertStates = 'alertStates',\n  Annotations = 'annotations',\n  Series = 'series',\n}\n\n/**\n * TODO docs\n */\nexport interface DataSourceJsonData {\n  alertmanagerUid?: string;\n  authType?: string;\n  defaultRegion?: string;\n  manageAlerts?: boolean;\n  profile?: string;\n}\n\n/**\n * These are the common properties available to all queries in all datasources.\n * Specific implementations will *extend* this interface, adding the required\n * properties for the given context.\n */\nexport interface DataQuery {\n  /**\n   * For mixed data sources the selected datasource is on the query level.\n   * For non mixed scenarios this is undefined.\n   * TODO find a better way to do this ^ that's friendly to schema\n   * TODO this shouldn't be unknown but DataSourceRef | null\n   */\n  datasource?: unknown;\n  /**\n   * If hide is set to true, Grafana will filter out the response(s) associated with this query before returning it to the panel.\n   */\n  hide?: boolean;\n  /**\n   * Specify the query flavor\n   * TODO make this required and give it a default\n   */\n  queryType?: string;\n  /**\n   * A unique identifier for the query within the list of targets.\n   * In server side expressions, the refId is used as a variable name to identify results.\n   * By default, the UI will assign A->Z; however setting meaningful names may be useful.\n   */\n  refId: string;\n}\n\nexport interface BaseDimensionConfig {\n  /**\n   * fixed: T -- will be added by each element\n   */\n  field?: string;\n}\n\nexport enum ScaleDimensionMode {\n  Linear = 'linear',\n  Quad = 'quad',\n}\n\nexport interface ScaleDimensionConfig extends BaseDimensionConfig {\n  fixed?: number;\n  max: number;\n  min: number;\n  mode?: ScaleDimensionMode; // | *\"linear\"\n}\n\nexport interface ColorDimensionConfig extends BaseDimensionConfig {\n  fixed?: string; // color value\n}\n\nexport enum ScalarDimensionMode {\n  Clamped = 'clamped',\n  Mod = 'mod',\n}\n\nexport interface ScalarDimensionConfig extends BaseDimensionConfig {\n  fixed?: number;\n  max: number;\n  min: number;\n  mode?: ScalarDimensionMode;\n}\n\nexport enum TextDimensionMode {\n  Field = 'field',\n  Fixed = 'fixed',\n  Template = 'template',\n}\n\nexport interface TextDimensionConfig extends BaseDimensionConfig {\n  fixed?: string;\n  mode: TextDimensionMode;\n}\n\nexport enum ResourceDimensionMode {\n  Field = 'field',\n  Fixed = 'fixed',\n  Mapping = 'mapping',\n}\n\nexport interface MapLayerOptions {\n  /**\n   * Custom options depending on the type\n   */\n  config?: unknown;\n  /**\n   * Defines a frame MatcherConfig that may filter data for the given layer\n   */\n  filterData?: unknown;\n  /**\n   * Common method to define geometry fields\n   */\n  location?: FrameGeometrySource;\n  /**\n   * configured unique display name\n   */\n  name: string;\n  /**\n   * Common properties:\n   * https://openlayers.org/en/latest/apidoc/module-ol_layer_Base-BaseLayer.html\n   * Layer opacity (0-1)\n   */\n  opacity?: number;\n  /**\n   * Check tooltip (defaults to true)\n   */\n  tooltip?: boolean;\n  type: string;\n}\n\nexport enum FrameGeometrySourceMode {\n  Auto = 'auto',\n  Coords = 'coords',\n  Geohash = 'geohash',\n  Lookup = 'lookup',\n}\n\nexport enum HeatmapCalculationMode {\n  Count = 'count',\n  Size = 'size',\n}\n\nexport enum HeatmapCellLayout {\n  auto = 'auto',\n  ge = 'ge',\n  le = 'le',\n  unknown = 'unknown',\n}\n\nexport interface HeatmapCalculationBucketConfig {\n  /**\n   * Sets the bucket calculation mode\n   */\n  mode?: HeatmapCalculationMode;\n  /**\n   * Controls the scale of the buckets\n   */\n  scale?: ScaleDistributionConfig;\n  /**\n   * The number of buckets to use for the axis in the heatmap\n   */\n  value?: string;\n}\n\nexport enum LogsSortOrder {\n  Ascending = 'Ascending',\n  Descending = 'Descending',\n}\n\n/**\n * TODO docs\n */\nexport enum AxisPlacement {\n  Auto = 'auto',\n  Bottom = 'bottom',\n  Hidden = 'hidden',\n  Left = 'left',\n  Right = 'right',\n  Top = 'top',\n}\n\n/**\n * TODO docs\n */\nexport enum AxisColorMode {\n  Series = 'series',\n  Text = 'text',\n}\n\n/**\n * TODO docs\n */\nexport enum VisibilityMode {\n  Always = 'always',\n  Auto = 'auto',\n  Never = 'never',\n}\n\n/**\n * TODO docs\n */\nexport enum GraphDrawStyle {\n  Bars = 'bars',\n  Line = 'line',\n  Points = 'points',\n}\n\n/**\n * TODO docs\n */\nexport enum GraphTransform {\n  Constant = 'constant',\n  NegativeY = 'negative-Y',\n}\n\n/**\n * TODO docs\n */\nexport enum LineInterpolation {\n  Linear = 'linear',\n  Smooth = 'smooth',\n  StepAfter = 'stepAfter',\n  StepBefore = 'stepBefore',\n}\n\n/**\n * TODO docs\n */\nexport enum ScaleDistribution {\n  Linear = 'linear',\n  Log = 'log',\n  Ordinal = 'ordinal',\n  Symlog = 'symlog',\n}\n\n/**\n * TODO docs\n */\nexport enum GraphGradientMode {\n  Hue = 'hue',\n  None = 'none',\n  Opacity = 'opacity',\n  Scheme = 'scheme',\n}\n\n/**\n * TODO docs\n */\nexport enum StackingMode {\n  None = 'none',\n  Normal = 'normal',\n  Percent = 'percent',\n}\n\n/**\n * TODO docs\n */\nexport enum BarAlignment {\n  After = 1,\n  Before = -1,\n  Center = 0,\n}\n\n/**\n * TODO docs\n */\nexport enum ScaleOrientation {\n  Horizontal = 0,\n  Vertical = 1,\n}\n\n/**\n * TODO docs\n */\nexport enum ScaleDirection {\n  Down = -1,\n  Left = -1,\n  Right = 1,\n  Up = 1,\n}\n\n/**\n * TODO docs\n */\nexport interface LineStyle {\n  dash?: Array<number>;\n  fill?: ('solid' | 'dash' | 'dot' | 'square');\n}\n\nexport const defaultLineStyle: Partial<LineStyle> = {\n  dash: [],\n};\n\n/**\n * TODO docs\n */\nexport interface LineConfig {\n  lineColor?: string;\n  lineInterpolation?: LineInterpolation;\n  lineStyle?: LineStyle;\n  lineWidth?: number;\n  /**\n   * Indicate if null values should be treated as gaps or connected.\n   * When the value is a number, it represents the maximum delta in the\n   * X axis that should be considered connected.  For timeseries, this is milliseconds\n   */\n  spanNulls?: (boolean | number);\n}\n\n/**\n * TODO docs\n */\nexport interface BarConfig {\n  barAlignment?: BarAlignment;\n  barMaxWidth?: number;\n  barWidthFactor?: number;\n}\n\n/**\n * TODO docs\n */\nexport interface FillConfig {\n  fillBelowTo?: string;\n  fillColor?: string;\n  fillOpacity?: number;\n}\n\n/**\n * TODO docs\n */\nexport interface PointsConfig {\n  pointColor?: string;\n  pointSize?: number;\n  pointSymbol?: string;\n  showPoints?: VisibilityMode;\n}\n\n/**\n * TODO docs\n */\nexport interface ScaleDistributionConfig {\n  linearThreshold?: number;\n  log?: number;\n  type: ScaleDistribution;\n}\n\n/**\n * TODO docs\n */\nexport interface AxisConfig {\n  axisBorderShow?: boolean;\n  axisCenteredZero?: boolean;\n  axisColorMode?: AxisColorMode;\n  axisGridShow?: boolean;\n  axisLabel?: string;\n  axisPlacement?: AxisPlacement;\n  axisSoftMax?: number;\n  axisSoftMin?: number;\n  axisWidth?: number;\n  scaleDistribution?: ScaleDistributionConfig;\n}\n\n/**\n * TODO docs\n */\nexport interface HideSeriesConfig {\n  legend: boolean;\n  tooltip: boolean;\n  viz: boolean;\n}\n\n/**\n * TODO docs\n */\nexport interface StackingConfig {\n  group?: string;\n  mode?: StackingMode;\n}\n\n/**\n * TODO docs\n */\nexport interface StackableFieldConfig {\n  stacking?: StackingConfig;\n}\n\n/**\n * TODO docs\n */\nexport interface HideableFieldConfig {\n  hideFrom?: HideSeriesConfig;\n}\n\n/**\n * TODO docs\n */\nexport enum GraphThresholdsStyleMode {\n  Area = 'area',\n  Dashed = 'dashed',\n  DashedAndArea = 'dashed+area',\n  Line = 'line',\n  LineAndArea = 'line+area',\n  Off = 'off',\n  Series = 'series',\n}\n\n/**\n * TODO docs\n */\nexport interface GraphThresholdsStyleConfig {\n  mode: GraphThresholdsStyleMode;\n}\n\n/**\n * TODO docs\n */\nexport type LegendPlacement = ('bottom' | 'right');\n\n/**\n * TODO docs\n * Note: \"hidden\" needs to remain as an option for plugins compatibility\n */\nexport enum LegendDisplayMode {\n  Hidden = 'hidden',\n  List = 'list',\n  Table = 'table',\n}\n\n/**\n * TODO docs\n */\nexport interface SingleStatBaseOptions extends OptionsWithTextFormatting {\n  orientation: VizOrientation;\n  reduceOptions: ReduceDataOptions;\n}\n\n/**\n * TODO docs\n */\nexport interface ReduceDataOptions {\n  /**\n   * When !values, pick one value for the whole field\n   */\n  calcs: Array<string>;\n  /**\n   * Which fields to show.  By default this is only numeric fields\n   */\n  fields?: string;\n  /**\n   * if showing all values limit\n   */\n  limit?: number;\n  /**\n   * If true show each row value\n   */\n  values?: boolean;\n}\n\nexport const defaultReduceDataOptions: Partial<ReduceDataOptions> = {\n  calcs: [],\n};\n\n/**\n * TODO docs\n */\nexport enum VizOrientation {\n  Auto = 'auto',\n  Horizontal = 'horizontal',\n  Vertical = 'vertical',\n}\n\n/**\n * TODO docs\n */\nexport interface OptionsWithTooltip {\n  tooltip: VizTooltipOptions;\n}\n\n/**\n * TODO docs\n */\nexport interface OptionsWithLegend {\n  legend: VizLegendOptions;\n}\n\n/**\n * TODO docs\n */\nexport interface OptionsWithTimezones {\n  timezone?: Array<TimeZone>;\n}\n\nexport const defaultOptionsWithTimezones: Partial<OptionsWithTimezones> = {\n  timezone: [],\n};\n\n/**\n * TODO docs\n */\nexport interface OptionsWithTextFormatting {\n  text?: VizTextDisplayOptions;\n}\n\n/**\n * TODO docs\n */\nexport enum BigValueColorMode {\n  Background = 'background',\n  BackgroundSolid = 'background_solid',\n  None = 'none',\n  Value = 'value',\n}\n\n/**\n * TODO docs\n */\nexport enum BigValueGraphMode {\n  Area = 'area',\n  Line = 'line',\n  None = 'none',\n}\n\n/**\n * TODO docs\n */\nexport enum BigValueJustifyMode {\n  Auto = 'auto',\n  Center = 'center',\n}\n\n/**\n * TODO docs\n */\nexport enum BigValueTextMode {\n  Auto = 'auto',\n  Name = 'name',\n  None = 'none',\n  Value = 'value',\n  ValueAndName = 'value_and_name',\n}\n\n/**\n * TODO docs\n */\nexport enum PercentChangeColorMode {\n  Inverted = 'inverted',\n  SameAsValue = 'same_as_value',\n  Standard = 'standard',\n}\n\n/**\n * TODO -- should not be table specific!\n * TODO docs\n */\nexport type FieldTextAlignment = ('auto' | 'left' | 'right' | 'center');\n\n/**\n * Controls the value alignment in the TimelineChart component\n */\nexport type TimelineValueAlignment = ('center' | 'left' | 'right');\n\n/**\n * TODO docs\n */\nexport interface VizTextDisplayOptions {\n  /**\n   * Explicit title text size\n   */\n  titleSize?: number;\n  /**\n   * Explicit value text size\n   */\n  valueSize?: number;\n}\n\n/**\n * TODO docs\n */\nexport enum TooltipDisplayMode {\n  Multi = 'multi',\n  None = 'none',\n  Single = 'single',\n}\n\n/**\n * TODO docs\n */\nexport enum SortOrder {\n  Ascending = 'asc',\n  Descending = 'desc',\n  None = 'none',\n}\n\n/**\n * TODO docs\n */\nexport interface GraphFieldConfig extends LineConfig, FillConfig, PointsConfig, AxisConfig, BarConfig, StackableFieldConfig, HideableFieldConfig {\n  drawStyle?: GraphDrawStyle;\n  gradientMode?: GraphGradientMode;\n  insertNulls?: (boolean | number);\n  thresholdsStyle?: GraphThresholdsStyleConfig;\n  transform?: GraphTransform;\n}\n\n/**\n * TODO docs\n */\nexport interface VizLegendOptions {\n  asTable?: boolean;\n  calcs: Array<string>;\n  displayMode: LegendDisplayMode;\n  isVisible?: boolean;\n  placement: LegendPlacement;\n  showLegend: boolean;\n  sortBy?: string;\n  sortDesc?: boolean;\n  width?: number;\n}\n\nexport const defaultVizLegendOptions: Partial<VizLegendOptions> = {\n  calcs: [],\n};\n\n/**\n * Enum expressing the possible display modes\n * for the bar gauge component of Grafana UI\n */\nexport enum BarGaugeDisplayMode {\n  Basic = 'basic',\n  Gradient = 'gradient',\n  Lcd = 'lcd',\n}\n\n/**\n * Allows for the table cell gauge display type to set the gauge mode.\n */\nexport enum BarGaugeValueMode {\n  Color = 'color',\n  Hidden = 'hidden',\n  Text = 'text',\n}\n\n/**\n * Allows for the bar gauge name to be placed explicitly\n */\nexport enum BarGaugeNamePlacement {\n  Auto = 'auto',\n  Left = 'left',\n  Top = 'top',\n}\n\n/**\n * Allows for the bar gauge size to be set explicitly\n */\nexport enum BarGaugeSizing {\n  Auto = 'auto',\n  Manual = 'manual',\n}\n\n/**\n * TODO docs\n */\nexport interface VizTooltipOptions {\n  maxHeight?: number;\n  maxWidth?: number;\n  mode: TooltipDisplayMode;\n  sort: SortOrder;\n}\n\nexport interface Labels {}\n\n/**\n * Internally, this is the \"type\" of cell that's being displayed\n * in the table such as colored text, JSON, gauge, etc.\n * The color-background-solid, gradient-gauge, and lcd-gauge\n * modes are deprecated in favor of new cell subOptions\n */\nexport enum TableCellDisplayMode {\n  Auto = 'auto',\n  BasicGauge = 'basic',\n  ColorBackground = 'color-background',\n  ColorBackgroundSolid = 'color-background-solid',\n  ColorText = 'color-text',\n  Custom = 'custom',\n  DataLinks = 'data-links',\n  Gauge = 'gauge',\n  GradientGauge = 'gradient-gauge',\n  Image = 'image',\n  JSONView = 'json-view',\n  LcdGauge = 'lcd-gauge',\n  Sparkline = 'sparkline',\n}\n\n/**\n * Display mode to the \"Colored Background\" display\n * mode for table cells. Either displays a solid color (basic mode)\n * or a gradient.\n */\nexport enum TableCellBackgroundDisplayMode {\n  Basic = 'basic',\n  Gradient = 'gradient',\n}\n\n/**\n * Sort by field state\n */\nexport interface TableSortByFieldState {\n  /**\n   * Flag used to indicate descending sort order\n   */\n  desc?: boolean;\n  /**\n   * Sets the display name of the field to sort by\n   */\n  displayName: string;\n}\n\n/**\n * Footer options\n */\nexport interface TableFooterOptions {\n  countRows?: boolean;\n  enablePagination?: boolean;\n  fields?: Array<string>;\n  reducer: Array<string>; // actually 1 value\n  show: boolean;\n}\n\nexport const defaultTableFooterOptions: Partial<TableFooterOptions> = {\n  fields: [],\n  reducer: [],\n};\n\n/**\n * Auto mode table cell options\n */\nexport interface TableAutoCellOptions {\n  type: TableCellDisplayMode.Auto;\n  wrapText?: boolean;\n}\n\n/**\n * Colored text cell options\n */\nexport interface TableColorTextCellOptions {\n  type: TableCellDisplayMode.ColorText;\n  wrapText?: boolean;\n}\n\n/**\n * Json view cell options\n */\nexport interface TableJsonViewCellOptions {\n  type: TableCellDisplayMode.JSONView;\n}\n\n/**\n * Json view cell options\n */\nexport interface TableImageCellOptions {\n  type: TableCellDisplayMode.Image;\n}\n\n/**\n * Show data links in the cell\n */\nexport interface TableDataLinksCellOptions {\n  type: TableCellDisplayMode.DataLinks;\n}\n\n/**\n * Gauge cell options\n */\nexport interface TableBarGaugeCellOptions {\n  mode?: BarGaugeDisplayMode;\n  type: TableCellDisplayMode.Gauge;\n  valueDisplayMode?: BarGaugeValueMode;\n}\n\n/**\n * Sparkline cell options\n */\nexport interface TableSparklineCellOptions extends GraphFieldConfig {\n  hideValue?: boolean;\n  type: TableCellDisplayMode.Sparkline;\n}\n\n/**\n * Colored background cell options\n */\nexport interface TableColoredBackgroundCellOptions {\n  applyToRow?: boolean;\n  mode?: TableCellBackgroundDisplayMode;\n  type: TableCellDisplayMode.ColorBackground;\n  wrapText?: boolean;\n}\n\n/**\n * Height of a table cell\n */\nexport enum TableCellHeight {\n  Auto = 'auto',\n  Lg = 'lg',\n  Md = 'md',\n  Sm = 'sm',\n}\n\n/**\n * Table cell options. Each cell has a display mode\n * and other potential options for that display.\n */\nexport type TableCellOptions = (TableAutoCellOptions | TableSparklineCellOptions | TableBarGaugeCellOptions | TableColoredBackgroundCellOptions | TableColorTextCellOptions | TableImageCellOptions | TableDataLinksCellOptions | TableJsonViewCellOptions);\n\n/**\n * Use UTC/GMT timezone\n */\nexport type TimeZoneUtc = 'utc';\n\n/**\n * Use the timezone defined by end user web browser\n */\nexport type TimeZoneBrowser = 'browser';\n\n/**\n * Optional formats for the template variable replace functions\n * See also https://grafana.com/docs/grafana/latest/dashboards/variables/variable-syntax/#advanced-variable-format-options\n */\nexport enum VariableFormatID {\n  CSV = 'csv',\n  Date = 'date',\n  Distributed = 'distributed',\n  DoubleQuote = 'doublequote',\n  Glob = 'glob',\n  HTML = 'html',\n  JSON = 'json',\n  Lucene = 'lucene',\n  PercentEncode = 'percentencode',\n  Pipe = 'pipe',\n  QueryParam = 'queryparam',\n  Raw = 'raw',\n  Regex = 'regex',\n  SQLString = 'sqlstring',\n  SingleQuote = 'singlequote',\n  Text = 'text',\n  UriEncode = 'uriencode',\n}\n\nexport interface DataSourceRef {\n  /**\n   * The plugin type-id\n   */\n  type?: string;\n  /**\n   * Specific datasource instance\n   */\n  uid?: string;\n}\n\n/**\n * Links to a resource (image/svg path)\n */\nexport interface ResourceDimensionConfig extends BaseDimensionConfig {\n  fixed?: string;\n  mode: ResourceDimensionMode;\n}\n\nexport interface FrameGeometrySource {\n  /**\n   * Path to Gazetteer\n   */\n  gazetteer?: string;\n  /**\n   * Field mappings\n   */\n  geohash?: string;\n  latitude?: string;\n  longitude?: string;\n  lookup?: string;\n  mode: FrameGeometrySourceMode;\n  wkt?: string;\n}\n\nexport interface HeatmapCalculationOptions {\n  /**\n   * The number of buckets to use for the xAxis in the heatmap\n   */\n  xBuckets?: HeatmapCalculationBucketConfig;\n  /**\n   * The number of buckets to use for the yAxis in the heatmap\n   */\n  yBuckets?: HeatmapCalculationBucketConfig;\n}\n\nexport enum LogsDedupStrategy {\n  exact = 'exact',\n  none = 'none',\n  numbers = 'numbers',\n  signature = 'signature',\n}\n\n/**\n * Compare two values\n */\nexport enum ComparisonOperation {\n  EQ = 'eq',\n  GT = 'gt',\n  GTE = 'gte',\n  LT = 'lt',\n  LTE = 'lte',\n  NEQ = 'neq',\n}\n\n/**\n * Field options for each field within a table (e.g 10, \"The String\", 64.20, etc.)\n * Generally defines alignment, filtering capabilties, display options, etc.\n */\nexport interface TableFieldOptions {\n  align: FieldTextAlignment;\n  cellOptions: TableCellOptions;\n  /**\n   * This field is deprecated in favor of using cellOptions\n   */\n  displayMode?: TableCellDisplayMode;\n  filterable?: boolean;\n  hidden?: boolean; // ?? default is missing or false ??\n  /**\n   * Hides any header for a column, useful for columns that show some static content or buttons.\n   */\n  hideHeader?: boolean;\n  inspect: boolean;\n  minWidth?: number;\n  width?: number;\n}\n\nexport const defaultTableFieldOptions: Partial<TableFieldOptions> = {\n  align: 'auto',\n  inspect: false,\n};\n\n/**\n * A specific timezone from https://en.wikipedia.org/wiki/Tz_database\n */\nexport type TimeZone = (TimeZoneUtc | TimeZoneBrowser | string);\n\nexport const defaultTimeZone: TimeZone = 'browser';\n","import * as raw from '../common/common.gen';\n\nimport { MatcherConfig } from './dashboard.types';\n\nexport interface MapLayerOptions<TConfig = any> extends raw.MapLayerOptions {\n  // Custom options depending on the type\n  config?: TConfig;\n  filterData?: MatcherConfig;\n}\n\nexport interface DataQuery extends raw.DataQuery {\n  /**\n   * Unique, guid like, string (used only in explore mode)\n   */\n  key?: string;\n\n  // TODO remove explicit nulls\n  datasource?: raw.DataSourceRef | null;\n}\nexport interface BaseDimensionConfig<T = string | number> extends Omit<raw.BaseDimensionConfig, 'fixed'> {\n  fixed: T;\n}\n\nexport interface ScaleDimensionConfig extends BaseDimensionConfig<number>, Omit<raw.ScaleDimensionConfig, 'fixed'> {}\n\nexport interface ScalarDimensionConfig extends BaseDimensionConfig<number>, Omit<raw.ScalarDimensionConfig, 'fixed'> {}\n\nexport interface TextDimensionConfig extends BaseDimensionConfig<string>, Omit<raw.TextDimensionConfig, 'fixed'> {}\n\nexport interface ColorDimensionConfig extends BaseDimensionConfig<string>, Omit<raw.ColorDimensionConfig, 'fixed'> {}\n\nexport interface ColorDimensionConfig extends BaseDimensionConfig<string>, Omit<raw.ColorDimensionConfig, 'fixed'> {}\n\nexport interface ResourceDimensionConfig\n  extends BaseDimensionConfig<string>,\n    Omit<raw.ResourceDimensionConfig, 'fixed'> {}\n\nexport * from '../common/common.gen';\n\n// TODO remove when https://github.com/grafana/cuetsy/issues/74 is fixed\nexport const defaultTableFieldOptions: raw.TableFieldOptions = {\n  align: 'auto',\n  inspect: false,\n  cellOptions: {\n    type: raw.TableCellDisplayMode.Auto,\n  },\n};\n\n/**\n * Represent panel data loading state.\n * @deprecated Please use LoadingState from @grafana/data\n */\nexport enum LoadingState {\n  NotStarted = 'NotStarted',\n  Loading = 'Loading',\n  Streaming = 'Streaming',\n  Done = 'Done',\n  Error = 'Error',\n}\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     kinds/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     LatestMajorsOrXJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nexport interface RoleRef {\n  /**\n   * Policies can apply to roles, teams, or users\n   * Applying policies to individual users is supported, but discouraged\n   */\n  kind: ('Role' | 'BuiltinRole' | 'Team' | 'User');\n  name: string;\n  xname: string; // temporary\n}\n\nexport interface ResourceRef {\n  kind: string; // explicit resource or folder will cascade\n  name: string;\n}\n\nexport interface AccessRule {\n  /**\n   * The kind this rule applies to (dashboards, alert, etc)\n   */\n  kind: ('*' | string);\n  /**\n   * Specific sub-elements like \"alert.rules\" or \"dashboard.permissions\"????\n   */\n  target?: string;\n  /**\n   * READ, WRITE, CREATE, DELETE, ...\n   * should move to k8s style verbs like: \"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"\n   */\n  verb: ('*' | 'none' | string);\n}\n\nexport interface AccessPolicy {\n  /**\n   * The role that must apply this policy\n   */\n  role: RoleRef;\n  /**\n   * The set of rules to apply.  Note that * is required to modify\n   * access policy rules, and that \"none\" will reject all actions\n   */\n  rules: Array<AccessRule>;\n  /**\n   * The scope where these policies should apply\n   */\n  scope: ResourceRef;\n}\n\nexport const defaultAccessPolicy: Partial<AccessPolicy> = {\n  rules: [],\n};\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     kinds/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     LatestMajorsOrXJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\n/**\n * TODO: this should be a regular DataQuery that depends on the selected dashboard\n * these match the properties of the \"grafana\" datasouce that is default in most dashboards\n */\nexport interface AnnotationTarget {\n  /**\n   * Only required/valid for the grafana datasource...\n   * but code+tests is already depending on it so hard to change\n   */\n  limit: number;\n  /**\n   * Only required/valid for the grafana datasource...\n   * but code+tests is already depending on it so hard to change\n   */\n  matchAny: boolean;\n  /**\n   * Only required/valid for the grafana datasource...\n   * but code+tests is already depending on it so hard to change\n   */\n  tags: Array<string>;\n  /**\n   * Only required/valid for the grafana datasource...\n   * but code+tests is already depending on it so hard to change\n   */\n  type: string;\n}\n\nexport const defaultAnnotationTarget: Partial<AnnotationTarget> = {\n  tags: [],\n};\n\nexport interface AnnotationPanelFilter {\n  /**\n   * Should the specified panels be included or excluded\n   */\n  exclude?: boolean;\n  /**\n   * Panel IDs that should be included or excluded\n   */\n  ids: Array<number>;\n}\n\nexport const defaultAnnotationPanelFilter: Partial<AnnotationPanelFilter> = {\n  exclude: false,\n  ids: [],\n};\n\n/**\n * Contains the list of annotations that are associated with the dashboard.\n * Annotations are used to overlay event markers and overlay event tags on graphs.\n * Grafana comes with a native annotation store and the ability to add annotation events directly from the graph panel or via the HTTP API.\n * See https://grafana.com/docs/grafana/latest/dashboards/build-dashboards/annotate-visualizations/\n */\nexport interface AnnotationContainer {\n  /**\n   * List of annotations\n   */\n  list?: Array<AnnotationQuery>;\n}\n\nexport const defaultAnnotationContainer: Partial<AnnotationContainer> = {\n  list: [],\n};\n\n/**\n * TODO docs\n * FROM: AnnotationQuery in grafana-data/src/types/annotations.ts\n */\nexport interface AnnotationQuery {\n  /**\n   * Set to 1 for the standard annotation query all dashboards have by default.\n   */\n  builtIn?: number;\n  /**\n   * Datasource where the annotations data is\n   */\n  datasource: DataSourceRef;\n  /**\n   * When enabled the annotation query is issued with every dashboard refresh\n   */\n  enable: boolean;\n  /**\n   * Filters to apply when fetching annotations\n   */\n  filter?: AnnotationPanelFilter;\n  /**\n   * Annotation queries can be toggled on or off at the top of the dashboard.\n   * When hide is true, the toggle is not shown in the dashboard.\n   */\n  hide?: boolean;\n  /**\n   * Color to use for the annotation event markers\n   */\n  iconColor: string;\n  /**\n   * Name of annotation.\n   */\n  name: string;\n  /**\n   * TODO.. this should just be a normal query target\n   */\n  target?: AnnotationTarget;\n  /**\n   * TODO -- this should not exist here, it is based on the --grafana-- datasource\n   */\n  type?: string;\n}\n\nexport const defaultAnnotationQuery: Partial<AnnotationQuery> = {\n  builtIn: 0,\n  enable: true,\n  hide: false,\n};\n\n/**\n * A variable is a placeholder for a value. You can use variables in metric queries and in panel titles.\n */\nexport interface VariableModel {\n  /**\n   * Custom all value\n   */\n  allValue?: string;\n  /**\n   * Shows current selected variable text/value on the dashboard\n   */\n  current?: VariableOption;\n  /**\n   * Data source used to fetch values for a variable. It can be defined but `null`.\n   */\n  datasource?: DataSourceRef;\n  /**\n   * Description of variable. It can be defined but `null`.\n   */\n  description?: string;\n  /**\n   * Visibility configuration for the variable\n   */\n  hide?: VariableHide;\n  /**\n   * Whether all value option is available or not\n   */\n  includeAll?: boolean;\n  /**\n   * Optional display name\n   */\n  label?: string;\n  /**\n   * Whether multiple values can be selected or not from variable value list\n   */\n  multi?: boolean;\n  /**\n   * Name of variable\n   */\n  name: string;\n  /**\n   * Options that can be selected for a variable.\n   */\n  options?: Array<VariableOption>;\n  /**\n   * Query used to fetch values for a variable\n   */\n  query?: (string | Record<string, unknown>);\n  /**\n   * Options to config when to refresh a variable\n   */\n  refresh?: VariableRefresh;\n  /**\n   * Optional field, if you want to extract part of a series name or metric node segment.\n   * Named capture groups can be used to separate the display text and value.\n   */\n  regex?: string;\n  /**\n   * Whether the variable value should be managed by URL query params or not\n   */\n  skipUrlSync?: boolean;\n  /**\n   * Options sort order\n   */\n  sort?: VariableSort;\n  /**\n   * Type of variable\n   */\n  type: VariableType;\n}\n\nexport const defaultVariableModel: Partial<VariableModel> = {\n  includeAll: false,\n  multi: false,\n  options: [],\n  skipUrlSync: false,\n};\n\n/**\n * Option to be selected in a variable.\n */\nexport interface VariableOption {\n  /**\n   * Whether the option is selected or not\n   */\n  selected?: boolean;\n  /**\n   * Text to be displayed for the option\n   */\n  text: (string | Array<string>);\n  /**\n   * Value of the option\n   */\n  value: (string | Array<string>);\n}\n\n/**\n * Options to config when to refresh a variable\n * `0`: Never refresh the variable\n * `1`: Queries the data source every time the dashboard loads.\n * `2`: Queries the data source when the dashboard time range changes.\n */\nexport enum VariableRefresh {\n  never = 0,\n  onDashboardLoad = 1,\n  onTimeRangeChanged = 2,\n}\n\n/**\n * Determine if the variable shows on dashboard\n * Accepted values are 0 (show label and value), 1 (show value only), 2 (show nothing).\n */\nexport enum VariableHide {\n  dontHide = 0,\n  hideLabel = 1,\n  hideVariable = 2,\n}\n\n/**\n * Sort variable options\n * Accepted values are:\n * `0`: No sorting\n * `1`: Alphabetical ASC\n * `2`: Alphabetical DESC\n * `3`: Numerical ASC\n * `4`: Numerical DESC\n * `5`: Alphabetical Case Insensitive ASC\n * `6`: Alphabetical Case Insensitive DESC\n * `7`: Natural ASC\n * `8`: Natural DESC\n */\nexport enum VariableSort {\n  alphabeticalAsc = 1,\n  alphabeticalCaseInsensitiveAsc = 5,\n  alphabeticalCaseInsensitiveDesc = 6,\n  alphabeticalDesc = 2,\n  disabled = 0,\n  naturalAsc = 7,\n  naturalDesc = 8,\n  numericalAsc = 3,\n  numericalDesc = 4,\n}\n\n/**\n * Ref to a DataSource instance\n */\nexport interface DataSourceRef {\n  /**\n   * The plugin type-id\n   */\n  type?: string;\n  /**\n   * Specific datasource instance\n   */\n  uid?: string;\n}\n\n/**\n * Links with references to other dashboards or external resources\n */\nexport interface DashboardLink {\n  /**\n   * If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards\n   */\n  asDropdown: boolean;\n  /**\n   * Icon name to be displayed with the link\n   */\n  icon: string;\n  /**\n   * If true, includes current template variables values in the link as query params\n   */\n  includeVars: boolean;\n  /**\n   * If true, includes current time range in the link as query params\n   */\n  keepTime: boolean;\n  /**\n   * List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards\n   */\n  tags: Array<string>;\n  /**\n   * If true, the link will be opened in a new tab\n   */\n  targetBlank: boolean;\n  /**\n   * Title to display with the link\n   */\n  title: string;\n  /**\n   * Tooltip to display when the user hovers their mouse over it\n   */\n  tooltip: string;\n  /**\n   * Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)\n   */\n  type: DashboardLinkType;\n  /**\n   * Link URL. Only required/valid if the type is link\n   */\n  url?: string;\n}\n\nexport const defaultDashboardLink: Partial<DashboardLink> = {\n  asDropdown: false,\n  includeVars: false,\n  keepTime: false,\n  tags: [],\n  targetBlank: false,\n};\n\n/**\n * Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)\n */\nexport type DashboardLinkType = ('link' | 'dashboards');\n\n/**\n * Dashboard variable type\n * `query`: Query-generated list of values such as metric names, server names, sensor IDs, data centers, and so on.\n * `adhoc`: Key/value filters that are automatically added to all metric queries for a data source (Prometheus, Loki, InfluxDB, and Elasticsearch only).\n * `constant`: \tDefine a hidden constant.\n * `datasource`: Quickly change the data source for an entire dashboard.\n * `interval`: Interval variables represent time spans.\n * `textbox`: Display a free text input field with an optional default value.\n * `custom`: Define the variable options manually using a comma-separated list.\n * `system`: Variables defined by Grafana. See: https://grafana.com/docs/grafana/latest/dashboards/variables/add-template-variables/#global-variables\n */\nexport type VariableType = ('query' | 'adhoc' | 'groupby' | 'constant' | 'datasource' | 'interval' | 'textbox' | 'custom' | 'system');\n\n/**\n * Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value.\n * Continuous color interpolates a color using the percentage of a value relative to min and max.\n * Accepted values are:\n * `thresholds`: From thresholds. Informs Grafana to take the color from the matching threshold\n * `palette-classic`: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations\n * `palette-classic-by-name`: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations\n * `continuous-GrYlRd`: ontinuous Green-Yellow-Red palette mode\n * `continuous-RdYlGr`: Continuous Red-Yellow-Green palette mode\n * `continuous-BlYlRd`: Continuous Blue-Yellow-Red palette mode\n * `continuous-YlRd`: Continuous Yellow-Red palette mode\n * `continuous-BlPu`: Continuous Blue-Purple palette mode\n * `continuous-YlBl`: Continuous Yellow-Blue palette mode\n * `continuous-blues`: Continuous Blue palette mode\n * `continuous-reds`: Continuous Red palette mode\n * `continuous-greens`: Continuous Green palette mode\n * `continuous-purples`: Continuous Purple palette mode\n * `shades`: Shades of a single color. Specify a single color, useful in an override rule.\n * `fixed`: Fixed color mode. Specify a single color, useful in an override rule.\n */\nexport enum FieldColorModeId {\n  ContinuousBlPu = 'continuous-BlPu',\n  ContinuousBlYlRd = 'continuous-BlYlRd',\n  ContinuousBlues = 'continuous-blues',\n  ContinuousGrYlRd = 'continuous-GrYlRd',\n  ContinuousGreens = 'continuous-greens',\n  ContinuousPurples = 'continuous-purples',\n  ContinuousRdYlGr = 'continuous-RdYlGr',\n  ContinuousReds = 'continuous-reds',\n  ContinuousYlBl = 'continuous-YlBl',\n  ContinuousYlRd = 'continuous-YlRd',\n  Fixed = 'fixed',\n  PaletteClassic = 'palette-classic',\n  PaletteClassicByName = 'palette-classic-by-name',\n  Shades = 'shades',\n  Thresholds = 'thresholds',\n}\n\n/**\n * Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value.\n */\nexport type FieldColorSeriesByMode = ('min' | 'max' | 'last');\n\n/**\n * Map a field to a color.\n */\nexport interface FieldColor {\n  /**\n   * The fixed color value for fixed or shades color modes.\n   */\n  fixedColor?: string;\n  /**\n   * The main color scheme mode.\n   */\n  mode: FieldColorModeId;\n  /**\n   * Some visualizations need to know how to assign a series color from by value color schemes.\n   */\n  seriesBy?: FieldColorSeriesByMode;\n}\n\n/**\n * Position and dimensions of a panel in the grid\n */\nexport interface GridPos {\n  /**\n   * Panel height. The height is the number of rows from the top edge of the panel.\n   */\n  h: number;\n  /**\n   * Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions\n   */\n  static?: boolean;\n  /**\n   * Panel width. The width is the number of columns from the left edge of the panel.\n   */\n  w: number;\n  /**\n   * Panel x. The x coordinate is the number of columns from the left edge of the grid\n   */\n  x: number;\n  /**\n   * Panel y. The y coordinate is the number of rows from the top edge of the grid\n   */\n  y: number;\n}\n\nexport const defaultGridPos: Partial<GridPos> = {\n  h: 9,\n  w: 12,\n  x: 0,\n  y: 0,\n};\n\n/**\n * User-defined value for a metric that triggers visual changes in a panel when this value is met or exceeded\n * They are used to conditionally style and color visualizations based on query results , and can be applied to most visualizations.\n */\nexport interface Threshold {\n  /**\n   * Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.\n   */\n  color: string;\n  /**\n   * Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.\n   * Nulls currently appear here when serializing -Infinity to JSON.\n   */\n  value: (number | null);\n}\n\n/**\n * Thresholds can either be `absolute` (specific number) or `percentage` (relative to min or max, it will be values between 0 and 1).\n */\nexport enum ThresholdsMode {\n  Absolute = 'absolute',\n  Percentage = 'percentage',\n}\n\n/**\n * Thresholds configuration for the panel\n */\nexport interface ThresholdsConfig {\n  /**\n   * Thresholds mode.\n   */\n  mode: ThresholdsMode;\n  /**\n   * Must be sorted by 'value', first value is always -Infinity\n   */\n  steps: Array<Threshold>;\n}\n\nexport const defaultThresholdsConfig: Partial<ThresholdsConfig> = {\n  steps: [],\n};\n\n/**\n * Allow to transform the visual representation of specific data values in a visualization, irrespective of their original units\n */\nexport type ValueMapping = (ValueMap | RangeMap | RegexMap | SpecialValueMap);\n\n/**\n * Supported value mapping types\n * `value`: Maps text values to a color or different display text and color. For example, you can configure a value mapping so that all instances of the value 10 appear as Perfection! rather than the number.\n * `range`: Maps numerical ranges to a display text and color. For example, if a value is within a certain range, you can configure a range value mapping to display Low or High rather than the number.\n * `regex`: Maps regular expressions to replacement text and a color. For example, if a value is www.example.com, you can configure a regex value mapping so that Grafana displays www and truncates the domain.\n * `special`: Maps special values like Null, NaN (not a number), and boolean values like true and false to a display text and color. See SpecialValueMatch to see the list of special values. For example, you can configure a special value mapping so that null values appear as N/A.\n */\nexport enum MappingType {\n  RangeToText = 'range',\n  RegexToText = 'regex',\n  SpecialValue = 'special',\n  ValueToText = 'value',\n}\n\n/**\n * Maps text values to a color or different display text and color.\n * For example, you can configure a value mapping so that all instances of the value 10 appear as Perfection! rather than the number.\n */\nexport interface ValueMap {\n  /**\n   * Map with <value_to_match>: ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }\n   */\n  options: Record<string, ValueMappingResult>;\n  type: MappingType.ValueToText;\n}\n\n/**\n * Maps numerical ranges to a display text and color.\n * For example, if a value is within a certain range, you can configure a range value mapping to display Low or High rather than the number.\n */\nexport interface RangeMap {\n  /**\n   * Range to match against and the result to apply when the value is within the range\n   */\n  options: {\n    /**\n     * Min value of the range. It can be null which means -Infinity\n     */\n    from: (number | null);\n    /**\n     * Max value of the range. It can be null which means +Infinity\n     */\n    to: (number | null);\n    /**\n     * Config to apply when the value is within the range\n     */\n    result: ValueMappingResult;\n  };\n  type: MappingType.RangeToText;\n}\n\n/**\n * Maps regular expressions to replacement text and a color.\n * For example, if a value is www.example.com, you can configure a regex value mapping so that Grafana displays www and truncates the domain.\n */\nexport interface RegexMap {\n  /**\n   * Regular expression to match against and the result to apply when the value matches the regex\n   */\n  options: {\n    /**\n     * Regular expression to match against\n     */\n    pattern: string;\n    /**\n     * Config to apply when the value matches the regex\n     */\n    result: ValueMappingResult;\n  };\n  type: MappingType.RegexToText;\n}\n\n/**\n * Maps special values like Null, NaN (not a number), and boolean values like true and false to a display text and color.\n * See SpecialValueMatch to see the list of special values.\n * For example, you can configure a special value mapping so that null values appear as N/A.\n */\nexport interface SpecialValueMap {\n  options: {\n    /**\n     * Special value to match against\n     */\n    match: SpecialValueMatch;\n    /**\n     * Config to apply when the value matches the special value\n     */\n    result: ValueMappingResult;\n  };\n  type: MappingType.SpecialValue;\n}\n\n/**\n * Special value types supported by the `SpecialValueMap`\n */\nexport enum SpecialValueMatch {\n  Empty = 'empty',\n  False = 'false',\n  NaN = 'nan',\n  Null = 'null',\n  NullAndNan = 'null+nan',\n  True = 'true',\n}\n\n/**\n * Result used as replacement with text and color when the value matches\n */\nexport interface ValueMappingResult {\n  /**\n   * Text to use when the value matches\n   */\n  color?: string;\n  /**\n   * Icon to display when the value matches. Only specific visualizations.\n   */\n  icon?: string;\n  /**\n   * Position in the mapping array. Only used internally.\n   */\n  index?: number;\n  /**\n   * Text to display when the value matches\n   */\n  text?: string;\n}\n\n/**\n * Transformations allow to manipulate data returned by a query before the system applies a visualization.\n * Using transformations you can: rename fields, join time series data, perform mathematical operations across queries,\n * use the output of one transformation as the input to another transformation, etc.\n */\nexport interface DataTransformerConfig {\n  /**\n   * Disabled transformations are skipped\n   */\n  disabled?: boolean;\n  /**\n   * Optional frame matcher. When missing it will be applied to all results\n   */\n  filter?: MatcherConfig;\n  /**\n   * Unique identifier of transformer\n   */\n  id: string;\n  /**\n   * Options to be passed to the transformer\n   * Valid options depend on the transformer id\n   */\n  options: unknown;\n  /**\n   * Where to pull DataFrames from as input to transformation\n   */\n  topic?: ('series' | 'annotations' | 'alertStates'); // replaced with common.DataTopic\n}\n\n/**\n * Time picker configuration\n * It defines the default config for the time picker and the refresh picker for the specific dashboard.\n */\nexport interface TimePickerConfig {\n  /**\n   * Whether timepicker is visible or not.\n   */\n  hidden?: boolean;\n  /**\n   * Override the now time by entering a time delay. Use this option to accommodate known delays in data aggregation to avoid null values.\n   */\n  nowDelay?: string;\n  /**\n   * Interval options available in the refresh picker dropdown.\n   */\n  refresh_intervals?: Array<string>;\n  /**\n   * Selectable options available in the time picker dropdown. Has no effect on provisioned dashboard.\n   */\n  time_options?: Array<string>;\n}\n\nexport const defaultTimePickerConfig: Partial<TimePickerConfig> = {\n  hidden: false,\n  refresh_intervals: ['5s', '10s', '30s', '1m', '5m', '15m', '30m', '1h', '2h', '1d'],\n  time_options: ['5m', '15m', '1h', '6h', '12h', '24h', '2d', '7d', '30d'],\n};\n\n/**\n * 0 for no shared crosshair or tooltip (default).\n * 1 for shared crosshair.\n * 2 for shared crosshair AND shared tooltip.\n */\nexport enum DashboardCursorSync {\n  Crosshair = 1,\n  Off = 0,\n  Tooltip = 2,\n}\n\nexport const defaultDashboardCursorSync: DashboardCursorSync = DashboardCursorSync.Off;\n\n/**\n * Dashboard panels are the basic visualization building blocks.\n */\nexport interface Panel {\n  /**\n   * Sets panel queries cache timeout.\n   */\n  cacheTimeout?: string;\n  /**\n   * The datasource used in all targets.\n   */\n  datasource?: DataSourceRef;\n  /**\n   * Panel description.\n   */\n  description?: string;\n  /**\n   * Field options allow you to change how the data is displayed in your visualizations.\n   */\n  fieldConfig?: FieldConfigSource;\n  /**\n   * Grid position.\n   */\n  gridPos?: GridPos;\n  /**\n   * Controls if the timeFrom or timeShift overrides are shown in the panel header\n   */\n  hideTimeOverride?: boolean;\n  /**\n   * Unique identifier of the panel. Generated by Grafana when creating a new panel. It must be unique within a dashboard, but not globally.\n   */\n  id?: number;\n  /**\n   * The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables.\n   * This value must be formatted as a number followed by a valid time\n   * identifier like: \"40s\", \"3d\", etc.\n   * See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options\n   */\n  interval?: string;\n  /**\n   * Dynamically load the panel\n   */\n  libraryPanel?: LibraryPanelRef;\n  /**\n   * Panel links.\n   */\n  links?: Array<DashboardLink>;\n  /**\n   * The maximum number of data points that the panel queries are retrieving.\n   */\n  maxDataPoints?: number;\n  /**\n   * Option for repeated panels that controls max items per row\n   * Only relevant for horizontally repeated panels\n   */\n  maxPerRow?: number;\n  /**\n   * It depends on the panel plugin. They are specified by the Options field in panel plugin schemas.\n   */\n  options?: Record<string, unknown>;\n  /**\n   * The version of the plugin that is used for this panel. This is used to find the plugin to display the panel and to migrate old panel configs.\n   */\n  pluginVersion?: string;\n  /**\n   * Overrides the data source configured time-to-live for a query cache item in milliseconds\n   */\n  queryCachingTTL?: number;\n  /**\n   * Name of template variable to repeat for.\n   */\n  repeat?: string;\n  /**\n   * Direction to repeat in if 'repeat' is set.\n   * `h` for horizontal, `v` for vertical.\n   */\n  repeatDirection?: ('h' | 'v');\n  /**\n   * Depends on the panel plugin. See the plugin documentation for details.\n   */\n  targets?: Array<Record<string, unknown>>;\n  /**\n   * Overrides the relative time range for individual panels,\n   * which causes them to be different than what is selected in\n   * the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different\n   * time periods or days on the same dashboard.\n   * The value is formatted as time operation like: `now-5m` (Last 5 minutes), `now/d` (the day so far),\n   * `now-5d/d`(Last 5 days), `now/w` (This week so far), `now-2y/y` (Last 2 years).\n   * Note: Panel time overrides have no effect when the dashboard’s time range is absolute.\n   * See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options\n   */\n  timeFrom?: string;\n  /**\n   * Overrides the time range for individual panels by shifting its start and end relative to the time picker.\n   * For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting `2h`.\n   * Note: Panel time overrides have no effect when the dashboard’s time range is absolute.\n   * See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options\n   */\n  timeShift?: string;\n  /**\n   * Panel title.\n   */\n  title?: string;\n  /**\n   * List of transformations that are applied to the panel data before rendering.\n   * When there are multiple transformations, Grafana applies them in the order they are listed.\n   * Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.\n   */\n  transformations?: Array<DataTransformerConfig>;\n  /**\n   * Whether to display the panel without a background.\n   */\n  transparent?: boolean;\n  /**\n   * The panel plugin type id. This is used to find the plugin to display the panel.\n   */\n  type: string;\n}\n\nexport const defaultPanel: Partial<Panel> = {\n  links: [],\n  repeatDirection: 'h',\n  targets: [],\n  transformations: [],\n  transparent: false,\n};\n\n/**\n * The data model used in Grafana, namely the data frame, is a columnar-oriented table structure that unifies both time series and table query results.\n * Each column within this structure is called a field. A field can represent a single time series or table column.\n * Field options allow you to change how the data is displayed in your visualizations.\n */\nexport interface FieldConfigSource {\n  /**\n   * Defaults are the options applied to all fields.\n   */\n  defaults: FieldConfig;\n  /**\n   * Overrides are the options applied to specific fields overriding the defaults.\n   */\n  overrides: Array<{\n    matcher: MatcherConfig;\n    properties: Array<{\n      id: string;\n      value?: unknown;\n    }>;\n  }>;\n}\n\nexport const defaultFieldConfigSource: Partial<FieldConfigSource> = {\n  overrides: [],\n};\n\n/**\n * A library panel is a reusable panel that you can use in any dashboard.\n * When you make a change to a library panel, that change propagates to all instances of where the panel is used.\n * Library panels streamline reuse of panels across multiple dashboards.\n */\nexport interface LibraryPanelRef {\n  /**\n   * Library panel name\n   */\n  name: string;\n  /**\n   * Library panel uid\n   */\n  uid: string;\n}\n\n/**\n * Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation.\n * It comes with in id ( to resolve implementation from registry) and a configuration that’s specific to a particular matcher type.\n */\nexport interface MatcherConfig {\n  /**\n   * The matcher id. This is used to find the matcher implementation from registry.\n   */\n  id: string;\n  /**\n   * The matcher options. This is specific to the matcher implementation.\n   */\n  options?: unknown;\n}\n\nexport const defaultMatcherConfig: Partial<MatcherConfig> = {\n  id: '',\n};\n\n/**\n * The data model used in Grafana, namely the data frame, is a columnar-oriented table structure that unifies both time series and table query results.\n * Each column within this structure is called a field. A field can represent a single time series or table column.\n * Field options allow you to change how the data is displayed in your visualizations.\n */\nexport interface FieldConfig {\n  /**\n   * Panel color configuration\n   */\n  color?: FieldColor;\n  /**\n   * custom is specified by the FieldConfig field\n   * in panel plugin schemas.\n   */\n  custom?: Record<string, unknown>;\n  /**\n   * Specify the number of decimals Grafana includes in the rendered value.\n   * If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.\n   * For example 1.1234 will display as 1.12 and 100.456 will display as 100.\n   * To display all decimals, set the unit to `String`.\n   */\n  decimals?: number;\n  /**\n   * Human readable field metadata\n   */\n  description?: string;\n  /**\n   * The display value for this field.  This supports template variables blank is auto\n   */\n  displayName?: string;\n  /**\n   * This can be used by data sources that return and explicit naming structure for values and labels\n   * When this property is configured, this value is used rather than the default naming strategy.\n   */\n  displayNameFromDS?: string;\n  /**\n   * True if data source field supports ad-hoc filters\n   */\n  filterable?: boolean;\n  /**\n   * The behavior when clicking on a result\n   */\n  links?: Array<unknown>;\n  /**\n   * Convert input values into a display string\n   */\n  mappings?: Array<ValueMapping>;\n  /**\n   * The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.\n   */\n  max?: number;\n  /**\n   * The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.\n   */\n  min?: number;\n  /**\n   * Alternative to empty string\n   */\n  noValue?: string;\n  /**\n   * An explicit path to the field in the datasource.  When the frame meta includes a path,\n   * This will default to `${frame.meta.path}/${field.name}\n   * \n   * When defined, this value can be used as an identifier within the datasource scope, and\n   * may be used to update the results\n   */\n  path?: string;\n  /**\n   * Map numeric values to states\n   */\n  thresholds?: ThresholdsConfig;\n  /**\n   * Unit a field should use. The unit you select is applied to all fields except time.\n   * You can use the units ID availables in Grafana or a custom unit.\n   * Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts\n   * As custom unit, you can use the following formats:\n   * `suffix:<suffix>` for custom unit that should go after value.\n   * `prefix:<prefix>` for custom unit that should go before value.\n   * `time:<format>` For custom date time formats type for example `time:YYYY-MM-DD`.\n   * `si:<base scale><unit characters>` for custom SI units. For example: `si: mF`. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.\n   * `count:<unit>` for a custom count unit.\n   * `currency:<unit>` for custom a currency unit.\n   */\n  unit?: string;\n  /**\n   * True if data source can write a value to the path. Auth/authz are supported separately\n   */\n  writeable?: boolean;\n}\n\nexport const defaultFieldConfig: Partial<FieldConfig> = {\n  links: [],\n  mappings: [],\n};\n\n/**\n * Row panel\n */\nexport interface RowPanel {\n  /**\n   * Whether this row should be collapsed or not.\n   */\n  collapsed: boolean;\n  /**\n   * Name of default datasource for the row\n   */\n  datasource?: DataSourceRef;\n  /**\n   * Row grid position\n   */\n  gridPos?: GridPos;\n  /**\n   * Unique identifier of the panel. Generated by Grafana when creating a new panel. It must be unique within a dashboard, but not globally.\n   */\n  id: number;\n  /**\n   * List of panels in the row\n   */\n  panels: Array<Panel>;\n  /**\n   * Name of template variable to repeat for.\n   */\n  repeat?: string;\n  /**\n   * Row title\n   */\n  title?: string;\n  /**\n   * The panel type\n   */\n  type: 'row';\n}\n\nexport const defaultRowPanel: Partial<RowPanel> = {\n  collapsed: false,\n  panels: [],\n};\n\nexport interface Dashboard {\n  /**\n   * Contains the list of annotations that are associated with the dashboard.\n   * Annotations are used to overlay event markers and overlay event tags on graphs.\n   * Grafana comes with a native annotation store and the ability to add annotation events directly from the graph panel or via the HTTP API.\n   * See https://grafana.com/docs/grafana/latest/dashboards/build-dashboards/annotate-visualizations/\n   */\n  annotations?: AnnotationContainer;\n  /**\n   * Description of dashboard.\n   */\n  description?: string;\n  /**\n   * Whether a dashboard is editable or not.\n   */\n  editable?: boolean;\n  /**\n   * The month that the fiscal year starts on.  0 = January, 11 = December\n   */\n  fiscalYearStartMonth?: number;\n  /**\n   * ID of a dashboard imported from the https://grafana.com/grafana/dashboards/ portal\n   */\n  gnetId?: string;\n  /**\n   * Configuration of dashboard cursor sync behavior.\n   * Accepted values are 0 (sync turned off), 1 (shared crosshair), 2 (shared crosshair and tooltip).\n   */\n  graphTooltip?: DashboardCursorSync;\n  /**\n   * Unique numeric identifier for the dashboard.\n   * `id` is internal to a specific Grafana instance. `uid` should be used to identify a dashboard across Grafana instances.\n   */\n  id?: (number | null); // TODO eliminate this null option\n  /**\n   * Links with references to other dashboards or external websites.\n   */\n  links?: Array<DashboardLink>;\n  /**\n   * When set to true, the dashboard will redraw panels at an interval matching the pixel width.\n   * This will keep data \"moving left\" regardless of the query refresh rate. This setting helps\n   * avoid dashboards presenting stale live data\n   */\n  liveNow?: boolean;\n  /**\n   * List of dashboard panels\n   */\n  panels?: Array<(Panel | RowPanel)>;\n  /**\n   * Refresh rate of dashboard. Represented via interval string, e.g. \"5s\", \"1m\", \"1h\", \"1d\".\n   */\n  refresh?: string;\n  /**\n   * This property should only be used in dashboards defined by plugins.  It is a quick check\n   * to see if the version has changed since the last time.\n   */\n  revision?: number;\n  /**\n   * Version of the JSON schema, incremented each time a Grafana update brings\n   * changes to said schema.\n   */\n  schemaVersion: number;\n  /**\n   * Snapshot options. They are present only if the dashboard is a snapshot.\n   */\n  snapshot?: {\n    /**\n     * Time when the snapshot was created\n     */\n    created: string;\n    /**\n     * Time when the snapshot expires, default is never to expire\n     */\n    expires: string;\n    /**\n     * Is the snapshot saved in an external grafana instance\n     */\n    external: boolean;\n    /**\n     * external url, if snapshot was shared in external grafana instance\n     */\n    externalUrl: string;\n    /**\n     * original url, url of the dashboard that was snapshotted\n     */\n    originalUrl: string;\n    /**\n     * Unique identifier of the snapshot\n     */\n    id: number;\n    /**\n     * Optional, defined the unique key of the snapshot, required if external is true\n     */\n    key: string;\n    /**\n     * Optional, name of the snapshot\n     */\n    name: string;\n    /**\n     * org id of the snapshot\n     */\n    orgId: number;\n    /**\n     * last time when the snapshot was updated\n     */\n    updated: string;\n    /**\n     * url of the snapshot, if snapshot was shared internally\n     */\n    url?: string;\n    /**\n     * user id of the snapshot creator\n     */\n    userId: number;\n  };\n  /**\n   * Tags associated with dashboard.\n   */\n  tags?: Array<string>;\n  /**\n   * Configured template variables\n   */\n  templating?: {\n    /**\n     * List of configured template variables with their saved values along with some other metadata\n     */\n    list?: Array<VariableModel>;\n  };\n  /**\n   * Time range for dashboard.\n   * Accepted values are relative time strings like {from: 'now-6h', to: 'now'} or absolute time strings like {from: '2020-07-10T08:00:00.000Z', to: '2020-07-10T14:00:00.000Z'}.\n   */\n  time?: {\n    from: string;\n    to: string;\n  };\n  /**\n   * Configuration of the time picker shown at the top of a dashboard.\n   */\n  timepicker?: TimePickerConfig;\n  /**\n   * Timezone of dashboard. Accepted values are IANA TZDB zone ID or \"browser\" or \"utc\".\n   */\n  timezone?: string;\n  /**\n   * Title of dashboard.\n   */\n  title?: string;\n  /**\n   * Unique dashboard identifier that can be generated by anyone. string (8-40)\n   */\n  uid?: string;\n  /**\n   * Version of the dashboard, incremented each time the dashboard is updated.\n   */\n  version?: number;\n  /**\n   * Day when the week starts. Expressed by the name of the day in lowercase, e.g. \"monday\".\n   */\n  weekStart?: string;\n}\n\nexport const defaultDashboard: Partial<Dashboard> = {\n  editable: true,\n  fiscalYearStartMonth: 0,\n  graphTooltip: DashboardCursorSync.Off,\n  links: [],\n  panels: [],\n  schemaVersion: 39,\n  tags: [],\n  timezone: 'browser',\n};\n","import { DataSourceRef as CommonDataSourceRef, DataSourceRef, DataTopic } from '../common/common.gen';\nimport * as raw from '../raw/dashboard/x/dashboard_types.gen';\n\nimport { DataQuery } from './common.types';\n\nexport type { CommonDataSourceRef as DataSourceRef };\n\nexport interface Panel<TOptions = Record<string, unknown>, TCustomFieldConfig = Record<string, unknown>>\n  extends Omit<raw.Panel, 'fieldConfig'> {\n  fieldConfig?: FieldConfigSource<TCustomFieldConfig>;\n}\n\nexport interface RowPanel extends Omit<raw.RowPanel, 'panels'> {\n  panels: Panel[];\n}\n\nexport enum VariableHide {\n  dontHide,\n  hideLabel,\n  hideVariable,\n}\n\nexport interface VariableModel extends Omit<raw.VariableModel, 'datasource'> {\n  datasource?: DataSourceRef | null;\n}\n\nexport interface Dashboard extends Omit<raw.Dashboard, 'templating' | 'annotations' | 'panels'> {\n  panels?: Array<Panel | RowPanel>;\n  annotations?: AnnotationContainer;\n  templating?: {\n    list?: VariableModel[];\n  };\n}\n\nexport interface AnnotationQuery<TQuery extends DataQuery = DataQuery>\n  extends Omit<raw.AnnotationQuery, 'target' | 'datasource'> {\n  datasource?: DataSourceRef | null;\n  target?: TQuery;\n  // TODO: When migrating to snapshot queries, remove this property.\n  // With snapshot queries annotations become a part of the panel snapshot data.\n  snapshotData?: unknown;\n}\n\nexport interface AnnotationContainer extends Omit<raw.AnnotationContainer, 'list'> {\n  list?: AnnotationQuery[]; // use the version from this file\n}\n\nexport interface FieldConfig<TOptions = Record<string, unknown>> extends raw.FieldConfig {\n  custom?: TOptions & Record<string, unknown>;\n}\n\nexport interface FieldConfigSource<TOptions = Record<string, unknown>> extends Omit<raw.FieldConfigSource, 'defaults'> {\n  defaults: FieldConfig<TOptions>;\n}\n\nexport interface MatcherConfig<TConfig = any> extends raw.MatcherConfig {\n  options?: TConfig;\n}\n\nexport interface DataTransformerConfig<TOptions = any> extends raw.DataTransformerConfig {\n  options: TOptions;\n  topic?: DataTopic;\n}\n\nexport interface TimePickerConfig extends raw.TimePickerConfig {}\n\nexport const defaultDashboard = raw.defaultDashboard as Dashboard;\nexport const defaultVariableModel = {\n  ...raw.defaultVariableModel,\n} as VariableModel;\nexport const defaultTimePickerConfig = raw.defaultTimePickerConfig as TimePickerConfig;\nexport const defaultPanel: Partial<Panel> = raw.defaultPanel;\nexport const defaultRowPanel: Partial<Panel> = raw.defaultRowPanel;\nexport const defaultFieldConfig: Partial<FieldConfig> = raw.defaultFieldConfig;\nexport const defaultFieldConfigSource: Partial<FieldConfigSource> = raw.defaultFieldConfigSource;\nexport const defaultMatcherConfig: Partial<MatcherConfig> = raw.defaultMatcherConfig;\nexport const defaultAnnotationQuery: Partial<AnnotationQuery> = raw.defaultAnnotationQuery as AnnotationQuery;\nexport const defaultAnnotationContainer: Partial<AnnotationContainer> =\n  raw.defaultAnnotationContainer as AnnotationContainer;\n"],"names":["DataTopic","ScaleDimensionMode","ScalarDimensionMode","TextDimensionMode","ResourceDimensionMode","FrameGeometrySourceMode","HeatmapCalculationMode","HeatmapCellLayout","LogsSortOrder","AxisPlacement","AxisColorMode","VisibilityMode","GraphDrawStyle","GraphTransform","LineInterpolation","ScaleDistribution","GraphGradientMode","StackingMode","BarAlignment","ScaleOrientation","ScaleDirection","GraphThresholdsStyleMode","LegendDisplayMode","VizOrientation","BigValueColorMode","BigValueGraphMode","BigValueJustifyMode","BigValueTextMode","PercentChangeColorMode","TooltipDisplayMode","SortOrder","BarGaugeDisplayMode","BarGaugeValueMode","BarGaugeNamePlacement","BarGaugeSizing","TableCellDisplayMode","TableCellBackgroundDisplayMode","TableCellHeight","VariableFormatID","LogsDedupStrategy","ComparisonOperation","raw.TableCellDisplayMode","LoadingState","defaultAnnotationContainer","defaultAnnotationQuery","defaultVariableModel","VariableRefresh","VariableSort","FieldColorModeId","ThresholdsMode","MappingType","SpecialValueMatch","defaultTimePickerConfig","DashboardCursorSync","defaultPanel","defaultFieldConfigSource","defaultMatcherConfig","defaultFieldConfig","defaultRowPanel","defaultDashboard","VariableHide","raw.defaultDashboard","raw.defaultVariableModel","raw.defaultTimePickerConfig","raw.defaultPanel","raw.defaultRowPanel","raw.defaultFieldConfig","raw.defaultFieldConfigSource","raw.defaultMatcherConfig","raw.defaultAnnotationQuery","raw.defaultAnnotationContainer"],"mappings":"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"}