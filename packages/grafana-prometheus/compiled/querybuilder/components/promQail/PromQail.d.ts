import React from 'react';
import { GrafanaTheme2 } from '@grafana/data';
import { PrometheusDatasource } from '../../../datasource';
import { PromVisualQuery } from '../../types';
import { Interaction, SuggestionType } from './types';
export type PromQailProps = {
    query: PromVisualQuery;
    closeDrawer: () => void;
    onChange: (query: PromVisualQuery) => void;
    datasource: PrometheusDatasource;
};
export declare const PromQail: (props: PromQailProps) => React.JSX.Element;
export declare const getStyles: (theme: GrafanaTheme2) => {
    sectionPadding: string;
    header: string;
    iconSection: string;
    rightButtonsWrapper: string;
    rightButtons: string;
    leftButton: string;
    dataList: string;
    textPadding: string;
    containerPadding: string;
    infoContainer: string;
    infoContainerWrapper: string;
    metricTable: string;
    metricTableName: string;
    metricTableValue: string;
    metricTableButton: string;
    queryQuestion: string;
    secondaryText: string;
    loadingMessageContainer: string;
    floatRight: string;
    codeText: string;
    bodySmall: string;
    explainPadding: string;
    bottomMargin: string;
    topPadding: string;
    doc: string;
    afterButtons: string;
    feedbackStyle: string;
    nextInteractionHeight: string;
    center: string;
    inputPadding: string;
    querySuggestion: string;
    longCode: string;
    useButton: string;
    suggestionFeedback: string;
    feedbackQuestion: string;
    explationTextInput: string;
    submitFeedback: string;
    noMargin: string;
    enableButtonTooltip: string;
    enableButtonTooltipText: string;
    link: string;
};
export declare const queryAssistanttestIds: {
    promQail: string;
    securityInfoButton: string;
    clickForHistorical: string;
    clickForAi: string;
    submitPrompt: string;
    refinePrompt: string;
};
export declare const showStartingMessage: import("@reduxjs/toolkit").ActionCreatorWithPayload<boolean, "metrics-modal-state/showStartingMessage">, indicateCheckbox: import("@reduxjs/toolkit").ActionCreatorWithPayload<boolean, "metrics-modal-state/indicateCheckbox">, addInteraction: import("@reduxjs/toolkit").ActionCreatorWithPayload<{
    suggestionType: SuggestionType;
    isLoading: boolean;
}, "metrics-modal-state/addInteraction">, updateInteraction: import("@reduxjs/toolkit").ActionCreatorWithPayload<{
    idx: number;
    interaction: Interaction;
}, "metrics-modal-state/updateInteraction">;
