{"version":3,"file":"variables.js","sources":["../../src/variables.ts"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/variables.ts\nimport { from, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CustomVariableSupport, DataQueryRequest, DataQueryResponse, rangeUtil } from '@grafana/data';\nimport { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\n\nimport { PromVariableQueryEditor } from './components/VariableQueryEditor';\nimport { PrometheusDatasource } from './datasource';\nimport { PrometheusMetricFindQuery } from './metric_find_query';\nimport { PromVariableQuery } from './types';\n\nexport class PrometheusVariableSupport extends CustomVariableSupport<PrometheusDatasource> {\n  constructor(\n    private readonly datasource: PrometheusDatasource,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super();\n  }\n\n  editor = PromVariableQueryEditor;\n\n  query(request: DataQueryRequest<PromVariableQuery>): Observable<DataQueryResponse> {\n    // Handling grafana as code from jsonnet variable queries which are strings and not objects\n    // Previously, when using StandardVariableSupport\n    // the variable query string was changed to be on the expr attribute\n    // Now, using CustomVariableSupport,\n    // the variable query is changed to the query attribute.\n    // So, without standard variable support changing the query string to the expr attribute,\n    // the variable query string is coming in as it is written in jsonnet,\n    // where it is just a string. Here is where we handle that.\n    let query: string | undefined;\n    if (typeof request.targets[0] === 'string') {\n      query = request.targets[0];\n    } else {\n      query = request.targets[0].query;\n    }\n\n    if (!query) {\n      return of({ data: [] });\n    }\n\n    const scopedVars = {\n      ...request.scopedVars,\n      __interval: { text: this.datasource.interval, value: this.datasource.interval },\n      __interval_ms: {\n        text: rangeUtil.intervalToMs(this.datasource.interval),\n        value: rangeUtil.intervalToMs(this.datasource.interval),\n      },\n      ...this.datasource.getRangeScopedVars(request.range),\n    };\n\n    const interpolated = this.templateSrv.replace(query, scopedVars, this.datasource.interpolateQueryExpr);\n    const metricFindQuery = new PrometheusMetricFindQuery(this.datasource, interpolated);\n    const metricFindStream = from(metricFindQuery.process(request.range));\n\n    return metricFindStream.pipe(map((results) => ({ data: results })));\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYO,MAAM,kCAAkC,qBAA4C,CAAA;AAAA,EACzF,WACmB,CAAA,UAAA,EACA,WAA2B,GAAA,cAAA,EAC5C,EAAA;AACA,IAAM,KAAA,EAAA,CAAA;AAHW,IAAA,IAAA,CAAA,UAAA,GAAA,UAAA,CAAA;AACA,IAAA,IAAA,CAAA,WAAA,GAAA,WAAA,CAAA;AAKnB,IAAS,aAAA,CAAA,IAAA,EAAA,QAAA,EAAA,uBAAA,CAAA,CAAA;AAAA,GAFT;AAAA,EAIA,MAAM,OAA6E,EAAA;AASjF,IAAI,IAAA,KAAA,CAAA;AACJ,IAAA,IAAI,OAAO,OAAA,CAAQ,OAAQ,CAAA,CAAC,MAAM,QAAU,EAAA;AAC1C,MAAQ,KAAA,GAAA,OAAA,CAAQ,QAAQ,CAAC,CAAA,CAAA;AAAA,KACpB,MAAA;AACL,MAAQ,KAAA,GAAA,OAAA,CAAQ,OAAQ,CAAA,CAAC,CAAE,CAAA,KAAA,CAAA;AAAA,KAC7B;AAEA,IAAA,IAAI,CAAC,KAAO,EAAA;AACV,MAAA,OAAO,EAAG,CAAA,EAAE,IAAM,EAAA,IAAI,CAAA,CAAA;AAAA,KACxB;AAEA,IAAM,MAAA,UAAA,GAAa,cACd,CAAA,aAAA,CAAA,cAAA,CAAA,EAAA,EAAA,OAAA,CAAQ,UADM,CAAA,EAAA;AAAA,MAEjB,UAAA,EAAY,EAAE,IAAM,EAAA,IAAA,CAAK,WAAW,QAAU,EAAA,KAAA,EAAO,IAAK,CAAA,UAAA,CAAW,QAAS,EAAA;AAAA,MAC9E,aAAe,EAAA;AAAA,QACb,IAAM,EAAA,SAAA,CAAU,YAAa,CAAA,IAAA,CAAK,WAAW,QAAQ,CAAA;AAAA,QACrD,KAAO,EAAA,SAAA,CAAU,YAAa,CAAA,IAAA,CAAK,WAAW,QAAQ,CAAA;AAAA,OACxD;AAAA,KAAA,CAAA,EACG,IAAK,CAAA,UAAA,CAAW,kBAAmB,CAAA,OAAA,CAAQ,KAAK,CAAA,CAAA,CAAA;AAGrD,IAAM,MAAA,YAAA,GAAe,KAAK,WAAY,CAAA,OAAA,CAAQ,OAAO,UAAY,EAAA,IAAA,CAAK,WAAW,oBAAoB,CAAA,CAAA;AACrG,IAAA,MAAM,eAAkB,GAAA,IAAI,yBAA0B,CAAA,IAAA,CAAK,YAAY,YAAY,CAAA,CAAA;AACnF,IAAA,MAAM,mBAAmB,IAAK,CAAA,eAAA,CAAgB,OAAQ,CAAA,OAAA,CAAQ,KAAK,CAAC,CAAA,CAAA;AAEpE,IAAO,OAAA,gBAAA,CAAiB,KAAK,GAAI,CAAA,CAAC,aAAa,EAAE,IAAA,EAAM,OAAQ,EAAA,CAAE,CAAC,CAAA,CAAA;AAAA,GACpE;AACF;;;;"}