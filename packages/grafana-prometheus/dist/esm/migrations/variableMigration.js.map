{"version":3,"file":"variableMigration.js","sources":["../../../src/migrations/variableMigration.ts"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/migrations/variableMigration.ts\nimport { promQueryModeller } from '../querybuilder/PromQueryModeller';\nimport { buildVisualQueryFromString } from '../querybuilder/parsing';\nimport { PromVariableQuery, PromVariableQueryType as QueryType } from '../types';\n\nexport const PrometheusLabelNamesRegex = /^label_names\\(\\)\\s*$/;\n// Note that this regex is different from the one in metric_find_query.ts because this is used pre-interpolation\nexport const PrometheusLabelValuesRegex = /^label_values\\((?:(.+),\\s*)?([a-zA-Z_$][a-zA-Z0-9_]*)\\)\\s*$/;\nexport const PrometheusMetricNamesRegex = /^metrics\\((.+)\\)\\s*$/;\nexport const PrometheusQueryResultRegex = /^query_result\\((.+)\\)\\s*$/;\nexport const PrometheusLabelNamesRegexWithMatch = /^label_names\\((.+)\\)\\s*$/;\n\nexport function migrateVariableQueryToEditor(rawQuery: string | PromVariableQuery): PromVariableQuery {\n  // If not string, we assume PromVariableQuery\n  if (typeof rawQuery !== 'string') {\n    return rawQuery;\n  }\n\n  const queryBase = {\n    refId: 'PrometheusDatasource-VariableQuery',\n    qryType: QueryType.LabelNames,\n  };\n\n  const labelNamesMatchQuery = rawQuery.match(PrometheusLabelNamesRegexWithMatch);\n\n  if (labelNamesMatchQuery) {\n    return {\n      ...queryBase,\n      qryType: QueryType.LabelNames,\n      match: labelNamesMatchQuery[1],\n    };\n  }\n\n  const labelNames = rawQuery.match(PrometheusLabelNamesRegex);\n  if (labelNames) {\n    return {\n      ...queryBase,\n      qryType: QueryType.LabelNames,\n    };\n  }\n\n  const labelValuesCheck = rawQuery.match(/^label_values\\(/);\n  if (labelValuesCheck) {\n    const labelValues = rawQuery.match(PrometheusLabelValuesRegex);\n    const label = labelValues ? labelValues[2] : '';\n    const metric = labelValues ? labelValues[1] : '';\n\n    if (metric) {\n      const visQuery = buildVisualQueryFromString(metric);\n      return {\n        ...queryBase,\n        qryType: QueryType.LabelValues,\n        label,\n        metric: visQuery.query.metric,\n        labelFilters: visQuery.query.labels,\n      };\n    } else {\n      return {\n        ...queryBase,\n        qryType: QueryType.LabelValues,\n        label,\n      };\n    }\n  }\n\n  const metricNamesCheck = rawQuery.match(/^metrics\\(/);\n  if (metricNamesCheck) {\n    const metricNames = rawQuery.match(PrometheusMetricNamesRegex);\n    const metric = metricNames ? metricNames[1] : '';\n    return {\n      ...queryBase,\n      qryType: QueryType.MetricNames,\n      metric,\n    };\n  }\n\n  const queryResultCheck = rawQuery.match(/^query_result\\(/);\n  if (queryResultCheck) {\n    const queryResult = rawQuery.match(PrometheusQueryResultRegex);\n    const varQuery = queryResult ? queryResult[1] : '';\n    return {\n      ...queryBase,\n      qryType: QueryType.VarQueryResult,\n      varQuery,\n    };\n  }\n\n  // seriesQuery does not have a function and no regex above\n  if (!labelNames && !labelValuesCheck && !metricNamesCheck && !queryResultCheck) {\n    return {\n      ...queryBase,\n      qryType: QueryType.SeriesQuery,\n      seriesQuery: rawQuery,\n    };\n  }\n\n  return queryBase;\n}\n\n// migrate it back to a string with the correct varialbes in place\nexport function migrateVariableEditorBackToVariableSupport(QueryVariable: PromVariableQuery): string {\n  switch (QueryVariable.qryType) {\n    case QueryType.LabelNames:\n      if (QueryVariable.match) {\n        return `label_names(${QueryVariable.match})`;\n      }\n      return 'label_names()';\n    case QueryType.LabelValues:\n      if (QueryVariable.metric || (QueryVariable.labelFilters && QueryVariable.labelFilters.length !== 0)) {\n        const visualQueryQuery = {\n          metric: QueryVariable.metric,\n          labels: QueryVariable.labelFilters ?? [],\n          operations: [],\n        };\n\n        const metric = promQueryModeller.renderQuery(visualQueryQuery);\n        return `label_values(${metric},${QueryVariable.label})`;\n      } else {\n        return `label_values(${QueryVariable.label})`;\n      }\n    case QueryType.MetricNames:\n      return `metrics(${QueryVariable.metric})`;\n    case QueryType.VarQueryResult:\n      const varQuery = removeLineBreaks(QueryVariable.varQuery);\n      return `query_result(${varQuery})`;\n    case QueryType.SeriesQuery:\n      return QueryVariable.seriesQuery ?? '';\n    case QueryType.ClassicQuery:\n      return QueryVariable.classicQuery ?? '';\n  }\n\n  return '';\n}\n\n// allow line breaks in query result textarea\nfunction removeLineBreaks(input?: string) {\n  return input ? input.replace(/[\\r\\n]+/gm, '') : '';\n}\n"],"names":["QueryType"],"mappings":"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"}