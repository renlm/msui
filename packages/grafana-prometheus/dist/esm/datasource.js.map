{"version":3,"file":"datasource.js","sources":["../../src/datasource.ts"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/datasource.ts\nimport { defaults } from 'lodash';\nimport { lastValueFrom, Observable, throwError } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport semver from 'semver/preload';\n\nimport {\n  AbstractQuery,\n  AdHocVariableFilter,\n  AnnotationEvent,\n  AnnotationQueryRequest,\n  CoreApp,\n  CustomVariableModel,\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceGetTagKeysOptions,\n  DataSourceGetTagValuesOptions,\n  DataSourceInstanceSettings,\n  DataSourceWithQueryExportSupport,\n  DataSourceWithQueryImportSupport,\n  dateTime,\n  getDefaultTimeRange,\n  LegacyMetricFindQueryOptions,\n  MetricFindValue,\n  QueryFixAction,\n  QueryVariableModel,\n  rangeUtil,\n  renderLegendFormat,\n  ScopedVars,\n  scopeFilterOperatorMap,\n  ScopeSpecFilter,\n  TimeRange,\n} from '@grafana/data';\nimport {\n  BackendDataSourceResponse,\n  BackendSrvRequest,\n  config,\n  DataSourceWithBackend,\n  FetchResponse,\n  getBackendSrv,\n  getTemplateSrv,\n  isFetchError,\n  TemplateSrv,\n  toDataQueryResponse,\n} from '@grafana/runtime';\n\nimport { addLabelToQuery } from './add_label_to_query';\nimport { AnnotationQueryEditor } from './components/AnnotationQueryEditor';\nimport PrometheusLanguageProvider, { SUGGESTIONS_LIMIT } from './language_provider';\nimport {\n  expandRecordingRules,\n  getClientCacheDurationInMinutes,\n  getPrometheusTime,\n  getRangeSnapInterval,\n} from './language_utils';\nimport { PrometheusMetricFindQuery } from './metric_find_query';\nimport { getInitHints, getQueryHints } from './query_hints';\nimport { promQueryModeller } from './querybuilder/PromQueryModeller';\nimport { QueryBuilderLabelFilter, QueryEditorMode } from './querybuilder/shared/types';\nimport { CacheRequestInfo, defaultPrometheusQueryOverlapWindow, QueryCache } from './querycache/QueryCache';\nimport { getOriginalMetricName, transformV2 } from './result_transformer';\nimport { trackQuery } from './tracking';\nimport {\n  ExemplarTraceIdDestination,\n  PromApplication,\n  PrometheusCacheLevel,\n  PromOptions,\n  PromQuery,\n  PromQueryRequest,\n} from './types';\nimport { PrometheusVariableSupport } from './variables';\n\nconst ANNOTATION_QUERY_STEP_DEFAULT = '60s';\nconst GET_AND_POST_METADATA_ENDPOINTS = ['api/v1/query', 'api/v1/query_range', 'api/v1/series', 'api/v1/labels'];\n\nexport const InstantQueryRefIdIndex = '-Instant';\n\nexport class PrometheusDatasource\n  extends DataSourceWithBackend<PromQuery, PromOptions>\n  implements DataSourceWithQueryImportSupport<PromQuery>, DataSourceWithQueryExportSupport<PromQuery>\n{\n  type: string;\n  ruleMappings: { [index: string]: string };\n  hasIncrementalQuery: boolean;\n  url: string;\n  id: number;\n  access: 'direct' | 'proxy';\n  basicAuth: any;\n  withCredentials: boolean;\n  interval: string;\n  httpMethod: string;\n  languageProvider: PrometheusLanguageProvider;\n  exemplarTraceIdDestinations: ExemplarTraceIdDestination[] | undefined;\n  lookupsDisabled: boolean;\n  customQueryParameters: URLSearchParams;\n  datasourceConfigurationPrometheusFlavor?: PromApplication;\n  datasourceConfigurationPrometheusVersion?: string;\n  disableRecordingRules: boolean;\n  defaultEditor?: QueryEditorMode;\n  exemplarsAvailable: boolean;\n  cacheLevel: PrometheusCacheLevel;\n  cache: QueryCache<PromQuery>;\n  metricNamesAutocompleteSuggestionLimit: number;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<PromOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    languageProvider?: PrometheusLanguageProvider\n  ) {\n    super(instanceSettings);\n\n    this.type = 'prometheus';\n    this.id = instanceSettings.id;\n    this.url = instanceSettings.url!;\n    this.access = instanceSettings.access;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = Boolean(instanceSettings.withCredentials);\n    this.interval = instanceSettings.jsonData.timeInterval || '15s';\n    this.httpMethod = instanceSettings.jsonData.httpMethod || 'GET';\n    this.exemplarTraceIdDestinations = instanceSettings.jsonData.exemplarTraceIdDestinations;\n    this.hasIncrementalQuery = instanceSettings.jsonData.incrementalQuerying ?? false;\n    this.ruleMappings = {};\n    this.languageProvider = languageProvider ?? new PrometheusLanguageProvider(this);\n    this.lookupsDisabled = instanceSettings.jsonData.disableMetricsLookup ?? false;\n    this.customQueryParameters = new URLSearchParams(instanceSettings.jsonData.customQueryParameters);\n    this.datasourceConfigurationPrometheusFlavor = instanceSettings.jsonData.prometheusType;\n    this.datasourceConfigurationPrometheusVersion = instanceSettings.jsonData.prometheusVersion;\n    this.defaultEditor = instanceSettings.jsonData.defaultEditor;\n    this.disableRecordingRules = instanceSettings.jsonData.disableRecordingRules ?? false;\n    this.variables = new PrometheusVariableSupport(this, this.templateSrv);\n    this.exemplarsAvailable = true;\n    this.cacheLevel = instanceSettings.jsonData.cacheLevel ?? PrometheusCacheLevel.Low;\n    this.metricNamesAutocompleteSuggestionLimit =\n      instanceSettings.jsonData.codeModeMetricNamesSuggestionLimit ?? SUGGESTIONS_LIMIT;\n\n    this.cache = new QueryCache({\n      getTargetSignature: this.getPrometheusTargetSignature.bind(this),\n      overlapString: instanceSettings.jsonData.incrementalQueryOverlapWindow ?? defaultPrometheusQueryOverlapWindow,\n      profileFunction: this.getPrometheusProfileData.bind(this),\n    });\n\n    // This needs to be here and cannot be static because of how annotations typing affects casting of data source\n    // objects to DataSourceApi types.\n    // We don't use the default processing for prometheus.\n    // See standardAnnotationSupport.ts/[shouldUseMappingUI|shouldUseLegacyRunner]\n    this.annotations = {\n      QueryEditor: AnnotationQueryEditor,\n    };\n  }\n\n  init = async () => {\n    if (!this.disableRecordingRules) {\n      this.loadRules();\n    }\n    this.exemplarsAvailable = await this.areExemplarsAvailable();\n  };\n\n  getQueryDisplayText(query: PromQuery) {\n    return query.expr;\n  }\n\n  getPrometheusProfileData(request: DataQueryRequest<PromQuery>, targ: PromQuery) {\n    return {\n      interval: targ.interval ?? request.interval,\n      expr: this.interpolateString(targ.expr),\n      datasource: 'Prometheus',\n    };\n  }\n\n  /**\n   * Get target signature for query caching\n   * @param request\n   * @param query\n   */\n  getPrometheusTargetSignature(request: DataQueryRequest<PromQuery>, query: PromQuery) {\n    const targExpr = this.interpolateString(query.expr);\n    return `${targExpr}|${query.interval ?? request.interval}|${JSON.stringify(request.rangeRaw ?? '')}|${\n      query.exemplar\n    }`;\n  }\n\n  hasLabelsMatchAPISupport(): boolean {\n    return (\n      // https://github.com/prometheus/prometheus/releases/tag/v2.24.0\n      this._isDatasourceVersionGreaterOrEqualTo('2.24.0', PromApplication.Prometheus) ||\n      // All versions of Mimir support matchers for labels API\n      this._isDatasourceVersionGreaterOrEqualTo('2.0.0', PromApplication.Mimir) ||\n      // https://github.com/cortexproject/cortex/discussions/4542\n      this._isDatasourceVersionGreaterOrEqualTo('1.11.0', PromApplication.Cortex) ||\n      // https://github.com/thanos-io/thanos/pull/3566\n      //https://github.com/thanos-io/thanos/releases/tag/v0.18.0\n      this._isDatasourceVersionGreaterOrEqualTo('0.18.0', PromApplication.Thanos)\n    );\n  }\n\n  _isDatasourceVersionGreaterOrEqualTo(targetVersion: string, targetFlavor: PromApplication): boolean {\n    // User hasn't configured flavor/version yet, default behavior is to support labels match api support\n    if (!this.datasourceConfigurationPrometheusVersion || !this.datasourceConfigurationPrometheusFlavor) {\n      return true;\n    }\n\n    if (targetFlavor !== this.datasourceConfigurationPrometheusFlavor) {\n      return false;\n    }\n\n    return semver.gte(this.datasourceConfigurationPrometheusVersion, targetVersion);\n  }\n\n  _addTracingHeaders(httpOptions: PromQueryRequest, options: DataQueryRequest<PromQuery>) {\n    httpOptions.headers = {};\n    if (this.access === 'proxy') {\n      httpOptions.headers['X-Dashboard-UID'] = options.dashboardUID;\n      httpOptions.headers['X-Panel-Id'] = options.panelId;\n    }\n  }\n\n  directAccessError() {\n    return throwError(\n      () =>\n        new Error(\n          'Browser access mode in the Prometheus datasource is no longer available. Switch to server access mode.'\n        )\n    );\n  }\n\n  /**\n   * Any request done from this data source should go through here as it contains some common processing for the\n   * request. Any processing done here needs to be also copied on the backend as this goes through data source proxy\n   * but not through the same code as alerting.\n   */\n  _request<T = unknown>(\n    url: string,\n    data: Record<string, string> | null,\n    overrides: Partial<BackendSrvRequest> = {}\n  ): Observable<FetchResponse<T>> {\n    if (this.access === 'direct') {\n      return this.directAccessError();\n    }\n\n    data = data || {};\n    for (const [key, value] of this.customQueryParameters) {\n      if (data[key] == null) {\n        data[key] = value;\n      }\n    }\n\n    let queryUrl = this.url + url;\n    if (url.startsWith(`/api/datasources/uid/${this.uid}`)) {\n      // This url is meant to be a replacement for the whole URL. Replace the entire URL\n      queryUrl = url;\n    }\n\n    const options: BackendSrvRequest = defaults(overrides, {\n      url: queryUrl,\n      method: this.httpMethod,\n      headers: {},\n    });\n\n    if (options.method === 'GET') {\n      if (data && Object.keys(data).length) {\n        options.url =\n          options.url +\n          (options.url.search(/\\?/) >= 0 ? '&' : '?') +\n          Object.entries(data)\n            .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)\n            .join('&');\n      }\n    } else {\n      options.headers!['Content-Type'] = 'application/x-www-form-urlencoded';\n      options.data = data;\n    }\n\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n\n    if (this.basicAuth) {\n      options.headers!.Authorization = this.basicAuth;\n    }\n\n    return getBackendSrv().fetch<T>(options);\n  }\n\n  async importFromAbstractQueries(abstractQueries: AbstractQuery[]): Promise<PromQuery[]> {\n    return abstractQueries.map((abstractQuery) => this.languageProvider.importFromAbstractQuery(abstractQuery));\n  }\n\n  async exportToAbstractQueries(queries: PromQuery[]): Promise<AbstractQuery[]> {\n    return queries.map((query) => this.languageProvider.exportToAbstractQuery(query));\n  }\n\n  // Use this for tab completion features, wont publish response to other components\n  async metadataRequest<T = any>(url: string, params = {}, options?: Partial<BackendSrvRequest>) {\n    // If URL includes endpoint that supports POST and GET method, try to use configured method. This might fail as POST is supported only in v2.10+.\n    if (GET_AND_POST_METADATA_ENDPOINTS.some((endpoint) => url.includes(endpoint))) {\n      try {\n        return await lastValueFrom(\n          this._request<T>(`/api/datasources/uid/${this.uid}/resources${url}`, params, {\n            method: this.httpMethod,\n            hideFromInspector: true,\n            showErrorAlert: false,\n            ...options,\n          })\n        );\n      } catch (err) {\n        // If status code of error is Method Not Allowed (405) and HTTP method is POST, retry with GET\n        if (this.httpMethod === 'POST' && isFetchError(err) && (err.status === 405 || err.status === 400)) {\n          console.warn(`Couldn't use configured POST HTTP method for this request. Trying to use GET method instead.`);\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    return await lastValueFrom(\n      this._request<T>(`/api/datasources/uid/${this.uid}/resources${url}`, params, {\n        method: 'GET',\n        hideFromInspector: true,\n        ...options,\n      })\n    ); // toPromise until we change getTagValues, getLabelNames to Observable\n  }\n\n  interpolateQueryExpr(value: string | string[] = [], variable: QueryVariableModel | CustomVariableModel) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return prometheusRegularEscape(value);\n    }\n\n    if (typeof value === 'string') {\n      return prometheusSpecialRegexEscape(value);\n    }\n\n    const escapedValues = value.map((val) => prometheusSpecialRegexEscape(val));\n\n    if (escapedValues.length === 1) {\n      return escapedValues[0];\n    }\n\n    return '(' + escapedValues.join('|') + ')';\n  }\n\n  targetContainsTemplate(target: PromQuery) {\n    return this.templateSrv.containsTemplate(target.expr);\n  }\n\n  shouldRunExemplarQuery(target: PromQuery, request: DataQueryRequest<PromQuery>): boolean {\n    if (target.exemplar) {\n      // We check all already processed targets and only create exemplar target for not used metric names\n      const metricName = this.languageProvider.histogramMetrics.find((m) => target.expr.includes(m));\n      // Remove targets that weren't processed yet (in targets array they are after current target)\n      const currentTargetIdx = request.targets.findIndex((t) => t.refId === target.refId);\n      const targets = request.targets.slice(0, currentTargetIdx).filter((t) => !t.hide);\n\n      if (!metricName || (metricName && !targets.some((t) => t.expr.includes(metricName)))) {\n        return true;\n      }\n      return false;\n    }\n    return false;\n  }\n\n  processTargetV2(target: PromQuery, request: DataQueryRequest<PromQuery>) {\n    const processedTargets: PromQuery[] = [];\n    const processedTarget = {\n      ...target,\n      exemplar: this.shouldRunExemplarQuery(target, request),\n      requestId: request.panelId + target.refId,\n      // We need to pass utcOffsetSec to backend to calculate aligned range\n      utcOffsetSec: request.range.to.utcOffset() * 60,\n    };\n\n    if (config.featureToggles.promQLScope) {\n      processedTarget.scopes = (request.scopes ?? []).map((scope) => ({\n        name: scope.metadata.name,\n        ...scope.spec,\n      }));\n    }\n\n    if (config.featureToggles.groupByVariable) {\n      processedTarget.groupByKeys = request.groupByKeys;\n    }\n\n    if (target.instant && target.range) {\n      // We have query type \"Both\" selected\n      // We should send separate queries with different refId\n      processedTargets.push(\n        {\n          ...processedTarget,\n          refId: processedTarget.refId,\n          instant: false,\n        },\n        {\n          ...processedTarget,\n          refId: processedTarget.refId + InstantQueryRefIdIndex,\n          range: false,\n        }\n      );\n    } else {\n      processedTargets.push(processedTarget);\n    }\n\n    return processedTargets;\n  }\n\n  query(request: DataQueryRequest<PromQuery>): Observable<DataQueryResponse> {\n    if (this.access === 'direct') {\n      return this.directAccessError();\n    }\n\n    let fullOrPartialRequest: DataQueryRequest<PromQuery>;\n    let requestInfo: CacheRequestInfo<PromQuery> | undefined = undefined;\n    const hasInstantQuery = request.targets.some((target) => target.instant);\n\n    // Don't cache instant queries\n    if (this.hasIncrementalQuery && !hasInstantQuery) {\n      requestInfo = this.cache.requestInfo(request);\n      fullOrPartialRequest = requestInfo.requests[0];\n    } else {\n      fullOrPartialRequest = request;\n    }\n\n    const targets = fullOrPartialRequest.targets.map((target) => this.processTargetV2(target, fullOrPartialRequest));\n    const startTime = new Date();\n    return super.query({ ...fullOrPartialRequest, targets: targets.flat() }).pipe(\n      map((response) => {\n        const amendedResponse = {\n          ...response,\n          data: this.cache.procFrames(request, requestInfo, response.data),\n        };\n        return transformV2(amendedResponse, request, {\n          exemplarTraceIdDestinations: this.exemplarTraceIdDestinations,\n        });\n      }),\n      tap((response: DataQueryResponse) => {\n        trackQuery(response, request, startTime);\n      })\n    );\n  }\n\n  metricFindQuery(query: string, options?: LegacyMetricFindQueryOptions) {\n    if (!query) {\n      return Promise.resolve([]);\n    }\n\n    const scopedVars = {\n      __interval: { text: this.interval, value: this.interval },\n      __interval_ms: { text: rangeUtil.intervalToMs(this.interval), value: rangeUtil.intervalToMs(this.interval) },\n      ...this.getRangeScopedVars(options?.range ?? getDefaultTimeRange()),\n    };\n    const interpolated = this.templateSrv.replace(query, scopedVars, this.interpolateQueryExpr);\n    const metricFindQuery = new PrometheusMetricFindQuery(this, interpolated);\n    return metricFindQuery.process(options?.range ?? getDefaultTimeRange());\n  }\n\n  getRangeScopedVars(range: TimeRange) {\n    const msRange = range.to.diff(range.from);\n    const sRange = Math.round(msRange / 1000);\n    return {\n      __range_ms: { text: msRange, value: msRange },\n      __range_s: { text: sRange, value: sRange },\n      __range: { text: sRange + 's', value: sRange + 's' },\n    };\n  }\n\n  async annotationQuery(options: AnnotationQueryRequest<PromQuery>): Promise<AnnotationEvent[]> {\n    if (this.access === 'direct') {\n      const error = new Error(\n        'Browser access mode in the Prometheus datasource is no longer available. Switch to server access mode.'\n      );\n      return Promise.reject(error);\n    }\n\n    const annotation = options.annotation;\n    const { expr = '' } = annotation;\n\n    if (!expr) {\n      return Promise.resolve([]);\n    }\n\n    const step = options.annotation.step || ANNOTATION_QUERY_STEP_DEFAULT;\n    const queryModel = {\n      expr,\n      range: true,\n      instant: false,\n      exemplar: false,\n      interval: step,\n      refId: 'X',\n      datasource: this.getRef(),\n    };\n\n    return await lastValueFrom(\n      getBackendSrv()\n        .fetch<BackendDataSourceResponse>({\n          url: '/api/ds/query',\n          method: 'POST',\n          headers: this.getRequestHeaders(),\n          data: {\n            from: (getPrometheusTime(options.range.from, false) * 1000).toString(),\n            to: (getPrometheusTime(options.range.to, true) * 1000).toString(),\n            queries: [this.applyTemplateVariables(queryModel, {})],\n          },\n          requestId: `prom-query-${annotation.name}`,\n        })\n        .pipe(\n          map((rsp: FetchResponse<BackendDataSourceResponse>) => {\n            return this.processAnnotationResponse(options, rsp.data);\n          })\n        )\n    );\n  }\n\n  processAnnotationResponse = (options: AnnotationQueryRequest<PromQuery>, data: BackendDataSourceResponse) => {\n    const frames: DataFrame[] = toDataQueryResponse({ data: data }).data;\n    if (!frames || !frames.length) {\n      return [];\n    }\n\n    const annotation = options.annotation;\n    const { tagKeys = '', titleFormat = '', textFormat = '' } = annotation;\n\n    const step = rangeUtil.intervalToSeconds(annotation.step || ANNOTATION_QUERY_STEP_DEFAULT) * 1000;\n    const tagKeysArray = tagKeys.split(',');\n\n    const eventList: AnnotationEvent[] = [];\n\n    for (const frame of frames) {\n      if (frame.fields.length === 0) {\n        continue;\n      }\n      const timeField = frame.fields[0];\n      const valueField = frame.fields[1];\n      const labels = valueField?.labels || {};\n\n      const tags = Object.keys(labels)\n        .filter((label) => tagKeysArray.includes(label))\n        .map((label) => labels[label]);\n\n      const timeValueTuple: Array<[number, number]> = [];\n\n      let idx = 0;\n      valueField.values.forEach((value: string) => {\n        let timeStampValue: number;\n        let valueValue: number;\n        const time = timeField.values[idx];\n\n        // If we want to use value as a time, we use value as timeStampValue and valueValue will be 1\n        if (options.annotation.useValueForTime) {\n          timeStampValue = Math.floor(parseFloat(value));\n          valueValue = 1;\n        } else {\n          timeStampValue = Math.floor(parseFloat(time));\n          valueValue = parseFloat(value);\n        }\n\n        idx++;\n        timeValueTuple.push([timeStampValue, valueValue]);\n      });\n\n      const activeValues = timeValueTuple.filter((value) => value[1] > 0);\n      const activeValuesTimestamps = activeValues.map((value) => value[0]);\n\n      // Instead of creating singular annotation for each active event we group events into region if they are less\n      // or equal to `step` apart.\n      let latestEvent: AnnotationEvent | null = null;\n\n      for (const timestamp of activeValuesTimestamps) {\n        // We already have event `open` and we have new event that is inside the `step` so we just update the end.\n        if (latestEvent && (latestEvent.timeEnd ?? 0) + step >= timestamp) {\n          latestEvent.timeEnd = timestamp;\n          continue;\n        }\n\n        // Event exists but new one is outside of the `step` so we add it to eventList.\n        if (latestEvent) {\n          eventList.push(latestEvent);\n        }\n\n        // We start a new region.\n        latestEvent = {\n          time: timestamp,\n          timeEnd: timestamp,\n          annotation,\n          title: renderLegendFormat(titleFormat, labels),\n          tags,\n          text: renderLegendFormat(textFormat, labels),\n        };\n      }\n\n      if (latestEvent) {\n        // Finish up last point if we have one\n        latestEvent.timeEnd = activeValuesTimestamps[activeValuesTimestamps.length - 1];\n        eventList.push(latestEvent);\n      }\n    }\n\n    return eventList;\n  };\n\n  // By implementing getTagKeys and getTagValues we add ad-hoc filters functionality\n  // this is used to get label keys, a.k.a label names\n  // it is used in metric_find_query.ts\n  // and in Tempo here grafana/public/app/plugins/datasource/tempo/QueryEditor/ServiceGraphSection.tsx\n  async getTagKeys(options: DataSourceGetTagKeysOptions<PromQuery>): Promise<MetricFindValue[]> {\n    if (!options || options.filters.length === 0) {\n      await this.languageProvider.fetchLabels(options.timeRange, options.queries);\n      return this.languageProvider.getLabelKeys().map((k) => ({ value: k, text: k }));\n    }\n\n    const labelFilters: QueryBuilderLabelFilter[] = options.filters.map((f) => ({\n      label: f.key,\n      value: f.value,\n      op: f.operator,\n    }));\n    const expr = promQueryModeller.renderLabels(labelFilters);\n\n    let labelsIndex: Record<string, string[]> = await this.languageProvider.fetchLabelsWithMatch(expr);\n\n    // filter out already used labels\n    return Object.keys(labelsIndex)\n      .filter((labelName) => !options.filters.find((filter) => filter.key === labelName))\n      .map((k) => ({ value: k, text: k }));\n  }\n\n  // By implementing getTagKeys and getTagValues we add ad-hoc filters functionality\n  async getTagValues(options: DataSourceGetTagValuesOptions<PromQuery>) {\n    const labelFilters: QueryBuilderLabelFilter[] = options.filters.map((f) => ({\n      label: f.key,\n      value: f.value,\n      op: f.operator,\n    }));\n\n    const expr = promQueryModeller.renderLabels(labelFilters);\n\n    if (this.hasLabelsMatchAPISupport()) {\n      const requestId = `[${this.uid}][${options.key}]`;\n      return (\n        await this.languageProvider.fetchSeriesValuesWithMatch(options.key, expr, requestId, options.timeRange)\n      ).map((v) => ({\n        value: v,\n        text: v,\n      }));\n    }\n\n    const params = this.getTimeRangeParams(options.timeRange ?? getDefaultTimeRange());\n    const result = await this.metadataRequest(`/api/v1/label/${options.key}/values`, params);\n    return result?.data?.data?.map((value: any) => ({ text: value })) ?? [];\n  }\n\n  interpolateVariablesInQueries(\n    queries: PromQuery[],\n    scopedVars: ScopedVars,\n    filters?: AdHocVariableFilter[]\n  ): PromQuery[] {\n    let expandedQueries = queries;\n    if (queries && queries.length) {\n      expandedQueries = queries.map((query) => {\n        const interpolatedQuery = this.templateSrv.replace(query.expr, scopedVars, this.interpolateQueryExpr);\n        const replacedInterpolatedQuery = config.featureToggles.promQLScope\n          ? interpolatedQuery\n          : this.templateSrv.replace(\n              this.enhanceExprWithAdHocFilters(filters, interpolatedQuery),\n              scopedVars,\n              this.interpolateQueryExpr\n            );\n\n        const expandedQuery = {\n          ...query,\n          ...(config.featureToggles.promQLScope ? { adhocFilters: this.generateScopeFilters(filters) } : {}),\n          datasource: this.getRef(),\n          expr: replacedInterpolatedQuery,\n          interval: this.templateSrv.replace(query.interval, scopedVars),\n        };\n\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  getQueryHints(query: PromQuery, result: unknown[]) {\n    return getQueryHints(query.expr ?? '', result, this);\n  }\n\n  getInitHints() {\n    return getInitHints(this);\n  }\n\n  async loadRules() {\n    try {\n      const res = await this.metadataRequest('/api/v1/rules', {}, { showErrorAlert: false });\n      const groups = res.data?.data?.groups;\n\n      if (groups) {\n        this.ruleMappings = extractRuleMappingFromGroups(groups);\n      }\n    } catch (e) {\n      console.log('Rules API is experimental. Ignore next error.');\n      console.error(e);\n    }\n  }\n\n  async areExemplarsAvailable() {\n    try {\n      const res = await this.metadataRequest(\n        '/api/v1/query_exemplars',\n        {\n          query: 'test',\n          start: dateTime().subtract(30, 'minutes').valueOf().toString(),\n          end: dateTime().valueOf().toString(),\n        },\n        {\n          // Avoid alerting the user if this test fails\n          showErrorAlert: false,\n        }\n      );\n      if (res.data.status === 'success') {\n        return true;\n      }\n      return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  modifyQuery(query: PromQuery, action: QueryFixAction): PromQuery {\n    let expression = query.expr ?? '';\n    switch (action.type) {\n      case 'ADD_FILTER': {\n        const { key, value } = action.options ?? {};\n        if (key && value) {\n          expression = addLabelToQuery(expression, key, value);\n        }\n\n        break;\n      }\n      case 'ADD_FILTER_OUT': {\n        const { key, value } = action.options ?? {};\n        if (key && value) {\n          expression = addLabelToQuery(expression, key, value, '!=');\n        }\n        break;\n      }\n      case 'ADD_HISTOGRAM_QUANTILE': {\n        expression = `histogram_quantile(0.95, sum(rate(${expression}[$__rate_interval])) by (le))`;\n        break;\n      }\n      case 'ADD_HISTOGRAM_AVG': {\n        expression = `histogram_avg(rate(${expression}[$__rate_interval]))`;\n        break;\n      }\n      case 'ADD_HISTOGRAM_FRACTION': {\n        expression = `histogram_fraction(0,0.2,rate(${expression}[$__rate_interval]))`;\n        break;\n      }\n      case 'ADD_HISTOGRAM_COUNT': {\n        expression = `histogram_count(rate(${expression}[$__rate_interval]))`;\n        break;\n      }\n      case 'ADD_HISTOGRAM_SUM': {\n        expression = `histogram_sum(rate(${expression}[$__rate_interval]))`;\n        break;\n      }\n      case 'ADD_HISTOGRAM_STDDEV': {\n        expression = `histogram_stddev(rate(${expression}[$__rate_interval]))`;\n        break;\n      }\n      case 'ADD_HISTOGRAM_STDVAR': {\n        expression = `histogram_stdvar(rate(${expression}[$__rate_interval]))`;\n        break;\n      }\n      case 'ADD_RATE': {\n        expression = `rate(${expression}[$__rate_interval])`;\n        break;\n      }\n      case 'ADD_SUM': {\n        expression = `sum(${expression.trim()}) by ($1)`;\n        break;\n      }\n      case 'EXPAND_RULES': {\n        if (action.options) {\n          expression = expandRecordingRules(expression, action.options);\n        }\n        break;\n      }\n      default:\n        break;\n    }\n    return { ...query, expr: expression };\n  }\n\n  /**\n   * Returns the adjusted \"snapped\" interval parameters\n   */\n  getAdjustedInterval(timeRange: TimeRange): { start: string; end: string } {\n    return getRangeSnapInterval(this.cacheLevel, timeRange);\n  }\n\n  /**\n   * This will return a time range that always includes the users current time range,\n   * and then a little extra padding to round up/down to the nearest nth minute,\n   * defined by the result of the getCacheDurationInMinutes.\n   *\n   * For longer cache durations, and shorter query durations,\n   * the window we're calculating might be much bigger then the user's current window,\n   * resulting in us returning labels/values that might not be applicable for the given window,\n   * this is a necessary trade-off if we want to cache larger durations\n   */\n  getTimeRangeParams(timeRange: TimeRange): { start: string; end: string } {\n    return {\n      start: getPrometheusTime(timeRange.from, false).toString(),\n      end: getPrometheusTime(timeRange.to, true).toString(),\n    };\n  }\n\n  getOriginalMetricName(labelData: { [key: string]: string }) {\n    return getOriginalMetricName(labelData);\n  }\n\n  /**\n   * This converts the adhocVariableFilter array and converts it to scopeFilter array\n   * @param filters\n   */\n  generateScopeFilters(filters?: AdHocVariableFilter[]): ScopeSpecFilter[] {\n    if (!filters) {\n      return [];\n    }\n\n    return filters.map((f) => ({\n      ...f,\n      value: this.templateSrv.replace(f.value, {}, this.interpolateQueryExpr),\n      operator: scopeFilterOperatorMap[f.operator],\n    }));\n  }\n\n  enhanceExprWithAdHocFilters(filters: AdHocVariableFilter[] | undefined, expr: string) {\n    if (!filters || filters.length === 0) {\n      return expr;\n    }\n\n    const finalQuery = filters.reduce((acc, filter) => {\n      const { key, operator } = filter;\n      let { value } = filter;\n      if (operator === '=~' || operator === '!~') {\n        value = prometheusRegularEscape(value);\n      }\n      return addLabelToQuery(acc, key, value, operator);\n    }, expr);\n    return finalQuery;\n  }\n\n  // Used when running queries through backend\n  filterQuery(query: PromQuery): boolean {\n    if (query.hide || !query.expr) {\n      return false;\n    }\n    return true;\n  }\n\n  // Used when running queries through backend\n  applyTemplateVariables(target: PromQuery, scopedVars: ScopedVars, filters?: AdHocVariableFilter[]) {\n    const variables = { ...scopedVars };\n\n    // We want to interpolate these variables on backend.\n    // The pre-calculated values are replaced withe the variable strings.\n    variables.__interval = {\n      value: '$__interval',\n    };\n    variables.__interval_ms = {\n      value: '$__interval_ms',\n    };\n\n    // interpolate expression\n\n    // We need a first replace to evaluate variables before applying adhoc filters\n    // This is required for an expression like `metric > $VAR` where $VAR is a float to which we must not add adhoc filters\n    const expr = this.templateSrv.replace(target.expr, variables, this.interpolateQueryExpr);\n\n    // Apply ad-hoc filters\n    // When ad-hoc filters are applied, we replace again the variables in case the ad-hoc filters also reference a variable\n    const exprWithAdhoc = config.featureToggles.promQLScope\n      ? expr\n      : this.templateSrv.replace(this.enhanceExprWithAdHocFilters(filters, expr), variables, this.interpolateQueryExpr);\n\n    return {\n      ...target,\n      ...(config.featureToggles.promQLScope ? { adhocFilters: this.generateScopeFilters(filters) } : {}),\n      expr: exprWithAdhoc,\n      interval: this.templateSrv.replace(target.interval, variables),\n      legendFormat: this.templateSrv.replace(target.legendFormat, variables),\n    };\n  }\n\n  getVariables(): string[] {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  interpolateString(string: string, scopedVars?: ScopedVars) {\n    return this.templateSrv.replace(string, scopedVars, this.interpolateQueryExpr);\n  }\n\n  getDebounceTimeInMilliseconds(): number {\n    switch (this.cacheLevel) {\n      case PrometheusCacheLevel.Medium:\n        return 600;\n      case PrometheusCacheLevel.High:\n        return 1200;\n      default:\n        return 350;\n    }\n  }\n\n  getDaysToCacheMetadata(): number {\n    switch (this.cacheLevel) {\n      case PrometheusCacheLevel.Medium:\n        return 7;\n      case PrometheusCacheLevel.High:\n        return 30;\n      default:\n        return 1;\n    }\n  }\n\n  getCacheDurationInMinutes(): number {\n    return getClientCacheDurationInMinutes(this.cacheLevel);\n  }\n\n  getDefaultQuery(app: CoreApp): PromQuery {\n    const defaults = {\n      refId: 'A',\n      expr: '',\n      range: true,\n      instant: false,\n    };\n\n    if (app === CoreApp.UnifiedAlerting) {\n      return {\n        ...defaults,\n        instant: true,\n        range: false,\n      };\n    }\n\n    if (app === CoreApp.Explore) {\n      return {\n        ...defaults,\n        instant: true,\n        range: true,\n      };\n    }\n\n    return defaults;\n  }\n}\n\n/**\n * Align query range to step.\n * Rounds start and end down to a multiple of step.\n * @param start Timestamp marking the beginning of the range.\n * @param end Timestamp marking the end of the range.\n * @param step Interval to align start and end with.\n * @param utcOffsetSec Number of seconds current timezone is offset from UTC\n */\nexport function alignRange(\n  start: number,\n  end: number,\n  step: number,\n  utcOffsetSec: number\n): { end: number; start: number } {\n  const alignedEnd = Math.floor((end + utcOffsetSec) / step) * step - utcOffsetSec;\n  const alignedStart = Math.floor((start + utcOffsetSec) / step) * step - utcOffsetSec;\n  return {\n    end: alignedEnd,\n    start: alignedStart,\n  };\n}\n\nexport function extractRuleMappingFromGroups(groups: any[]) {\n  return groups.reduce(\n    (mapping, group) =>\n      group.rules\n        .filter((rule: any) => rule.type === 'recording')\n        .reduce(\n          (acc: { [key: string]: string }, rule: any) => ({\n            ...acc,\n            [rule.name]: rule.query,\n          }),\n          mapping\n        ),\n    {}\n  );\n}\n\n// NOTE: these two functions are very similar to the escapeLabelValueIn* functions\n// in language_utils.ts, but they are not exactly the same algorithm, and we found\n// no way to reuse one in the another or vice versa.\nexport function prometheusRegularEscape<T>(value: T) {\n  return typeof value === 'string' ? value.replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"\\\\\\\\'\") : value;\n}\n\nexport function prometheusSpecialRegexEscape<T>(value: T) {\n  return typeof value === 'string' ? value.replace(/\\\\/g, '\\\\\\\\\\\\\\\\').replace(/[$^*{}\\[\\]\\'+?.()|]/g, '\\\\\\\\$&') : value;\n}\n"],"names":["PrometheusLanguageProvider","defaults"],"mappings":"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"}