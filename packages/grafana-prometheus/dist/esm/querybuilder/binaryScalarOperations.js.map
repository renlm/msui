{"version":3,"file":"binaryScalarOperations.js","sources":["../../../src/querybuilder/binaryScalarOperations.ts"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/binaryScalarOperations.ts\nimport { defaultAddOperationHandler } from './operationUtils';\nimport { QueryBuilderOperation, QueryBuilderOperationDef, QueryBuilderOperationParamDef } from './shared/types';\nimport { PromOperationId, PromVisualQueryOperationCategory } from './types';\n\nexport const binaryScalarDefs = [\n  {\n    id: PromOperationId.Addition,\n    name: 'Add scalar',\n    sign: '+',\n  },\n  {\n    id: PromOperationId.Subtraction,\n    name: 'Subtract scalar',\n    sign: '-',\n  },\n  {\n    id: PromOperationId.MultiplyBy,\n    name: 'Multiply by scalar',\n    sign: '*',\n  },\n  {\n    id: PromOperationId.DivideBy,\n    name: 'Divide by scalar',\n    sign: '/',\n  },\n  {\n    id: PromOperationId.Modulo,\n    name: 'Modulo by scalar',\n    sign: '%',\n  },\n  {\n    id: PromOperationId.Exponent,\n    name: 'Exponent',\n    sign: '^',\n  },\n  {\n    id: PromOperationId.EqualTo,\n    name: 'Equal to',\n    sign: '==',\n    comparison: true,\n  },\n  {\n    id: PromOperationId.NotEqualTo,\n    name: 'Not equal to',\n    sign: '!=',\n    comparison: true,\n  },\n  {\n    id: PromOperationId.GreaterThan,\n    name: 'Greater than',\n    sign: '>',\n    comparison: true,\n  },\n  {\n    id: PromOperationId.LessThan,\n    name: 'Less than',\n    sign: '<',\n    comparison: true,\n  },\n  {\n    id: PromOperationId.GreaterOrEqual,\n    name: 'Greater or equal to',\n    sign: '>=',\n    comparison: true,\n  },\n  {\n    id: PromOperationId.LessOrEqual,\n    name: 'Less or equal to',\n    sign: '<=',\n    comparison: true,\n  },\n];\n\nexport const binaryScalarOperatorToOperatorName = binaryScalarDefs.reduce<\n  Record<string, { id: string; comparison?: boolean }>\n>((acc, def) => {\n  acc[def.sign] = {\n    id: def.id,\n    comparison: def.comparison,\n  };\n  return acc;\n}, {});\n\n// Not sure about this one. It could also be a more generic 'Simple math operation' where user specifies\n// both the operator and the operand in a single input\nexport const binaryScalarOperations: QueryBuilderOperationDef[] = binaryScalarDefs.map((opDef) => {\n  const params: QueryBuilderOperationParamDef[] = [{ name: 'Value', type: 'number' }];\n  let defaultParams: [number] | [number, boolean] = [2];\n  if (opDef.comparison) {\n    params.push({\n      name: 'Bool',\n      type: 'boolean',\n      description: 'If checked comparison will return 0 or 1 for the value rather than filtering.',\n    });\n    defaultParams = [2, false];\n  }\n\n  return {\n    id: opDef.id,\n    name: opDef.name,\n    params,\n    defaultParams,\n    alternativesKey: 'binary scalar operations',\n    category: PromVisualQueryOperationCategory.BinaryOps,\n    renderer: getSimpleBinaryRenderer(opDef.sign),\n    addOperationHandler: defaultAddOperationHandler,\n  };\n});\n\nfunction getSimpleBinaryRenderer(operator: string) {\n  return function binaryRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    let param = model.params[0];\n    let bool = '';\n    if (model.params.length === 2) {\n      bool = model.params[1] ? ' bool' : '';\n    }\n\n    return `${innerExpr} ${operator}${bool} ${param}`;\n  };\n}\n"],"names":[],"mappings":"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"}