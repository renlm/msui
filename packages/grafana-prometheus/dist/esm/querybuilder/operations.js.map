{"version":3,"file":"operations.js","sources":["../../../src/querybuilder/operations.ts"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/operations.ts\nimport { binaryScalarOperations } from './binaryScalarOperations';\nimport { LabelParamEditor } from './components/LabelParamEditor';\nimport {\n  defaultAddOperationHandler,\n  functionRendererLeft,\n  functionRendererRight,\n  getPromOperationDisplayName,\n  getRangeVectorParamDef,\n  rangeRendererLeftWithParams,\n  rangeRendererRightWithParams,\n} from './operationUtils';\nimport {\n  QueryBuilderOperation,\n  QueryBuilderOperationDef,\n  QueryWithOperations,\n  VisualQueryModeller,\n} from './shared/types';\nimport { PromOperationId, PromVisualQuery, PromVisualQueryOperationCategory } from './types';\n\nexport function getOperationDefinitions(): QueryBuilderOperationDef[] {\n  const list: QueryBuilderOperationDef[] = [\n    {\n      id: PromOperationId.HistogramQuantile,\n      name: 'Histogram quantile',\n      params: [{ name: 'Quantile', type: 'number', options: [0.99, 0.95, 0.9, 0.75, 0.5, 0.25] }],\n      defaultParams: [0.9],\n      category: PromVisualQueryOperationCategory.Functions,\n      renderer: functionRendererLeft,\n      addOperationHandler: defaultAddOperationHandler,\n    },\n    createFunction({ id: PromOperationId.HistogramAvg }),\n    createFunction({ id: PromOperationId.HistogramCount }),\n    createFunction({ id: PromOperationId.HistogramSum }),\n    {\n      id: PromOperationId.HistogramFraction,\n      name: 'Histogram fraction',\n      params: [\n        { name: 'Lower scalar', type: 'number' },\n        { name: 'Upper scalar', type: 'number' },\n      ],\n      defaultParams: [0.0, 0.2],\n      category: PromVisualQueryOperationCategory.Functions,\n      renderer: functionRendererLeft,\n      addOperationHandler: defaultAddOperationHandler,\n    },\n    createFunction({ id: PromOperationId.HistogramStddev }),\n    createFunction({ id: PromOperationId.HistogramStdvar }),\n    {\n      id: PromOperationId.LabelReplace,\n      name: 'Label replace',\n      params: [\n        { name: 'Destination label', type: 'string' },\n        { name: 'Replacement', type: 'string' },\n        { name: 'Source label', type: 'string' },\n        { name: 'Regex', type: 'string' },\n      ],\n      category: PromVisualQueryOperationCategory.Functions,\n      defaultParams: ['', '$1', '', '(.*)'],\n      renderer: functionRendererRight,\n      addOperationHandler: defaultAddOperationHandler,\n    },\n    {\n      id: PromOperationId.Ln,\n      name: 'Ln',\n      params: [],\n      defaultParams: [],\n      category: PromVisualQueryOperationCategory.Functions,\n      renderer: functionRendererLeft,\n      addOperationHandler: defaultAddOperationHandler,\n    },\n    createRangeFunction(PromOperationId.Changes),\n    createRangeFunction(PromOperationId.Rate, true),\n    createRangeFunction(PromOperationId.Irate),\n    createRangeFunction(PromOperationId.Increase, true),\n    createRangeFunction(PromOperationId.Idelta),\n    createRangeFunction(PromOperationId.Delta),\n    createFunction({\n      id: PromOperationId.HoltWinters,\n      params: [\n        getRangeVectorParamDef(),\n        { name: 'Smoothing Factor', type: 'number' },\n        { name: 'Trend Factor', type: 'number' },\n      ],\n      defaultParams: ['$__interval', 0.5, 0.5],\n      alternativesKey: 'range function',\n      category: PromVisualQueryOperationCategory.RangeFunctions,\n      renderer: rangeRendererRightWithParams,\n      addOperationHandler: addOperationWithRangeVector,\n      changeTypeHandler: operationTypeChangedHandlerForRangeFunction,\n    }),\n    createFunction({\n      id: PromOperationId.PredictLinear,\n      params: [getRangeVectorParamDef(), { name: 'Seconds from now', type: 'number' }],\n      defaultParams: ['$__interval', 60],\n      alternativesKey: 'range function',\n      category: PromVisualQueryOperationCategory.RangeFunctions,\n      renderer: rangeRendererRightWithParams,\n      addOperationHandler: addOperationWithRangeVector,\n      changeTypeHandler: operationTypeChangedHandlerForRangeFunction,\n    }),\n    createFunction({\n      id: PromOperationId.QuantileOverTime,\n      params: [getRangeVectorParamDef(), { name: 'Quantile', type: 'number' }],\n      defaultParams: ['$__interval', 0.5],\n      alternativesKey: 'overtime function',\n      category: PromVisualQueryOperationCategory.RangeFunctions,\n      renderer: rangeRendererLeftWithParams,\n      addOperationHandler: addOperationWithRangeVector,\n      changeTypeHandler: operationTypeChangedHandlerForRangeFunction,\n    }),\n    ...binaryScalarOperations,\n    {\n      id: PromOperationId.NestedQuery,\n      name: 'Binary operation with query',\n      params: [],\n      defaultParams: [],\n      category: PromVisualQueryOperationCategory.BinaryOps,\n      renderer: (model, def, innerExpr) => innerExpr,\n      addOperationHandler: addNestedQueryHandler,\n    },\n    createFunction({ id: PromOperationId.Abs }),\n    createFunction({ id: PromOperationId.Absent }),\n    createFunction({\n      id: PromOperationId.Acos,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Acosh,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Asin,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Asinh,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Atan,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Atanh,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({ id: PromOperationId.Ceil }),\n    createFunction({\n      id: PromOperationId.Clamp,\n      name: 'Clamp',\n      params: [\n        { name: 'Minimum Scalar', type: 'number' },\n        { name: 'Maximum Scalar', type: 'number' },\n      ],\n      defaultParams: [1, 1],\n    }),\n\n    createFunction({\n      id: PromOperationId.ClampMax,\n      params: [{ name: 'Maximum Scalar', type: 'number' }],\n      defaultParams: [1],\n    }),\n    createFunction({\n      id: PromOperationId.ClampMin,\n      params: [{ name: 'Minimum Scalar', type: 'number' }],\n      defaultParams: [1],\n    }),\n    createFunction({\n      id: PromOperationId.Cos,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Cosh,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.DayOfMonth,\n      category: PromVisualQueryOperationCategory.Time,\n    }),\n    createFunction({\n      id: PromOperationId.DayOfWeek,\n      category: PromVisualQueryOperationCategory.Time,\n    }),\n    createFunction({\n      id: PromOperationId.DayOfYear,\n      category: PromVisualQueryOperationCategory.Time,\n    }),\n    createFunction({\n      id: PromOperationId.DaysInMonth,\n      category: PromVisualQueryOperationCategory.Time,\n    }),\n    createFunction({ id: PromOperationId.Deg }),\n    createRangeFunction(PromOperationId.Deriv),\n    //\n    createFunction({ id: PromOperationId.Exp }),\n    createFunction({ id: PromOperationId.Floor }),\n    createFunction({ id: PromOperationId.Group }),\n    createFunction({ id: PromOperationId.Hour }),\n    createFunction({\n      id: PromOperationId.LabelJoin,\n      params: [\n        {\n          name: 'Destination Label',\n          type: 'string',\n          editor: LabelParamEditor,\n        },\n        {\n          name: 'Separator',\n          type: 'string',\n        },\n        {\n          name: 'Source Label',\n          type: 'string',\n          restParam: true,\n          optional: true,\n          editor: LabelParamEditor,\n        },\n      ],\n      defaultParams: ['', ',', ''],\n      renderer: labelJoinRenderer,\n      explainHandler: labelJoinExplainHandler,\n      addOperationHandler: labelJoinAddOperationHandler,\n    }),\n    createFunction({ id: PromOperationId.Log10 }),\n    createFunction({ id: PromOperationId.Log2 }),\n    createFunction({ id: PromOperationId.Minute }),\n    createFunction({ id: PromOperationId.Month }),\n    createFunction({\n      id: PromOperationId.Pi,\n      renderer: (model) => `${model.id}()`,\n    }),\n    createFunction({\n      id: PromOperationId.Quantile,\n      params: [{ name: 'Value', type: 'number' }],\n      defaultParams: [1],\n      renderer: functionRendererLeft,\n    }),\n    createFunction({ id: PromOperationId.Rad }),\n    createRangeFunction(PromOperationId.Resets),\n    createFunction({\n      id: PromOperationId.Round,\n      category: PromVisualQueryOperationCategory.Functions,\n      params: [{ name: 'To Nearest', type: 'number' }],\n      defaultParams: [1],\n    }),\n    createFunction({ id: PromOperationId.Scalar }),\n    createFunction({ id: PromOperationId.Sgn }),\n    createFunction({ id: PromOperationId.Sin, category: PromVisualQueryOperationCategory.Trigonometric }),\n    createFunction({\n      id: PromOperationId.Sinh,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({ id: PromOperationId.Sort }),\n    createFunction({ id: PromOperationId.SortDesc }),\n    createFunction({ id: PromOperationId.Sqrt }),\n    createFunction({ id: PromOperationId.Stddev }),\n    createFunction({\n      id: PromOperationId.Tan,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Tanh,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Time,\n      renderer: (model) => `${model.id}()`,\n    }),\n    createFunction({ id: PromOperationId.Timestamp }),\n    createFunction({\n      id: PromOperationId.Vector,\n      params: [{ name: 'Value', type: 'number' }],\n      defaultParams: [1],\n      renderer: (model) => `${model.id}(${model.params[0]})`,\n    }),\n    createFunction({ id: PromOperationId.Year }),\n  ];\n\n  return list;\n}\n\nexport function createFunction(definition: Partial<QueryBuilderOperationDef>): QueryBuilderOperationDef {\n  return {\n    ...definition,\n    id: definition.id!,\n    name: definition.name ?? getPromOperationDisplayName(definition.id!),\n    params: definition.params ?? [],\n    defaultParams: definition.defaultParams ?? [],\n    category: definition.category ?? PromVisualQueryOperationCategory.Functions,\n    renderer: definition.renderer ?? (definition.params ? functionRendererRight : functionRendererLeft),\n    addOperationHandler: definition.addOperationHandler ?? defaultAddOperationHandler,\n  };\n}\n\nexport function createRangeFunction(name: string, withRateInterval = false): QueryBuilderOperationDef {\n  return {\n    id: name,\n    name: getPromOperationDisplayName(name),\n    params: [getRangeVectorParamDef(withRateInterval)],\n    defaultParams: [withRateInterval ? '$__rate_interval' : '$__interval'],\n    alternativesKey: 'range function',\n    category: PromVisualQueryOperationCategory.RangeFunctions,\n    renderer: operationWithRangeVectorRenderer,\n    addOperationHandler: addOperationWithRangeVector,\n    changeTypeHandler: operationTypeChangedHandlerForRangeFunction,\n  };\n}\n\nfunction operationTypeChangedHandlerForRangeFunction(\n  operation: QueryBuilderOperation,\n  newDef: QueryBuilderOperationDef\n) {\n  // validate current parameter\n  if (operation.params[0] === '$__rate_interval' && newDef.defaultParams[0] !== '$__rate_interval') {\n    operation.params = newDef.defaultParams;\n  } else if (operation.params[0] === '$__interval' && newDef.defaultParams[0] !== '$__interval') {\n    operation.params = newDef.defaultParams;\n  }\n\n  return operation;\n}\n\nexport function operationWithRangeVectorRenderer(\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string\n) {\n  let rangeVector = (model.params ?? [])[0] ?? '5m';\n  return `${def.id}(${innerExpr}[${rangeVector}])`;\n}\n\n/**\n * Since there can only be one operation with range vector this will replace the current one (if one was added )\n */\nexport function addOperationWithRangeVector(\n  def: QueryBuilderOperationDef,\n  query: PromVisualQuery,\n  modeller: VisualQueryModeller\n) {\n  const newOperation: QueryBuilderOperation = {\n    id: def.id,\n    params: def.defaultParams,\n  };\n\n  if (query.operations.length > 0) {\n    // If operation exists it has to be in the registry so no point to check if it was found\n    const firstOp = modeller.getOperationDef(query.operations[0].id)!;\n\n    if (firstOp.addOperationHandler === addOperationWithRangeVector) {\n      return {\n        ...query,\n        operations: [newOperation, ...query.operations.slice(1)],\n      };\n    }\n  }\n\n  return {\n    ...query,\n    operations: [newOperation, ...query.operations],\n  };\n}\n\nfunction addNestedQueryHandler(def: QueryBuilderOperationDef, query: PromVisualQuery): PromVisualQuery {\n  return {\n    ...query,\n    binaryQueries: [\n      ...(query.binaryQueries ?? []),\n      {\n        operator: '/',\n        query,\n      },\n    ],\n  };\n}\n\nfunction labelJoinRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n  const paramZero = model.params[0] ?? '';\n  const paramOne = model.params[1] ?? '';\n\n  const separator = `\"${paramOne}\"`;\n  return `${model.id}(${innerExpr}, \"${paramZero}\", ${separator}, \"${model.params.slice(2).join(separator)}\")`;\n}\n\nfunction labelJoinExplainHandler(op: QueryBuilderOperation, def?: QueryBuilderOperationDef): string {\n  let explainMessage = def?.documentation ?? 'no docs';\n\n  if (typeof op.params[1] !== 'string') {\n    explainMessage += ' 🚨🚨🚨 The `separator` must be a string.';\n  }\n\n  return explainMessage;\n}\n\nfunction labelJoinAddOperationHandler<T extends QueryWithOperations>(def: QueryBuilderOperationDef, query: T) {\n  const newOperation: QueryBuilderOperation = {\n    id: def.id,\n    params: def.defaultParams,\n  };\n\n  return {\n    ...query,\n    operations: [...query.operations, newOperation],\n  };\n}\n"],"names":[],"mappings":"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"}