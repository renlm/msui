{"version":3,"file":"state.js","sources":["../../../src/querybuilder/state.ts"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/state.ts\nimport { CoreApp } from '@grafana/data';\n\nimport store from '../gcopypaste/app/core/store';\nimport { LegendFormatMode, PromQuery } from '../types';\n\nimport { QueryEditorMode } from './shared/types';\n\nconst queryEditorModeDefaultLocalStorageKey = 'PrometheusQueryEditorModeDefault';\n\nexport function changeEditorMode(query: PromQuery, editorMode: QueryEditorMode, onChange: (query: PromQuery) => void) {\n  // If empty query store new mode as default\n  if (query.expr === '') {\n    store.set(queryEditorModeDefaultLocalStorageKey, editorMode);\n  }\n\n  onChange({ ...query, editorMode });\n}\n\nfunction getDefaultEditorMode(expr: string, defaultEditor: QueryEditorMode = QueryEditorMode.Builder): QueryEditorMode {\n  // If we already have an expression default to code view\n  if (expr != null && expr !== '') {\n    return QueryEditorMode.Code;\n  }\n\n  const value: QueryEditorMode = store.get(queryEditorModeDefaultLocalStorageKey);\n  switch (value) {\n    case QueryEditorMode.Builder:\n    case QueryEditorMode.Code:\n      return value;\n    default:\n      return defaultEditor;\n  }\n}\n\n/**\n * Returns query with defaults, and boolean true/false depending on change was required\n */\nexport function getQueryWithDefaults(\n  query: PromQuery & { expr?: string },\n  app: CoreApp | undefined,\n  defaultEditor?: QueryEditorMode\n): PromQuery {\n  let result = query;\n\n  if (!query.editorMode) {\n    result = { ...query, editorMode: getDefaultEditorMode(query.expr, defaultEditor) };\n  }\n\n  // default query expr is now empty string, set in getDefaultQuery\n  // While expr is required in the types, it is not always defined at runtime, so we need to check for undefined and default to an empty string to prevent runtime errors\n  if (!query.expr) {\n    result = { ...result, expr: '', legendFormat: LegendFormatMode.Auto };\n  }\n\n  if (query.range == null && query.instant == null) {\n    // Default to range query\n    result = { ...result, range: true };\n\n    // In explore we default to both instant & range\n    if (app === CoreApp.Explore) {\n      result.instant = true;\n    }\n  }\n\n  // Unified Alerting does not support \"both\" for query type â€“ fall back to \"range\".\n  const isBothInstantAndRange = query.instant && query.range;\n  if (app === CoreApp.UnifiedAlerting && isBothInstantAndRange) {\n    result = { ...result, instant: false, range: true };\n  }\n\n  return result;\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAQA,MAAM,qCAAwC,GAAA,kCAAA,CAAA;AAE9B,SAAA,gBAAA,CAAiB,KAAkB,EAAA,UAAA,EAA6B,QAAsC,EAAA;AAEpH,EAAI,IAAA,KAAA,CAAM,SAAS,EAAI,EAAA;AACrB,IAAM,KAAA,CAAA,GAAA,CAAI,uCAAuC,UAAU,CAAA,CAAA;AAAA,GAC7D;AAEA,EAAA,QAAA,CAAS,aAAK,CAAA,cAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAL,EAAY,UAAA,EAAY,CAAA,CAAA,CAAA;AACnC,CAAA;AAEA,SAAS,oBAAqB,CAAA,IAAA,EAAc,aAAiC,GAAA,eAAA,CAAgB,OAA0B,EAAA;AAErH,EAAI,IAAA,IAAA,IAAQ,IAAQ,IAAA,IAAA,KAAS,EAAI,EAAA;AAC/B,IAAA,OAAO,eAAgB,CAAA,IAAA,CAAA;AAAA,GACzB;AAEA,EAAM,MAAA,KAAA,GAAyB,KAAM,CAAA,GAAA,CAAI,qCAAqC,CAAA,CAAA;AAC9E,EAAA,QAAQ,KAAO;AAAA,IACb,KAAK,eAAgB,CAAA,OAAA,CAAA;AAAA,IACrB,KAAK,eAAgB,CAAA,IAAA;AACnB,MAAO,OAAA,KAAA,CAAA;AAAA,IACT;AACE,MAAO,OAAA,aAAA,CAAA;AAAA,GACX;AACF,CAAA;AAKgB,SAAA,oBAAA,CACd,KACA,EAAA,GAAA,EACA,aACW,EAAA;AACX,EAAA,IAAI,MAAS,GAAA,KAAA,CAAA;AAEb,EAAI,IAAA,CAAC,MAAM,UAAY,EAAA;AACrB,IAAS,MAAA,GAAA,aAAA,CAAA,cAAA,CAAA,EAAA,EAAK,QAAL,EAAY,UAAA,EAAY,qBAAqB,KAAM,CAAA,IAAA,EAAM,aAAa,CAAE,EAAA,CAAA,CAAA;AAAA,GACnF;AAIA,EAAI,IAAA,CAAC,MAAM,IAAM,EAAA;AACf,IAAA,MAAA,GAAS,iCAAK,MAAL,CAAA,EAAA,EAAa,MAAM,EAAI,EAAA,YAAA,EAAc,iBAAiB,IAAK,EAAA,CAAA,CAAA;AAAA,GACtE;AAEA,EAAA,IAAI,KAAM,CAAA,KAAA,IAAS,IAAQ,IAAA,KAAA,CAAM,WAAW,IAAM,EAAA;AAEhD,IAAA,MAAA,GAAS,aAAK,CAAA,cAAA,CAAA,EAAA,EAAA,MAAA,CAAA,EAAL,EAAa,KAAA,EAAO,IAAK,EAAA,CAAA,CAAA;AAGlC,IAAI,IAAA,GAAA,KAAQ,QAAQ,OAAS,EAAA;AAC3B,MAAA,MAAA,CAAO,OAAU,GAAA,IAAA,CAAA;AAAA,KACnB;AAAA,GACF;AAGA,EAAM,MAAA,qBAAA,GAAwB,KAAM,CAAA,OAAA,IAAW,KAAM,CAAA,KAAA,CAAA;AACrD,EAAI,IAAA,GAAA,KAAQ,OAAQ,CAAA,eAAA,IAAmB,qBAAuB,EAAA;AAC5D,IAAA,MAAA,GAAS,iCAAK,MAAL,CAAA,EAAA,EAAa,OAAS,EAAA,KAAA,EAAO,OAAO,IAAK,EAAA,CAAA,CAAA;AAAA,GACpD;AAEA,EAAO,OAAA,MAAA,CAAA;AACT;;;;"}