{"version":3,"file":"PromQueryModeller.js","sources":["../../../src/querybuilder/PromQueryModeller.ts"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/PromQueryModeller.ts\nimport { FUNCTIONS } from '../promql';\n\nimport { getAggregationOperations } from './aggregations';\nimport { getOperationDefinitions } from './operations';\nimport { LokiAndPromQueryModellerBase } from './shared/LokiAndPromQueryModellerBase';\nimport { PromQueryPattern, PromQueryPatternType, PromVisualQueryOperationCategory } from './types';\n\nexport class PromQueryModeller extends LokiAndPromQueryModellerBase {\n  constructor() {\n    super(() => {\n      const allOperations = [...getOperationDefinitions(), ...getAggregationOperations()];\n      for (const op of allOperations) {\n        const func = FUNCTIONS.find((x) => x.insertText === op.id);\n        if (func) {\n          op.documentation = func.documentation;\n        }\n      }\n      return allOperations;\n    });\n\n    this.setOperationCategories([\n      PromVisualQueryOperationCategory.Aggregations,\n      PromVisualQueryOperationCategory.RangeFunctions,\n      PromVisualQueryOperationCategory.Functions,\n      PromVisualQueryOperationCategory.BinaryOps,\n      PromVisualQueryOperationCategory.Trigonometric,\n      PromVisualQueryOperationCategory.Time,\n    ]);\n  }\n\n  getQueryPatterns(): PromQueryPattern[] {\n    return [\n      {\n        name: 'Rate then sum',\n        type: PromQueryPatternType.Rate,\n        operations: [\n          { id: 'rate', params: ['$__rate_interval'] },\n          { id: 'sum', params: [] },\n        ],\n      },\n      {\n        name: 'Rate then sum by(label) then avg',\n        type: PromQueryPatternType.Rate,\n        operations: [\n          { id: 'rate', params: ['$__rate_interval'] },\n          { id: '__sum_by', params: [''] },\n          { id: 'avg', params: [] },\n        ],\n      },\n      {\n        name: 'Histogram quantile on rate',\n        type: PromQueryPatternType.Histogram,\n        operations: [\n          { id: 'rate', params: ['$__rate_interval'] },\n          { id: '__sum_by', params: ['le'] },\n          { id: 'histogram_quantile', params: [0.95] },\n        ],\n      },\n      {\n        name: 'Histogram quantile on increase',\n        type: PromQueryPatternType.Histogram,\n        operations: [\n          { id: 'increase', params: ['$__rate_interval'] },\n          { id: '__max_by', params: ['le'] },\n          { id: 'histogram_quantile', params: [0.95] },\n        ],\n      },\n      {\n        name: 'Binary Query',\n        type: PromQueryPatternType.Binary,\n        operations: [\n          { id: 'rate', params: ['$__rate_interval'] },\n          { id: 'sum', params: [] },\n        ],\n        binaryQueries: [\n          {\n            operator: '/',\n            query: {\n              metric: '',\n              labels: [],\n              operations: [\n                { id: 'rate', params: ['$__rate_interval'] },\n                { id: 'sum', params: [] },\n              ],\n            },\n          },\n        ],\n      },\n    ];\n  }\n}\n\nexport const promQueryModeller = new PromQueryModeller();\n"],"names":[],"mappings":"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"}