{"version":3,"file":"operationUtils.js","sources":["../../../src/querybuilder/operationUtils.ts"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/operationUtils.ts\nimport { capitalize } from 'lodash';\nimport pluralize from 'pluralize';\n\nimport { SelectableValue } from '@grafana/data/src';\n\nimport { LabelParamEditor } from './components/LabelParamEditor';\nimport {\n  QueryBuilderLabelFilter,\n  QueryBuilderOperation,\n  QueryBuilderOperationDef,\n  QueryBuilderOperationParamDef,\n  QueryBuilderOperationParamValue,\n  QueryWithOperations,\n} from './shared/types';\nimport { PromVisualQueryOperationCategory } from './types';\n\nexport function functionRendererLeft(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n  const params = renderParams(model, def, innerExpr);\n  const str = model.id + '(';\n\n  if (innerExpr) {\n    params.push(innerExpr);\n  }\n\n  return str + params.join(', ') + ')';\n}\n\nexport function functionRendererRight(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n  const params = renderParams(model, def, innerExpr);\n  const str = model.id + '(';\n\n  if (innerExpr) {\n    params.unshift(innerExpr);\n  }\n\n  return str + params.join(', ') + ')';\n}\n\nfunction rangeRendererWithParams(\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string,\n  renderLeft: boolean\n) {\n  if (def.params.length < 2) {\n    throw `Cannot render a function with params of length [${def.params.length}]`;\n  }\n\n  let rangeVector = (model.params ?? [])[0] ?? '5m';\n\n  // Next frame the remaining parameters, but get rid of the first one because it's used to move the\n  // instant vector into a range vector.\n  const params = renderParams(\n    {\n      ...model,\n      params: model.params.slice(1),\n    },\n    {\n      ...def,\n      params: def.params.slice(1),\n      defaultParams: def.defaultParams.slice(1),\n    },\n    innerExpr\n  );\n\n  const str = model.id + '(';\n\n  // Depending on the renderLeft variable, render parameters to the left or right\n  // renderLeft === true (renderLeft) => (param1, param2, rangeVector[...])\n  // renderLeft === false (renderRight) => (rangeVector[...], param1, param2)\n  if (innerExpr) {\n    renderLeft ? params.push(`${innerExpr}[${rangeVector}]`) : params.unshift(`${innerExpr}[${rangeVector}]`);\n  }\n\n  // stick everything together\n  return str + params.join(', ') + ')';\n}\n\nexport function rangeRendererRightWithParams(\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string\n) {\n  return rangeRendererWithParams(model, def, innerExpr, false);\n}\n\nexport function rangeRendererLeftWithParams(\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string\n) {\n  return rangeRendererWithParams(model, def, innerExpr, true);\n}\n\nfunction renderParams(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n  return (model.params ?? []).map((value, index) => {\n    const paramDef = def.params[index];\n    if (paramDef.type === 'string') {\n      return '\"' + value + '\"';\n    }\n\n    return value;\n  });\n}\n\nexport function defaultAddOperationHandler<T extends QueryWithOperations>(def: QueryBuilderOperationDef, query: T) {\n  const newOperation: QueryBuilderOperation = {\n    id: def.id,\n    params: def.defaultParams,\n  };\n\n  return {\n    ...query,\n    operations: [...query.operations, newOperation],\n  };\n}\n\nexport function getPromOperationDisplayName(funcName: string) {\n  return capitalize(funcName.replace(/_/g, ' '));\n}\n\nexport function getOperationParamId(operationId: string, paramIndex: number) {\n  return `operations.${operationId}.param.${paramIndex}`;\n}\n\nexport function getRangeVectorParamDef(withRateInterval = false): QueryBuilderOperationParamDef {\n  const options: Array<SelectableValue<string>> = [\n    {\n      label: '$__interval',\n      value: '$__interval',\n      // tooltip: 'Dynamic interval based on max data points, scrape and min interval',\n    },\n    { label: '1m', value: '1m' },\n    { label: '5m', value: '5m' },\n    { label: '10m', value: '10m' },\n    { label: '1h', value: '1h' },\n    { label: '24h', value: '24h' },\n  ];\n\n  if (withRateInterval) {\n    options.unshift({\n      label: '$__rate_interval',\n      value: '$__rate_interval',\n      // tooltip: 'Always above 4x scrape interval',\n    });\n  }\n\n  const param: QueryBuilderOperationParamDef = {\n    name: 'Range',\n    type: 'string',\n    options,\n  };\n\n  return param;\n}\n\nexport function createAggregationOperation(\n  name: string,\n  overrides: Partial<QueryBuilderOperationDef> = {}\n): QueryBuilderOperationDef[] {\n  const operations: QueryBuilderOperationDef[] = [\n    {\n      id: name,\n      name: getPromOperationDisplayName(name),\n      params: [\n        {\n          name: 'By label',\n          type: 'string',\n          restParam: true,\n          optional: true,\n        },\n      ],\n      defaultParams: [],\n      alternativesKey: 'plain aggregations',\n      category: PromVisualQueryOperationCategory.Aggregations,\n      renderer: functionRendererLeft,\n      paramChangedHandler: getOnLabelAddedHandler(`__${name}_by`),\n      explainHandler: getAggregationExplainer(name, ''),\n      addOperationHandler: defaultAddOperationHandler,\n      ...overrides,\n    },\n    {\n      id: `__${name}_by`,\n      name: `${getPromOperationDisplayName(name)} by`,\n      params: [\n        {\n          name: 'Label',\n          type: 'string',\n          restParam: true,\n          optional: true,\n          editor: LabelParamEditor,\n        },\n      ],\n      defaultParams: [''],\n      alternativesKey: 'aggregations by',\n      category: PromVisualQueryOperationCategory.Aggregations,\n      renderer: getAggregationByRenderer(name),\n      paramChangedHandler: getLastLabelRemovedHandler(name),\n      explainHandler: getAggregationExplainer(name, 'by'),\n      addOperationHandler: defaultAddOperationHandler,\n      hideFromList: true,\n      ...overrides,\n    },\n    {\n      id: `__${name}_without`,\n      name: `${getPromOperationDisplayName(name)} without`,\n      params: [\n        {\n          name: 'Label',\n          type: 'string',\n          restParam: true,\n          optional: true,\n          editor: LabelParamEditor,\n        },\n      ],\n      defaultParams: [''],\n      alternativesKey: 'aggregations by',\n      category: PromVisualQueryOperationCategory.Aggregations,\n      renderer: getAggregationWithoutRenderer(name),\n      paramChangedHandler: getLastLabelRemovedHandler(name),\n      explainHandler: getAggregationExplainer(name, 'without'),\n      addOperationHandler: defaultAddOperationHandler,\n      hideFromList: true,\n      ...overrides,\n    },\n  ];\n\n  return operations;\n}\n\nexport function createAggregationOperationWithParam(\n  name: string,\n  paramsDef: { params: QueryBuilderOperationParamDef[]; defaultParams: QueryBuilderOperationParamValue[] },\n  overrides: Partial<QueryBuilderOperationDef> = {}\n): QueryBuilderOperationDef[] {\n  const operations = createAggregationOperation(name, overrides);\n  operations[0].params.unshift(...paramsDef.params);\n  operations[1].params.unshift(...paramsDef.params);\n  operations[2].params.unshift(...paramsDef.params);\n  operations[0].defaultParams = paramsDef.defaultParams;\n  operations[1].defaultParams = [...paramsDef.defaultParams, ''];\n  operations[2].defaultParams = [...paramsDef.defaultParams, ''];\n  operations[1].renderer = getAggregationByRendererWithParameter(name);\n  operations[2].renderer = getAggregationByRendererWithParameter(name);\n  return operations;\n}\n\nfunction getAggregationByRenderer(aggregation: string) {\n  return function aggregationRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    return `${aggregation} by(${model.params.join(', ')}) (${innerExpr})`;\n  };\n}\n\nfunction getAggregationWithoutRenderer(aggregation: string) {\n  return function aggregationRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    return `${aggregation} without(${model.params.join(', ')}) (${innerExpr})`;\n  };\n}\n\n/**\n * Very simple poc implementation, needs to be modified to support all aggregation operators\n */\nexport function getAggregationExplainer(aggregationName: string, mode: 'by' | 'without' | '') {\n  return function aggregationExplainer(model: QueryBuilderOperation) {\n    const labels = model.params.map((label) => `\\`${label}\\``).join(' and ');\n    const labelWord = pluralize('label', model.params.length);\n\n    switch (mode) {\n      case 'by':\n        return `Calculates ${aggregationName} over dimensions while preserving ${labelWord} ${labels}.`;\n      case 'without':\n        return `Calculates ${aggregationName} over the dimensions ${labels}. All other labels are preserved.`;\n      default:\n        return `Calculates ${aggregationName} over the dimensions.`;\n    }\n  };\n}\n\nfunction getAggregationByRendererWithParameter(aggregation: string) {\n  return function aggregationRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    const restParamIndex = def.params.findIndex((param) => param.restParam);\n    const params = model.params.slice(0, restParamIndex);\n    const restParams = model.params.slice(restParamIndex);\n\n    return `${aggregation} by(${restParams.join(', ')}) (${params\n      .map((param, idx) => (def.params[idx].type === 'string' ? `\\\"${param}\\\"` : param))\n      .join(', ')}, ${innerExpr})`;\n  };\n}\n\n/**\n * This function will transform operations without labels to their plan aggregation operation\n */\nexport function getLastLabelRemovedHandler(changeToOperationId: string) {\n  return function onParamChanged(index: number, op: QueryBuilderOperation, def: QueryBuilderOperationDef) {\n    // If definition has more params then is defined there are no optional rest params anymore.\n    // We then transform this operation into a different one\n    if (op.params.length < def.params.length) {\n      return {\n        ...op,\n        id: changeToOperationId,\n      };\n    }\n\n    return op;\n  };\n}\n\nexport function getOnLabelAddedHandler(changeToOperationId: string) {\n  return function onParamChanged(index: number, op: QueryBuilderOperation, def: QueryBuilderOperationDef) {\n    // Check if we actually have the label param. As it's optional the aggregation can have one less, which is the\n    // case of just simple aggregation without label. When user adds the label it now has the same number of params\n    // as its definition, and now we can change it to its `_by` variant.\n    if (op.params.length === def.params.length) {\n      return {\n        ...op,\n        id: changeToOperationId,\n      };\n    }\n    return op;\n  };\n}\n\nexport function isConflictingSelector(\n  newLabel: Partial<QueryBuilderLabelFilter>,\n  labels: Array<Partial<QueryBuilderLabelFilter>>\n): boolean {\n  if (!newLabel.label || !newLabel.op || !newLabel.value) {\n    return false;\n  }\n\n  if (labels.length < 2) {\n    return false;\n  }\n\n  const operationIsNegative = newLabel.op.toString().startsWith('!');\n\n  const candidates = labels.filter(\n    (label) => label.label === newLabel.label && label.value === newLabel.value && label.op !== newLabel.op\n  );\n\n  const conflict = candidates.some((candidate) => {\n    if (operationIsNegative && candidate?.op?.toString().startsWith('!') === false) {\n      return true;\n    }\n    if (operationIsNegative === false && candidate?.op?.toString().startsWith('!')) {\n      return true;\n    }\n    return false;\n  });\n\n  return conflict;\n}\n"],"names":[],"mappings":"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"}