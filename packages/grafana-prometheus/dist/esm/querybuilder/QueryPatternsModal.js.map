{"version":3,"file":"QueryPatternsModal.js","sources":["../../../src/querybuilder/QueryPatternsModal.tsx"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/QueryPatternsModal.tsx\nimport { css } from '@emotion/css';\nimport { capitalize } from 'lodash';\nimport React, { useMemo, useState } from 'react';\n\nimport { CoreApp, DataQuery, GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, Collapse, Modal, useStyles2 } from '@grafana/ui';\n\nimport { getNextRefIdChar } from '../gcopypaste/app/core/utils/query';\nimport { PromQuery } from '../types';\n\nimport { promQueryModeller } from './PromQueryModeller';\nimport { QueryPattern } from './QueryPattern';\nimport { buildVisualQueryFromString } from './parsing';\nimport { PromQueryPattern, PromQueryPatternType } from './types';\n\ntype Props = {\n  isOpen: boolean;\n  query: PromQuery;\n  queries: DataQuery[] | undefined;\n  app?: CoreApp;\n  onClose: () => void;\n  onChange: (query: PromQuery) => void;\n  onAddQuery?: (query: PromQuery) => void;\n};\n\nexport const QueryPatternsModal = (props: Props) => {\n  const { isOpen, onClose, onChange, onAddQuery, query, queries, app } = props;\n  const [openTabs, setOpenTabs] = useState<string[]>([]);\n  const [selectedPatternName, setSelectedPatternName] = useState<string | null>(null);\n\n  const styles = useStyles2(getStyles);\n  const hasNewQueryOption = !!onAddQuery;\n  const hasPreviousQuery = useMemo(() => {\n    const visualQuery = buildVisualQueryFromString(query.expr ?? '');\n    // has anything entered in the query, metric, labels, operations, or binary queries\n    const hasOperations = visualQuery.query.operations.length > 0,\n      hasMetric = visualQuery.query.metric,\n      hasLabels = visualQuery.query.labels.length > 0,\n      hasBinaryQueries = visualQuery.query.binaryQueries ? visualQuery.query.binaryQueries.length > 0 : false;\n\n    return hasOperations || hasMetric || hasLabels || hasBinaryQueries;\n  }, [query.expr]);\n\n  const onPatternSelect = (pattern: PromQueryPattern, selectAsNewQuery = false) => {\n    const visualQuery = buildVisualQueryFromString(selectAsNewQuery ? '' : query.expr);\n    reportInteraction('grafana_prom_kickstart_your_query_selected', {\n      app: app ?? '',\n      editorMode: query.editorMode,\n      selectedPattern: pattern.name,\n      preSelectedOperationsCount: visualQuery.query.operations.length,\n      preSelectedLabelsCount: visualQuery.query.labels.length,\n      createNewQuery: hasNewQueryOption && selectAsNewQuery,\n    });\n\n    visualQuery.query.operations = pattern.operations;\n    visualQuery.query.binaryQueries = pattern.binaryQueries;\n    if (hasNewQueryOption && selectAsNewQuery) {\n      onAddQuery({\n        ...query,\n        refId: getNextRefIdChar(queries ?? [query]),\n        expr: promQueryModeller.renderQuery(visualQuery.query),\n      });\n    } else {\n      onChange({\n        ...query,\n        expr: promQueryModeller.renderQuery(visualQuery.query),\n      });\n    }\n    setSelectedPatternName(null);\n    onClose();\n  };\n\n  return (\n    <Modal aria-label=\"Kick start your query modal\" isOpen={isOpen} title=\"Kick start your query\" onDismiss={onClose}>\n      <div className={styles.spacing}>\n        Kick start your query by selecting one of these queries. You can then continue to complete your query.\n      </div>\n      {Object.values(PromQueryPatternType).map((patternType) => {\n        return (\n          <Collapse\n            aria-label={`open and close ${patternType} query starter card`}\n            key={patternType}\n            label={`${capitalize(patternType)} query starters`}\n            isOpen={openTabs.includes(patternType)}\n            collapsible={true}\n            onToggle={() =>\n              setOpenTabs((tabs) =>\n                // close tab if it's already open, otherwise open it\n                tabs.includes(patternType) ? tabs.filter((t) => t !== patternType) : [...tabs, patternType]\n              )\n            }\n          >\n            <div className={styles.cardsContainer}>\n              {promQueryModeller\n                .getQueryPatterns()\n                .filter((pattern) => pattern.type === patternType)\n                .map((pattern) => (\n                  <QueryPattern\n                    key={pattern.name}\n                    pattern={pattern}\n                    hasNewQueryOption={hasNewQueryOption}\n                    hasPreviousQuery={hasPreviousQuery}\n                    onPatternSelect={onPatternSelect}\n                    selectedPatternName={selectedPatternName}\n                    setSelectedPatternName={setSelectedPatternName}\n                  />\n                ))}\n            </div>\n          </Collapse>\n        );\n      })}\n      <Button aria-label=\"close kick start your query modal\" variant=\"secondary\" onClick={onClose}>\n        Close\n      </Button>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    cardsContainer: css({\n      display: 'flex',\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      justifyContent: 'space-between',\n    }),\n    spacing: css({\n      marginBottom: theme.spacing(1),\n    }),\n  };\n};\n"],"names":[],"mappings":"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"}