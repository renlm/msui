{"version":3,"file":"OperationHeader.js","sources":["../../../../src/querybuilder/shared/OperationHeader.tsx"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/OperationHeader.tsx\nimport { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { DraggableProvided } from 'react-beautiful-dnd';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { FlexItem } from '@grafana/experimental';\nimport { Button, Select, useStyles2 } from '@grafana/ui';\n\nimport { OperationInfoButton } from './OperationInfoButton';\nimport { QueryBuilderOperation, QueryBuilderOperationDef, VisualQueryModeller } from './types';\n\nexport interface Props {\n  operation: QueryBuilderOperation;\n  def: QueryBuilderOperationDef;\n  index: number;\n  queryModeller: VisualQueryModeller;\n  dragHandleProps?: DraggableProvided['dragHandleProps'];\n  onChange: (index: number, update: QueryBuilderOperation) => void;\n  onRemove: (index: number) => void;\n}\n\ninterface State {\n  isOpen?: boolean;\n  alternatives?: Array<SelectableValue<QueryBuilderOperationDef>>;\n}\n\nexport const OperationHeader = React.memo<Props>(\n  ({ operation, def, index, onChange, onRemove, queryModeller, dragHandleProps }) => {\n    const styles = useStyles2(getStyles);\n    const [state, setState] = useState<State>({});\n\n    const onToggleSwitcher = () => {\n      if (state.isOpen) {\n        setState({ ...state, isOpen: false });\n      } else {\n        const alternatives = queryModeller\n          .getAlternativeOperations(def.alternativesKey!)\n          .map((alt) => ({ label: alt.name, value: alt }));\n        setState({ isOpen: true, alternatives });\n      }\n    };\n\n    return (\n      <div className={styles.header}>\n        {!state.isOpen && (\n          <>\n            <div {...dragHandleProps}>{def.name ?? def.id}</div>\n            <FlexItem grow={1} />\n            <div className={`${styles.operationHeaderButtons} operation-header-show-on-hover`}>\n              <Button\n                icon=\"angle-down\"\n                size=\"sm\"\n                onClick={onToggleSwitcher}\n                fill=\"text\"\n                variant=\"secondary\"\n                title=\"Click to view alternative operations\"\n              />\n              <OperationInfoButton def={def} operation={operation} />\n              <Button\n                icon=\"times\"\n                size=\"sm\"\n                onClick={() => onRemove(index)}\n                fill=\"text\"\n                variant=\"secondary\"\n                title=\"Remove operation\"\n              />\n            </div>\n          </>\n        )}\n        {state.isOpen && (\n          <div className={styles.selectWrapper}>\n            <Select\n              autoFocus\n              openMenuOnFocus\n              placeholder=\"Replace with\"\n              options={state.alternatives}\n              isOpen={true}\n              onCloseMenu={onToggleSwitcher}\n              onChange={(value) => {\n                if (value.value) {\n                  // Operation should exist if it is selectable\n                  const newDef = queryModeller.getOperationDef(value.value.id)!;\n\n                  // copy default params, and override with all current params\n                  const newParams = [...newDef.defaultParams];\n                  for (let i = 0; i < Math.min(operation.params.length, newParams.length); i++) {\n                    if (newDef.params[i].type === def.params[i].type) {\n                      newParams[i] = operation.params[i];\n                    }\n                  }\n\n                  const changedOp = { ...operation, params: newParams, id: value.value.id };\n                  onChange(index, def.changeTypeHandler ? def.changeTypeHandler(changedOp, newDef) : changedOp);\n                }\n              }}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nOperationHeader.displayName = 'OperationHeader';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    header: css({\n      borderBottom: `1px solid ${theme.colors.border.medium}`,\n      padding: theme.spacing(0.5, 0.5, 0.5, 1),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    operationHeaderButtons: css({\n      opacity: 1,\n    }),\n    selectWrapper: css({\n      paddingRight: theme.spacing(2),\n    }),\n  };\n};\n"],"names":[],"mappings":"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"}