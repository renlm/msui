{"version":3,"file":"LokiAndPromQueryModellerBase.js","sources":["../../../../src/querybuilder/shared/LokiAndPromQueryModellerBase.ts"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/LokiAndPromQueryModellerBase.ts\nimport { Registry } from '@grafana/data';\n\nimport { PromVisualQueryOperationCategory } from '../types';\n\nimport { QueryBuilderLabelFilter, QueryBuilderOperation, QueryBuilderOperationDef, VisualQueryModeller } from './types';\n\nexport interface VisualQueryBinary<T> {\n  operator: string;\n  vectorMatchesType?: 'on' | 'ignoring';\n  vectorMatches?: string;\n  query: T;\n}\n\nexport interface PromLokiVisualQuery {\n  metric?: string;\n  labels: QueryBuilderLabelFilter[];\n  operations: QueryBuilderOperation[];\n  binaryQueries?: Array<VisualQueryBinary<PromLokiVisualQuery>>;\n}\n\nexport abstract class LokiAndPromQueryModellerBase implements VisualQueryModeller {\n  protected operationsRegistry: Registry<QueryBuilderOperationDef>;\n  private categories: string[] = [];\n\n  constructor(getOperations: () => QueryBuilderOperationDef[]) {\n    this.operationsRegistry = new Registry<QueryBuilderOperationDef>(getOperations);\n  }\n\n  protected setOperationCategories(categories: string[]) {\n    this.categories = categories;\n  }\n\n  getOperationsForCategory(category: string) {\n    return this.operationsRegistry.list().filter((op) => op.category === category && !op.hideFromList);\n  }\n\n  getAlternativeOperations(key: string) {\n    return this.operationsRegistry.list().filter((op) => op.alternativesKey && op.alternativesKey === key);\n  }\n\n  getCategories() {\n    return this.categories;\n  }\n\n  getOperationDef(id: string): QueryBuilderOperationDef | undefined {\n    return this.operationsRegistry.getIfExists(id);\n  }\n\n  renderOperations(queryString: string, operations: QueryBuilderOperation[]) {\n    for (const operation of operations) {\n      const def = this.operationsRegistry.getIfExists(operation.id);\n      if (!def) {\n        throw new Error(`Could not find operation ${operation.id} in the registry`);\n      }\n      queryString = def.renderer(operation, def, queryString);\n    }\n\n    return queryString;\n  }\n\n  renderBinaryQueries(queryString: string, binaryQueries?: Array<VisualQueryBinary<PromLokiVisualQuery>>) {\n    if (binaryQueries) {\n      for (const binQuery of binaryQueries) {\n        queryString = `${this.renderBinaryQuery(queryString, binQuery)}`;\n      }\n    }\n    return queryString;\n  }\n\n  private renderBinaryQuery(leftOperand: string, binaryQuery: VisualQueryBinary<PromLokiVisualQuery>) {\n    let result = leftOperand + ` ${binaryQuery.operator} `;\n\n    if (binaryQuery.vectorMatches) {\n      result += `${binaryQuery.vectorMatchesType}(${binaryQuery.vectorMatches}) `;\n    }\n\n    return result + this.renderQuery(binaryQuery.query, true);\n  }\n\n  renderLabels(labels: QueryBuilderLabelFilter[]) {\n    if (labels.length === 0) {\n      return '';\n    }\n\n    let expr = '{';\n    for (const filter of labels) {\n      if (expr !== '{') {\n        expr += ', ';\n      }\n\n      expr += `${filter.label}${filter.op}\"${filter.value}\"`;\n    }\n\n    return expr + `}`;\n  }\n\n  renderQuery(query: PromLokiVisualQuery, nested?: boolean) {\n    let queryString = `${query.metric ?? ''}${this.renderLabels(query.labels)}`;\n    queryString = this.renderOperations(queryString, query.operations);\n\n    if (!nested && this.hasBinaryOp(query) && Boolean(query.binaryQueries?.length)) {\n      queryString = `(${queryString})`;\n    }\n\n    queryString = this.renderBinaryQueries(queryString, query.binaryQueries);\n\n    if (nested && (this.hasBinaryOp(query) || Boolean(query.binaryQueries?.length))) {\n      queryString = `(${queryString})`;\n    }\n\n    return queryString;\n  }\n\n  hasBinaryOp(query: PromLokiVisualQuery): boolean {\n    return (\n      query.operations.find((op) => {\n        const def = this.getOperationDef(op.id);\n        return def?.category === PromVisualQueryOperationCategory.BinaryOps;\n      }) !== undefined\n    );\n  }\n}\n"],"names":[],"mappings":"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"}