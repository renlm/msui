{"version":3,"file":"QueryBuilderHints.js","sources":["../../../../src/querybuilder/shared/QueryBuilderHints.tsx"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/QueryBuilderHints.tsx\nimport { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2, PanelData, QueryHint } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\n\nimport { LokiAndPromQueryModellerBase, PromLokiVisualQuery } from './LokiAndPromQueryModellerBase';\n\nexport interface Props<T extends PromLokiVisualQuery> {\n  query: T;\n  datasource: PrometheusDatasource;\n  queryModeller: LokiAndPromQueryModellerBase;\n  buildVisualQueryFromString: (expr: string) => { query: T };\n  onChange: (update: T) => void;\n  data?: PanelData;\n}\n\nexport const QueryBuilderHints = <T extends PromLokiVisualQuery>({\n  datasource,\n  query: visualQuery,\n  onChange,\n  data,\n  queryModeller,\n  buildVisualQueryFromString,\n}: Props<T>) => {\n  const [hints, setHints] = useState<QueryHint[]>([]);\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    const query = { expr: queryModeller.renderQuery(visualQuery), refId: '' };\n    // For now show only actionable hints\n    const hints = datasource.getQueryHints(query, data?.series || []).filter((hint) => hint.fix?.action);\n    setHints(hints);\n  }, [datasource, visualQuery, data, queryModeller]);\n\n  return (\n    <>\n      {hints.length > 0 && (\n        <div className={styles.container}>\n          {hints.map((hint) => {\n            return (\n              <Tooltip content={`${hint.label} ${hint.fix?.label}`} key={hint.type}>\n                <Button\n                  onClick={() => {\n                    reportInteraction('grafana_query_builder_hints_clicked', {\n                      hint: hint.type,\n                      datasourceType: datasource.type,\n                    });\n\n                    if (hint?.fix?.action) {\n                      const query = { expr: queryModeller.renderQuery(visualQuery), refId: '' };\n                      const newQuery = datasource.modifyQuery(query, hint.fix.action);\n                      const newVisualQuery = buildVisualQueryFromString(newQuery.expr);\n                      return onChange(newVisualQuery.query);\n                    }\n                  }}\n                  fill=\"outline\"\n                  size=\"sm\"\n                  className={styles.hint}\n                >\n                  hint: {hint.fix?.title || hint.fix?.action?.type.toLowerCase().replace('_', ' ')}\n                </Button>\n              </Tooltip>\n            );\n          })}\n        </div>\n      )}\n    </>\n  );\n};\n\nQueryBuilderHints.displayName = 'QueryBuilderHints';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      display: 'flex',\n      alignItems: 'start',\n    }),\n    hint: css({\n      marginRight: theme.spacing(1),\n    }),\n  };\n};\n"],"names":["hints","_a"],"mappings":"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"}