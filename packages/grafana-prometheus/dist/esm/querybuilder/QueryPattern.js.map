{"version":3,"file":"QueryPattern.js","sources":["../../../src/querybuilder/QueryPattern.tsx"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/QueryPattern.tsx\nimport { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Card, useStyles2 } from '@grafana/ui';\n\nimport promqlGrammar from '../promql';\n\nimport { promQueryModeller } from './PromQueryModeller';\nimport { RawQuery } from './shared/RawQuery';\nimport { PromQueryPattern } from './types';\n\ntype Props = {\n  pattern: PromQueryPattern;\n  hasNewQueryOption: boolean;\n  hasPreviousQuery: boolean | string;\n  selectedPatternName: string | null;\n  setSelectedPatternName: (name: string | null) => void;\n  onPatternSelect: (pattern: PromQueryPattern, selectAsNewQuery?: boolean) => void;\n};\n\nexport const QueryPattern = (props: Props) => {\n  const { pattern, onPatternSelect, hasNewQueryOption, hasPreviousQuery, selectedPatternName, setSelectedPatternName } =\n    props;\n\n  const styles = useStyles2(getStyles);\n  const lang = { grammar: promqlGrammar, name: 'promql' };\n\n  return (\n    <Card className={styles.card}>\n      <Card.Heading>{pattern.name}</Card.Heading>\n      <div className={styles.rawQueryContainer}>\n        <RawQuery\n          aria-label={`${pattern.name} raw query`}\n          query={promQueryModeller.renderQuery({\n            labels: [],\n            operations: pattern.operations,\n            binaryQueries: pattern.binaryQueries,\n          })}\n          lang={lang}\n          className={styles.rawQuery}\n        />\n      </div>\n      <Card.Actions>\n        {selectedPatternName !== pattern.name ? (\n          <Button\n            size=\"sm\"\n            aria-label=\"use this query button\"\n            onClick={() => {\n              if (hasPreviousQuery) {\n                // If user has previous query, we need to confirm that they want to apply this query pattern\n                setSelectedPatternName(pattern.name);\n              } else {\n                onPatternSelect(pattern);\n              }\n            }}\n          >\n            Use this query\n          </Button>\n        ) : (\n          <>\n            <div className={styles.spacing}>\n              {`If you would like to use this query, ${\n                hasNewQueryOption\n                  ? 'you can either apply this query pattern or create a new query'\n                  : 'this query pattern will be applied to your current query'\n              }.`}\n            </div>\n            <Button size=\"sm\" aria-label=\"back button\" fill=\"outline\" onClick={() => setSelectedPatternName(null)}>\n              Back\n            </Button>\n            <Button\n              size=\"sm\"\n              aria-label=\"apply query starter button\"\n              onClick={() => {\n                onPatternSelect(pattern);\n              }}\n            >\n              Apply query\n            </Button>\n            {hasNewQueryOption && (\n              <Button\n                size=\"sm\"\n                aria-label=\"create new query button\"\n                onClick={() => {\n                  onPatternSelect(pattern, true);\n                }}\n              >\n                Create new query\n              </Button>\n            )}\n          </>\n        )}\n      </Card.Actions>\n    </Card>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css({\n      width: '49.5%',\n      display: 'flex',\n      flexDirection: 'column',\n    }),\n    rawQueryContainer: css({\n      flexGrow: 1,\n    }),\n    rawQuery: css({\n      backgroundColor: theme.colors.background.primary,\n      padding: theme.spacing(1),\n      marginTop: theme.spacing(1),\n    }),\n    spacing: css({\n      marginBottom: theme.spacing(1),\n    }),\n  };\n};\n"],"names":[],"mappings":"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"}