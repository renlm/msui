{"version":3,"file":"PromQueryBuilderContainer.js","sources":["../../../../src/querybuilder/components/PromQueryBuilderContainer.tsx"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilderContainer.tsx\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport React, { useEffect, useReducer } from 'react';\n\nimport { PanelData } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { PromQuery } from '../../types';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { PromVisualQuery } from '../types';\n\nimport { PromQueryBuilder } from './PromQueryBuilder';\nimport { QueryPreview } from './QueryPreview';\nimport { getSettings, MetricsModalSettings } from './metrics-modal/state/state';\n\nexport interface PromQueryBuilderContainerProps {\n  query: PromQuery;\n  datasource: PrometheusDatasource;\n  onChange: (update: PromQuery) => void;\n  onRunQuery: () => void;\n  data?: PanelData;\n  showExplain: boolean;\n}\n\nexport interface State {\n  visQuery?: PromVisualQuery;\n  expr: string;\n}\n\nconst prometheusMetricEncyclopedia = config.featureToggles.prometheusMetricEncyclopedia;\n\n/**\n * This component is here just to contain the translation logic between string query and the visual query builder model.\n */\nexport function PromQueryBuilderContainer(props: PromQueryBuilderContainerProps) {\n  const { query, onChange, onRunQuery, datasource, data, showExplain } = props;\n  const [state, dispatch] = useReducer(stateSlice.reducer, { expr: query.expr });\n  // Only rebuild visual query if expr changes from outside\n  useEffect(() => {\n    dispatch(exprChanged(query.expr));\n\n    if (prometheusMetricEncyclopedia) {\n      dispatch(\n        setMetricsModalSettings({\n          useBackend: query.useBackend ?? false,\n          disableTextWrap: query.disableTextWrap ?? false,\n          fullMetaSearch: query.fullMetaSearch ?? false,\n          includeNullMetadata: query.includeNullMetadata ?? true,\n        })\n      );\n    }\n  }, [query]);\n\n  useEffect(() => {\n    datasource.languageProvider.start(data?.timeRange);\n  }, [data?.timeRange, datasource.languageProvider]);\n\n  const onVisQueryChange = (visQuery: PromVisualQuery) => {\n    const expr = promQueryModeller.renderQuery(visQuery);\n    dispatch(visualQueryChange({ visQuery, expr }));\n\n    if (prometheusMetricEncyclopedia) {\n      const metricsModalSettings = getSettings(visQuery);\n      onChange({ ...props.query, expr: expr, ...metricsModalSettings });\n    } else {\n      onChange({ ...props.query, expr: expr });\n    }\n  };\n\n  if (!state.visQuery) {\n    return null;\n  }\n\n  return (\n    <>\n      <PromQueryBuilder\n        query={state.visQuery}\n        datasource={datasource}\n        onChange={onVisQueryChange}\n        onRunQuery={onRunQuery}\n        data={data}\n        showExplain={showExplain}\n      />\n      {<QueryPreview query={query.expr} />}\n    </>\n  );\n}\n\nconst initialState: State = {\n  expr: '',\n};\n\nconst stateSlice = createSlice({\n  name: 'prom-builder-container',\n  initialState,\n  reducers: {\n    visualQueryChange: (state, action: PayloadAction<{ visQuery: PromVisualQuery; expr: string }>) => {\n      state.expr = action.payload.expr;\n      state.visQuery = action.payload.visQuery;\n    },\n    exprChanged: (state, action: PayloadAction<string>) => {\n      if (!state.visQuery || state.expr !== action.payload) {\n        state.expr = action.payload;\n        const parseResult = buildVisualQueryFromString(action.payload ?? '');\n\n        state.visQuery = parseResult.query;\n      }\n    },\n    setMetricsModalSettings: (state, action: PayloadAction<MetricsModalSettings>) => {\n      if (state.visQuery && prometheusMetricEncyclopedia) {\n        state.visQuery.useBackend = action.payload.useBackend;\n        state.visQuery.disableTextWrap = action.payload.disableTextWrap;\n        state.visQuery.fullMetaSearch = action.payload.fullMetaSearch;\n        state.visQuery.includeNullMetadata = action.payload.includeNullMetadata;\n      }\n    },\n  },\n});\n\nconst { visualQueryChange, exprChanged, setMetricsModalSettings } = stateSlice.actions;\n"],"names":[],"mappings":"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"}