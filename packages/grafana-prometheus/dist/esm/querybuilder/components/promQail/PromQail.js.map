{"version":3,"file":"PromQail.js","sources":["../../../../../src/querybuilder/components/promQail/PromQail.tsx"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/promQail/PromQail.tsx\nimport { css, cx } from '@emotion/css';\nimport { PayloadAction, createSlice } from '@reduxjs/toolkit';\nimport React, { useEffect, useReducer, useRef, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Alert, Button, Checkbox, Input, Spinner, useTheme2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../../datasource';\nimport store from '../../../gcopypaste/app/core/store';\nimport { PromVisualQuery } from '../../types';\n\nimport { QuerySuggestionContainer } from './QuerySuggestionContainer';\n// @ts-ignore until we can get these added for icons\nimport AI_Logo_color from './resources/AI_Logo_color.svg';\nimport { promQailExplain, promQailSuggest } from './state/helpers';\nimport { createInteraction, initialState } from './state/state';\nimport { Interaction, SuggestionType } from './types';\n\nexport type PromQailProps = {\n  query: PromVisualQuery;\n  closeDrawer: () => void;\n  onChange: (query: PromVisualQuery) => void;\n  datasource: PrometheusDatasource;\n};\n\nconst SKIP_STARTING_MESSAGE = 'SKIP_STARTING_MESSAGE';\n\nexport const PromQail = (props: PromQailProps) => {\n  const { query, closeDrawer, onChange, datasource } = props;\n  const skipStartingMessage = store.getBool(SKIP_STARTING_MESSAGE, false);\n\n  const [state, dispatch] = useReducer(stateSlice.reducer, initialState(query, !skipStartingMessage));\n\n  const [labelNames, setLabelNames] = useState<string[]>([]);\n\n  const suggestions = state.interactions.reduce((acc, int) => acc + int.suggestions.length, 0);\n\n  const responsesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    if (responsesEndRef) {\n      // @ts-ignore for React.MutableRefObject\n      responsesEndRef?.current?.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  useEffect(() => {\n    // only scroll when an interaction has been added or the suggestions have been updated\n    scrollToBottom();\n  }, [state.interactions.length, suggestions]);\n\n  useEffect(() => {\n    const fetchLabels = async () => {\n      let labelsIndex: Record<string, string[]> = await datasource.languageProvider.fetchLabelsWithMatch(query.metric);\n      setLabelNames(Object.keys(labelsIndex));\n    };\n    fetchLabels();\n  }, [query, datasource]);\n\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  return (\n    <div className={styles.containerPadding}>\n      {/* Query Advisor */}\n      {/* header */}\n      <div className={styles.header}>\n        <h3>Query advisor</h3>\n        <Button icon=\"times\" fill=\"text\" variant=\"secondary\" onClick={closeDrawer} />\n      </div>\n      {/* Starting message */}\n      <div>\n        <div className={styles.iconSection}>\n          <img src={AI_Logo_color} alt=\"AI logo color\" /> Assistant\n        </div>\n        {state.showStartingMessage ? (\n          <>\n            <div className={styles.dataList}>\n              <ol>\n                <li className={styles.textPadding}>\n                  Query Advisor suggests queries based on a metric and requests you type in.\n                </li>\n                <li className={styles.textPadding}>\n                  Query Advisor sends Prometheus metrics, labels and metadata to the LLM provider you&#39;ve configured.\n                  Be sure to align its usage with your company&#39;s internal policies.\n                </li>\n                <li className={styles.textPadding}>\n                  An AI-suggested query may not fully answer your question. Always take a moment to understand a query\n                  before you use it.\n                </li>\n              </ol>\n            </div>\n            <Alert\n              title={''}\n              severity={'info'}\n              key={'promqail-llm-app'}\n              className={cx(styles.textPadding, styles.noMargin)}\n            >\n              Query Advisor is currently in Private Preview. Feedback is appreciated and can be provided on explanations\n              and suggestions.\n            </Alert>\n\n            {/* don't show this message again, store in localstorage */}\n            <div className={styles.textPadding}>\n              <Checkbox\n                checked={state.indicateCheckbox}\n                value={state.indicateCheckbox}\n                onChange={() => {\n                  const val = store.getBool(SKIP_STARTING_MESSAGE, false);\n                  store.set(SKIP_STARTING_MESSAGE, !val);\n                  dispatch(indicateCheckbox(!val));\n                }}\n                label=\"Don't show this message again\"\n              />\n            </div>\n            <div className={styles.rightButtonsWrapper}>\n              <div className={styles.rightButtons}>\n                <Button className={styles.leftButton} fill=\"outline\" variant=\"secondary\" onClick={closeDrawer}>\n                  Cancel\n                </Button>\n                <Button\n                  fill=\"solid\"\n                  variant=\"primary\"\n                  onClick={() => dispatch(showStartingMessage(false))}\n                  data-testid={queryAssistanttestIds.securityInfoButton}\n                >\n                  Continue\n                </Button>\n              </div>\n            </div>\n          </>\n        ) : (\n          <div className={styles.bodySmall}>\n            {/* MAKE THIS TABLE RESPONSIVE */}\n            {/* FIT SUPER LONG METRICS AND LABELS IN HERE */}\n            <div className={styles.textPadding}>Here is the metric you have selected:</div>\n            <div className={styles.infoContainerWrapper}>\n              <div className={styles.infoContainer}>\n                <table className={styles.metricTable}>\n                  <tbody>\n                    <tr>\n                      <td className={styles.metricTableName}>metric</td>\n                      <td className={styles.metricTableValue}>{state.query.metric}</td>\n                      <td>\n                        <Button\n                          fill=\"outline\"\n                          variant=\"secondary\"\n                          onClick={closeDrawer}\n                          className={styles.metricTableButton}\n                          size={'sm'}\n                        >\n                          Choose new metric\n                        </Button>\n                      </td>\n                    </tr>\n                    {state.query.labels.map((label, idx) => {\n                      const text = idx === 0 ? 'labels' : '';\n                      return (\n                        <tr key={`${label.label}-${idx}`}>\n                          <td>{text}</td>\n                          <td className={styles.metricTableValue}>{`${label.label}${label.op}${label.value}`}</td>\n                          <td> </td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n\n            {/* Ask if you know what you want to query? */}\n            {!state.askForQueryHelp && state.interactions.length === 0 && (\n              <>\n                <div className={styles.queryQuestion}>Do you know what you want to query?</div>\n                <div className={styles.rightButtonsWrapper}>\n                  <div className={styles.rightButtons}>\n                    <Button\n                      className={styles.leftButton}\n                      fill=\"solid\"\n                      variant=\"secondary\"\n                      data-testid={queryAssistanttestIds.clickForHistorical}\n                      onClick={() => {\n                        const isLoading = true;\n                        const suggestionType = SuggestionType.Historical;\n                        dispatch(addInteraction({ suggestionType, isLoading }));\n                        reportInteraction('grafana_prometheus_promqail_know_what_you_want_to_query', {\n                          promVisualQuery: query,\n                          doYouKnow: 'no',\n                        });\n                        promQailSuggest(dispatch, 0, query, labelNames, datasource);\n                      }}\n                    >\n                      No\n                    </Button>\n                    <Button\n                      fill=\"solid\"\n                      variant=\"primary\"\n                      data-testid={queryAssistanttestIds.clickForAi}\n                      onClick={() => {\n                        reportInteraction('grafana_prometheus_promqail_know_what_you_want_to_query', {\n                          promVisualQuery: query,\n                          doYouKnow: 'yes',\n                        });\n                        const isLoading = false;\n                        const suggestionType = SuggestionType.AI;\n                        dispatch(addInteraction({ suggestionType, isLoading }));\n                      }}\n                    >\n                      Yes\n                    </Button>\n                  </div>\n                </div>\n              </>\n            )}\n\n            {state.interactions.map((interaction: Interaction, idx: number) => {\n              return (\n                <div key={idx}>\n                  {interaction.suggestionType === SuggestionType.AI ? (\n                    <>\n                      <div className={styles.textPadding}>What kind of data do you want to see with your metric?</div>\n                      <div className={cx(styles.secondaryText, styles.bottomMargin)}>\n                        <div>You do not need to enter in a metric or a label again in the prompt.</div>\n                        <div>Example: I want to monitor request latency, not errors.</div>\n                      </div>\n                      <div className={styles.inputPadding}>\n                        <Input\n                          value={interaction.prompt}\n                          spellCheck={false}\n                          placeholder=\"Enter prompt\"\n                          disabled={interaction.suggestions.length > 0}\n                          onChange={(e) => {\n                            const prompt = e.currentTarget.value;\n\n                            const payload = {\n                              idx: idx,\n                              interaction: { ...interaction, prompt },\n                            };\n\n                            dispatch(updateInteraction(payload));\n                          }}\n                        />\n                      </div>\n                      {interaction.suggestions.length === 0 ? (\n                        interaction.isLoading ? (\n                          <>\n                            <div className={styles.loadingMessageContainer}>\n                              Waiting for OpenAI <Spinner className={styles.floatRight} />\n                            </div>\n                          </>\n                        ) : (\n                          <>\n                            <div className={styles.rightButtonsWrapper}>\n                              <div className={styles.rightButtons}>\n                                <Button\n                                  className={styles.leftButton}\n                                  fill=\"outline\"\n                                  variant=\"secondary\"\n                                  onClick={closeDrawer}\n                                >\n                                  Cancel\n                                </Button>\n                                <Button\n                                  className={styles.leftButton}\n                                  fill=\"outline\"\n                                  variant=\"secondary\"\n                                  onClick={() => {\n                                    // JUST SUGGEST QUERIES AND SHOW THE LIST\n                                    const newInteraction: Interaction = {\n                                      ...interaction,\n                                      suggestionType: SuggestionType.Historical,\n                                      isLoading: true,\n                                    };\n\n                                    const payload = {\n                                      idx: idx,\n                                      interaction: newInteraction,\n                                    };\n\n                                    reportInteraction('grafana_prometheus_promqail_suggest_query_instead', {\n                                      promVisualQuery: query,\n                                    });\n\n                                    dispatch(updateInteraction(payload));\n                                    promQailSuggest(dispatch, idx, query, labelNames, datasource, newInteraction);\n                                  }}\n                                >\n                                  Suggest queries instead\n                                </Button>\n                                <Button\n                                  fill=\"solid\"\n                                  variant=\"primary\"\n                                  data-testid={queryAssistanttestIds.submitPrompt + idx}\n                                  onClick={() => {\n                                    const newInteraction: Interaction = {\n                                      ...interaction,\n                                      isLoading: true,\n                                    };\n\n                                    const payload = {\n                                      idx: idx,\n                                      interaction: newInteraction,\n                                    };\n\n                                    reportInteraction('grafana_prometheus_promqail_prompt_submitted', {\n                                      promVisualQuery: query,\n                                      prompt: interaction.prompt,\n                                    });\n\n                                    dispatch(updateInteraction(payload));\n                                    // add the suggestions in the API call\n                                    promQailSuggest(dispatch, idx, query, labelNames, datasource, interaction);\n                                  }}\n                                >\n                                  Submit\n                                </Button>\n                              </div>\n                            </div>\n                          </>\n                        )\n                      ) : (\n                        // LIST OF SUGGESTED QUERIES FROM AI\n                        <QuerySuggestionContainer\n                          suggestionType={SuggestionType.AI}\n                          querySuggestions={interaction.suggestions}\n                          closeDrawer={closeDrawer}\n                          nextInteraction={() => {\n                            const isLoading = false;\n                            const suggestionType = SuggestionType.AI;\n                            dispatch(addInteraction({ suggestionType, isLoading }));\n                          }}\n                          queryExplain={(suggIdx: number) =>\n                            interaction.suggestions[suggIdx].explanation === ''\n                              ? promQailExplain(dispatch, idx, query, interaction, suggIdx, datasource)\n                              : interaction.suggestions[suggIdx].explanation\n                          }\n                          onChange={onChange}\n                          prompt={interaction.prompt ?? ''}\n                        />\n                      )}\n                    </>\n                  ) : // HISTORICAL SUGGESTIONS\n                  interaction.isLoading ? (\n                    <>\n                      <div className={styles.loadingMessageContainer}>\n                        Waiting for OpenAI <Spinner className={styles.floatRight} />\n                      </div>\n                    </>\n                  ) : (\n                    // LIST OF SUGGESTED QUERIES FROM HISTORICAL DATA\n                    <QuerySuggestionContainer\n                      suggestionType={SuggestionType.Historical}\n                      querySuggestions={interaction.suggestions}\n                      closeDrawer={closeDrawer}\n                      nextInteraction={() => {\n                        const isLoading = false;\n                        const suggestionType = SuggestionType.AI;\n                        dispatch(addInteraction({ suggestionType, isLoading }));\n                      }}\n                      queryExplain={(suggIdx: number) =>\n                        interaction.suggestions[suggIdx].explanation === ''\n                          ? promQailExplain(dispatch, idx, query, interaction, suggIdx, datasource)\n                          : interaction.suggestions[suggIdx].explanation\n                      }\n                      onChange={onChange}\n                      prompt={interaction.prompt ?? ''}\n                    />\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n      <div ref={responsesEndRef} />\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    sectionPadding: css({\n      padding: '20px',\n    }),\n    header: css({\n      display: 'flex',\n\n      button: {\n        marginLeft: 'auto',\n      },\n    }),\n    iconSection: css({\n      padding: '0 0 10px 0',\n      color: `${theme.colors.text.secondary}`,\n\n      img: {\n        paddingRight: '4px',\n      },\n    }),\n    rightButtonsWrapper: css({\n      display: 'flex',\n    }),\n    rightButtons: css({\n      marginLeft: 'auto',\n    }),\n    leftButton: css({\n      marginRight: '10px',\n    }),\n    dataList: css({\n      padding: '0px 28px 0px 28px',\n    }),\n    textPadding: css({\n      paddingBottom: '12px',\n    }),\n    containerPadding: css({\n      padding: '28px',\n    }),\n    infoContainer: css({\n      border: `${theme.colors.border.strong}`,\n      padding: '16px',\n      backgroundColor: `${theme.colors.background.secondary}`,\n      borderRadius: `8px`,\n      borderBottomLeftRadius: 0,\n    }),\n    infoContainerWrapper: css({\n      paddingBottom: '24px',\n    }),\n    metricTable: css({\n      width: '100%',\n    }),\n    metricTableName: css({\n      width: '15%',\n    }),\n    metricTableValue: css({\n      fontFamily: `${theme.typography.fontFamilyMonospace}`,\n      fontSize: `${theme.typography.bodySmall.fontSize}`,\n      overflow: 'scroll',\n      textWrap: 'nowrap',\n      maxWidth: '150px',\n      width: '60%',\n      maskImage: `linear-gradient(to right, rgba(0, 0, 0, 1) 90%, rgba(0, 0, 0, 0))`,\n    }),\n    metricTableButton: css({\n      float: 'right',\n    }),\n    queryQuestion: css({\n      textAlign: 'end',\n      padding: '8px 0',\n    }),\n    secondaryText: css({\n      color: `${theme.colors.text.secondary}`,\n    }),\n    loadingMessageContainer: css({\n      border: `${theme.colors.border.strong}`,\n      padding: `16px`,\n      backgroundColor: `${theme.colors.background.secondary}`,\n      marginBottom: `20px`,\n      borderRadius: `8px`,\n      color: `${theme.colors.text.secondary}`,\n      fontStyle: 'italic',\n    }),\n    floatRight: css({\n      float: 'right',\n    }),\n    codeText: css({\n      fontFamily: `${theme.typography.fontFamilyMonospace}`,\n      fontSize: `${theme.typography.bodySmall.fontSize}`,\n    }),\n    bodySmall: css({\n      fontSize: `${theme.typography.bodySmall.fontSize}`,\n    }),\n    explainPadding: css({\n      paddingLeft: '26px',\n    }),\n    bottomMargin: css({\n      marginBottom: '20px',\n    }),\n    topPadding: css({\n      paddingTop: '22px',\n    }),\n    doc: css({\n      textDecoration: 'underline',\n    }),\n    afterButtons: css({\n      display: 'flex',\n      justifyContent: 'flex-end',\n    }),\n    feedbackStyle: css({\n      margin: 0,\n      textAlign: 'right',\n      paddingTop: '22px',\n      paddingBottom: '22px',\n    }),\n    nextInteractionHeight: css({\n      height: '88px',\n    }),\n    center: css({\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    }),\n    inputPadding: css({\n      paddingBottom: '24px',\n    }),\n    querySuggestion: css({\n      display: 'flex',\n      flexWrap: 'nowrap',\n    }),\n    longCode: css({\n      width: '90%',\n      textWrap: 'nowrap',\n      overflow: 'scroll',\n      maskImage: `linear-gradient(to right, rgba(0, 0, 0, 1) 90%, rgba(0, 0, 0, 0))`,\n\n      div: {\n        display: 'inline-block',\n      },\n    }),\n    useButton: css({\n      marginLeft: 'auto',\n    }),\n    suggestionFeedback: css({\n      textAlign: 'left',\n    }),\n    feedbackQuestion: css({\n      display: 'flex',\n      padding: '8px 0px',\n      h6: { marginBottom: 0 },\n      i: {\n        marginTop: '1px',\n      },\n    }),\n    explationTextInput: css({\n      paddingLeft: '24px',\n    }),\n    submitFeedback: css({\n      padding: '16px 0',\n    }),\n    noMargin: css({\n      margin: 0,\n    }),\n    enableButtonTooltip: css({\n      padding: 8,\n    }),\n    enableButtonTooltipText: css({\n      color: `${theme.colors.text.secondary}`,\n      ul: {\n        marginLeft: 16,\n      },\n    }),\n    link: css({\n      color: `${theme.colors.text.link} !important`,\n    }),\n  };\n};\n\nexport const queryAssistanttestIds = {\n  promQail: 'prom-qail',\n  securityInfoButton: 'security-info-button',\n  clickForHistorical: 'click-for-historical',\n  clickForAi: 'click-for-ai',\n  submitPrompt: 'submit-prompt',\n  refinePrompt: 'refine-prompt',\n};\n\nconst stateSlice = createSlice({\n  name: 'metrics-modal-state',\n  initialState: initialState(),\n  reducers: {\n    showExplainer: (state, action: PayloadAction<boolean>) => {\n      state.showExplainer = action.payload;\n    },\n    showStartingMessage: (state, action: PayloadAction<boolean>) => {\n      state.showStartingMessage = action.payload;\n    },\n    indicateCheckbox: (state, action: PayloadAction<boolean>) => {\n      state.indicateCheckbox = action.payload;\n    },\n    askForQueryHelp: (state, action: PayloadAction<boolean>) => {\n      state.askForQueryHelp = action.payload;\n    },\n    /*\n     * start working on a collection of interactions\n     * {\n     *  askForhelp y n\n     *  prompt question\n     *  queries querySuggestions\n     * }\n     *\n     */\n    addInteraction: (state, action: PayloadAction<{ suggestionType: SuggestionType; isLoading: boolean }>) => {\n      // AI or Historical?\n      const interaction = createInteraction(action.payload.suggestionType, action.payload.isLoading);\n      const interactions = state.interactions;\n      state.interactions = interactions.concat([interaction]);\n    },\n    updateInteraction: (state, action: PayloadAction<{ idx: number; interaction: Interaction }>) => {\n      // update the interaction by index\n      // will most likely be the last interaction but we might update previous by giving them cues of helpful or not\n      const index = action.payload.idx;\n      const updInteraction = action.payload.interaction;\n\n      state.interactions = state.interactions.map((interaction: Interaction, idx: number) => {\n        if (idx === index) {\n          return updInteraction;\n        }\n\n        return interaction;\n      });\n    },\n  },\n});\n\n// actions to update the state\nexport const { showStartingMessage, indicateCheckbox, addInteraction, updateInteraction } = stateSlice.actions;\n"],"names":[],"mappings":"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"}