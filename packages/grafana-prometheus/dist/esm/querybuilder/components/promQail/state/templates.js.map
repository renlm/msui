{"version":3,"file":"templates.js","sources":["../../../../../../src/querybuilder/components/promQail/state/templates.ts"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/promQail/state/templates.ts\nimport { QuerySuggestion } from '../types';\n\ninterface TemplateData {\n  template: string;\n  description: string;\n}\n\nexport const generalTemplates: TemplateData[] = [\n  {\n    template: 'metric_a{}',\n    description: 'Get the data for \"metric_a\"',\n  },\n  {\n    template: 'avg by(c) (metric_a{})',\n    description: 'Average of all series in \"metric_a\" grouped by the label \"c\"',\n  },\n  {\n    template: 'count by(d) (metric_a{})',\n    description: 'Number of series in the metric \"metric_a\" grouped by the label \"d\"',\n  },\n  {\n    template: 'sum by(g) (sum_over_time(metric_a{}[1h]))',\n    description:\n      'For each series in the metric \"metric_a\", sum all values over 1 hour, then group those series by label \"g\" and sum.',\n  },\n  {\n    template: 'count(metric_a{})',\n    description: 'Count of series in the metric \"metric_a\"',\n  },\n  {\n    template: '(metric_a{})',\n    description: 'Get the data for \"metric_a\"',\n  },\n  {\n    template: 'count_over_time(metric_a{}[1h])',\n    description: 'Number of series of metric_a in a 1 hour interval',\n  },\n  {\n    template: 'changes(metric_a{}[1m])',\n    description: 'Number of times the values of each series in metric_a have changed in 1 minute periods',\n  },\n  {\n    template: 'count(count by(g) (metric_a{}))',\n    description: 'Total number of series in metric_a',\n  },\n  {\n    template: 'last_over_time(metric_a{}[1h])',\n    description: 'For each series in metric_a, get the last value in the 1 hour period.',\n  },\n  {\n    template: 'sum by(g) (count_over_time(metric_a{}[1h]))',\n    description: 'Grouped sum over the label \"g\" of the number of series of metric_a in a 1 hour period',\n  },\n  {\n    template: 'count(metric_a{} == 99)',\n    description: 'Number of series of metric_a that have value 99',\n  },\n  {\n    template: 'min(metric_a{})',\n    description: 'At each timestamp, find the minimum of all series of the metric \"metric_a\"',\n  },\n  {\n    template: 'metric_a{} != 99',\n    description: 'Series of metric_a which do not have the value 99',\n  },\n  {\n    template: 'metric_a{} - 99',\n    description: 'metric_a minus 99',\n  },\n  {\n    template: 'quantile_over_time(0.99,metric_a{}[1h])',\n    description: 'The 99th quantile of values of metric_a in 1 hour',\n  },\n  {\n    template: 'count_values(\"aaaa\",metric_a{})',\n    description: 'Count number of label values for a label named \"aaaa\"',\n  },\n];\n\nexport const counterTemplates: TemplateData[] = [\n  {\n    template: 'sum by(d) (rate(metric_a{}[1h]))',\n    description:\n      'Sum of the rate of increase or decrease of the metric \"metric_a\" per 1 hour period, grouped by the label \"d\"',\n  },\n  {\n    template: 'rate(metric_a{}[1m])',\n    description: 'Rate of change of the metric \"metric_a\" over 1 minute',\n  },\n  {\n    template: 'sum by(a) (increase(metric_a{}[5m]))',\n    description:\n      'Taking the metric \"metric_a\" find the increase in 5 minute periods of each series and aggregate sum over the label \"a\"',\n  },\n  {\n    template: 'sum(rate(metric_a{}[1m]))',\n    description: 'Total rate of change of all series of metric \"metric_a\" in 1 minute intervals',\n  },\n  {\n    template: 'sum(increase(metric_a{}[10m]))',\n    description: 'Total increase for each series of metric \"metric_a\" in 10 minute intervals',\n  },\n  {\n    template: 'increase(metric_a{}[1h])',\n    description: 'Increase in all series of \"metric_a\" in 1 hour period',\n  },\n  {\n    template: 'sum by(d) (irate(metric_a{}[1h]))',\n    description: 'Sum of detailed rate of change of the metric \"metric_a\" over 1 hour grouped by label \"d\"',\n  },\n  {\n    template: 'irate(metric_a{}[1h])',\n    description: 'Detailed rate of change of the metric \"metric_a\" over 1 hour',\n  },\n  {\n    template: 'avg by(d) (rate(metric_a{}[1h]))',\n    description:\n      'Taking the rate of change of the metric \"metric_a\" in a 1 hour period, group by the label \"d\" and find the average of each group',\n  },\n  {\n    template: 'topk(5,sum by(g) (rate(metric_a{}[1h])))',\n    description: 'Top 5 of the summed groups \"g\" of the rate of change of metric_a',\n  },\n  {\n    template: 'sum(rate(metric_a{}[1h])) / sum(rate(metric_a{}[1h]))',\n    description: 'Relative sums of metric_a with different labels',\n  },\n  {\n    template: 'histogram_quantile(99,rate(metric_a{}[1h]))',\n    description: '99th percentile of the rate of change of metric_a in 1 hour periods',\n  },\n  {\n    template: 'avg(rate(metric_a{}[1m]))',\n    description: 'Average of the rate of all series of metric_a in 1 minute periods',\n  },\n  {\n    template: 'rate(metric_a{}[5m]) > 99',\n    description: 'Show series of metric_a only if their rate over 5 minutes is greater than 99',\n  },\n  {\n    template: 'count by(g) (rate(metric_a{}[1h]))',\n    description: 'Count of series of metric_a over all labels \"g\"',\n  },\n];\n\nexport const histogramTemplates: TemplateData[] = [\n  {\n    template: 'histogram_quantile(99,sum by(le) (rate(metric_a{}[1h])))',\n    description:\n      'Calculate the rate at which the metric \"metric_a\" is increasing or decreasing, summed over each bucket label \"le\", and then calculates the 99th percentile of those rates.',\n  },\n  {\n    template: 'histogram_quantile(99,sum by(g) (metric_a{}))',\n    description: '99th percentile of the sum of metric_a grouped by label \"g\"',\n  },\n  {\n    template: 'histogram_quantile(99,sum by(g) (irate(metric_a{}[1h])))',\n    description: '99th percentile of the grouped by \"g\" sum of the rate of each series in metric_a in an hour',\n  },\n  {\n    template: 'histogram_quantile(99,metric_a{})',\n    description: '99th percentile of metric_a',\n  },\n];\n\nexport const gaugeTemplates: TemplateData[] = [\n  {\n    template: 'sum by(c) (metric_a{})',\n    description: 'Sum the metric \"metric_a\" by each value in label \"c\"',\n  },\n  {\n    template: 'sum(metric_a{})',\n    description: 'Total sum of all the series of the metric named \"metric_a\"',\n  },\n  {\n    template: 'max by(dd) (metric_a{})',\n    description: 'Grouping the series the metric \"metric_a\" by the label \"dd\", get the maximum value of each group',\n  },\n  {\n    template: 'max(metric_a{})',\n    description: 'Maximum value of all series of the metric \"metric_a\" ',\n  },\n  {\n    template: 'avg(metric_a{})',\n    description: 'Average value of all the series of metric \"metric_a\"',\n  },\n  {\n    template: 'metric_a{} > 99',\n    description: 'Show only the series of metric \"metric_a\" which currently have value greater than 99',\n  },\n  {\n    template: 'metric_a{} / 99',\n    description: 'Values for \"metric_a\" all divided by 99',\n  },\n  {\n    template: 'metric_a{} == 99',\n    description: 'Show series of metric_a that have value 99',\n  },\n  {\n    template: 'sum_over_time(metric_a{}[1h])',\n    description: 'Sum each series of metric_a over 1 hour',\n  },\n  {\n    template: 'avg_over_time(metric_a{}[1h])',\n    description: 'Average of each series of metric_a in a 1 hour period',\n  },\n  {\n    template: 'sum(sum_over_time(metric_a{}[1h]))',\n    description: 'Sum of all values in all series in a 1 hour period',\n  },\n  {\n    template: 'delta(metric_a{}[1m])',\n    description: 'Span or delta (maximum - minimum) of values of the metric \"metric_a\" in a 1 minute period. ',\n  },\n  {\n    template: 'avg by(g) (avg_over_time(metric_a{}[1h]))',\n    description:\n      'For 1 hour, take each series and find the average, then group by label \"g\" and find the average of each group',\n  },\n  {\n    template: 'max_over_time(metric_a{}[1h])',\n    description: 'Maximum values of each series in metric \"metric_a\" in a 1 hour period',\n  },\n  {\n    template: 'metric_a{} * 99',\n    description: 'Values of metric_a multiplied by 99',\n  },\n  {\n    template: 'metric_a{} < 99',\n    description: 'Series of metric_a that have values less than 99',\n  },\n  {\n    template: 'max by() (max_over_time(metric_a{}[1h]))',\n    description: 'Find maximum value of all series in 1 hour periods',\n  },\n  {\n    template: 'topk(99,metric_a{})',\n    description: 'First 5 series of metric_a that have the highest values',\n  },\n  {\n    template: 'min by(g) (metric_a{})',\n    description: 'Minimum values of the series of metric_a grouped by label \"g\"',\n  },\n  {\n    template: 'topk(10,sum by(g) (metric_a{}))',\n    description: \"Top 10 of the series of metric_a grouped and summed by the label 'g'\",\n  },\n  {\n    template: 'avg(avg_over_time(metric_a{}[1h]))',\n    description: 'Average of all values inside a 1 hour period',\n  },\n  {\n    template: 'quantile by(h) (0.95,metric_a{})',\n    description: 'Calculate 95th percentile of metric_a when aggregated by the label \"h\"',\n  },\n  {\n    template: 'avg by(g) (metric_a{} > 99)',\n    description:\n      'Taking all series of metric_a with value greater than 99, group by label \"g\" and find the average of each group',\n  },\n  {\n    template: 'sum(metric_a{}) / 99',\n    description: 'Sum of all series of metric_a divided by 99',\n  },\n  {\n    template: 'count(sum by(g) (metric_a{}))',\n    description: 'Number of series of metric_a grouped by the label \"g\"',\n  },\n  {\n    template: 'max(max_over_time(metric_a{}[1h]))',\n    description: 'Find the max value of all series of metric_a in a 1 hour period',\n  },\n];\n\nfunction processTemplate(templateData: TemplateData, metric: string, labels: string): QuerySuggestion {\n  return {\n    query: templateData.template.replace('metric_a', metric).replace('{}', labels),\n    explanation: templateData.description.replace('metric_a', metric),\n  };\n}\n\nexport function getTemplateSuggestions(metricName: string, metricType: string, labels: string): QuerySuggestion[] {\n  let templateSuggestions: QuerySuggestion[] = [];\n  switch (metricType) {\n    case 'counter':\n      templateSuggestions = templateSuggestions.concat(\n        counterTemplates\n          .map((t) => processTemplate(t, metricName, labels))\n          .sort(() => Math.random() - 0.5)\n          .slice(0, 2)\n      );\n      templateSuggestions = templateSuggestions.concat(\n        generalTemplates\n          .map((t) => processTemplate(t, metricName, labels))\n          .sort(() => Math.random() - 0.5)\n          .slice(0, 3)\n      );\n      break;\n    case 'gauge':\n      templateSuggestions = templateSuggestions.concat(\n        gaugeTemplates\n          .map((t) => processTemplate(t, metricName, labels))\n          .sort(() => Math.random() - 0.5)\n          .slice(0, 2)\n      );\n      templateSuggestions = templateSuggestions.concat(\n        generalTemplates\n          .map((t) => processTemplate(t, metricName, labels))\n          .sort(() => Math.random() - 0.5)\n          .slice(0, 3)\n      );\n      break;\n    case 'histogram':\n      templateSuggestions = templateSuggestions.concat(\n        histogramTemplates\n          .map((t) => processTemplate(t, metricName, labels))\n          .sort(() => Math.random() - 0.5)\n          .slice(0, 2)\n      );\n      templateSuggestions = templateSuggestions.concat(\n        generalTemplates\n          .map((t) => processTemplate(t, metricName, labels))\n          .sort(() => Math.random() - 0.5)\n          .slice(0, 3)\n      );\n      break;\n    default:\n      templateSuggestions = templateSuggestions.concat(\n        generalTemplates\n          .map((t) => processTemplate(t, metricName, labels))\n          .sort(() => Math.random() - 0.5)\n          .slice(0, 5)\n      );\n      break;\n  }\n  return templateSuggestions;\n}\n"],"names":[],"mappings":"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"}