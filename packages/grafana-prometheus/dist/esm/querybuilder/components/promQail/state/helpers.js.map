{"version":3,"file":"helpers.js","sources":["../../../../../../src/querybuilder/components/promQail/state/helpers.ts"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/promQail/state/helpers.ts\nimport { AnyAction } from 'redux';\n\nimport { llms } from '@grafana/experimental';\nimport { reportInteraction } from '@grafana/runtime';\n\nimport { PrometheusDatasource } from '../../../../datasource';\nimport { getMetadataHelp, getMetadataType } from '../../../../language_provider';\nimport { promQueryModeller } from '../../../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../../../parsing';\nimport { PromVisualQuery } from '../../../types';\nimport { updateInteraction } from '../PromQail';\nimport {\n  ExplainSystemPrompt,\n  GetExplainUserPrompt,\n  SuggestSystemPrompt,\n  GetSuggestUserPrompt,\n  SuggestUserPromptParams,\n} from '../prompts';\nimport { Interaction, QuerySuggestion, SuggestionType } from '../types';\n\nimport { createInteraction } from './state';\nimport { getTemplateSuggestions } from './templates';\n\nconst OPENAI_MODEL_NAME = 'gpt-3.5-turbo-1106';\nconst promQLTemplatesCollection = 'grafana.promql.templates';\n\ninterface TemplateSearchResult {\n  description: string | null;\n  metric_type: string | null;\n  promql: string | null;\n}\n\nexport function getExplainMessage(\n  query: string,\n  metric: string,\n  datasource: PrometheusDatasource\n): llms.openai.Message[] {\n  let metricMetadata = '';\n  let metricType = '';\n\n  const pvq = buildVisualQueryFromString(query);\n\n  if (datasource.languageProvider.metricsMetadata) {\n    metricType = getMetadataType(metric, datasource.languageProvider.metricsMetadata) ?? '';\n    metricMetadata = getMetadataHelp(metric, datasource.languageProvider.metricsMetadata) ?? '';\n  }\n\n  const documentationBody = pvq.query.operations\n    .map((op) => {\n      const def = promQueryModeller.getOperationDef(op.id);\n      if (!def) {\n        return '';\n      }\n      const title = def.renderer(op, def, '<expr>');\n      const body = def.explainHandler ? def.explainHandler(op, def) : def.documentation;\n\n      if (!body) {\n        return '';\n      }\n      return `### ${title}:\\n${body}`;\n    })\n    .filter((item) => item !== '')\n    .join('\\n');\n\n  return [\n    { role: 'system', content: ExplainSystemPrompt },\n    {\n      role: 'user',\n      content: GetExplainUserPrompt({\n        documentation: documentationBody,\n        metricName: metric,\n        metricType: metricType,\n        metricMetadata: metricMetadata,\n        query: query,\n      }),\n    },\n  ];\n}\n\nfunction getSuggestMessages({\n  promql,\n  question,\n  metricType,\n  labels,\n  templates,\n}: SuggestUserPromptParams): llms.openai.Message[] {\n  return [\n    { role: 'system', content: SuggestSystemPrompt },\n    { role: 'user', content: GetSuggestUserPrompt({ promql, question, metricType, labels, templates }) },\n  ];\n}\n\n/**\n * Calls the API and adds suggestions to the interaction\n *\n * @param dispatch\n * @param idx\n * @param interaction\n * @returns\n */\nexport async function promQailExplain(\n  dispatch: React.Dispatch<AnyAction>,\n  idx: number,\n  query: PromVisualQuery,\n  interaction: Interaction,\n  suggIdx: number,\n  datasource: PrometheusDatasource\n) {\n  const suggestedQuery = interaction.suggestions[suggIdx].query;\n\n  const promptMessages = getExplainMessage(suggestedQuery, query.metric, datasource);\n  const interactionToUpdate = interaction;\n\n  return llms.openai\n    .streamChatCompletions({\n      model: OPENAI_MODEL_NAME,\n      messages: promptMessages,\n      temperature: 0,\n    })\n    .pipe(llms.openai.accumulateContent())\n    .subscribe((response) => {\n      const updatedSuggestions = interactionToUpdate.suggestions.map((sg: QuerySuggestion, sidx: number) => {\n        if (suggIdx === sidx) {\n          return {\n            query: interactionToUpdate.suggestions[suggIdx].query,\n            explanation: response,\n          };\n        }\n\n        return sg;\n      });\n\n      const payload = {\n        idx,\n        interaction: {\n          ...interactionToUpdate,\n          suggestions: updatedSuggestions,\n          explanationIsLoading: false,\n        },\n      };\n      dispatch(updateInteraction(payload));\n    });\n}\n\n/**\n * Check if sublist is fully contained in the superlist\n *\n * @param sublist\n * @param superlist\n * @returns true if fully contained, else false\n */\nfunction isContainedIn(sublist: string[], superlist: string[]): boolean {\n  for (const item of sublist) {\n    if (!superlist.includes(item)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Guess the type of a metric, based on its name and its relation to other metrics available\n *\n * @param metric     - name of metric whose type to guess\n * @param allMetrics - list of all available metrics\n * @returns          - the guess of the type (string): counter,gauge,summary,histogram,'histogram,summary'\n */\nexport function guessMetricType(metric: string, allMetrics: string[]): string {\n  const synthetic_metrics = new Set<string>([\n    'up',\n    'scrape_duration_seconds',\n    'scrape_samples_post_metric_relabeling',\n    'scrape_series_added',\n    'scrape_samples_scraped',\n    'ALERTS',\n    'ALERTS_FOR_STATE',\n  ]);\n\n  if (synthetic_metrics.has(metric)) {\n    // these are all known to be counters\n    return 'counter';\n  }\n  if (metric.startsWith(':')) {\n    // probably recording rule\n    return 'gauge';\n  }\n  if (metric.endsWith('_info')) {\n    // typically series of 1s only, the labels are the useful part. TODO: add 'info' type\n    return 'counter';\n  }\n\n  if (metric.endsWith('_created') || metric.endsWith('_total')) {\n    // prometheus naming style recommends counters to have these suffixes.\n    return 'counter';\n  }\n\n  const underscoreIndex = metric.lastIndexOf('_');\n  if (underscoreIndex < 0) {\n    // No underscores in the name at all, very little info to go on. Guess\n    return 'gauge';\n  }\n\n  // See if the suffix is histogram-y or summary-y\n  const [root, suffix] = [metric.slice(0, underscoreIndex), metric.slice(underscoreIndex + 1)];\n\n  if (['bucket', 'count', 'sum'].includes(suffix)) {\n    // Might be histogram + summary\n    let familyMetrics = [`${root}_bucket`, `${root}_count`, `${root}_sum`, root];\n    if (isContainedIn(familyMetrics, allMetrics)) {\n      return 'histogram,summary';\n    }\n\n    // Might be a histogram, if so all these metrics should exist too:\n    familyMetrics = [`${root}_bucket`, `${root}_count`, `${root}_sum`];\n    if (isContainedIn(familyMetrics, allMetrics)) {\n      return 'histogram';\n    }\n\n    // Or might be a summary\n    familyMetrics = [`${root}_sum`, `${root}_count`, root];\n    if (isContainedIn(familyMetrics, allMetrics)) {\n      return 'summary';\n    }\n\n    // Otherwise it's probably just a counter!\n    return 'counter';\n  }\n\n  // One case above doesn't catch: summary or histogram,summary where the non-suffixed metric is chosen\n  const familyMetrics = [`${metric}_sum`, `${metric}_count`, metric];\n  if (isContainedIn(familyMetrics, allMetrics)) {\n    if (allMetrics.includes(`${metric}_bucket`)) {\n      return 'histogram,summary';\n    } else {\n      return 'summary';\n    }\n  }\n\n  // All else fails, guess gauge\n  return 'gauge';\n}\n\n/**\n * Generate a suitable filter structure for the VectorDB call\n * @param types: list of metric types to include in the result\n * @returns the structure to pass to the vectorDB call.\n */\nfunction generateMetricTypeFilters(types: string[]) {\n  return types.map((type) => ({\n    metric_type: {\n      $eq: type,\n    },\n  }));\n}\n\n/**\n * Taking in a metric name, try to guess its corresponding metric _family_ name\n * @param metric name\n * @returns metric family name\n */\nfunction guessMetricFamily(metric: string): string {\n  if (metric.endsWith('_bucket') || metric.endsWith('_count') || metric.endsWith('_sum')) {\n    return metric.slice(0, metric.lastIndexOf('_'));\n  }\n  return metric;\n}\n\n/**\n * Check if the LLM plugin is enabled.\n * Used in the PromQueryBuilder to enable/disable the button based on openai and vector db checks\n * @returns true if the LLM plugin is enabled.\n */\nexport async function isLLMPluginEnabled(): Promise<boolean> {\n  // Check if the LLM plugin is enabled.\n  // If not, we won't be able to make requests, so return early.\n  const openaiEnabled = llms.openai.health().then((response) => response.ok);\n  const vectorEnabled = llms.vector.health().then((response) => response.ok);\n  // combine 2 promises\n  return Promise.all([openaiEnabled, vectorEnabled]).then((results) => {\n    return results.every((result) => result);\n  });\n}\n\n/**\n * Calls the API and adds suggestions to the interaction\n *\n * @param dispatch\n * @param idx\n * @param interaction\n * @returns\n */\nexport async function promQailSuggest(\n  dispatch: React.Dispatch<AnyAction>,\n  idx: number,\n  query: PromVisualQuery,\n  labelNames: string[],\n  datasource: PrometheusDatasource,\n  interaction?: Interaction\n) {\n  const interactionToUpdate = interaction ? interaction : createInteraction(SuggestionType.Historical);\n\n  // Decide metric type\n  let metricType = '';\n  // Makes sure we loaded the metadata for metrics. Usually this is done in the start() method of the\n  // provider but we only need the metadata here.\n  if (!datasource.languageProvider.metricsMetadata) {\n    await datasource.languageProvider.loadMetricsMetadata();\n  }\n  if (datasource.languageProvider.metricsMetadata) {\n    // `datasource.languageProvider.metricsMetadata` is a list of metric family names (with desired type)\n    // from the datasource metadata endoint, but unfortunately the expanded _sum, _count, _bucket raw\n    // metric names are also generated and populating this list (all of type counter). We want the metric\n    // family type, so need to guess the metric family name from the chosen metric name, and test if that\n    // metric family has a type specified.\n    const metricFamilyGuess = guessMetricFamily(query.metric);\n    metricType = getMetadataType(metricFamilyGuess, datasource.languageProvider.metricsMetadata) ?? '';\n  }\n  if (metricType === '') {\n    // fallback to heuristic guess\n    metricType = guessMetricType(query.metric, datasource.languageProvider.metrics);\n  }\n\n  if (interactionToUpdate.suggestionType === SuggestionType.Historical) {\n    return new Promise<void>((resolve) => {\n      return setTimeout(() => {\n        const suggestions = getTemplateSuggestions(\n          query.metric,\n          metricType,\n          promQueryModeller.renderLabels(query.labels)\n        );\n\n        const payload = {\n          idx,\n          interaction: { ...interactionToUpdate, suggestions: suggestions, isLoading: false },\n        };\n        dispatch(updateInteraction(payload));\n        resolve();\n      }, 1000);\n    });\n  } else {\n    type SuggestionBody = {\n      metric: string;\n      labels: string;\n      prompt?: string;\n    };\n\n    // get all available labels\n    const metricLabels = await datasource.languageProvider.fetchLabelsWithMatch(query.metric);\n\n    let feedTheAI: SuggestionBody = {\n      metric: query.metric,\n      // drop __name__ label because it's not useful\n      labels: Object.keys(metricLabels)\n        .filter((label) => label !== '__name__')\n        .join(','),\n    };\n\n    // @ts-ignore llms types issue\n    let results: Array<llms.vector.SearchResult<TemplateSearchResult>> = [];\n    if (interaction?.suggestionType === SuggestionType.AI) {\n      feedTheAI = { ...feedTheAI, prompt: interaction.prompt };\n\n      // @ts-ignore llms types issue\n      results = await llms.vector.search<TemplateSearchResult>({\n        query: interaction.prompt,\n        collection: promQLTemplatesCollection,\n        topK: 5,\n        filter: {\n          $or: generateMetricTypeFilters(metricType.split(',').concat(['*'])),\n        },\n      });\n      reportInteraction('grafana_prometheus_promqail_vector_results', {\n        metric: query.metric,\n        prompt: interaction.prompt,\n        results: results,\n      });\n      // TODO: handle errors from vector search\n    }\n\n    const resultsString = results\n      .map((r) => {\n        return `${r.payload.promql} | ${r.payload.description} (score=${(r.score * 100).toFixed(1)})`;\n      })\n      .join('\\n');\n\n    const promptMessages = getSuggestMessages({\n      promql: query.metric,\n      question: interaction ? interaction.prompt : '',\n      metricType: metricType,\n      labels: labelNames.join(', '),\n      templates: resultsString,\n    });\n\n    return llms.openai\n      .streamChatCompletions({\n        model: OPENAI_MODEL_NAME,\n        messages: promptMessages,\n        temperature: 0.5,\n      })\n      .pipe(llms.openai.accumulateContent())\n      .subscribe((response) => {\n        const payload = {\n          idx,\n          interaction: {\n            ...interactionToUpdate,\n            suggestions: [\n              {\n                query: response,\n                explanation: '',\n              },\n            ],\n            isLoading: false,\n          },\n        };\n        dispatch(updateInteraction(payload));\n      });\n  }\n}\n"],"names":["familyMetrics"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,MAAM,iBAAoB,GAAA,oBAAA,CAAA;AAC1B,MAAM,yBAA4B,GAAA,0BAAA,CAAA;AAQlB,SAAA,iBAAA,CACd,KACA,EAAA,MAAA,EACA,UACuB,EAAA;AArCzB,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAsCE,EAAA,IAAI,cAAiB,GAAA,EAAA,CAAA;AACrB,EAAA,IAAI,UAAa,GAAA,EAAA,CAAA;AAEjB,EAAM,MAAA,GAAA,GAAM,2BAA2B,KAAK,CAAA,CAAA;AAE5C,EAAI,IAAA,UAAA,CAAW,iBAAiB,eAAiB,EAAA;AAC/C,IAAA,UAAA,GAAA,CAAa,qBAAgB,MAAQ,EAAA,UAAA,CAAW,gBAAiB,CAAA,eAAe,MAAnE,IAAwE,GAAA,EAAA,GAAA,EAAA,CAAA;AACrF,IAAA,cAAA,GAAA,CAAiB,qBAAgB,MAAQ,EAAA,UAAA,CAAW,gBAAiB,CAAA,eAAe,MAAnE,IAAwE,GAAA,EAAA,GAAA,EAAA,CAAA;AAAA,GAC3F;AAEA,EAAA,MAAM,oBAAoB,GAAI,CAAA,KAAA,CAAM,UACjC,CAAA,GAAA,CAAI,CAAC,EAAO,KAAA;AACX,IAAA,MAAM,GAAM,GAAA,iBAAA,CAAkB,eAAgB,CAAA,EAAA,CAAG,EAAE,CAAA,CAAA;AACnD,IAAA,IAAI,CAAC,GAAK,EAAA;AACR,MAAO,OAAA,EAAA,CAAA;AAAA,KACT;AACA,IAAA,MAAM,KAAQ,GAAA,GAAA,CAAI,QAAS,CAAA,EAAA,EAAI,KAAK,QAAQ,CAAA,CAAA;AAC5C,IAAM,MAAA,IAAA,GAAO,IAAI,cAAiB,GAAA,GAAA,CAAI,eAAe,EAAI,EAAA,GAAG,IAAI,GAAI,CAAA,aAAA,CAAA;AAEpE,IAAA,IAAI,CAAC,IAAM,EAAA;AACT,MAAO,OAAA,EAAA,CAAA;AAAA,KACT;AACA,IAAA,OAAO,OAAO,KAAK,CAAA;AAAA,EAAM,IAAI,CAAA,CAAA,CAAA;AAAA,GAC9B,EACA,MAAO,CAAA,CAAC,SAAS,IAAS,KAAA,EAAE,CAC5B,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AAEZ,EAAO,OAAA;AAAA,IACL,EAAE,IAAA,EAAM,QAAU,EAAA,OAAA,EAAS,mBAAoB,EAAA;AAAA,IAC/C;AAAA,MACE,IAAM,EAAA,MAAA;AAAA,MACN,SAAS,oBAAqB,CAAA;AAAA,QAC5B,aAAe,EAAA,iBAAA;AAAA,QACf,UAAY,EAAA,MAAA;AAAA,QACZ,UAAA;AAAA,QACA,cAAA;AAAA,QACA,KAAA;AAAA,OACD,CAAA;AAAA,KACH;AAAA,GACF,CAAA;AACF,CAAA;AAEA,SAAS,kBAAmB,CAAA;AAAA,EAC1B,MAAA;AAAA,EACA,QAAA;AAAA,EACA,UAAA;AAAA,EACA,MAAA;AAAA,EACA,SAAA;AACF,CAAmD,EAAA;AACjD,EAAO,OAAA;AAAA,IACL,EAAE,IAAA,EAAM,QAAU,EAAA,OAAA,EAAS,mBAAoB,EAAA;AAAA,IAC/C,EAAE,IAAA,EAAM,MAAQ,EAAA,OAAA,EAAS,oBAAqB,CAAA,EAAE,MAAQ,EAAA,QAAA,EAAU,UAAY,EAAA,MAAA,EAAQ,SAAU,EAAC,CAAE,EAAA;AAAA,GACrG,CAAA;AACF,CAAA;AAUA,eAAsB,gBACpB,QACA,EAAA,GAAA,EACA,KACA,EAAA,WAAA,EACA,SACA,UACA,EAAA;AACA,EAAA,MAAM,cAAiB,GAAA,WAAA,CAAY,WAAY,CAAA,OAAO,CAAE,CAAA,KAAA,CAAA;AAExD,EAAA,MAAM,cAAiB,GAAA,iBAAA,CAAkB,cAAgB,EAAA,KAAA,CAAM,QAAQ,UAAU,CAAA,CAAA;AACjF,EAAA,MAAM,mBAAsB,GAAA,WAAA,CAAA;AAE5B,EAAO,OAAA,IAAA,CAAK,OACT,qBAAsB,CAAA;AAAA,IACrB,KAAO,EAAA,iBAAA;AAAA,IACP,QAAU,EAAA,cAAA;AAAA,IACV,WAAa,EAAA,CAAA;AAAA,GACd,CACA,CAAA,IAAA,CAAK,IAAK,CAAA,MAAA,CAAO,mBAAmB,CAAA,CACpC,SAAU,CAAA,CAAC,QAAa,KAAA;AACvB,IAAA,MAAM,qBAAqB,mBAAoB,CAAA,WAAA,CAAY,GAAI,CAAA,CAAC,IAAqB,IAAiB,KAAA;AACpG,MAAA,IAAI,YAAY,IAAM,EAAA;AACpB,QAAO,OAAA;AAAA,UACL,KAAO,EAAA,mBAAA,CAAoB,WAAY,CAAA,OAAO,CAAE,CAAA,KAAA;AAAA,UAChD,WAAa,EAAA,QAAA;AAAA,SACf,CAAA;AAAA,OACF;AAEA,MAAO,OAAA,EAAA,CAAA;AAAA,KACR,CAAA,CAAA;AAED,IAAA,MAAM,OAAU,GAAA;AAAA,MACd,GAAA;AAAA,MACA,WAAA,EAAa,iCACR,mBADQ,CAAA,EAAA;AAAA,QAEX,WAAa,EAAA,kBAAA;AAAA,QACb,oBAAsB,EAAA,KAAA;AAAA,OACxB,CAAA;AAAA,KACF,CAAA;AACA,IAAS,QAAA,CAAA,iBAAA,CAAkB,OAAO,CAAC,CAAA,CAAA;AAAA,GACpC,CAAA,CAAA;AACL,CAAA;AASA,SAAS,aAAA,CAAc,SAAmB,SAA8B,EAAA;AACtE,EAAA,KAAA,MAAW,QAAQ,OAAS,EAAA;AAC1B,IAAA,IAAI,CAAC,SAAA,CAAU,QAAS,CAAA,IAAI,CAAG,EAAA;AAC7B,MAAO,OAAA,KAAA,CAAA;AAAA,KACT;AAAA,GACF;AACA,EAAO,OAAA,IAAA,CAAA;AACT,CAAA;AASgB,SAAA,eAAA,CAAgB,QAAgB,UAA8B,EAAA;AAC5E,EAAM,MAAA,iBAAA,uBAAwB,GAAY,CAAA;AAAA,IACxC,IAAA;AAAA,IACA,yBAAA;AAAA,IACA,uCAAA;AAAA,IACA,qBAAA;AAAA,IACA,wBAAA;AAAA,IACA,QAAA;AAAA,IACA,kBAAA;AAAA,GACD,CAAA,CAAA;AAED,EAAI,IAAA,iBAAA,CAAkB,GAAI,CAAA,MAAM,CAAG,EAAA;AAEjC,IAAO,OAAA,SAAA,CAAA;AAAA,GACT;AACA,EAAI,IAAA,MAAA,CAAO,UAAW,CAAA,GAAG,CAAG,EAAA;AAE1B,IAAO,OAAA,OAAA,CAAA;AAAA,GACT;AACA,EAAI,IAAA,MAAA,CAAO,QAAS,CAAA,OAAO,CAAG,EAAA;AAE5B,IAAO,OAAA,SAAA,CAAA;AAAA,GACT;AAEA,EAAA,IAAI,OAAO,QAAS,CAAA,UAAU,KAAK,MAAO,CAAA,QAAA,CAAS,QAAQ,CAAG,EAAA;AAE5D,IAAO,OAAA,SAAA,CAAA;AAAA,GACT;AAEA,EAAM,MAAA,eAAA,GAAkB,MAAO,CAAA,WAAA,CAAY,GAAG,CAAA,CAAA;AAC9C,EAAA,IAAI,kBAAkB,CAAG,EAAA;AAEvB,IAAO,OAAA,OAAA,CAAA;AAAA,GACT;AAGA,EAAA,MAAM,CAAC,IAAA,EAAM,MAAM,CAAA,GAAI,CAAC,MAAO,CAAA,KAAA,CAAM,CAAG,EAAA,eAAe,CAAG,EAAA,MAAA,CAAO,KAAM,CAAA,eAAA,GAAkB,CAAC,CAAC,CAAA,CAAA;AAE3F,EAAA,IAAI,CAAC,QAAU,EAAA,OAAA,EAAS,KAAK,CAAE,CAAA,QAAA,CAAS,MAAM,CAAG,EAAA;AAE/C,IAAIA,IAAAA,cAAAA,GAAgB,CAAC,CAAA,EAAG,IAAI,CAAA,OAAA,CAAA,EAAW,CAAG,EAAA,IAAI,CAAU,MAAA,CAAA,EAAA,CAAA,EAAG,IAAI,CAAA,IAAA,CAAA,EAAQ,IAAI,CAAA,CAAA;AAC3E,IAAI,IAAA,aAAA,CAAcA,cAAe,EAAA,UAAU,CAAG,EAAA;AAC5C,MAAO,OAAA,mBAAA,CAAA;AAAA,KACT;AAGA,IAAAA,cAAAA,GAAgB,CAAC,CAAA,EAAG,IAAI,CAAA,OAAA,CAAA,EAAW,GAAG,IAAI,CAAA,MAAA,CAAA,EAAU,CAAG,EAAA,IAAI,CAAM,IAAA,CAAA,CAAA,CAAA;AACjE,IAAI,IAAA,aAAA,CAAcA,cAAe,EAAA,UAAU,CAAG,EAAA;AAC5C,MAAO,OAAA,WAAA,CAAA;AAAA,KACT;AAGA,IAAAA,cAAAA,GAAgB,CAAC,CAAG,EAAA,IAAI,QAAQ,CAAG,EAAA,IAAI,UAAU,IAAI,CAAA,CAAA;AACrD,IAAI,IAAA,aAAA,CAAcA,cAAe,EAAA,UAAU,CAAG,EAAA;AAC5C,MAAO,OAAA,SAAA,CAAA;AAAA,KACT;AAGA,IAAO,OAAA,SAAA,CAAA;AAAA,GACT;AAGA,EAAM,MAAA,aAAA,GAAgB,CAAC,CAAG,EAAA,MAAM,QAAQ,CAAG,EAAA,MAAM,UAAU,MAAM,CAAA,CAAA;AACjE,EAAI,IAAA,aAAA,CAAc,aAAe,EAAA,UAAU,CAAG,EAAA;AAC5C,IAAA,IAAI,UAAW,CAAA,QAAA,CAAS,CAAG,EAAA,MAAM,SAAS,CAAG,EAAA;AAC3C,MAAO,OAAA,mBAAA,CAAA;AAAA,KACF,MAAA;AACL,MAAO,OAAA,SAAA,CAAA;AAAA,KACT;AAAA,GACF;AAGA,EAAO,OAAA,OAAA,CAAA;AACT,CAAA;AAOA,SAAS,0BAA0B,KAAiB,EAAA;AAClD,EAAO,OAAA,KAAA,CAAM,GAAI,CAAA,CAAC,IAAU,MAAA;AAAA,IAC1B,WAAa,EAAA;AAAA,MACX,GAAK,EAAA,IAAA;AAAA,KACP;AAAA,GACA,CAAA,CAAA,CAAA;AACJ,CAAA;AAOA,SAAS,kBAAkB,MAAwB,EAAA;AACjD,EAAI,IAAA,MAAA,CAAO,QAAS,CAAA,SAAS,CAAK,IAAA,MAAA,CAAO,QAAS,CAAA,QAAQ,CAAK,IAAA,MAAA,CAAO,QAAS,CAAA,MAAM,CAAG,EAAA;AACtF,IAAA,OAAO,OAAO,KAAM,CAAA,CAAA,EAAG,MAAO,CAAA,WAAA,CAAY,GAAG,CAAC,CAAA,CAAA;AAAA,GAChD;AACA,EAAO,OAAA,MAAA,CAAA;AACT,CAAA;AAOA,eAAsB,kBAAuC,GAAA;AAG3D,EAAM,MAAA,aAAA,GAAgB,KAAK,MAAO,CAAA,MAAA,GAAS,IAAK,CAAA,CAAC,QAAa,KAAA,QAAA,CAAS,EAAE,CAAA,CAAA;AACzE,EAAM,MAAA,aAAA,GAAgB,KAAK,MAAO,CAAA,MAAA,GAAS,IAAK,CAAA,CAAC,QAAa,KAAA,QAAA,CAAS,EAAE,CAAA,CAAA;AAEzE,EAAO,OAAA,OAAA,CAAQ,IAAI,CAAC,aAAA,EAAe,aAAa,CAAC,CAAA,CAAE,IAAK,CAAA,CAAC,OAAY,KAAA;AACnE,IAAA,OAAO,OAAQ,CAAA,KAAA,CAAM,CAAC,MAAA,KAAW,MAAM,CAAA,CAAA;AAAA,GACxC,CAAA,CAAA;AACH,CAAA;AAUA,eAAsB,gBACpB,QACA,EAAA,GAAA,EACA,KACA,EAAA,UAAA,EACA,YACA,WACA,EAAA;AA3SF,EAAA,IAAA,EAAA,CAAA;AA4SE,EAAA,MAAM,mBAAsB,GAAA,WAAA,GAAc,WAAc,GAAA,iBAAA,CAAkB,eAAe,UAAU,CAAA,CAAA;AAGnG,EAAA,IAAI,UAAa,GAAA,EAAA,CAAA;AAGjB,EAAI,IAAA,CAAC,UAAW,CAAA,gBAAA,CAAiB,eAAiB,EAAA;AAChD,IAAM,MAAA,UAAA,CAAW,iBAAiB,mBAAoB,EAAA,CAAA;AAAA,GACxD;AACA,EAAI,IAAA,UAAA,CAAW,iBAAiB,eAAiB,EAAA;AAM/C,IAAM,MAAA,iBAAA,GAAoB,iBAAkB,CAAA,KAAA,CAAM,MAAM,CAAA,CAAA;AACxD,IAAA,UAAA,GAAA,CAAa,qBAAgB,iBAAmB,EAAA,UAAA,CAAW,gBAAiB,CAAA,eAAe,MAA9E,IAAmF,GAAA,EAAA,GAAA,EAAA,CAAA;AAAA,GAClG;AACA,EAAA,IAAI,eAAe,EAAI,EAAA;AAErB,IAAA,UAAA,GAAa,eAAgB,CAAA,KAAA,CAAM,MAAQ,EAAA,UAAA,CAAW,iBAAiB,OAAO,CAAA,CAAA;AAAA,GAChF;AAEA,EAAI,IAAA,mBAAA,CAAoB,cAAmB,KAAA,cAAA,CAAe,UAAY,EAAA;AACpE,IAAO,OAAA,IAAI,OAAc,CAAA,CAAC,OAAY,KAAA;AACpC,MAAA,OAAO,WAAW,MAAM;AACtB,QAAA,MAAM,WAAc,GAAA,sBAAA;AAAA,UAClB,KAAM,CAAA,MAAA;AAAA,UACN,UAAA;AAAA,UACA,iBAAA,CAAkB,YAAa,CAAA,KAAA,CAAM,MAAM,CAAA;AAAA,SAC7C,CAAA;AAEA,QAAA,MAAM,OAAU,GAAA;AAAA,UACd,GAAA;AAAA,UACA,aAAa,aAAK,CAAA,cAAA,CAAA,EAAA,EAAA,mBAAA,CAAA,EAAL,EAA0B,WAAA,EAA0B,WAAW,KAAM,EAAA,CAAA;AAAA,SACpF,CAAA;AACA,QAAS,QAAA,CAAA,iBAAA,CAAkB,OAAO,CAAC,CAAA,CAAA;AACnC,QAAQ,OAAA,EAAA,CAAA;AAAA,SACP,GAAI,CAAA,CAAA;AAAA,KACR,CAAA,CAAA;AAAA,GACI,MAAA;AAQL,IAAA,MAAM,eAAe,MAAM,UAAA,CAAW,gBAAiB,CAAA,oBAAA,CAAqB,MAAM,MAAM,CAAA,CAAA;AAExF,IAAA,IAAI,SAA4B,GAAA;AAAA,MAC9B,QAAQ,KAAM,CAAA,MAAA;AAAA;AAAA,MAEd,MAAQ,EAAA,MAAA,CAAO,IAAK,CAAA,YAAY,CAC7B,CAAA,MAAA,CAAO,CAAC,KAAA,KAAU,KAAU,KAAA,UAAU,CACtC,CAAA,IAAA,CAAK,GAAG,CAAA;AAAA,KACb,CAAA;AAGA,IAAA,IAAI,UAAiE,EAAC,CAAA;AACtE,IAAI,IAAA,CAAA,WAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,WAAA,CAAa,cAAmB,MAAA,cAAA,CAAe,EAAI,EAAA;AACrD,MAAA,SAAA,GAAY,aAAK,CAAA,cAAA,CAAA,EAAA,EAAA,SAAA,CAAA,EAAL,EAAgB,MAAA,EAAQ,YAAY,MAAO,EAAA,CAAA,CAAA;AAGvD,MAAU,OAAA,GAAA,MAAM,IAAK,CAAA,MAAA,CAAO,MAA6B,CAAA;AAAA,QACvD,OAAO,WAAY,CAAA,MAAA;AAAA,QACnB,UAAY,EAAA,yBAAA;AAAA,QACZ,IAAM,EAAA,CAAA;AAAA,QACN,MAAQ,EAAA;AAAA,UACN,GAAA,EAAK,yBAA0B,CAAA,UAAA,CAAW,KAAM,CAAA,GAAG,EAAE,MAAO,CAAA,CAAC,GAAG,CAAC,CAAC,CAAA;AAAA,SACpE;AAAA,OACD,CAAA,CAAA;AACD,MAAA,iBAAA,CAAkB,4CAA8C,EAAA;AAAA,QAC9D,QAAQ,KAAM,CAAA,MAAA;AAAA,QACd,QAAQ,WAAY,CAAA,MAAA;AAAA,QACpB,OAAA;AAAA,OACD,CAAA,CAAA;AAAA,KAEH;AAEA,IAAA,MAAM,aAAgB,GAAA,OAAA,CACnB,GAAI,CAAA,CAAC,CAAM,KAAA;AACV,MAAA,OAAO,CAAG,EAAA,CAAA,CAAE,OAAQ,CAAA,MAAM,MAAM,CAAE,CAAA,OAAA,CAAQ,WAAW,CAAA,QAAA,EAAA,CAAY,CAAE,CAAA,KAAA,GAAQ,GAAK,EAAA,OAAA,CAAQ,CAAC,CAAC,CAAA,CAAA,CAAA,CAAA;AAAA,KAC3F,CACA,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AAEZ,IAAA,MAAM,iBAAiB,kBAAmB,CAAA;AAAA,MACxC,QAAQ,KAAM,CAAA,MAAA;AAAA,MACd,QAAA,EAAU,WAAc,GAAA,WAAA,CAAY,MAAS,GAAA,EAAA;AAAA,MAC7C,UAAA;AAAA,MACA,MAAA,EAAQ,UAAW,CAAA,IAAA,CAAK,IAAI,CAAA;AAAA,MAC5B,SAAW,EAAA,aAAA;AAAA,KACZ,CAAA,CAAA;AAED,IAAO,OAAA,IAAA,CAAK,OACT,qBAAsB,CAAA;AAAA,MACrB,KAAO,EAAA,iBAAA;AAAA,MACP,QAAU,EAAA,cAAA;AAAA,MACV,WAAa,EAAA,GAAA;AAAA,KACd,CACA,CAAA,IAAA,CAAK,IAAK,CAAA,MAAA,CAAO,mBAAmB,CAAA,CACpC,SAAU,CAAA,CAAC,QAAa,KAAA;AACvB,MAAA,MAAM,OAAU,GAAA;AAAA,QACd,GAAA;AAAA,QACA,WAAA,EAAa,iCACR,mBADQ,CAAA,EAAA;AAAA,UAEX,WAAa,EAAA;AAAA,YACX;AAAA,cACE,KAAO,EAAA,QAAA;AAAA,cACP,WAAa,EAAA,EAAA;AAAA,aACf;AAAA,WACF;AAAA,UACA,SAAW,EAAA,KAAA;AAAA,SACb,CAAA;AAAA,OACF,CAAA;AACA,MAAS,QAAA,CAAA,iBAAA,CAAkB,OAAO,CAAC,CAAA,CAAA;AAAA,KACpC,CAAA,CAAA;AAAA,GACL;AACF;;;;"}