{"version":3,"file":"PromQueryEditorSelector.js","sources":["../../../../src/querybuilder/components/PromQueryEditorSelector.tsx"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryEditorSelector.tsx\nimport { isEqual, map } from 'lodash';\nimport React, { SyntheticEvent, useCallback, useEffect, useState } from 'react';\n\nimport { CoreApp, LoadingState, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorHeader, EditorRows, FlexItem } from '@grafana/experimental';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, ConfirmModal, Space } from '@grafana/ui';\n\nimport { PromQueryEditorProps } from '../../components/types';\nimport { PromQueryFormat } from '../../dataquery';\nimport { PromQuery } from '../../types';\nimport { QueryPatternsModal } from '../QueryPatternsModal';\nimport { promQueryEditorExplainKey, useFlag } from '../hooks/useFlag';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { QueryEditorModeToggle } from '../shared/QueryEditorModeToggle';\nimport { QueryHeaderSwitch } from '../shared/QueryHeaderSwitch';\nimport { QueryEditorMode } from '../shared/types';\nimport { changeEditorMode, getQueryWithDefaults } from '../state';\n\nimport { PromQueryBuilderContainer } from './PromQueryBuilderContainer';\nimport { PromQueryBuilderOptions } from './PromQueryBuilderOptions';\nimport { PromQueryCodeEditor } from './PromQueryCodeEditor';\nimport { PromQueryCodeEditorAutocompleteInfo } from './PromQueryCodeEditorAutocompleteInfo';\n\nexport const FORMAT_OPTIONS: Array<SelectableValue<PromQueryFormat>> = [\n  { label: 'Time series', value: 'time_series' },\n  { label: 'Table', value: 'table' },\n  { label: 'Heatmap', value: 'heatmap' },\n];\n\nexport const INTERVAL_FACTOR_OPTIONS: Array<SelectableValue<number>> = map([1, 2, 3, 4, 5, 10], (value: number) => ({\n  value,\n  label: '1/' + value,\n}));\n\ntype Props = PromQueryEditorProps;\n\nexport const PromQueryEditorSelector = React.memo<Props>((props) => {\n  const {\n    onChange,\n    onRunQuery,\n    data,\n    app,\n    onAddQuery,\n    datasource: { defaultEditor },\n    queries,\n  } = props;\n\n  const [parseModalOpen, setParseModalOpen] = useState(false);\n  const [queryPatternsModalOpen, setQueryPatternsModalOpen] = useState(false);\n  const [dataIsStale, setDataIsStale] = useState(false);\n  const { flag: explain, setFlag: setExplain } = useFlag(promQueryEditorExplainKey);\n\n  const query = getQueryWithDefaults(props.query, app, defaultEditor);\n  // This should be filled in from the defaults by now.\n  const editorMode = query.editorMode!;\n\n  const onEditorModeChange = useCallback(\n    (newMetricEditorMode: QueryEditorMode) => {\n      reportInteraction('user_grafana_prometheus_editor_mode_clicked', {\n        newEditor: newMetricEditorMode,\n        previousEditor: query.editorMode ?? '',\n        newQuery: !query.expr,\n        app: app ?? '',\n      });\n\n      if (newMetricEditorMode === QueryEditorMode.Builder) {\n        const result = buildVisualQueryFromString(query.expr || '');\n        // If there are errors, give user a chance to decide if they want to go to builder as that can lose some data.\n        if (result.errors.length) {\n          setParseModalOpen(true);\n          return;\n        }\n      }\n      changeEditorMode(query, newMetricEditorMode, onChange);\n    },\n    [onChange, query, app]\n  );\n\n  useEffect(() => {\n    setDataIsStale(false);\n  }, [data]);\n\n  const onChangeInternal = (query: PromQuery) => {\n    if (!isEqual(query, props.query)) {\n      setDataIsStale(true);\n    }\n    onChange(query);\n  };\n\n  const onShowExplainChange = (e: SyntheticEvent<HTMLInputElement>) => {\n    setExplain(e.currentTarget.checked);\n  };\n\n  return (\n    <>\n      <ConfirmModal\n        isOpen={parseModalOpen}\n        title=\"Parsing error: Switch to the builder mode?\"\n        body=\"There is a syntax error, or the query structure cannot be visualized when switching to the builder mode. Parts of the query may be lost. \"\n        confirmText=\"Continue\"\n        onConfirm={() => {\n          changeEditorMode(query, QueryEditorMode.Builder, onChange);\n          setParseModalOpen(false);\n        }}\n        onDismiss={() => setParseModalOpen(false)}\n      />\n      <QueryPatternsModal\n        isOpen={queryPatternsModalOpen}\n        onClose={() => setQueryPatternsModalOpen(false)}\n        query={query}\n        queries={queries}\n        app={app}\n        onChange={onChange}\n        onAddQuery={onAddQuery}\n      />\n      <EditorHeader>\n        <Button\n          data-testid={selectors.components.QueryBuilder.queryPatterns}\n          variant=\"secondary\"\n          size=\"sm\"\n          onClick={() => setQueryPatternsModalOpen((prevValue) => !prevValue)}\n        >\n          Kick start your query\n        </Button>\n        <div data-testid={selectors.components.DataSource.Prometheus.queryEditor.explain}>\n          <QueryHeaderSwitch label=\"Explain\" value={explain} onChange={onShowExplainChange} />\n        </div>\n        <FlexItem grow={1} />\n        {app !== CoreApp.Explore && app !== CoreApp.Correlations && (\n          <Button\n            variant={dataIsStale ? 'primary' : 'secondary'}\n            size=\"sm\"\n            onClick={onRunQuery}\n            icon={data?.state === LoadingState.Loading ? 'spinner' : undefined}\n            disabled={data?.state === LoadingState.Loading}\n          >\n            Run queries\n          </Button>\n        )}\n        <PromQueryCodeEditorAutocompleteInfo datasourceUid={props.datasource.uid} editorMode={editorMode} />\n        <div data-testid={selectors.components.DataSource.Prometheus.queryEditor.editorToggle}>\n          <QueryEditorModeToggle mode={editorMode} onChange={onEditorModeChange} />\n        </div>\n      </EditorHeader>\n      <Space v={0.5} />\n      <EditorRows>\n        {editorMode === QueryEditorMode.Code && (\n          <PromQueryCodeEditor {...props} query={query} showExplain={explain} onChange={onChangeInternal} />\n        )}\n        {editorMode === QueryEditorMode.Builder && (\n          <PromQueryBuilderContainer\n            query={query}\n            datasource={props.datasource}\n            onChange={onChangeInternal}\n            onRunQuery={props.onRunQuery}\n            data={data}\n            showExplain={explain}\n          />\n        )}\n        <PromQueryBuilderOptions query={query} app={props.app} onChange={onChange} onRunQuery={onRunQuery} />\n      </EditorRows>\n    </>\n  );\n});\n\nPromQueryEditorSelector.displayName = 'PromQueryEditorSelector';\n"],"names":["query"],"mappings":"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"}