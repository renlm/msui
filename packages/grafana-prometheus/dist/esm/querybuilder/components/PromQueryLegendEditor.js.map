{"version":3,"file":"PromQueryLegendEditor.js","sources":["../../../../src/querybuilder/components/PromQueryLegendEditor.tsx"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryLegendEditor.tsx\nimport React, { useRef } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorField } from '@grafana/experimental';\nimport { AutoSizeInput, Select } from '@grafana/ui';\n\nimport { LegendFormatMode } from '../../types';\n\nexport interface PromQueryLegendEditorProps {\n  legendFormat: string | undefined;\n  onChange: (legendFormat: string) => void;\n  onRunQuery: () => void;\n}\n\nconst legendModeOptions = [\n  {\n    label: 'Auto',\n    value: LegendFormatMode.Auto,\n    description: 'Only includes unique labels',\n  },\n  { label: 'Verbose', value: LegendFormatMode.Verbose, description: 'All label names and values' },\n  { label: 'Custom', value: LegendFormatMode.Custom, description: 'Provide a naming template' },\n];\n\n/**\n * Tests for this component are on the parent level (PromQueryBuilderOptions).\n */\nexport const PromQueryLegendEditor = React.memo<PromQueryLegendEditorProps>(\n  ({ legendFormat, onChange, onRunQuery }) => {\n    const mode = getLegendMode(legendFormat);\n    const inputRef = useRef<HTMLInputElement | null>(null);\n\n    const onLegendFormatChanged = (evt: React.FormEvent<HTMLInputElement>) => {\n      let newFormat = evt.currentTarget.value;\n      if (newFormat.length === 0) {\n        newFormat = LegendFormatMode.Auto;\n      }\n\n      if (newFormat !== legendFormat) {\n        onChange(newFormat);\n        onRunQuery();\n      }\n    };\n\n    const onLegendModeChanged = (value: SelectableValue<LegendFormatMode>) => {\n      switch (value.value!) {\n        case LegendFormatMode.Auto:\n          onChange(LegendFormatMode.Auto);\n          break;\n        case LegendFormatMode.Custom:\n          onChange('{{label_name}}');\n          setTimeout(() => {\n            inputRef.current?.focus();\n            inputRef.current?.setSelectionRange(2, 12, 'forward');\n          }, 10);\n          break;\n        case LegendFormatMode.Verbose:\n          onChange('');\n          break;\n      }\n      onRunQuery();\n    };\n\n    return (\n      <EditorField\n        label=\"Legend\"\n        tooltip=\"Series name override or template. Ex. {{hostname}} will be replaced with label value for hostname.\"\n        data-testid={selectors.components.DataSource.Prometheus.queryEditor.legend}\n      >\n        <>\n          {mode === LegendFormatMode.Custom && (\n            <AutoSizeInput\n              id=\"legendFormat\"\n              minWidth={22}\n              placeholder=\"auto\"\n              defaultValue={legendFormat}\n              onCommitChange={onLegendFormatChanged}\n              ref={inputRef}\n            />\n          )}\n          {mode !== LegendFormatMode.Custom && (\n            <Select\n              inputId=\"legend.mode\"\n              isSearchable={false}\n              placeholder=\"Select legend mode\"\n              options={legendModeOptions}\n              width={22}\n              onChange={onLegendModeChanged}\n              value={legendModeOptions.find((x) => x.value === mode)}\n            />\n          )}\n        </>\n      </EditorField>\n    );\n  }\n);\n\nPromQueryLegendEditor.displayName = 'PromQueryLegendEditor';\n\nfunction getLegendMode(legendFormat: string | undefined) {\n  // This special value means the new smart minimal series naming\n  if (legendFormat === LegendFormatMode.Auto) {\n    return LegendFormatMode.Auto;\n  }\n\n  // Missing or empty legend format is the old verbose behavior\n  if (legendFormat == null || legendFormat === '') {\n    return LegendFormatMode.Verbose;\n  }\n\n  return LegendFormatMode.Custom;\n}\n\nexport function getLegendModeLabel(legendFormat: string | undefined) {\n  const mode = getLegendMode(legendFormat);\n  if (mode !== LegendFormatMode.Custom) {\n    return legendModeOptions.find((x) => x.value === mode)?.label;\n  }\n  return legendFormat;\n}\n"],"names":[],"mappings":"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"}