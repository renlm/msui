{"version":3,"file":"MetricSelect.js","sources":["../../../../src/querybuilder/components/MetricSelect.tsx"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/MetricSelect.tsx\nimport { css } from '@emotion/css';\nimport debounce from 'debounce-promise';\nimport React, { RefCallback, useCallback, useState } from 'react';\nimport Highlighter from 'react-highlight-words';\n\nimport { GrafanaTheme2, SelectableValue, toOption } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorField, EditorFieldGroup } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport {\n  AsyncSelect,\n  Button,\n  CustomScrollbar,\n  FormatOptionLabelMeta,\n  getSelectStyles,\n  Icon,\n  InlineField,\n  InlineFieldRow,\n  useStyles2,\n  useTheme2,\n} from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { SelectMenuOptions } from '../../gcopypaste/packages/grafana-ui/src/components/Select/SelectBase';\nimport { truncateResult } from '../../language_utils';\nimport { regexifyLabelValuesQueryString } from '../parsingUtils';\nimport { QueryBuilderLabelFilter } from '../shared/types';\nimport { PromVisualQuery } from '../types';\n\nimport { MetricsModal } from './metrics-modal/MetricsModal';\nimport { tracking } from './metrics-modal/state/helpers';\n\n// We are matching words split with space\nconst splitSeparator = ' ';\n\nexport interface MetricSelectProps {\n  metricLookupDisabled: boolean;\n  query: PromVisualQuery;\n  onChange: (query: PromVisualQuery) => void;\n  onGetMetrics: () => Promise<SelectableValue[]>;\n  datasource: PrometheusDatasource;\n  labelsFilters: QueryBuilderLabelFilter[];\n  onBlur?: () => void;\n  variableEditor?: boolean;\n}\n\nexport const PROMETHEUS_QUERY_BUILDER_MAX_RESULTS = 1000;\n\nexport function MetricSelect({\n  datasource,\n  query,\n  onChange,\n  onGetMetrics,\n  labelsFilters,\n  metricLookupDisabled,\n  onBlur,\n  variableEditor,\n}: Readonly<MetricSelectProps>) {\n  const styles = useStyles2(getStyles);\n  const [state, setState] = useState<{\n    metrics?: SelectableValue[];\n    isLoading?: boolean;\n    metricsModalOpen?: boolean;\n    initialMetrics?: string[];\n    resultsTruncated?: boolean;\n  }>({});\n\n  const prometheusMetricEncyclopedia = config.featureToggles.prometheusMetricEncyclopedia;\n\n  const metricsModalOption: SelectableValue[] = [\n    {\n      value: 'BrowseMetrics',\n      label: 'Metrics explorer',\n      description: 'Browse and filter all metrics and metadata with a fuzzy search',\n    },\n  ];\n\n  const customFilterOption = useCallback(\n    (option: SelectableValue, searchQuery: string) => {\n      const label = option.label ?? option.value;\n      if (!label) {\n        return false;\n      }\n\n      // custom value is not a string label but a react node\n      if (!label.toLowerCase) {\n        return true;\n      }\n\n      const searchWords = searchQuery.split(splitSeparator);\n\n      return searchWords.reduce((acc, cur) => {\n        const matcheSearch = label.toLowerCase().includes(cur.toLowerCase());\n\n        let browseOption = false;\n        if (prometheusMetricEncyclopedia) {\n          browseOption = label === 'Metrics explorer';\n        }\n\n        return acc && (matcheSearch || browseOption);\n      }, true);\n    },\n    [prometheusMetricEncyclopedia]\n  );\n\n  const formatOptionLabel = useCallback(\n    (option: SelectableValue, meta: FormatOptionLabelMeta<any>) => {\n      // For newly created custom value we don't want to add highlight\n      if (option['__isNew__']) {\n        return option.label;\n      }\n      // only matches on input, does not match on regex\n      // look into matching for regex input\n      return (\n        <Highlighter\n          searchWords={meta.inputValue.split(splitSeparator)}\n          textToHighlight={option.label ?? ''}\n          highlightClassName={styles.highlight}\n        />\n      );\n    },\n    [styles.highlight]\n  );\n\n  /**\n   * Reformat the query string and label filters to return all valid results for current query editor state\n   */\n  const formatKeyValueStringsForLabelValuesQuery = (\n    query: string,\n    labelsFilters?: QueryBuilderLabelFilter[]\n  ): string => {\n    const queryString = regexifyLabelValuesQueryString(query);\n\n    return formatPrometheusLabelFiltersToString(queryString, labelsFilters);\n  };\n\n  /**\n   * Gets label_values response from prometheus API for current autocomplete query string and any existing labels filters\n   */\n  const getMetricLabels = (query: string) => {\n    // Since some customers can have millions of metrics, whenever the user changes the autocomplete text we want to call the backend and request all metrics that match the current query string\n    const results = datasource.metricFindQuery(formatKeyValueStringsForLabelValuesQuery(query, labelsFilters));\n    return results.then((results) => {\n      const resultsLength = results.length;\n      truncateResult(results);\n\n      if (resultsLength > results.length) {\n        setState({ ...state, resultsTruncated: true });\n      } else {\n        setState({ ...state, resultsTruncated: false });\n      }\n\n      const resultsOptions = results.map((result) => {\n        return {\n          label: result.text,\n          value: result.text,\n        };\n      });\n\n      if (prometheusMetricEncyclopedia) {\n        return [...metricsModalOption, ...resultsOptions];\n      } else {\n        return resultsOptions;\n      }\n    });\n  };\n\n  // When metric and label lookup is disabled we won't request labels\n  const metricLookupDisabledSearch = () => Promise.resolve([]);\n\n  const debouncedSearch = debounce(\n    (query: string) => getMetricLabels(query),\n    datasource.getDebounceTimeInMilliseconds()\n  );\n\n  // No type found for the common select props so typing as any\n  // https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Select/SelectBase.tsx/#L212-L263\n  // eslint-disable-next-line\n  const CustomOption = (props: any) => {\n    const option = props.data;\n\n    if (option.value === 'BrowseMetrics') {\n      const isFocused = props.isFocused ? styles.focus : '';\n\n      return (\n        // TODO: fix keyboard a11y\n        // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n        <div\n          {...props.innerProps}\n          ref={props.innerRef}\n          className={`${styles.customOptionWidth} metric-encyclopedia-open`}\n          data-testid={selectors.components.Select.option}\n          onKeyDown={(e) => {\n            // if there is no metric and the m.e. is enabled, open the modal\n            if (e.code === 'Enter') {\n              setState({ ...state, metricsModalOpen: true });\n            }\n          }}\n        >\n          {\n            <div className={`${styles.customOption} ${isFocused} metric-encyclopedia-open`}>\n              <div>\n                <div className=\"metric-encyclopedia-open\">{option.label}</div>\n                <div className={`${styles.customOptionDesc} metric-encyclopedia-open`}>{option.description}</div>\n              </div>\n              <Button\n                fill=\"text\"\n                size=\"sm\"\n                variant=\"secondary\"\n                onClick={() => setState({ ...state, metricsModalOpen: true })}\n                className=\"metric-encyclopedia-open\"\n              >\n                Open\n                <Icon name=\"arrow-right\" />\n              </Button>\n            </div>\n          }\n        </div>\n      );\n    }\n\n    return SelectMenuOptions(props);\n  };\n\n  interface SelectMenuProps {\n    maxHeight: number;\n    innerRef: RefCallback<HTMLDivElement>;\n    innerProps: {};\n  }\n\n  const CustomMenu = ({ children, maxHeight, innerRef, innerProps }: React.PropsWithChildren<SelectMenuProps>) => {\n    const theme = useTheme2();\n    const stylesMenu = getSelectStyles(theme);\n\n    // Show the results trucated warning only if the options are loaded and the results are truncated\n    // The children are a react node(options loading node) or an array(not a valid element)\n    const optionsLoaded = !React.isValidElement(children) && state.resultsTruncated;\n\n    return (\n      <div\n        {...innerProps}\n        className={`${stylesMenu.menu} ${styles.customMenuContainer}`}\n        style={{ maxHeight: Math.round(maxHeight * 0.9) }}\n        aria-label=\"Select options menu\"\n      >\n        <CustomScrollbar\n          scrollRefCallback={innerRef}\n          autoHide={false}\n          autoHeightMax=\"inherit\"\n          hideHorizontalTrack\n          showScrollIndicators\n        >\n          {children}\n        </CustomScrollbar>\n        {optionsLoaded && (\n          <div className={styles.customMenuFooter}>\n            <div>\n              Only the top 1000 metrics are displayed in the metric select. Use the metrics explorer to view all\n              metrics.\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const asyncSelect = () => {\n    return (\n      <AsyncSelect\n        data-testid={selectors.components.DataSource.Prometheus.queryEditor.builder.metricSelect}\n        isClearable={Boolean(variableEditor)}\n        inputId=\"prometheus-metric-select\"\n        className={styles.select}\n        value={query.metric ? toOption(query.metric) : undefined}\n        placeholder={'Select metric'}\n        allowCustomValue\n        formatOptionLabel={formatOptionLabel}\n        filterOption={customFilterOption}\n        minMenuHeight={250}\n        onOpenMenu={async () => {\n          if (metricLookupDisabled) {\n            return;\n          }\n          setState({ isLoading: true });\n          const metrics = await onGetMetrics();\n          const initialMetrics: string[] = metrics.map((m) => m.value);\n          const resultsLength = metrics.length;\n\n          if (metrics.length > PROMETHEUS_QUERY_BUILDER_MAX_RESULTS) {\n            truncateResult(metrics);\n          }\n\n          if (prometheusMetricEncyclopedia) {\n            setState({\n              // add the modal button option to the options\n              metrics: [...metricsModalOption, ...metrics],\n              isLoading: undefined,\n              // pass the initial metrics into the metrics explorer\n              initialMetrics: initialMetrics,\n              resultsTruncated: resultsLength > metrics.length,\n            });\n          } else {\n            setState({\n              metrics,\n              isLoading: undefined,\n              resultsTruncated: resultsLength > metrics.length,\n            });\n          }\n        }}\n        loadOptions={metricLookupDisabled ? metricLookupDisabledSearch : debouncedSearch}\n        isLoading={state.isLoading}\n        defaultOptions={state.metrics ?? Array.from(new Array(25), () => ({ value: '' }))} // We need empty values when `state.metrics` is falsy in order for the select to correctly determine top/bottom placement\n        onChange={(input) => {\n          const value = input?.value;\n          if (value) {\n            // if there is no metric and the m.e. is enabled, open the modal\n            if (prometheusMetricEncyclopedia && value === 'BrowseMetrics') {\n              tracking('grafana_prometheus_metric_encyclopedia_open', null, '', query);\n              setState({ ...state, metricsModalOpen: true });\n            } else {\n              onChange({ ...query, metric: value });\n            }\n          } else {\n            onChange({ ...query, metric: '' });\n          }\n        }}\n        components={\n          prometheusMetricEncyclopedia ? { Option: CustomOption, MenuList: CustomMenu } : { MenuList: CustomMenu }\n        }\n        onBlur={onBlur}\n      />\n    );\n  };\n\n  return (\n    <>\n      {prometheusMetricEncyclopedia && !datasource.lookupsDisabled && state.metricsModalOpen && (\n        <MetricsModal\n          datasource={datasource}\n          isOpen={state.metricsModalOpen}\n          onClose={() => setState({ ...state, metricsModalOpen: false })}\n          query={query}\n          onChange={onChange}\n          initialMetrics={state.initialMetrics ?? []}\n        />\n      )}\n      {/* format the ui for either the query editor or the variable editor */}\n      {variableEditor ? (\n        <InlineFieldRow>\n          <InlineField\n            label=\"Metric\"\n            labelWidth={20}\n            tooltip={<div>Optional: returns a list of label values for the label name in the specified metric.</div>}\n          >\n            {asyncSelect()}\n          </InlineField>\n        </InlineFieldRow>\n      ) : (\n        <EditorFieldGroup>\n          <EditorField label=\"Metric\">{asyncSelect()}</EditorField>\n        </EditorFieldGroup>\n      )}\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  select: css({\n    minWidth: '125px',\n  }),\n  highlight: css({\n    label: 'select__match-highlight',\n    background: 'inherit',\n    padding: 'inherit',\n    color: theme.colors.warning.contrastText,\n    backgroundColor: theme.colors.warning.main,\n  }),\n  customOption: css({\n    padding: '8px',\n    display: 'flex',\n    justifyContent: 'space-between',\n    cursor: 'pointer',\n    ':hover': {\n      backgroundColor: theme.colors.emphasize(theme.colors.background.primary, 0.1),\n    },\n  }),\n  customOptionlabel: css({\n    color: theme.colors.text.primary,\n  }),\n  customOptionDesc: css({\n    color: theme.colors.text.secondary,\n    fontSize: theme.typography.size.xs,\n    opacity: '50%',\n  }),\n  focus: css({\n    backgroundColor: theme.colors.emphasize(theme.colors.background.primary, 0.1),\n  }),\n  customOptionWidth: css({\n    minWidth: '400px',\n  }),\n  customMenuFooter: css({\n    flex: 0,\n    display: 'flex',\n    justifyContent: 'space-between',\n    padding: theme.spacing(1.5),\n    borderTop: `1px solid ${theme.colors.border.weak}`,\n    color: theme.colors.text.secondary,\n  }),\n  customMenuContainer: css({\n    display: 'flex',\n    flexDirection: 'column',\n    background: theme.colors.background.primary,\n    boxShadow: theme.shadows.z3,\n  }),\n});\n\nexport const formatPrometheusLabelFiltersToString = (\n  queryString: string,\n  labelsFilters: QueryBuilderLabelFilter[] | undefined\n): string => {\n  const filterArray = labelsFilters ? formatPrometheusLabelFilters(labelsFilters) : [];\n\n  return `label_values({__name__=~\".*${queryString}\"${filterArray ? filterArray.join('') : ''}},__name__)`;\n};\n\nexport const formatPrometheusLabelFilters = (labelsFilters: QueryBuilderLabelFilter[]): string[] => {\n  return labelsFilters.map((label) => {\n    return `,${label.label}=\"${label.value}\"`;\n  });\n};\n"],"names":["_a","query","labelsFilters","results"],"mappings":"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"}