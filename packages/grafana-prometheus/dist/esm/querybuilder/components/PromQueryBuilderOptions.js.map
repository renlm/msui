{"version":3,"file":"PromQueryBuilderOptions.js","sources":["../../../../src/querybuilder/components/PromQueryBuilderOptions.tsx"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilderOptions.tsx\nimport React, { SyntheticEvent } from 'react';\n\nimport { CoreApp, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorField, EditorRow, EditorSwitch } from '@grafana/experimental';\nimport { AutoSizeInput, RadioButtonGroup, Select } from '@grafana/ui';\n\nimport { getQueryTypeChangeHandler, getQueryTypeOptions } from '../../components/PromExploreExtraField';\nimport { PromQueryFormat } from '../../dataquery';\nimport { PromQuery } from '../../types';\nimport { QueryOptionGroup } from '../shared/QueryOptionGroup';\n\nimport { FORMAT_OPTIONS, INTERVAL_FACTOR_OPTIONS } from './PromQueryEditorSelector';\nimport { getLegendModeLabel, PromQueryLegendEditor } from './PromQueryLegendEditor';\n\nexport interface UIOptions {\n  exemplars: boolean;\n  type: boolean;\n  format: boolean;\n  minStep: boolean;\n  legend: boolean;\n  resolution: boolean;\n}\n\nexport interface PromQueryBuilderOptionsProps {\n  query: PromQuery;\n  app?: CoreApp;\n  onChange: (update: PromQuery) => void;\n  onRunQuery: () => void;\n}\n\nexport const PromQueryBuilderOptions = React.memo<PromQueryBuilderOptionsProps>(\n  ({ query, app, onChange, onRunQuery }) => {\n    const onChangeFormat = (value: SelectableValue<PromQueryFormat>) => {\n      onChange({ ...query, format: value.value });\n      onRunQuery();\n    };\n\n    const onChangeStep = (evt: React.FormEvent<HTMLInputElement>) => {\n      onChange({ ...query, interval: evt.currentTarget.value.trim() });\n      onRunQuery();\n    };\n\n    const queryTypeOptions = getQueryTypeOptions(\n      app === CoreApp.Explore || app === CoreApp.Correlations || app === CoreApp.PanelEditor\n    );\n\n    const onQueryTypeChange = getQueryTypeChangeHandler(query, onChange);\n\n    const onExemplarChange = (event: SyntheticEvent<HTMLInputElement>) => {\n      const isEnabled = event.currentTarget.checked;\n      onChange({ ...query, exemplar: isEnabled });\n      onRunQuery();\n    };\n\n    const onIntervalFactorChange = (value: SelectableValue<number>) => {\n      onChange({ ...query, intervalFactor: value.value });\n      onRunQuery();\n    };\n\n    const formatOption = FORMAT_OPTIONS.find((option) => option.value === query.format) || FORMAT_OPTIONS[0];\n    const queryTypeValue = getQueryTypeValue(query);\n    const queryTypeLabel = queryTypeOptions.find((x) => x.value === queryTypeValue)!.label;\n\n    return (\n      <EditorRow>\n        <div data-testid={selectors.components.DataSource.Prometheus.queryEditor.options}>\n          <QueryOptionGroup\n            title=\"Options\"\n            collapsedInfo={getCollapsedInfo(query, formatOption.label!, queryTypeLabel, app)}\n          >\n            <PromQueryLegendEditor\n              legendFormat={query.legendFormat}\n              onChange={(legendFormat) => onChange({ ...query, legendFormat })}\n              onRunQuery={onRunQuery}\n            />\n            <EditorField\n              label=\"Min step\"\n              tooltip={\n                <>\n                  An additional lower limit for the step parameter of the Prometheus query and for the{' '}\n                  <code>$__interval</code> and <code>$__rate_interval</code> variables.\n                </>\n              }\n            >\n              <AutoSizeInput\n                type=\"text\"\n                aria-label=\"Set lower limit for the step parameter\"\n                placeholder={'auto'}\n                minWidth={10}\n                onCommitChange={onChangeStep}\n                defaultValue={query.interval}\n                id={selectors.components.DataSource.Prometheus.queryEditor.step}\n              />\n            </EditorField>\n            <EditorField label=\"Format\">\n              <Select\n                data-testid={selectors.components.DataSource.Prometheus.queryEditor.format}\n                value={formatOption}\n                allowCustomValue\n                onChange={onChangeFormat}\n                options={FORMAT_OPTIONS}\n              />\n            </EditorField>\n            <EditorField label=\"Type\" data-testid={selectors.components.DataSource.Prometheus.queryEditor.type}>\n              <RadioButtonGroup options={queryTypeOptions} value={queryTypeValue} onChange={onQueryTypeChange} />\n            </EditorField>\n            {shouldShowExemplarSwitch(query, app) && (\n              <EditorField label=\"Exemplars\">\n                <EditorSwitch\n                  value={query.exemplar || false}\n                  onChange={onExemplarChange}\n                  id={selectors.components.DataSource.Prometheus.queryEditor.exemplars}\n                />\n              </EditorField>\n            )}\n            {query.intervalFactor && query.intervalFactor > 1 && (\n              <EditorField label=\"Resolution\">\n                <Select\n                  aria-label=\"Select resolution\"\n                  isSearchable={false}\n                  options={INTERVAL_FACTOR_OPTIONS}\n                  onChange={onIntervalFactorChange}\n                  value={INTERVAL_FACTOR_OPTIONS.find((option) => option.value === query.intervalFactor)}\n                />\n              </EditorField>\n            )}\n          </QueryOptionGroup>\n        </div>\n      </EditorRow>\n    );\n  }\n);\n\nfunction shouldShowExemplarSwitch(query: PromQuery, app?: CoreApp) {\n  if (app === CoreApp.UnifiedAlerting || !query.range) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getQueryTypeValue(query: PromQuery) {\n  return query.range && query.instant ? 'both' : query.instant ? 'instant' : 'range';\n}\n\nfunction getCollapsedInfo(query: PromQuery, formatOption: string, queryType: string, app?: CoreApp): string[] {\n  const items: string[] = [];\n\n  items.push(`Legend: ${getLegendModeLabel(query.legendFormat)}`);\n  items.push(`Format: ${formatOption}`);\n  items.push(`Step: ${query.interval ?? 'auto'}`);\n  items.push(`Type: ${queryType}`);\n\n  if (shouldShowExemplarSwitch(query, app)) {\n    if (query.exemplar) {\n      items.push(`Exemplars: true`);\n    } else {\n      items.push(`Exemplars: false`);\n    }\n  }\n  return items;\n}\n\nPromQueryBuilderOptions.displayName = 'PromQueryBuilderOptions';\n"],"names":[],"mappings":"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"}