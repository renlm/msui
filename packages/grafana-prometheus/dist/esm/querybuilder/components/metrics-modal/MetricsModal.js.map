{"version":3,"file":"MetricsModal.js","sources":["../../../../../src/querybuilder/components/metrics-modal/MetricsModal.tsx"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/metrics-modal/MetricsModal.tsx\nimport { cx } from '@emotion/css';\nimport { PayloadAction, createSlice } from '@reduxjs/toolkit';\nimport debounce from 'debounce-promise';\nimport React, { useCallback, useEffect, useMemo, useReducer } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport {\n  Button,\n  ButtonGroup,\n  Icon,\n  Input,\n  Modal,\n  MultiSelect,\n  Pagination,\n  Spinner,\n  Toggletip,\n  useTheme2,\n} from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../../datasource';\nimport { PromVisualQuery } from '../../types';\n\nimport { AdditionalSettings } from './AdditionalSettings';\nimport { FeedbackLink } from './FeedbackLink';\nimport { ResultsTable } from './ResultsTable';\nimport {\n  calculatePageList,\n  calculateResultsPerPage,\n  displayedMetrics,\n  getBackendSearchMetrics,\n  placeholders,\n  promTypes,\n  setMetrics,\n  tracking,\n} from './state/helpers';\nimport {\n  DEFAULT_RESULTS_PER_PAGE,\n  initialState,\n  MAXIMUM_RESULTS_PER_PAGE,\n  MetricsModalMetadata,\n  // stateSlice,\n} from './state/state';\nimport { getStyles } from './styles';\nimport { MetricsData, PromFilterOption } from './types';\nimport { debouncedFuzzySearch } from './uFuzzy';\n\nexport type MetricsModalProps = {\n  datasource: PrometheusDatasource;\n  isOpen: boolean;\n  query: PromVisualQuery;\n  onClose: () => void;\n  onChange: (query: PromVisualQuery) => void;\n  initialMetrics: string[];\n};\n\nexport const MetricsModal = (props: MetricsModalProps) => {\n  const { datasource, isOpen, onClose, onChange, query, initialMetrics } = props;\n\n  const [state, dispatch] = useReducer(stateSlice.reducer, initialState(query));\n\n  const theme = useTheme2();\n  const styles = getStyles(theme, state.disableTextWrap);\n\n  /**\n   * loads metrics and metadata on opening modal and switching off useBackend\n   */\n  const updateMetricsMetadata = useCallback(async () => {\n    // *** Loading Gif\n    dispatch(setIsLoading(true));\n\n    const data: MetricsModalMetadata = await setMetrics(datasource, query, initialMetrics);\n    dispatch(\n      buildMetrics({\n        isLoading: false,\n        hasMetadata: data.hasMetadata,\n        metrics: data.metrics,\n        metaHaystackDictionary: data.metaHaystackDictionary,\n        nameHaystackDictionary: data.nameHaystackDictionary,\n        totalMetricCount: data.metrics.length,\n        filteredMetricCount: data.metrics.length,\n      })\n    );\n  }, [query, datasource, initialMetrics]);\n\n  useEffect(() => {\n    updateMetricsMetadata();\n  }, [updateMetricsMetadata]);\n\n  const typeOptions: SelectableValue[] = promTypes.map((t: PromFilterOption) => {\n    return {\n      value: t.value,\n      label: t.value,\n      description: t.description,\n    };\n  });\n\n  /**\n   * The backend debounced search\n   */\n  const debouncedBackendSearch = useMemo(\n    () =>\n      debounce(async (metricText: string) => {\n        dispatch(setIsLoading(true));\n\n        const metrics = await getBackendSearchMetrics(metricText, query.labels, datasource);\n\n        dispatch(\n          filterMetricsBackend({\n            metrics: metrics,\n            filteredMetricCount: metrics.length,\n            isLoading: false,\n          })\n        );\n      }, datasource.getDebounceTimeInMilliseconds()),\n    [datasource, query]\n  );\n\n  function fuzzyNameDispatch(haystackData: string[][]) {\n    dispatch(setNameHaystack(haystackData));\n  }\n\n  function fuzzyMetaDispatch(haystackData: string[][]) {\n    dispatch(setMetaHaystack(haystackData));\n  }\n\n  function searchCallback(query: string, fullMetaSearchVal: boolean) {\n    if (state.useBackend && query === '') {\n      // get all metrics data if a user erases everything in the input\n      updateMetricsMetadata();\n    } else if (state.useBackend) {\n      debouncedBackendSearch(query);\n    } else {\n      // search either the names or all metadata\n      // fuzzy search go!\n      if (fullMetaSearchVal) {\n        debouncedFuzzySearch(Object.keys(state.metaHaystackDictionary), query, fuzzyMetaDispatch);\n      } else {\n        debouncedFuzzySearch(Object.keys(state.nameHaystackDictionary), query, fuzzyNameDispatch);\n      }\n    }\n  }\n\n  /* Settings switches */\n  const additionalSettings = (\n    <AdditionalSettings\n      state={state}\n      onChangeFullMetaSearch={() => {\n        const newVal = !state.fullMetaSearch;\n        dispatch(setFullMetaSearch(newVal));\n        onChange({ ...query, fullMetaSearch: newVal });\n        searchCallback(state.fuzzySearchQuery, newVal);\n      }}\n      onChangeIncludeNullMetadata={() => {\n        dispatch(setIncludeNullMetadata(!state.includeNullMetadata));\n        onChange({ ...query, includeNullMetadata: !state.includeNullMetadata });\n      }}\n      onChangeDisableTextWrap={() => {\n        dispatch(setDisableTextWrap());\n        onChange({ ...query, disableTextWrap: !state.disableTextWrap });\n        tracking('grafana_prom_metric_encycopedia_disable_text_wrap_interaction', state, '');\n      }}\n      onChangeUseBackend={() => {\n        const newVal = !state.useBackend;\n        dispatch(setUseBackend(newVal));\n        onChange({ ...query, useBackend: newVal });\n        if (newVal === false) {\n          // rebuild the metrics metadata if we turn off useBackend\n          updateMetricsMetadata();\n        } else {\n          // check if there is text in the browse search and update\n          if (state.fuzzySearchQuery !== '') {\n            debouncedBackendSearch(state.fuzzySearchQuery);\n          }\n          // otherwise wait for user typing\n        }\n      }}\n    />\n  );\n\n  return (\n    <Modal\n      data-testid={metricsModaltestIds.metricModal}\n      isOpen={isOpen}\n      title=\"Metrics explorer\"\n      onDismiss={onClose}\n      aria-label=\"Browse metrics\"\n      className={styles.modal}\n    >\n      <FeedbackLink feedbackUrl=\"https://forms.gle/DEMAJHoAMpe3e54CA\" />\n      <div\n        className={styles.inputWrapper}\n        data-testid={selectors.components.DataSource.Prometheus.queryEditor.builder.metricsExplorer}\n      >\n        <div className={cx(styles.inputItem, styles.inputItemFirst)}>\n          <Input\n            autoFocus={true}\n            data-testid={metricsModaltestIds.searchMetric}\n            placeholder={placeholders.browse}\n            value={state.fuzzySearchQuery}\n            onInput={(e) => {\n              const value = e.currentTarget.value ?? '';\n              dispatch(setFuzzySearchQuery(value));\n              searchCallback(value, state.fullMetaSearch);\n            }}\n          />\n        </div>\n        {state.hasMetadata && (\n          <div className={styles.inputItem}>\n            <MultiSelect\n              data-testid={metricsModaltestIds.selectType}\n              inputId=\"my-select\"\n              options={typeOptions}\n              value={state.selectedTypes}\n              placeholder={placeholders.type}\n              onChange={(v) => dispatch(setSelectedTypes(v))}\n            />\n          </div>\n        )}\n        <div>\n          <Spinner className={`${styles.loadingSpinner} ${state.isLoading ? styles.visible : ''}`} />\n        </div>\n        <div className={styles.inputItem}>\n          <Toggletip\n            aria-label=\"Additional settings\"\n            content={additionalSettings}\n            placement=\"bottom-end\"\n            closeButton={false}\n          >\n            <ButtonGroup className={styles.settingsBtn}>\n              <Button\n                variant=\"secondary\"\n                size=\"md\"\n                onClick={() => dispatch(showAdditionalSettings())}\n                data-testid={metricsModaltestIds.showAdditionalSettings}\n                className={styles.noBorder}\n              >\n                Additional Settings\n              </Button>\n              <Button\n                className={styles.noBorder}\n                variant=\"secondary\"\n                icon={state.showAdditionalSettings ? 'angle-up' : 'angle-down'}\n              />\n            </ButtonGroup>\n          </Toggletip>\n        </div>\n      </div>\n      <div className={styles.resultsData}>\n        {query.metric && <i className={styles.currentlySelected}>Currently selected: {query.metric}</i>}\n        {query.labels.length > 0 && (\n          <div className={styles.resultsDataFiltered}>\n            <Icon name=\"info-circle\" size=\"sm\" />\n            <div className={styles.resultsDataFilteredText}>\n              &nbsp;These metrics have been pre-filtered by labels chosen in the label filters.\n            </div>\n          </div>\n        )}\n      </div>\n      <div className={styles.results}>\n        {state.metrics && (\n          <ResultsTable\n            metrics={displayedMetrics(state, dispatch)}\n            onChange={onChange}\n            onClose={onClose}\n            query={query}\n            state={state}\n            disableTextWrap={state.disableTextWrap}\n          />\n        )}\n      </div>\n      <div className={styles.resultsFooter}>\n        <div className={styles.resultsAmount}>\n          Showing {state.filteredMetricCount} of {state.totalMetricCount} results\n        </div>\n        <Pagination\n          currentPage={state.pageNum ?? 1}\n          numberOfPages={calculatePageList(state).length}\n          onNavigate={(val: number) => {\n            const page = val ?? 1;\n            dispatch(setPageNum(page));\n          }}\n        />\n        <div className={styles.resultsPerPageWrapper}>\n          <p className={styles.resultsPerPageLabel}># Results per page&nbsp;</p>\n          <Input\n            data-testid={metricsModaltestIds.resultsPerPage}\n            value={calculateResultsPerPage(state.resultsPerPage, DEFAULT_RESULTS_PER_PAGE, MAXIMUM_RESULTS_PER_PAGE)}\n            placeholder=\"results per page\"\n            width={10}\n            title={'The maximum results per page is ' + MAXIMUM_RESULTS_PER_PAGE}\n            type=\"number\"\n            onInput={(e) => {\n              const value = +e.currentTarget.value;\n\n              if (isNaN(value) || value >= MAXIMUM_RESULTS_PER_PAGE) {\n                return;\n              }\n\n              dispatch(setResultsPerPage(value));\n            }}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport const metricsModaltestIds = {\n  metricModal: 'metric-modal',\n  searchMetric: 'search-metric',\n  searchWithMetadata: 'search-with-metadata',\n  selectType: 'select-type',\n  metricCard: 'metric-card',\n  useMetric: 'use-metric',\n  searchPage: 'search-page',\n  resultsPerPage: 'results-per-page',\n  setUseBackend: 'set-use-backend',\n  showAdditionalSettings: 'show-additional-settings',\n};\n\nconst stateSlice = createSlice({\n  name: 'metrics-modal-state',\n  initialState: initialState(),\n  reducers: {\n    filterMetricsBackend: (\n      state,\n      action: PayloadAction<{\n        metrics: MetricsData;\n        filteredMetricCount: number;\n        isLoading: boolean;\n      }>\n    ) => {\n      state.metrics = action.payload.metrics;\n      state.filteredMetricCount = action.payload.filteredMetricCount;\n      state.isLoading = action.payload.isLoading;\n    },\n    buildMetrics: (state, action: PayloadAction<MetricsModalMetadata>) => {\n      state.isLoading = action.payload.isLoading;\n      state.metrics = action.payload.metrics;\n      state.hasMetadata = action.payload.hasMetadata;\n      state.metaHaystackDictionary = action.payload.metaHaystackDictionary;\n      state.nameHaystackDictionary = action.payload.nameHaystackDictionary;\n      state.totalMetricCount = action.payload.totalMetricCount;\n      state.filteredMetricCount = action.payload.filteredMetricCount;\n    },\n    setIsLoading: (state, action: PayloadAction<boolean>) => {\n      state.isLoading = action.payload;\n    },\n    setFilteredMetricCount: (state, action: PayloadAction<number>) => {\n      state.filteredMetricCount = action.payload;\n    },\n    setResultsPerPage: (state, action: PayloadAction<number>) => {\n      state.resultsPerPage = action.payload;\n    },\n    setPageNum: (state, action: PayloadAction<number>) => {\n      state.pageNum = action.payload;\n    },\n    setFuzzySearchQuery: (state, action: PayloadAction<string>) => {\n      state.fuzzySearchQuery = action.payload;\n      state.pageNum = 1;\n    },\n    setNameHaystack: (state, action: PayloadAction<string[][]>) => {\n      state.nameHaystackOrder = action.payload[0];\n      state.nameHaystackMatches = action.payload[1];\n    },\n    setMetaHaystack: (state, action: PayloadAction<string[][]>) => {\n      state.metaHaystackOrder = action.payload[0];\n      state.metaHaystackMatches = action.payload[1];\n    },\n    setFullMetaSearch: (state, action: PayloadAction<boolean>) => {\n      state.fullMetaSearch = action.payload;\n      state.pageNum = 1;\n    },\n    setIncludeNullMetadata: (state, action: PayloadAction<boolean>) => {\n      state.includeNullMetadata = action.payload;\n      state.pageNum = 1;\n    },\n    setSelectedTypes: (state, action: PayloadAction<Array<SelectableValue<string>>>) => {\n      state.selectedTypes = action.payload;\n      state.pageNum = 1;\n    },\n    setUseBackend: (state, action: PayloadAction<boolean>) => {\n      state.useBackend = action.payload;\n      state.fullMetaSearch = false;\n      state.pageNum = 1;\n    },\n    setDisableTextWrap: (state) => {\n      state.disableTextWrap = !state.disableTextWrap;\n    },\n    showAdditionalSettings: (state) => {\n      state.showAdditionalSettings = !state.showAdditionalSettings;\n    },\n  },\n});\n\n// actions to update the state\nexport const {\n  setIsLoading,\n  buildMetrics,\n  filterMetricsBackend,\n  setResultsPerPage,\n  setPageNum,\n  setFuzzySearchQuery,\n  setNameHaystack,\n  setMetaHaystack,\n  setFullMetaSearch,\n  setIncludeNullMetadata,\n  setSelectedTypes,\n  setUseBackend,\n  setDisableTextWrap,\n  showAdditionalSettings,\n  setFilteredMetricCount,\n} = stateSlice.actions;\n"],"names":["query","_a"],"mappings":"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"}