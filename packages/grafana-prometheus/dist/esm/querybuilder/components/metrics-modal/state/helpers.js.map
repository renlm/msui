{"version":3,"file":"helpers.js","sources":["../../../../../../src/querybuilder/components/metrics-modal/state/helpers.ts"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/metrics-modal/state/helpers.ts\nimport { AnyAction } from '@reduxjs/toolkit';\n\nimport { reportInteraction } from '@grafana/runtime';\n\nimport { PrometheusDatasource } from '../../../../datasource';\nimport { getMetadataHelp, getMetadataType } from '../../../../language_provider';\nimport { regexifyLabelValuesQueryString } from '../../../parsingUtils';\nimport { QueryBuilderLabelFilter } from '../../../shared/types';\nimport { PromVisualQuery } from '../../../types';\nimport { setFilteredMetricCount } from '../MetricsModal';\nimport { HaystackDictionary, MetricData, MetricsData, PromFilterOption } from '../types';\n\nimport { MetricsModalMetadata, MetricsModalState } from './state';\n\n// const { setFilteredMetricCount } = stateSlice.actions;\n\nexport async function setMetrics(\n  datasource: PrometheusDatasource,\n  query: PromVisualQuery,\n  initialMetrics?: string[]\n): Promise<MetricsModalMetadata> {\n  // metadata is set in the metric select now\n  // use this to disable metadata search and display\n  let hasMetadata = true;\n  const metadata = datasource.languageProvider.metricsMetadata;\n  if (metadata && Object.keys(metadata).length === 0) {\n    hasMetadata = false;\n  }\n\n  let nameHaystackDictionaryData: HaystackDictionary = {};\n  let metaHaystackDictionaryData: HaystackDictionary = {};\n\n  // pass in metrics from getMetrics in the query builder, reduced in the metric select\n  let metricsData: MetricsData | undefined;\n\n  metricsData = initialMetrics?.map((m: string) => {\n    const metricData = buildMetricData(m, datasource);\n\n    const metaDataString = `${m}Â¦${metricData.description}`;\n\n    nameHaystackDictionaryData[m] = metricData;\n    metaHaystackDictionaryData[metaDataString] = metricData;\n\n    return metricData;\n  });\n\n  return {\n    isLoading: false,\n    hasMetadata: hasMetadata,\n    metrics: metricsData ?? [],\n    metaHaystackDictionary: metaHaystackDictionaryData,\n    nameHaystackDictionary: nameHaystackDictionaryData,\n    totalMetricCount: metricsData?.length ?? 0,\n    filteredMetricCount: metricsData?.length ?? 0,\n  };\n}\n\n/**\n * Builds the metric data object with type and description\n *\n * @param   metric  The metric name\n * @param   datasource  The Prometheus datasource for mapping metradata to the metric name\n * @returns A MetricData object.\n */\nfunction buildMetricData(metric: string, datasource: PrometheusDatasource): MetricData {\n  let type = getMetadataType(metric, datasource.languageProvider.metricsMetadata!);\n\n  const description = getMetadataHelp(metric, datasource.languageProvider.metricsMetadata!);\n\n  ['histogram', 'summary'].forEach((t) => {\n    if (description?.toLowerCase().includes(t) && type !== t) {\n      type += ` (${t})`;\n    }\n  });\n\n  const oldHistogramMatch = metric.match(/^\\w+_bucket$|^\\w+_bucket{.*}$/);\n\n  if (type === 'histogram' && !oldHistogramMatch) {\n    type = 'native histogram';\n  }\n\n  const metricData: MetricData = {\n    value: metric,\n    type: type,\n    description: description,\n  };\n\n  return metricData;\n}\n\n/**\n * The filtered and paginated metrics displayed in the modal\n * */\nexport function displayedMetrics(state: MetricsModalState, dispatch: React.Dispatch<AnyAction>) {\n  const filteredSorted: MetricsData = filterMetrics(state);\n\n  if (!state.isLoading && state.filteredMetricCount !== filteredSorted.length) {\n    dispatch(setFilteredMetricCount(filteredSorted.length));\n  }\n\n  return sliceMetrics(filteredSorted, state.pageNum, state.resultsPerPage);\n}\n\n/**\n * Filter the metrics with all the options, fuzzy, type, null metadata\n */\nexport function filterMetrics(state: MetricsModalState): MetricsData {\n  let filteredMetrics: MetricsData = state.metrics;\n\n  if (state.fuzzySearchQuery && !state.useBackend) {\n    if (state.fullMetaSearch) {\n      filteredMetrics = state.metaHaystackOrder.map((needle: string) => state.metaHaystackDictionary[needle]);\n    } else {\n      filteredMetrics = state.nameHaystackOrder.map((needle: string) => state.nameHaystackDictionary[needle]);\n    }\n  }\n\n  if (state.selectedTypes.length > 0) {\n    filteredMetrics = filteredMetrics.filter((m: MetricData, idx) => {\n      // Matches type\n      const matchesSelectedType = state.selectedTypes.some((t) => {\n        if (m.type && t.value) {\n          return m.type.includes(t.value);\n        }\n\n        if (!m.type && t.value === 'no type') {\n          return true;\n        }\n\n        return false;\n      });\n\n      // when a user filters for type, only return metrics with defined types\n      return matchesSelectedType;\n    });\n  }\n\n  if (!state.includeNullMetadata) {\n    filteredMetrics = filteredMetrics.filter((m: MetricData) => {\n      return m.type !== undefined && m.description !== undefined;\n    });\n  }\n\n  return filteredMetrics;\n}\n\nexport function calculatePageList(state: MetricsModalState) {\n  if (!state.metrics.length) {\n    return [];\n  }\n\n  const calcResultsPerPage: number = state.resultsPerPage === 0 ? 1 : state.resultsPerPage;\n\n  const pages = Math.floor(filterMetrics(state).length / calcResultsPerPage) + 1;\n\n  return [...Array(pages).keys()].map((i) => i + 1);\n}\n\nexport function sliceMetrics(metrics: MetricsData, pageNum: number, resultsPerPage: number) {\n  const calcResultsPerPage: number = resultsPerPage === 0 ? 1 : resultsPerPage;\n  const start: number = pageNum === 1 ? 0 : (pageNum - 1) * calcResultsPerPage;\n  const end: number = start + calcResultsPerPage;\n  return metrics.slice(start, end);\n}\n\nexport const calculateResultsPerPage = (results: number, defaultResults: number, max: number) => {\n  if (results < 1) {\n    return 1;\n  }\n\n  if (results > max) {\n    return max;\n  }\n\n  return results ?? defaultResults;\n};\n\n/**\n * The backend query that replaces the uFuzzy search when the option 'useBackend' has been selected\n * this is a regex search either to the series or labels Prometheus endpoint\n * depending on which the Prometheus type or version supports\n * @param metricText\n * @param labels\n * @param datasource\n */\nexport async function getBackendSearchMetrics(\n  metricText: string,\n  labels: QueryBuilderLabelFilter[],\n  datasource: PrometheusDatasource\n): Promise<Array<{ value: string }>> {\n  const queryString = regexifyLabelValuesQueryString(metricText);\n\n  const labelsParams = labels.map((label) => {\n    return `,${label.label}=\"${label.value}\"`;\n  });\n\n  const params = `label_values({__name__=~\".*${queryString}\"${labels ? labelsParams.join() : ''}},__name__)`;\n\n  const results = datasource.metricFindQuery(params);\n\n  return await results.then((results) => {\n    return results.map((result) => buildMetricData(result.text, datasource));\n  });\n}\n\nexport function tracking(event: string, state?: MetricsModalState | null, metric?: string, query?: PromVisualQuery) {\n  switch (event) {\n    case 'grafana_prom_metric_encycopedia_tracking':\n      reportInteraction(event, {\n        metric: metric,\n        hasMetadata: state?.hasMetadata,\n        totalMetricCount: state?.totalMetricCount,\n        fuzzySearchQuery: state?.fuzzySearchQuery,\n        fullMetaSearch: state?.fullMetaSearch,\n        selectedTypes: state?.selectedTypes,\n        useRegexSearch: state?.useBackend,\n        includeResultsWithoutMetadata: state?.includeNullMetadata,\n      });\n    case 'grafana_prom_metric_encycopedia_disable_text_wrap_interaction':\n      reportInteraction(event, {\n        disableTextWrap: state?.disableTextWrap,\n      });\n    case 'grafana_prometheus_metric_encyclopedia_open':\n      reportInteraction(event, {\n        query: query,\n      });\n  }\n}\n\nexport const promTypes: PromFilterOption[] = [\n  {\n    value: 'counter',\n    description:\n      'A cumulative metric that represents a single monotonically increasing counter whose value can only increase or be reset to zero on restart.',\n  },\n  {\n    value: 'gauge',\n    description: 'A metric that represents a single numerical value that can arbitrarily go up and down.',\n  },\n  {\n    value: 'histogram',\n    description:\n      'A histogram samples observations (usually things like request durations or response sizes) and counts them in configurable buckets.',\n  },\n  {\n    value: 'native histogram',\n    description:\n      'Native histograms are different from classic Prometheus histograms in a number of ways: Native histogram bucket boundaries are calculated by a formula that depends on the scale (resolution) of the native histogram, and are not user defined.',\n  },\n  {\n    value: 'summary',\n    description:\n      'A summary samples observations (usually things like request durations and response sizes) and can calculate configurable quantiles over a sliding time window.',\n  },\n  {\n    value: 'unknown',\n    description: 'These metrics have been given the type unknown in the metadata.',\n  },\n  {\n    value: 'no type',\n    description: 'These metrics have no defined type in the metadata.',\n  },\n];\n\nexport const placeholders = {\n  browse: 'Search metrics by name',\n  metadataSearchSwitch: 'Include description in search',\n  type: 'Filter by type',\n  includeNullMetadata: 'Include results with no metadata',\n  setUseBackend: 'Enable regex search',\n};\n"],"names":["results"],"mappings":"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"}