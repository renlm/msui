{"version":3,"file":"NestedQueryList.js","sources":["../../../../src/querybuilder/components/NestedQueryList.tsx"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/NestedQueryList.tsx\nimport React from 'react';\n\nimport { Stack } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { PromVisualQuery, PromVisualQueryBinary } from '../types';\n\nimport { NestedQuery } from './NestedQuery';\n\nexport interface NestedQueryListProps {\n  query: PromVisualQuery;\n  datasource: PrometheusDatasource;\n  onChange: (query: PromVisualQuery) => void;\n  onRunQuery: () => void;\n  showExplain: boolean;\n}\n\nexport function NestedQueryList(props: NestedQueryListProps) {\n  const { query, datasource, onChange, onRunQuery, showExplain } = props;\n  const nestedQueries = query.binaryQueries ?? [];\n\n  const onNestedQueryUpdate = (index: number, update: PromVisualQueryBinary) => {\n    const updatedList = [...nestedQueries];\n    updatedList.splice(index, 1, update);\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  const onRemove = (index: number) => {\n    const updatedList = [...nestedQueries.slice(0, index), ...nestedQueries.slice(index + 1)];\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  return (\n    <Stack direction=\"column\" gap={1}>\n      {nestedQueries.map((nestedQuery, index) => (\n        <NestedQuery\n          key={index.toString()}\n          nestedQuery={nestedQuery}\n          index={index}\n          onChange={onNestedQueryUpdate}\n          datasource={datasource}\n          onRemove={onRemove}\n          onRunQuery={onRunQuery}\n          showExplain={showExplain}\n        />\n      ))}\n    </Stack>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAkBO,SAAS,gBAAgB,KAA6B,EAAA;AAlB7D,EAAA,IAAA,EAAA,CAAA;AAmBE,EAAA,MAAM,EAAE,KAAO,EAAA,UAAA,EAAY,QAAU,EAAA,UAAA,EAAY,aAAgB,GAAA,KAAA,CAAA;AACjE,EAAA,MAAM,aAAgB,GAAA,CAAA,EAAA,GAAA,KAAA,CAAM,aAAN,KAAA,IAAA,GAAA,EAAA,GAAuB,EAAC,CAAA;AAE9C,EAAM,MAAA,mBAAA,GAAsB,CAAC,KAAA,EAAe,MAAkC,KAAA;AAC5E,IAAM,MAAA,WAAA,GAAc,CAAC,GAAG,aAAa,CAAA,CAAA;AACrC,IAAY,WAAA,CAAA,MAAA,CAAO,KAAO,EAAA,CAAA,EAAG,MAAM,CAAA,CAAA;AACnC,IAAA,QAAA,CAAS,aAAK,CAAA,cAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAL,EAAY,aAAA,EAAe,aAAa,CAAA,CAAA,CAAA;AAAA,GACnD,CAAA;AAEA,EAAM,MAAA,QAAA,GAAW,CAAC,KAAkB,KAAA;AAClC,IAAA,MAAM,WAAc,GAAA,CAAC,GAAG,aAAA,CAAc,KAAM,CAAA,CAAA,EAAG,KAAK,CAAA,EAAG,GAAG,aAAA,CAAc,KAAM,CAAA,KAAA,GAAQ,CAAC,CAAC,CAAA,CAAA;AACxF,IAAA,QAAA,CAAS,aAAK,CAAA,cAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAL,EAAY,aAAA,EAAe,aAAa,CAAA,CAAA,CAAA;AAAA,GACnD,CAAA;AAEA,EACE,uBAAA,KAAA,CAAA,aAAA,CAAC,KAAM,EAAA,EAAA,SAAA,EAAU,QAAS,EAAA,GAAA,EAAK,KAC5B,aAAc,CAAA,GAAA,CAAI,CAAC,WAAA,EAAa,KAC/B,qBAAA,KAAA,CAAA,aAAA;AAAA,IAAC,WAAA;AAAA,IAAA;AAAA,MACC,GAAA,EAAK,MAAM,QAAS,EAAA;AAAA,MACpB,WAAA;AAAA,MACA,KAAA;AAAA,MACA,QAAU,EAAA,mBAAA;AAAA,MACV,UAAA;AAAA,MACA,QAAA;AAAA,MACA,UAAA;AAAA,MACA,WAAA;AAAA,KAAA;AAAA,GAEH,CACH,CAAA,CAAA;AAEJ;;;;"}