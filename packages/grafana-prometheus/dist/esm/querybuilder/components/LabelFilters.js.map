{"version":3,"file":"LabelFilters.js","sources":["../../../../src/querybuilder/components/LabelFilters.tsx"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/LabelFilters.tsx\nimport { css, cx } from '@emotion/css';\nimport { isEqual } from 'lodash';\nimport React, { useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorFieldGroup, EditorList } from '@grafana/experimental';\nimport { InlineFieldRow, InlineLabel } from '@grafana/ui';\n\nimport { QueryBuilderLabelFilter } from '../shared/types';\n\nimport { LabelFilterItem } from './LabelFilterItem';\n\nexport const MISSING_LABEL_FILTER_ERROR_MESSAGE = 'Select at least 1 label filter (label and value)';\n\nexport interface LabelFiltersProps {\n  labelsFilters: QueryBuilderLabelFilter[];\n  onChange: (labelFilters: Array<Partial<QueryBuilderLabelFilter>>) => void;\n  onGetLabelNames: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  onGetLabelValues: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  /** If set to true, component will show error message until at least 1 filter is selected */\n  labelFilterRequired?: boolean;\n  getLabelValuesAutofillSuggestions: (query: string, labelName?: string) => Promise<SelectableValue[]>;\n  debounceDuration: number;\n  variableEditor?: boolean;\n}\n\nexport function LabelFilters({\n  labelsFilters,\n  onChange,\n  onGetLabelNames,\n  onGetLabelValues,\n  labelFilterRequired,\n  getLabelValuesAutofillSuggestions,\n  debounceDuration,\n  variableEditor,\n}: LabelFiltersProps) {\n  const defaultOp = '=';\n  const [items, setItems] = useState<Array<Partial<QueryBuilderLabelFilter>>>([{ op: defaultOp }]);\n\n  useEffect(() => {\n    if (labelsFilters.length > 0) {\n      setItems(labelsFilters);\n    } else {\n      setItems([{ op: defaultOp }]);\n    }\n  }, [labelsFilters]);\n\n  const onLabelsChange = (newItems: Array<Partial<QueryBuilderLabelFilter>>) => {\n    setItems(newItems);\n\n    // Extract full label filters with both label & value\n    const newLabels = newItems.filter((x) => x.label != null && x.value != null);\n    if (!isEqual(newLabels, labelsFilters)) {\n      onChange(newLabels);\n    }\n  };\n\n  const hasLabelFilter = items.some((item) => item.label && item.value);\n\n  const editorList = () => {\n    return (\n      <EditorList\n        items={items}\n        onChange={onLabelsChange}\n        renderItem={(item: Partial<QueryBuilderLabelFilter>, onChangeItem, onDelete) => (\n          <LabelFilterItem\n            debounceDuration={debounceDuration}\n            item={item}\n            defaultOp={defaultOp}\n            onChange={onChangeItem}\n            onDelete={onDelete}\n            onGetLabelNames={onGetLabelNames}\n            onGetLabelValues={onGetLabelValues}\n            invalidLabel={labelFilterRequired && !item.label}\n            invalidValue={labelFilterRequired && !item.value}\n            getLabelValuesAutofillSuggestions={getLabelValuesAutofillSuggestions}\n          />\n        )}\n      />\n    );\n  };\n\n  return (\n    <>\n      {variableEditor ? (\n        <InlineFieldRow>\n          <div\n            className={cx(\n              css({\n                display: 'flex',\n              })\n            )}\n          >\n            <InlineLabel\n              width={20}\n              tooltip={<div>Optional: used to filter the metric select for this query type.</div>}\n            >\n              Label filters\n            </InlineLabel>\n            {editorList()}\n          </div>\n        </InlineFieldRow>\n      ) : (\n        <EditorFieldGroup>\n          <EditorField\n            label=\"Label filters\"\n            error={MISSING_LABEL_FILTER_ERROR_MESSAGE}\n            invalid={labelFilterRequired && !hasLabelFilter}\n          >\n            {editorList()}\n          </EditorField>\n        </EditorFieldGroup>\n      )}\n    </>\n  );\n}\n"],"names":[],"mappings":"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"}