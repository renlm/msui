{"version":3,"file":"MetricsLabelsSection.js","sources":["../../../../src/querybuilder/components/MetricsLabelsSection.tsx"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/MetricsLabelsSection.tsx\nimport React, { useCallback } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { getMetadataString } from '../../language_provider';\nimport { truncateResult } from '../../language_utils';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { regexifyLabelValuesQueryString } from '../parsingUtils';\nimport { QueryBuilderLabelFilter } from '../shared/types';\nimport { PromVisualQuery } from '../types';\n\nimport { LabelFilters } from './LabelFilters';\nimport { MetricSelect } from './MetricSelect';\n\nexport interface MetricsLabelsSectionProps {\n  query: PromVisualQuery;\n  datasource: PrometheusDatasource;\n  onChange: (update: PromVisualQuery) => void;\n  variableEditor?: boolean;\n  onBlur?: () => void;\n}\n\nexport function MetricsLabelsSection({\n  datasource,\n  query,\n  onChange,\n  onBlur,\n  variableEditor,\n}: MetricsLabelsSectionProps) {\n  // fixing the use of 'as' from refactoring\n  // @ts-ignore\n  const onChangeLabels = (labels) => {\n    onChange({ ...query, labels });\n  };\n  /**\n   * Map metric metadata to SelectableValue for Select component and also adds defined template variables to the list.\n   */\n  const withTemplateVariableOptions = useCallback(\n    async (optionsPromise: Promise<SelectableValue[]>): Promise<SelectableValue[]> => {\n      const variables = datasource.getVariables();\n      const options = await optionsPromise;\n      return [\n        ...variables.map((value: string) => ({ label: value, value })),\n        ...options.map((option: SelectableValue) => ({\n          label: option.value,\n          value: option.value,\n          title: option.description,\n        })),\n      ];\n    },\n    [datasource]\n  );\n\n  /**\n   * Function kicked off when user interacts with label in label filters.\n   * Formats a promQL expression and passes that off to helper functions depending on API support\n   * @param forLabel\n   */\n  const onGetLabelNames = async (forLabel: Partial<QueryBuilderLabelFilter>): Promise<SelectableValue[]> => {\n    // If no metric we need to use a different method\n    if (!query.metric) {\n      await datasource.languageProvider.fetchLabels();\n      return datasource.languageProvider.getLabelKeys().map((k) => ({ value: k }));\n    }\n\n    const labelsToConsider = query.labels.filter((x) => x !== forLabel);\n    labelsToConsider.push({ label: '__name__', op: '=', value: query.metric });\n    const expr = promQueryModeller.renderLabels(labelsToConsider);\n\n    let labelsIndex: Record<string, string[]> = await datasource.languageProvider.fetchLabelsWithMatch(expr);\n\n    // filter out already used labels\n    return Object.keys(labelsIndex)\n      .filter((labelName) => !labelsToConsider.find((filter) => filter.label === labelName))\n      .map((k) => ({ value: k }));\n  };\n\n  const getLabelValuesAutocompleteSuggestions = (\n    queryString?: string,\n    labelName?: string\n  ): Promise<SelectableValue[]> => {\n    const forLabel = {\n      label: labelName ?? '__name__',\n      op: '=~',\n      value: regexifyLabelValuesQueryString(`.*${queryString}`),\n    };\n    const labelsToConsider = query.labels.filter((x) => x.label !== forLabel.label);\n    labelsToConsider.push(forLabel);\n    if (query.metric) {\n      labelsToConsider.push({ label: '__name__', op: '=', value: query.metric });\n    }\n    const interpolatedLabelsToConsider = labelsToConsider.map((labelObject) => ({\n      ...labelObject,\n      label: datasource.interpolateString(labelObject.label),\n      value: datasource.interpolateString(labelObject.value),\n    }));\n    const expr = promQueryModeller.renderLabels(interpolatedLabelsToConsider);\n    let response: Promise<SelectableValue[]>;\n    if (datasource.hasLabelsMatchAPISupport()) {\n      response = getLabelValuesFromLabelValuesAPI(forLabel, expr);\n    } else {\n      response = getLabelValuesFromSeriesAPI(forLabel, expr);\n    }\n\n    return response.then((response: SelectableValue[]) => {\n      truncateResult(response);\n      return response;\n    });\n  };\n\n  /**\n   * Helper function to fetch and format label value results from legacy API\n   * @param forLabel\n   * @param promQLExpression\n   */\n  const getLabelValuesFromSeriesAPI = (\n    forLabel: Partial<QueryBuilderLabelFilter>,\n    promQLExpression: string\n  ): Promise<SelectableValue[]> => {\n    if (!forLabel.label) {\n      return Promise.resolve([]);\n    }\n    const result = datasource.languageProvider.fetchSeries(promQLExpression);\n    const forLabelInterpolated = datasource.interpolateString(forLabel.label);\n    return result.then((result) => {\n      // This query returns duplicate values, scrub them out\n      const set = new Set<string>();\n      result.forEach((labelValue) => {\n        const labelNameString = labelValue[forLabelInterpolated];\n        set.add(labelNameString);\n      });\n\n      return Array.from(set).map((labelValues: string) => ({ label: labelValues, value: labelValues }));\n    });\n  };\n\n  /**\n   * Helper function to fetch label values from a promql string expression and a label\n   * @param forLabel\n   * @param promQLExpression\n   */\n  const getLabelValuesFromLabelValuesAPI = (\n    forLabel: Partial<QueryBuilderLabelFilter>,\n    promQLExpression: string\n  ): Promise<SelectableValue[]> => {\n    if (!forLabel.label) {\n      return Promise.resolve([]);\n    }\n\n    const requestId = `[${datasource.uid}][${query.metric}][${forLabel.label}][${forLabel.op}]`;\n\n    return datasource.languageProvider\n      .fetchSeriesValuesWithMatch(forLabel.label, promQLExpression, requestId)\n      .then((response) => response.map((v) => ({ value: v, label: v })));\n  };\n\n  /**\n   * Function kicked off when users interact with the value of the label filters\n   * Formats a promQL expression and passes that into helper functions depending on API support\n   * @param forLabel\n   */\n  const onGetLabelValues = async (forLabel: Partial<QueryBuilderLabelFilter>): Promise<SelectableValue[]> => {\n    if (!forLabel.label) {\n      return [];\n    }\n    // If no metric is selected, we can get the raw list of labels\n    if (!query.metric) {\n      return (await datasource.languageProvider.getLabelValues(forLabel.label)).map((v) => ({ value: v }));\n    }\n\n    const labelsToConsider = query.labels.filter((x) => x !== forLabel);\n    labelsToConsider.push({ label: '__name__', op: '=', value: query.metric });\n\n    const interpolatedLabelsToConsider = labelsToConsider.map((labelObject) => ({\n      ...labelObject,\n      label: datasource.interpolateString(labelObject.label),\n      value: datasource.interpolateString(labelObject.value),\n    }));\n\n    const expr = promQueryModeller.renderLabels(interpolatedLabelsToConsider);\n\n    if (datasource.hasLabelsMatchAPISupport()) {\n      return getLabelValuesFromLabelValuesAPI(forLabel, expr);\n    } else {\n      return getLabelValuesFromSeriesAPI(forLabel, expr);\n    }\n  };\n\n  const onGetMetrics = useCallback(() => {\n    return withTemplateVariableOptions(getMetrics(datasource, query));\n  }, [datasource, query, withTemplateVariableOptions]);\n\n  return (\n    <>\n      <MetricSelect\n        query={query}\n        onChange={onChange}\n        onGetMetrics={onGetMetrics}\n        datasource={datasource}\n        labelsFilters={query.labels}\n        metricLookupDisabled={datasource.lookupsDisabled}\n        onBlur={onBlur ? onBlur : () => {}}\n        variableEditor={variableEditor}\n      />\n      <LabelFilters\n        debounceDuration={datasource.getDebounceTimeInMilliseconds()}\n        getLabelValuesAutofillSuggestions={getLabelValuesAutocompleteSuggestions}\n        labelsFilters={query.labels}\n        onChange={onChangeLabels}\n        onGetLabelNames={(forLabel) => withTemplateVariableOptions(onGetLabelNames(forLabel))}\n        onGetLabelValues={(forLabel) => withTemplateVariableOptions(onGetLabelValues(forLabel))}\n        variableEditor={variableEditor}\n      />\n    </>\n  );\n}\n\n/**\n * Returns list of metrics, either all or filtered by query param. It also adds description string to each metric if it\n * exists.\n * @param datasource\n * @param query\n */\nasync function getMetrics(\n  datasource: PrometheusDatasource,\n  query: PromVisualQuery\n): Promise<Array<{ value: string; description?: string }>> {\n  // Makes sure we loaded the metadata for metrics. Usually this is done in the start() method of the provider but we\n  // don't use it with the visual builder and there is no need to run all the start() setup anyway.\n  if (!datasource.languageProvider.metricsMetadata) {\n    await datasource.languageProvider.loadMetricsMetadata();\n  }\n\n  // Error handling for when metrics metadata returns as undefined\n  if (!datasource.languageProvider.metricsMetadata) {\n    datasource.languageProvider.metricsMetadata = {};\n  }\n\n  let metrics: string[];\n  if (query.labels.length > 0) {\n    const expr = promQueryModeller.renderLabels(query.labels);\n    metrics = (await datasource.languageProvider.getSeries(expr, true))['__name__'] ?? [];\n  } else {\n    metrics = (await datasource.languageProvider.getLabelValues('__name__')) ?? [];\n  }\n\n  return metrics.map((m) => ({\n    value: m,\n    description: getMetadataString(m, datasource.languageProvider.metricsMetadata!),\n  }));\n}\n"],"names":["response","result"],"mappings":"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"}