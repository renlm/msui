{"version":3,"file":"result_transformer.js","sources":["../../src/result_transformer.ts"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/result_transformer.ts\nimport { flatten, forOwn, groupBy, partition } from 'lodash';\n\nimport {\n  CoreApp,\n  DataFrame,\n  DataFrameType,\n  DataLink,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataTopic,\n  Field,\n  FieldType,\n  getDisplayProcessor,\n  getFieldDisplayName,\n  Labels,\n  TIME_SERIES_TIME_FIELD_NAME,\n  TIME_SERIES_VALUE_FIELD_NAME,\n} from '@grafana/data';\nimport { config, getDataSourceSrv } from '@grafana/runtime';\n\nimport { ExemplarTraceIdDestination, PromMetric, PromQuery, PromValue } from './types';\n\n// handles case-insensitive Inf, +Inf, -Inf (with optional \"inity\" suffix)\nconst INFINITY_SAMPLE_REGEX = /^[+-]?inf(?:inity)?$/i;\n\nconst isTableResult = (dataFrame: DataFrame, options: DataQueryRequest<PromQuery>): boolean => {\n  // We want to process vector and scalar results in Explore as table\n  if (\n    options.app === CoreApp.Explore &&\n    (dataFrame.meta?.custom?.resultType === 'vector' || dataFrame.meta?.custom?.resultType === 'scalar')\n  ) {\n    return true;\n  }\n\n  // We want to process all dataFrames with target.format === 'table' as table\n  const target = options.targets.find((target) => target.refId === dataFrame.refId);\n  return target?.format === 'table';\n};\n\nconst isCumulativeHeatmapResult = (dataFrame: DataFrame, options: DataQueryRequest<PromQuery>): boolean => {\n  if (dataFrame.meta?.type === DataFrameType.HeatmapCells) {\n    return false;\n  }\n\n  const target = options.targets.find((target) => target.refId === dataFrame.refId);\n  return target?.format === 'heatmap';\n};\n\n// V2 result transformer used to transform query results from queries that were run through prometheus backend\nexport function transformV2(\n  response: DataQueryResponse,\n  request: DataQueryRequest<PromQuery>,\n  options: { exemplarTraceIdDestinations?: ExemplarTraceIdDestination[] }\n) {\n  // migration for dataplane field name issue\n  if (config.featureToggles.prometheusDataplane) {\n    // update displayNameFromDS in the field config\n    response.data.forEach((f: DataFrame) => {\n      const target = request.targets.find((t) => t.refId === f.refId);\n      // check that the legend is selected as auto\n      if (target && target.legendFormat === '__auto') {\n        f.fields.forEach((field) => {\n          if (field.labels?.__name__ && field.labels?.__name__ === field.name) {\n            const fieldCopy = { ...field, name: TIME_SERIES_VALUE_FIELD_NAME };\n            field.config.displayNameFromDS = getFieldDisplayName(fieldCopy, f, response.data);\n          }\n        });\n      }\n    });\n  }\n\n  const [tableFrames, framesWithoutTable] = partition<DataFrame>(response.data, (df) => isTableResult(df, request));\n  const processedTableFrames = transformDFToTable(tableFrames);\n\n  const [exemplarFrames, framesWithoutTableAndExemplars] = partition<DataFrame>(\n    framesWithoutTable,\n    (df) => df.meta?.custom?.resultType === 'exemplar'\n  );\n\n  // EXEMPLAR FRAMES: We enrich exemplar frames with data links and add dataTopic meta info\n  const { exemplarTraceIdDestinations: destinations } = options;\n  const processedExemplarFrames = exemplarFrames.map((dataFrame) => {\n    if (destinations?.length) {\n      for (const exemplarTraceIdDestination of destinations) {\n        const traceIDField = dataFrame.fields.find((field) => field.name === exemplarTraceIdDestination.name);\n        if (traceIDField) {\n          const links = getDataLinks(exemplarTraceIdDestination);\n          traceIDField.config.links = traceIDField.config.links?.length\n            ? [...traceIDField.config.links, ...links]\n            : links;\n        }\n      }\n    }\n\n    return { ...dataFrame, meta: { ...dataFrame.meta, dataTopic: DataTopic.Annotations } };\n  });\n\n  const [heatmapResults, framesWithoutTableHeatmapsAndExemplars] = partition<DataFrame>(\n    framesWithoutTableAndExemplars,\n    (df) => isCumulativeHeatmapResult(df, request)\n  );\n\n  // this works around the fact that we only get back frame.name with le buckets when legendFormat == {{le}}...which is not the default\n  heatmapResults.forEach((df) => {\n    if (df.name == null) {\n      let f = df.fields.find((f) => f.type === FieldType.number);\n\n      if (f) {\n        let le = f.labels?.le;\n\n        if (le) {\n          // this is used for sorting the frames by numeric ascending le labels for de-accum\n          df.name = le;\n          // this is used for renaming the Value fields to le label\n          f.config.displayNameFromDS = le;\n        }\n      }\n    }\n  });\n\n  // Group heatmaps by query\n  const heatmapResultsGroupedByQuery = groupBy<DataFrame>(heatmapResults, (h) => h.refId);\n\n  // Initialize empty array to push grouped histogram frames to\n  let processedHeatmapResultsGroupedByQuery: DataFrame[][] = [];\n\n  // Iterate through every query in this heatmap\n  for (const query in heatmapResultsGroupedByQuery) {\n    // Get reference to dataFrames for heatmap\n    const heatmapResultsGroup = heatmapResultsGroupedByQuery[query];\n\n    // Create a new grouping by iterating through the data frames...\n    const heatmapResultsGroupedByValues = groupBy<DataFrame>(heatmapResultsGroup, (dataFrame) => {\n      // Each data frame has `Time` and `Value` properties, we want to get the values\n      const values = dataFrame.fields.find((field) => field.type === FieldType.number);\n      // Specific functionality for special \"le\" quantile heatmap value, we know if this value exists, that we do not want to calculate the heatmap density across data frames from the same quartile\n      if (values?.labels && HISTOGRAM_QUANTILE_LABEL_NAME in values.labels) {\n        const { le, ...notLE } = values?.labels;\n        return Object.values(notLE).join();\n      }\n\n      // Return a string made from the concatenation of this frame's values to represent a grouping in the query\n      return Object.values(values?.labels ?? []).join();\n    });\n\n    // Then iterate through the resultant object\n    forOwn(heatmapResultsGroupedByValues, (dataFrames, key) => {\n      // Sort frames within each grouping\n      const sortedHeatmap = dataFrames.sort(sortSeriesByLabel);\n      // And push the sorted grouping with the rest\n      processedHeatmapResultsGroupedByQuery.push(mergeHeatmapFrames(transformToHistogramOverTime(sortedHeatmap)));\n    });\n  }\n\n  // Everything else is processed as time_series result and graph preferredVisualisationType\n  const otherFrames = framesWithoutTableHeatmapsAndExemplars.map((dataFrame) => {\n    const df: DataFrame = {\n      ...dataFrame,\n      meta: {\n        ...dataFrame.meta,\n        preferredVisualisationType: 'graph',\n      },\n    };\n    return df;\n  });\n\n  const flattenedProcessedHeatmapFrames = flatten(processedHeatmapResultsGroupedByQuery);\n\n  return {\n    ...response,\n    data: [...otherFrames, ...processedTableFrames, ...flattenedProcessedHeatmapFrames, ...processedExemplarFrames],\n  };\n}\n\nconst HISTOGRAM_QUANTILE_LABEL_NAME = 'le';\n\nexport function transformDFToTable(dfs: DataFrame[]): DataFrame[] {\n  // If no dataFrames or if 1 dataFrames with no values, return original dataFrame\n  if (dfs.length === 0 || (dfs.length === 1 && dfs[0].length === 0)) {\n    return dfs;\n  }\n\n  // Group results by refId and process dataFrames with the same refId as 1 dataFrame\n  const dataFramesByRefId = groupBy(dfs, 'refId');\n  const refIds = Object.keys(dataFramesByRefId);\n\n  const frames = refIds.map((refId) => {\n    // Create timeField, valueField and labelFields\n    const valueText = getValueText(refIds.length, refId);\n    const valueField = getValueField({ data: [], valueName: valueText });\n    const timeField = getTimeField([]);\n    const labelFields: Field[] = [];\n\n    // Fill labelsFields with labels from dataFrames\n    dataFramesByRefId[refId].forEach((df) => {\n      const frameValueField = df.fields[1];\n      const promLabels = frameValueField?.labels ?? {};\n\n      Object.keys(promLabels)\n        .sort()\n        .forEach((label) => {\n          // If we don't have label in labelFields, add it\n          if (!labelFields.some((l) => l.name === label)) {\n            const numberField = label === HISTOGRAM_QUANTILE_LABEL_NAME;\n            labelFields.push({\n              name: label,\n              config: { filterable: true },\n              type: numberField ? FieldType.number : FieldType.string,\n              values: [],\n            });\n          }\n        });\n    });\n\n    // Fill valueField, timeField and labelFields with values\n    dataFramesByRefId[refId].forEach((df) => {\n      const timeFields = df.fields[0]?.values ?? [];\n      const dataFields = df.fields[1]?.values ?? [];\n      timeFields.forEach((value) => timeField.values.push(value));\n      dataFields.forEach((value) => {\n        valueField.values.push(parseSampleValue(value));\n        const labelsForField = df.fields[1].labels ?? {};\n        labelFields.forEach((field) => field.values.push(getLabelValue(labelsForField, field.name)));\n      });\n    });\n\n    const fields = [timeField, ...labelFields, valueField];\n    return {\n      refId,\n      fields,\n      // Prometheus specific UI for instant queries\n      meta: {\n        ...dataFramesByRefId[refId][0].meta,\n        preferredVisualisationType: 'rawPrometheus' as const,\n      },\n      length: timeField.values.length,\n    };\n  });\n  return frames;\n}\n\nfunction getValueText(responseLength: number, refId = '') {\n  return responseLength > 1 ? `Value #${refId}` : 'Value';\n}\n\nfunction getDataLinks(options: ExemplarTraceIdDestination): DataLink[] {\n  const dataLinks: DataLink[] = [];\n\n  if (options.datasourceUid) {\n    const dataSourceSrv = getDataSourceSrv();\n    const dsSettings = dataSourceSrv.getInstanceSettings(options.datasourceUid);\n\n    // dsSettings is undefined because of the reasons below:\n    // - permissions issues (probably most likely)\n    // - deleted datasource\n    // - misconfiguration\n    if (dsSettings) {\n      dataLinks.push({\n        title: options.urlDisplayLabel || `Query with ${dsSettings?.name}`,\n        url: '',\n        internal: {\n          query: { query: '${__value.raw}', queryType: 'traceql' },\n          datasourceUid: options.datasourceUid,\n          datasourceName: dsSettings?.name ?? 'Data source not found',\n        },\n      });\n    }\n  }\n\n  if (options.url) {\n    dataLinks.push({\n      title: options.urlDisplayLabel || `Go to ${options.url}`,\n      url: options.url,\n      targetBlank: true,\n    });\n  }\n  return dataLinks;\n}\n\nfunction getLabelValue(metric: PromMetric, label: string): string | number {\n  if (metric.hasOwnProperty(label)) {\n    if (label === HISTOGRAM_QUANTILE_LABEL_NAME) {\n      return parseSampleValue(metric[label]);\n    }\n    return metric[label];\n  }\n  return '';\n}\n\nfunction getTimeField(data: PromValue[], isMs = false): Field<number> {\n  return {\n    name: TIME_SERIES_TIME_FIELD_NAME,\n    type: FieldType.time,\n    config: {},\n    values: data.map((val) => (isMs ? val[0] : val[0] * 1000)),\n  };\n}\n\ntype ValueFieldOptions = {\n  data: PromValue[];\n  valueName?: string;\n  parseValue?: boolean;\n  labels?: Labels;\n  displayNameFromDS?: string;\n};\n\nfunction getValueField({\n  data,\n  valueName = TIME_SERIES_VALUE_FIELD_NAME,\n  parseValue = true,\n  labels,\n  displayNameFromDS,\n}: ValueFieldOptions): Field {\n  return {\n    name: valueName,\n    type: FieldType.number,\n    display: getDisplayProcessor(),\n    config: {\n      displayNameFromDS,\n    },\n    labels,\n    values: data.map((val) => (parseValue ? parseSampleValue(val[1]) : val[1])),\n  };\n}\n\nexport function getOriginalMetricName(labelData: { [key: string]: string }) {\n  const metricName = labelData.__name__ || '';\n  delete labelData.__name__;\n  const labelPart = Object.entries(labelData)\n    .map((label) => `${label[0]}=\"${label[1]}\"`)\n    .join(',');\n  return `${metricName}{${labelPart}}`;\n}\n\nfunction mergeHeatmapFrames(frames: DataFrame[]): DataFrame[] {\n  if (frames.length === 0 || (frames.length === 1 && frames[0].length === 0)) {\n    return [];\n  }\n\n  const timeField = frames[0].fields.find((field) => field.type === FieldType.time)!;\n  const countFields = frames.map((frame) => {\n    let field = frame.fields.find((field) => field.type === FieldType.number)!;\n\n    return {\n      ...field,\n      name: field.config.displayNameFromDS!,\n    };\n  });\n\n  return [\n    {\n      ...frames[0],\n      meta: {\n        ...frames[0].meta,\n        type: DataFrameType.HeatmapRows,\n      },\n      fields: [timeField!, ...countFields],\n    },\n  ];\n}\n\n/** @internal */\nexport function transformToHistogramOverTime(seriesList: DataFrame[]): DataFrame[] {\n  /*      t1 = timestamp1, t2 = timestamp2 etc.\n            t1  t2  t3          t1  t2  t3\n    le10    10  10  0     =>    10  10  0\n    le20    20  10  30    =>    10  0   30\n    le30    30  10  35    =>    10  0   5\n    */\n\n  for (let i = seriesList.length - 1; i > 0; i--) {\n    const topSeries = seriesList[i].fields.find((s) => s.type === FieldType.number);\n    const bottomSeries = seriesList[i - 1].fields.find((s) => s.type === FieldType.number);\n    if (!topSeries || !bottomSeries) {\n      throw new Error('Prometheus heatmap transform error: data should be a time series');\n    }\n\n    for (let j = 0; j < topSeries.values.length; j++) {\n      const bottomPoint = bottomSeries.values[j] || [0];\n      topSeries.values[j] -= bottomPoint;\n\n      if (topSeries.values[j] < 1e-9) {\n        topSeries.values[j] = 0;\n      }\n    }\n  }\n\n  return seriesList;\n}\n\nexport function sortSeriesByLabel(s1: DataFrame, s2: DataFrame): number {\n  let le1, le2;\n\n  try {\n    // the state.displayName conditions are here because we also use this sorting util fn\n    // in panels where isHeatmapResult was false but we still want to sort numerically-named\n    // fields after the full unique displayName is cached in field state\n    le1 = parseSampleValue(s1.fields[1].state?.displayName ?? s1.name ?? s1.fields[1].name);\n    le2 = parseSampleValue(s2.fields[1].state?.displayName ?? s2.name ?? s2.fields[1].name);\n  } catch (err) {\n    // fail if not integer. might happen with bad queries\n    console.error(err);\n    return 0;\n  }\n\n  if (le1 > le2) {\n    return 1;\n  }\n\n  if (le1 < le2) {\n    return -1;\n  }\n\n  return 0;\n}\n\n/** @internal */\nexport function parseSampleValue(value: string): number {\n  if (INFINITY_SAMPLE_REGEX.test(value)) {\n    return value[0] === '-' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\n  }\n  return parseFloat(value);\n}\n"],"names":["target","f","_a","field"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,MAAM,qBAAwB,GAAA,uBAAA,CAAA;AAE9B,MAAM,aAAA,GAAgB,CAAC,SAAA,EAAsB,OAAkD,KAAA;AA1B/F,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AA4BE,EAAA,IACE,QAAQ,GAAQ,KAAA,OAAA,CAAQ,OACvB,KAAA,CAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,SAAA,CAAU,SAAV,IAAgB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAA,KAAhB,IAAwB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAA,MAAe,cAAY,EAAU,GAAA,CAAA,EAAA,GAAA,SAAA,CAAA,IAAA,KAAV,mBAAgB,MAAhB,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAwB,gBAAe,QAC3F,CAAA,EAAA;AACA,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAGA,EAAM,MAAA,MAAA,GAAS,QAAQ,OAAQ,CAAA,IAAA,CAAK,CAACA,OAAWA,KAAAA,OAAAA,CAAO,KAAU,KAAA,SAAA,CAAU,KAAK,CAAA,CAAA;AAChF,EAAA,OAAA,CAAO,iCAAQ,MAAW,MAAA,OAAA,CAAA;AAC5B,CAAA,CAAA;AAEA,MAAM,yBAAA,GAA4B,CAAC,SAAA,EAAsB,OAAkD,KAAA;AAxC3G,EAAA,IAAA,EAAA,CAAA;AAyCE,EAAA,IAAA,CAAA,CAAI,EAAU,GAAA,SAAA,CAAA,IAAA,KAAV,IAAgB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,MAAS,cAAc,YAAc,EAAA;AACvD,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AAEA,EAAM,MAAA,MAAA,GAAS,QAAQ,OAAQ,CAAA,IAAA,CAAK,CAACA,OAAWA,KAAAA,OAAAA,CAAO,KAAU,KAAA,SAAA,CAAU,KAAK,CAAA,CAAA;AAChF,EAAA,OAAA,CAAO,iCAAQ,MAAW,MAAA,SAAA,CAAA;AAC5B,CAAA,CAAA;AAGgB,SAAA,WAAA,CACd,QACA,EAAA,OAAA,EACA,OACA,EAAA;AAEA,EAAI,IAAA,MAAA,CAAO,eAAe,mBAAqB,EAAA;AAE7C,IAAS,QAAA,CAAA,IAAA,CAAK,OAAQ,CAAA,CAAC,CAAiB,KAAA;AACtC,MAAM,MAAA,MAAA,GAAS,QAAQ,OAAQ,CAAA,IAAA,CAAK,CAAC,CAAM,KAAA,CAAA,CAAE,KAAU,KAAA,CAAA,CAAE,KAAK,CAAA,CAAA;AAE9D,MAAI,IAAA,MAAA,IAAU,MAAO,CAAA,YAAA,KAAiB,QAAU,EAAA;AAC9C,QAAE,CAAA,CAAA,MAAA,CAAO,OAAQ,CAAA,CAAC,KAAU,KAAA;AA9DpC,UAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AA+DU,UAAI,IAAA,CAAA,CAAA,EAAA,GAAA,KAAA,CAAM,WAAN,IAAc,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,QAAA,KAAA,CAAA,CAAY,WAAM,MAAN,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAc,QAAa,MAAA,KAAA,CAAM,IAAM,EAAA;AACnE,YAAA,MAAM,SAAY,GAAA,aAAA,CAAA,cAAA,CAAA,EAAA,EAAK,KAAL,CAAA,EAAA,EAAY,MAAM,4BAA6B,EAAA,CAAA,CAAA;AACjE,YAAA,KAAA,CAAM,OAAO,iBAAoB,GAAA,mBAAA,CAAoB,SAAW,EAAA,CAAA,EAAG,SAAS,IAAI,CAAA,CAAA;AAAA,WAClF;AAAA,SACD,CAAA,CAAA;AAAA,OACH;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AAEA,EAAA,MAAM,CAAC,WAAA,EAAa,kBAAkB,CAAA,GAAI,SAAqB,CAAA,QAAA,CAAS,IAAM,EAAA,CAAC,EAAO,KAAA,aAAA,CAAc,EAAI,EAAA,OAAO,CAAC,CAAA,CAAA;AAChH,EAAM,MAAA,oBAAA,GAAuB,mBAAmB,WAAW,CAAA,CAAA;AAE3D,EAAM,MAAA,CAAC,cAAgB,EAAA,8BAA8B,CAAI,GAAA,SAAA;AAAA,IACvD,kBAAA;AAAA,IACA,CAAC,EAAI,KAAA;AA7ET,MAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AA6EY,MAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,EAAA,CAAG,IAAH,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAS,MAAT,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAiB,UAAe,MAAA,UAAA,CAAA;AAAA,KAAA;AAAA,GAC1C,CAAA;AAGA,EAAM,MAAA,EAAE,2BAA6B,EAAA,YAAA,EAAiB,GAAA,OAAA,CAAA;AACtD,EAAA,MAAM,uBAA0B,GAAA,cAAA,CAAe,GAAI,CAAA,CAAC,SAAc,KAAA;AAlFpE,IAAA,IAAA,EAAA,CAAA;AAmFI,IAAA,IAAI,6CAAc,MAAQ,EAAA;AACxB,MAAA,KAAA,MAAW,8BAA8B,YAAc,EAAA;AACrD,QAAM,MAAA,YAAA,GAAe,UAAU,MAAO,CAAA,IAAA,CAAK,CAAC,KAAU,KAAA,KAAA,CAAM,IAAS,KAAA,0BAAA,CAA2B,IAAI,CAAA,CAAA;AACpG,QAAA,IAAI,YAAc,EAAA;AAChB,UAAM,MAAA,KAAA,GAAQ,aAAa,0BAA0B,CAAA,CAAA;AACrD,UAAA,YAAA,CAAa,MAAO,CAAA,KAAA,GAAA,CAAA,CAAQ,EAAa,GAAA,YAAA,CAAA,MAAA,CAAO,UAApB,IAA2B,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAA,IACnD,CAAC,GAAG,YAAa,CAAA,MAAA,CAAO,KAAO,EAAA,GAAG,KAAK,CACvC,GAAA,KAAA,CAAA;AAAA,SACN;AAAA,OACF;AAAA,KACF;AAEA,IAAO,OAAA,aAAA,CAAA,cAAA,CAAA,EAAA,EAAK,SAAL,CAAA,EAAA,EAAgB,IAAM,EAAA,aAAA,CAAA,cAAA,CAAA,EAAA,EAAK,SAAU,CAAA,IAAA,CAAA,EAAf,EAAqB,SAAA,EAAW,SAAU,CAAA,WAAA,EAAc,CAAA,EAAA,CAAA,CAAA;AAAA,GACtF,CAAA,CAAA;AAED,EAAM,MAAA,CAAC,cAAgB,EAAA,sCAAsC,CAAI,GAAA,SAAA;AAAA,IAC/D,8BAAA;AAAA,IACA,CAAC,EAAA,KAAO,yBAA0B,CAAA,EAAA,EAAI,OAAO,CAAA;AAAA,GAC/C,CAAA;AAGA,EAAe,cAAA,CAAA,OAAA,CAAQ,CAAC,EAAO,KAAA;AAxGjC,IAAA,IAAA,EAAA,CAAA;AAyGI,IAAI,IAAA,EAAA,CAAG,QAAQ,IAAM,EAAA;AACnB,MAAI,IAAA,CAAA,GAAI,GAAG,MAAO,CAAA,IAAA,CAAK,CAACC,EAAMA,KAAAA,EAAAA,CAAE,IAAS,KAAA,SAAA,CAAU,MAAM,CAAA,CAAA;AAEzD,MAAA,IAAI,CAAG,EAAA;AACL,QAAI,IAAA,EAAA,GAAA,CAAK,EAAE,GAAA,CAAA,CAAA,MAAA,KAAF,IAAU,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,EAAA,CAAA;AAEnB,QAAA,IAAI,EAAI,EAAA;AAEN,UAAA,EAAA,CAAG,IAAO,GAAA,EAAA,CAAA;AAEV,UAAA,CAAA,CAAE,OAAO,iBAAoB,GAAA,EAAA,CAAA;AAAA,SAC/B;AAAA,OACF;AAAA,KACF;AAAA,GACD,CAAA,CAAA;AAGD,EAAA,MAAM,+BAA+B,OAAmB,CAAA,cAAA,EAAgB,CAAC,CAAA,KAAM,EAAE,KAAK,CAAA,CAAA;AAGtF,EAAA,IAAI,wCAAuD,EAAC,CAAA;AAG5D,EAAA,KAAA,MAAW,SAAS,4BAA8B,EAAA;AAEhD,IAAM,MAAA,mBAAA,GAAsB,6BAA6B,KAAK,CAAA,CAAA;AAG9D,IAAA,MAAM,6BAAgC,GAAA,OAAA,CAAmB,mBAAqB,EAAA,CAAC,SAAc,KAAA;AArIjG,MAAA,IAAA,EAAA,CAAA;AAuIM,MAAM,MAAA,MAAA,GAAS,UAAU,MAAO,CAAA,IAAA,CAAK,CAAC,KAAU,KAAA,KAAA,CAAM,IAAS,KAAA,SAAA,CAAU,MAAM,CAAA,CAAA;AAE/E,MAAA,IAAA,CAAI,MAAQ,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,MAAA,CAAA,MAAA,KAAU,6BAAiC,IAAA,MAAA,CAAO,MAAQ,EAAA;AACpE,QAAA,MAAyB,sCAAQ,MAAzB,CAAA,CAAO,KAAA,GAAA,SAAA,CAAU,IAAV,CAAP,IAAA,CAAA,EAAA;AACR,QAAA,OAAO,MAAO,CAAA,MAAA,CAAO,KAAK,CAAA,CAAE,IAAK,EAAA,CAAA;AAAA,OACnC;AAGA,MAAO,OAAA,MAAA,CAAO,QAAO,EAAQ,GAAA,MAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,MAAA,CAAA,MAAA,KAAR,YAAkB,EAAE,EAAE,IAAK,EAAA,CAAA;AAAA,KACjD,CAAA,CAAA;AAGD,IAAO,MAAA,CAAA,6BAAA,EAA+B,CAAC,UAAA,EAAY,GAAQ,KAAA;AAEzD,MAAM,MAAA,aAAA,GAAgB,UAAW,CAAA,IAAA,CAAK,iBAAiB,CAAA,CAAA;AAEvD,MAAA,qCAAA,CAAsC,IAAK,CAAA,kBAAA,CAAmB,4BAA6B,CAAA,aAAa,CAAC,CAAC,CAAA,CAAA;AAAA,KAC3G,CAAA,CAAA;AAAA,GACH;AAGA,EAAA,MAAM,WAAc,GAAA,sCAAA,CAAuC,GAAI,CAAA,CAAC,SAAc,KAAA;AAC5E,IAAM,MAAA,EAAA,GAAgB,iCACjB,SADiB,CAAA,EAAA;AAAA,MAEpB,IAAA,EAAM,aACD,CAAA,cAAA,CAAA,EAAA,EAAA,SAAA,CAAU,IADT,CAAA,EAAA;AAAA,QAEJ,0BAA4B,EAAA,OAAA;AAAA,OAC9B,CAAA;AAAA,KACF,CAAA,CAAA;AACA,IAAO,OAAA,EAAA,CAAA;AAAA,GACR,CAAA,CAAA;AAED,EAAM,MAAA,+BAAA,GAAkC,QAAQ,qCAAqC,CAAA,CAAA;AAErF,EAAA,OAAO,iCACF,QADE,CAAA,EAAA;AAAA,IAEL,IAAA,EAAM,CAAC,GAAG,WAAA,EAAa,GAAG,oBAAsB,EAAA,GAAG,+BAAiC,EAAA,GAAG,uBAAuB,CAAA;AAAA,GAChH,CAAA,CAAA;AACF,CAAA;AAEA,MAAM,6BAAgC,GAAA,IAAA,CAAA;AAE/B,SAAS,mBAAmB,GAA+B,EAAA;AAEhE,EAAI,IAAA,GAAA,CAAI,MAAW,KAAA,CAAA,IAAM,GAAI,CAAA,MAAA,KAAW,KAAK,GAAI,CAAA,CAAC,CAAE,CAAA,MAAA,KAAW,CAAI,EAAA;AACjE,IAAO,OAAA,GAAA,CAAA;AAAA,GACT;AAGA,EAAM,MAAA,iBAAA,GAAoB,OAAQ,CAAA,GAAA,EAAK,OAAO,CAAA,CAAA;AAC9C,EAAM,MAAA,MAAA,GAAS,MAAO,CAAA,IAAA,CAAK,iBAAiB,CAAA,CAAA;AAE5C,EAAA,MAAM,MAAS,GAAA,MAAA,CAAO,GAAI,CAAA,CAAC,KAAU,KAAA;AAEnC,IAAA,MAAM,SAAY,GAAA,YAAA,CAAa,MAAO,CAAA,MAAA,EAAQ,KAAK,CAAA,CAAA;AACnD,IAAM,MAAA,UAAA,GAAa,cAAc,EAAE,IAAA,EAAM,EAAI,EAAA,SAAA,EAAW,WAAW,CAAA,CAAA;AACnE,IAAM,MAAA,SAAA,GAAY,YAAa,CAAA,EAAE,CAAA,CAAA;AACjC,IAAA,MAAM,cAAuB,EAAC,CAAA;AAG9B,IAAA,iBAAA,CAAkB,KAAK,CAAA,CAAE,OAAQ,CAAA,CAAC,EAAO,KAAA;AAnM7C,MAAA,IAAA,EAAA,CAAA;AAoMM,MAAM,MAAA,eAAA,GAAkB,EAAG,CAAA,MAAA,CAAO,CAAC,CAAA,CAAA;AACnC,MAAA,MAAM,UAAa,GAAA,CAAA,EAAA,GAAA,eAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,eAAA,CAAiB,MAAjB,KAAA,IAAA,GAAA,EAAA,GAA2B,EAAC,CAAA;AAE/C,MAAA,MAAA,CAAO,KAAK,UAAU,CAAA,CACnB,MACA,CAAA,OAAA,CAAQ,CAAC,KAAU,KAAA;AAElB,QAAI,IAAA,CAAC,YAAY,IAAK,CAAA,CAAC,MAAM,CAAE,CAAA,IAAA,KAAS,KAAK,CAAG,EAAA;AAC9C,UAAA,MAAM,cAAc,KAAU,KAAA,6BAAA,CAAA;AAC9B,UAAA,WAAA,CAAY,IAAK,CAAA;AAAA,YACf,IAAM,EAAA,KAAA;AAAA,YACN,MAAA,EAAQ,EAAE,UAAA,EAAY,IAAK,EAAA;AAAA,YAC3B,IAAM,EAAA,WAAA,GAAc,SAAU,CAAA,MAAA,GAAS,SAAU,CAAA,MAAA;AAAA,YACjD,QAAQ,EAAC;AAAA,WACV,CAAA,CAAA;AAAA,SACH;AAAA,OACD,CAAA,CAAA;AAAA,KACJ,CAAA,CAAA;AAGD,IAAA,iBAAA,CAAkB,KAAK,CAAA,CAAE,OAAQ,CAAA,CAAC,EAAO,KAAA;AAxN7C,MAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AAyNM,MAAM,MAAA,UAAA,GAAA,CAAa,cAAG,MAAO,CAAA,CAAC,MAAX,IAAc,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAA,KAAd,YAAwB,EAAC,CAAA;AAC5C,MAAM,MAAA,UAAA,GAAA,CAAa,cAAG,MAAO,CAAA,CAAC,MAAX,IAAc,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAA,KAAd,YAAwB,EAAC,CAAA;AAC5C,MAAA,UAAA,CAAW,QAAQ,CAAC,KAAA,KAAU,UAAU,MAAO,CAAA,IAAA,CAAK,KAAK,CAAC,CAAA,CAAA;AAC1D,MAAW,UAAA,CAAA,OAAA,CAAQ,CAAC,KAAU,KAAA;AA5NpC,QAAAC,IAAAA,GAAAA,CAAAA;AA6NQ,QAAA,UAAA,CAAW,MAAO,CAAA,IAAA,CAAK,gBAAiB,CAAA,KAAK,CAAC,CAAA,CAAA;AAC9C,QAAM,MAAA,cAAA,GAAA,CAAiBA,MAAA,EAAG,CAAA,MAAA,CAAO,CAAC,CAAE,CAAA,MAAA,KAAb,IAAAA,GAAAA,GAAAA,GAAuB,EAAC,CAAA;AAC/C,QAAY,WAAA,CAAA,OAAA,CAAQ,CAAC,KAAA,KAAU,KAAM,CAAA,MAAA,CAAO,IAAK,CAAA,aAAA,CAAc,cAAgB,EAAA,KAAA,CAAM,IAAI,CAAC,CAAC,CAAA,CAAA;AAAA,OAC5F,CAAA,CAAA;AAAA,KACF,CAAA,CAAA;AAED,IAAA,MAAM,MAAS,GAAA,CAAC,SAAW,EAAA,GAAG,aAAa,UAAU,CAAA,CAAA;AACrD,IAAO,OAAA;AAAA,MACL,KAAA;AAAA,MACA,MAAA;AAAA;AAAA,MAEA,MAAM,aACD,CAAA,cAAA,CAAA,EAAA,EAAA,iBAAA,CAAkB,KAAK,CAAE,CAAA,CAAC,EAAE,IAD3B,CAAA,EAAA;AAAA,QAEJ,0BAA4B,EAAA,eAAA;AAAA,OAC9B,CAAA;AAAA,MACA,MAAA,EAAQ,UAAU,MAAO,CAAA,MAAA;AAAA,KAC3B,CAAA;AAAA,GACD,CAAA,CAAA;AACD,EAAO,OAAA,MAAA,CAAA;AACT,CAAA;AAEA,SAAS,YAAA,CAAa,cAAwB,EAAA,KAAA,GAAQ,EAAI,EAAA;AACxD,EAAA,OAAO,cAAiB,GAAA,CAAA,GAAI,CAAU,OAAA,EAAA,KAAK,CAAK,CAAA,GAAA,OAAA,CAAA;AAClD,CAAA;AAEA,SAAS,aAAa,OAAiD,EAAA;AAtPvE,EAAA,IAAA,EAAA,CAAA;AAuPE,EAAA,MAAM,YAAwB,EAAC,CAAA;AAE/B,EAAA,IAAI,QAAQ,aAAe,EAAA;AACzB,IAAA,MAAM,gBAAgB,gBAAiB,EAAA,CAAA;AACvC,IAAA,MAAM,UAAa,GAAA,aAAA,CAAc,mBAAoB,CAAA,OAAA,CAAQ,aAAa,CAAA,CAAA;AAM1E,IAAA,IAAI,UAAY,EAAA;AACd,MAAA,SAAA,CAAU,IAAK,CAAA;AAAA,QACb,KAAO,EAAA,OAAA,CAAQ,eAAmB,IAAA,CAAA,WAAA,EAAc,yCAAY,IAAI,CAAA,CAAA;AAAA,QAChE,GAAK,EAAA,EAAA;AAAA,QACL,QAAU,EAAA;AAAA,UACR,KAAO,EAAA,EAAE,KAAO,EAAA,gBAAA,EAAkB,WAAW,SAAU,EAAA;AAAA,UACvD,eAAe,OAAQ,CAAA,aAAA;AAAA,UACvB,cAAA,EAAA,CAAgB,EAAY,GAAA,UAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAA,IAAA,KAAZ,IAAoB,GAAA,EAAA,GAAA,uBAAA;AAAA,SACtC;AAAA,OACD,CAAA,CAAA;AAAA,KACH;AAAA,GACF;AAEA,EAAA,IAAI,QAAQ,GAAK,EAAA;AACf,IAAA,SAAA,CAAU,IAAK,CAAA;AAAA,MACb,KAAO,EAAA,OAAA,CAAQ,eAAmB,IAAA,CAAA,MAAA,EAAS,QAAQ,GAAG,CAAA,CAAA;AAAA,MACtD,KAAK,OAAQ,CAAA,GAAA;AAAA,MACb,WAAa,EAAA,IAAA;AAAA,KACd,CAAA,CAAA;AAAA,GACH;AACA,EAAO,OAAA,SAAA,CAAA;AACT,CAAA;AAEA,SAAS,aAAA,CAAc,QAAoB,KAAgC,EAAA;AACzE,EAAI,IAAA,MAAA,CAAO,cAAe,CAAA,KAAK,CAAG,EAAA;AAChC,IAAA,IAAI,UAAU,6BAA+B,EAAA;AAC3C,MAAO,OAAA,gBAAA,CAAiB,MAAO,CAAA,KAAK,CAAC,CAAA,CAAA;AAAA,KACvC;AACA,IAAA,OAAO,OAAO,KAAK,CAAA,CAAA;AAAA,GACrB;AACA,EAAO,OAAA,EAAA,CAAA;AACT,CAAA;AAEA,SAAS,YAAA,CAAa,IAAmB,EAAA,IAAA,GAAO,KAAsB,EAAA;AACpE,EAAO,OAAA;AAAA,IACL,IAAM,EAAA,2BAAA;AAAA,IACN,MAAM,SAAU,CAAA,IAAA;AAAA,IAChB,QAAQ,EAAC;AAAA,IACT,MAAQ,EAAA,IAAA,CAAK,GAAI,CAAA,CAAC,GAAS,KAAA,IAAA,GAAO,GAAI,CAAA,CAAC,CAAI,GAAA,GAAA,CAAI,CAAC,CAAA,GAAI,GAAK,CAAA;AAAA,GAC3D,CAAA;AACF,CAAA;AAUA,SAAS,aAAc,CAAA;AAAA,EACrB,IAAA;AAAA,EACA,SAAY,GAAA,4BAAA;AAAA,EACZ,UAAa,GAAA,IAAA;AAAA,EACb,MAAA;AAAA,EACA,iBAAA;AACF,CAA6B,EAAA;AAC3B,EAAO,OAAA;AAAA,IACL,IAAM,EAAA,SAAA;AAAA,IACN,MAAM,SAAU,CAAA,MAAA;AAAA,IAChB,SAAS,mBAAoB,EAAA;AAAA,IAC7B,MAAQ,EAAA;AAAA,MACN,iBAAA;AAAA,KACF;AAAA,IACA,MAAA;AAAA,IACA,MAAQ,EAAA,IAAA,CAAK,GAAI,CAAA,CAAC,GAAS,KAAA,UAAA,GAAa,gBAAiB,CAAA,GAAA,CAAI,CAAC,CAAC,CAAI,GAAA,GAAA,CAAI,CAAC,CAAE,CAAA;AAAA,GAC5E,CAAA;AACF,CAAA;AAEO,SAAS,sBAAsB,SAAsC,EAAA;AAC1E,EAAM,MAAA,UAAA,GAAa,UAAU,QAAY,IAAA,EAAA,CAAA;AACzC,EAAA,OAAO,SAAU,CAAA,QAAA,CAAA;AACjB,EAAA,MAAM,YAAY,MAAO,CAAA,OAAA,CAAQ,SAAS,CACvC,CAAA,GAAA,CAAI,CAAC,KAAU,KAAA,CAAA,EAAG,MAAM,CAAC,CAAC,KAAK,KAAM,CAAA,CAAC,CAAC,CAAG,CAAA,CAAA,CAAA,CAC1C,KAAK,GAAG,CAAA,CAAA;AACX,EAAO,OAAA,CAAA,EAAG,UAAU,CAAA,CAAA,EAAI,SAAS,CAAA,CAAA,CAAA,CAAA;AACnC,CAAA;AAEA,SAAS,mBAAmB,MAAkC,EAAA;AAC5D,EAAI,IAAA,MAAA,CAAO,MAAW,KAAA,CAAA,IAAM,MAAO,CAAA,MAAA,KAAW,KAAK,MAAO,CAAA,CAAC,CAAE,CAAA,MAAA,KAAW,CAAI,EAAA;AAC1E,IAAA,OAAO,EAAC,CAAA;AAAA,GACV;AAEA,EAAM,MAAA,SAAA,GAAY,MAAO,CAAA,CAAC,CAAE,CAAA,MAAA,CAAO,IAAK,CAAA,CAAC,KAAU,KAAA,KAAA,CAAM,IAAS,KAAA,SAAA,CAAU,IAAI,CAAA,CAAA;AAChF,EAAA,MAAM,WAAc,GAAA,MAAA,CAAO,GAAI,CAAA,CAAC,KAAU,KAAA;AACxC,IAAI,IAAA,KAAA,GAAQ,MAAM,MAAO,CAAA,IAAA,CAAK,CAACC,MAAUA,KAAAA,MAAAA,CAAM,IAAS,KAAA,SAAA,CAAU,MAAM,CAAA,CAAA;AAExE,IAAA,OAAO,iCACF,KADE,CAAA,EAAA;AAAA,MAEL,IAAA,EAAM,MAAM,MAAO,CAAA,iBAAA;AAAA,KACrB,CAAA,CAAA;AAAA,GACD,CAAA,CAAA;AAED,EAAO,OAAA;AAAA,IACL,aAAA,CAAA,cAAA,CAAA,EAAA,EACK,MAAO,CAAA,CAAC,CADb,CAAA,EAAA;AAAA,MAEE,IAAM,EAAA,aAAA,CAAA,cAAA,CAAA,EAAA,EACD,MAAO,CAAA,CAAC,EAAE,IADT,CAAA,EAAA;AAAA,QAEJ,MAAM,aAAc,CAAA,WAAA;AAAA,OACtB,CAAA;AAAA,MACA,MAAQ,EAAA,CAAC,SAAY,EAAA,GAAG,WAAW,CAAA;AAAA,KACrC,CAAA;AAAA,GACF,CAAA;AACF,CAAA;AAGO,SAAS,6BAA6B,UAAsC,EAAA;AAQjF,EAAA,KAAA,IAAS,IAAI,UAAW,CAAA,MAAA,GAAS,CAAG,EAAA,CAAA,GAAI,GAAG,CAAK,EAAA,EAAA;AAC9C,IAAM,MAAA,SAAA,GAAY,UAAW,CAAA,CAAC,CAAE,CAAA,MAAA,CAAO,IAAK,CAAA,CAAC,CAAM,KAAA,CAAA,CAAE,IAAS,KAAA,SAAA,CAAU,MAAM,CAAA,CAAA;AAC9E,IAAA,MAAM,YAAe,GAAA,UAAA,CAAW,CAAI,GAAA,CAAC,CAAE,CAAA,MAAA,CAAO,IAAK,CAAA,CAAC,CAAM,KAAA,CAAA,CAAE,IAAS,KAAA,SAAA,CAAU,MAAM,CAAA,CAAA;AACrF,IAAI,IAAA,CAAC,SAAa,IAAA,CAAC,YAAc,EAAA;AAC/B,MAAM,MAAA,IAAI,MAAM,kEAAkE,CAAA,CAAA;AAAA,KACpF;AAEA,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,SAAU,CAAA,MAAA,CAAO,QAAQ,CAAK,EAAA,EAAA;AAChD,MAAA,MAAM,cAAc,YAAa,CAAA,MAAA,CAAO,CAAC,CAAA,IAAK,CAAC,CAAC,CAAA,CAAA;AAChD,MAAU,SAAA,CAAA,MAAA,CAAO,CAAC,CAAK,IAAA,WAAA,CAAA;AAEvB,MAAA,IAAI,SAAU,CAAA,MAAA,CAAO,CAAC,CAAA,GAAI,IAAM,EAAA;AAC9B,QAAU,SAAA,CAAA,MAAA,CAAO,CAAC,CAAI,GAAA,CAAA,CAAA;AAAA,OACxB;AAAA,KACF;AAAA,GACF;AAEA,EAAO,OAAA,UAAA,CAAA;AACT,CAAA;AAEgB,SAAA,iBAAA,CAAkB,IAAe,EAAuB,EAAA;AAvYxE,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AAwYE,EAAA,IAAI,GAAK,EAAA,GAAA,CAAA;AAET,EAAI,IAAA;AAIF,IAAA,GAAA,GAAM,kBAAiB,EAAG,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,EAAA,CAAA,MAAA,CAAO,CAAC,CAAA,CAAE,UAAb,IAAoB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,WAAA,KAApB,IAAmC,GAAA,EAAA,GAAA,EAAA,CAAG,SAAtC,IAA8C,GAAA,EAAA,GAAA,EAAA,CAAG,MAAO,CAAA,CAAC,EAAE,IAAI,CAAA,CAAA;AACtF,IAAA,GAAA,GAAM,kBAAiB,EAAG,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,EAAA,CAAA,MAAA,CAAO,CAAC,CAAA,CAAE,UAAb,IAAoB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,WAAA,KAApB,IAAmC,GAAA,EAAA,GAAA,EAAA,CAAG,SAAtC,IAA8C,GAAA,EAAA,GAAA,EAAA,CAAG,MAAO,CAAA,CAAC,EAAE,IAAI,CAAA,CAAA;AAAA,WAC/E,GAAK,EAAA;AAEZ,IAAA,OAAA,CAAQ,MAAM,GAAG,CAAA,CAAA;AACjB,IAAO,OAAA,CAAA,CAAA;AAAA,GACT;AAEA,EAAA,IAAI,MAAM,GAAK,EAAA;AACb,IAAO,OAAA,CAAA,CAAA;AAAA,GACT;AAEA,EAAA,IAAI,MAAM,GAAK,EAAA;AACb,IAAO,OAAA,CAAA,CAAA,CAAA;AAAA,GACT;AAEA,EAAO,OAAA,CAAA,CAAA;AACT,CAAA;AAGO,SAAS,iBAAiB,KAAuB,EAAA;AACtD,EAAI,IAAA,qBAAA,CAAsB,IAAK,CAAA,KAAK,CAAG,EAAA;AACrC,IAAA,OAAO,MAAM,CAAC,CAAA,KAAM,GAAM,GAAA,MAAA,CAAO,oBAAoB,MAAO,CAAA,iBAAA,CAAA;AAAA,GAC9D;AACA,EAAA,OAAO,WAAW,KAAK,CAAA,CAAA;AACzB;;;;"}