{"version":3,"file":"PromExploreExtraField.js","sources":["../../../src/components/PromExploreExtraField.tsx"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/PromExploreExtraField.tsx\nimport { css, cx } from '@emotion/css';\nimport { isEqual } from 'lodash';\nimport React, { memo, useCallback } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { InlineFormLabel, RadioButtonGroup } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { PromQuery } from '../types';\n\nimport { PromExemplarField } from './PromExemplarField';\n\nexport interface PromExploreExtraFieldProps {\n  query: PromQuery;\n  onChange: (value: PromQuery) => void;\n  onRunQuery: () => void;\n  datasource: PrometheusDatasource;\n}\n\nexport const PromExploreExtraField = memo(({ query, datasource, onChange, onRunQuery }: PromExploreExtraFieldProps) => {\n  const rangeOptions = getQueryTypeOptions(true);\n  const prevQuery = usePrevious(query);\n\n  const onExemplarChange = useCallback(\n    (exemplar: boolean) => {\n      if (!isEqual(query, prevQuery) || exemplar !== query.exemplar) {\n        onChange({ ...query, exemplar });\n      }\n    },\n    [prevQuery, query, onChange]\n  );\n\n  function onChangeQueryStep(interval: string) {\n    onChange({ ...query, interval });\n  }\n\n  function onStepChange(e: React.SyntheticEvent<HTMLInputElement>) {\n    if (e.currentTarget.value !== query.interval) {\n      onChangeQueryStep(e.currentTarget.value);\n    }\n  }\n\n  function onReturnKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {\n    if (e.key === 'Enter' && e.shiftKey) {\n      onRunQuery();\n    }\n  }\n\n  const onQueryTypeChange = getQueryTypeChangeHandler(query, onChange);\n\n  return (\n    <div\n      aria-label=\"Prometheus extra field\"\n      className=\"gf-form-inline\"\n      data-testid={promExploreExtraFieldTestIds.extraFieldEditor}\n    >\n      {/*Query type field*/}\n      <div\n        data-testid={promExploreExtraFieldTestIds.queryTypeField}\n        className={cx(\n          'gf-form explore-input-margin',\n          css({\n            flexWrap: 'nowrap',\n          })\n        )}\n        aria-label=\"Query type field\"\n      >\n        <InlineFormLabel width=\"auto\">Query type</InlineFormLabel>\n\n        <RadioButtonGroup\n          options={rangeOptions}\n          value={query.range && query.instant ? 'both' : query.instant ? 'instant' : 'range'}\n          onChange={onQueryTypeChange}\n        />\n      </div>\n      {/*Step field*/}\n      <div\n        data-testid={promExploreExtraFieldTestIds.stepField}\n        className={cx(\n          'gf-form',\n          css({\n            flexWrap: 'nowrap',\n          })\n        )}\n        aria-label=\"Step field\"\n      >\n        <InlineFormLabel\n          width={6}\n          tooltip={\n            'Time units and built-in variables can be used here, for example: $__interval, $__rate_interval, 5s, 1m, 3h, 1d, 1y (Default if no unit is specified: s)'\n          }\n        >\n          Min step\n        </InlineFormLabel>\n        <input\n          type={'text'}\n          className=\"gf-form-input width-4\"\n          placeholder={'auto'}\n          onChange={onStepChange}\n          onKeyDown={onReturnKeyDown}\n          value={query.interval ?? ''}\n        />\n      </div>\n\n      <PromExemplarField onChange={onExemplarChange} datasource={datasource} query={query} />\n    </div>\n  );\n});\n\nPromExploreExtraField.displayName = 'PromExploreExtraField';\n\nexport function getQueryTypeOptions(includeBoth: boolean) {\n  const rangeOptions = [\n    { value: 'range', label: 'Range', description: 'Run query over a range of time' },\n    {\n      value: 'instant',\n      label: 'Instant',\n      description: 'Run query against a single point in time. For this query, the \"To\" time is used',\n    },\n  ];\n\n  if (includeBoth) {\n    rangeOptions.push({ value: 'both', label: 'Both', description: 'Run an Instant query and a Range query' });\n  }\n\n  return rangeOptions;\n}\n\nexport function getQueryTypeChangeHandler(query: PromQuery, onChange: (update: PromQuery) => void) {\n  return (queryType: string) => {\n    if (queryType === 'instant') {\n      onChange({ ...query, instant: true, range: false, exemplar: false });\n    } else if (queryType === 'range') {\n      onChange({ ...query, instant: false, range: true });\n    } else {\n      onChange({ ...query, instant: true, range: true });\n    }\n  };\n}\n\nexport const promExploreExtraFieldTestIds = {\n  extraFieldEditor: 'prom-editor-extra-field',\n  stepField: 'prom-editor-extra-field-step',\n  queryTypeField: 'prom-editor-extra-field-query-type',\n};\n"],"names":[],"mappings":"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"}