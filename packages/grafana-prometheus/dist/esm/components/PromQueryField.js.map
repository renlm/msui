{"version":3,"file":"PromQueryField.js","sources":["../../../src/components/PromQueryField.tsx"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/PromQueryField.tsx\nimport { cx } from '@emotion/css';\nimport React, { ReactNode } from 'react';\n\nimport { isDataFrame, QueryEditorProps, QueryHint, TimeRange, toLegacyResponseData } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { reportInteraction } from '@grafana/runtime';\nimport { clearButtonStyles, Icon, Themeable2, withTheme2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { LocalStorageValueProvider } from '../gcopypaste/app/core/components/LocalStorageValueProvider';\nimport {\n  CancelablePromise,\n  isCancelablePromiseRejection,\n  makePromiseCancelable,\n} from '../gcopypaste/app/core/utils/CancelablePromise';\nimport { roundMsToMin } from '../language_utils';\nimport { PromOptions, PromQuery } from '../types';\n\nimport { PrometheusMetricsBrowser } from './PrometheusMetricsBrowser';\nimport { MonacoQueryFieldWrapper } from './monaco-query-field/MonacoQueryFieldWrapper';\n\nconst LAST_USED_LABELS_KEY = 'grafana.datasources.prometheus.browser.labels';\n\nfunction getChooserText(metricsLookupDisabled: boolean, hasSyntax: boolean, hasMetrics: boolean) {\n  if (metricsLookupDisabled) {\n    return '(Disabled)';\n  }\n\n  if (!hasSyntax) {\n    return 'Loading metrics...';\n  }\n\n  if (!hasMetrics) {\n    return '(No metrics found)';\n  }\n\n  return 'Metrics browser';\n}\n\ninterface PromQueryFieldProps extends QueryEditorProps<PrometheusDatasource, PromQuery, PromOptions>, Themeable2 {\n  ExtraFieldElement?: ReactNode;\n  'data-testid'?: string;\n}\n\ninterface PromQueryFieldState {\n  labelBrowserVisible: boolean;\n  syntaxLoaded: boolean;\n  hint: QueryHint | null;\n}\n\nclass PromQueryFieldClass extends React.PureComponent<PromQueryFieldProps, PromQueryFieldState> {\n  declare languageProviderInitializationPromise: CancelablePromise<any>;\n\n  constructor(props: PromQueryFieldProps) {\n    super(props);\n\n    this.state = {\n      labelBrowserVisible: false,\n      syntaxLoaded: false,\n      hint: null,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.datasource.languageProvider) {\n      this.refreshMetrics();\n    }\n    this.refreshHint();\n  }\n\n  componentWillUnmount() {\n    if (this.languageProviderInitializationPromise) {\n      this.languageProviderInitializationPromise.cancel();\n    }\n  }\n\n  componentDidUpdate(prevProps: PromQueryFieldProps) {\n    const {\n      data,\n      datasource: { languageProvider },\n      range,\n    } = this.props;\n\n    if (languageProvider !== prevProps.datasource.languageProvider) {\n      // We reset this only on DS change so we do not flesh loading state on every rangeChange which happens on every\n      // query run if using relative range.\n      this.setState({\n        syntaxLoaded: false,\n      });\n    }\n\n    const changedRangeToRefresh = this.rangeChangedToRefresh(range, prevProps.range);\n    // We want to refresh metrics when language provider changes and/or when range changes (we round up intervals to a minute)\n    if (languageProvider !== prevProps.datasource.languageProvider || changedRangeToRefresh) {\n      this.refreshMetrics();\n    }\n\n    if (data && prevProps.data && prevProps.data.series !== data.series) {\n      this.refreshHint();\n    }\n  }\n\n  refreshHint = () => {\n    const { datasource, query, data } = this.props;\n    const initHints = datasource.getInitHints();\n    const initHint = initHints.length > 0 ? initHints[0] : null;\n\n    if (!data || data.series.length === 0) {\n      this.setState({\n        hint: initHint,\n      });\n      return;\n    }\n\n    const result = isDataFrame(data.series[0]) ? data.series.map(toLegacyResponseData) : data.series;\n    const queryHints = datasource.getQueryHints(query, result);\n    let queryHint = queryHints.length > 0 ? queryHints[0] : null;\n\n    this.setState({ hint: queryHint ?? initHint });\n  };\n\n  refreshMetrics = async () => {\n    const {\n      range,\n      datasource: { languageProvider },\n    } = this.props;\n\n    this.languageProviderInitializationPromise = makePromiseCancelable(languageProvider.start(range));\n\n    try {\n      const remainingTasks = await this.languageProviderInitializationPromise.promise;\n      await Promise.all(remainingTasks);\n      this.onUpdateLanguage();\n    } catch (err) {\n      if (isCancelablePromiseRejection(err) && err.isCanceled) {\n        // do nothing, promise was canceled\n      } else {\n        throw err;\n      }\n    }\n  };\n\n  rangeChangedToRefresh(range?: TimeRange, prevRange?: TimeRange): boolean {\n    if (range && prevRange) {\n      const sameMinuteFrom = roundMsToMin(range.from.valueOf()) === roundMsToMin(prevRange.from.valueOf());\n      const sameMinuteTo = roundMsToMin(range.to.valueOf()) === roundMsToMin(prevRange.to.valueOf());\n      // If both are same, don't need to refresh.\n      return !(sameMinuteFrom && sameMinuteTo);\n    }\n    return false;\n  }\n\n  /**\n   * TODO #33976: Remove this, add histogram group (query = `histogram_quantile(0.95, sum(rate(${metric}[5m])) by (le))`;)\n   */\n  onChangeLabelBrowser = (selector: string) => {\n    this.onChangeQuery(selector, true);\n    this.setState({ labelBrowserVisible: false });\n  };\n\n  onChangeQuery = (value: string, override?: boolean) => {\n    // Send text change to parent\n    const { query, onChange, onRunQuery } = this.props;\n    if (onChange) {\n      const nextQuery: PromQuery = { ...query, expr: value };\n      onChange(nextQuery);\n\n      if (override && onRunQuery) {\n        onRunQuery();\n      }\n    }\n  };\n\n  onClickChooserButton = () => {\n    this.setState((state) => ({ labelBrowserVisible: !state.labelBrowserVisible }));\n\n    reportInteraction('user_grafana_prometheus_metrics_browser_clicked', {\n      editorMode: this.state.labelBrowserVisible ? 'metricViewClosed' : 'metricViewOpen',\n      app: this.props?.app ?? '',\n    });\n  };\n\n  onClickHintFix = () => {\n    const { datasource, query, onChange, onRunQuery } = this.props;\n    const { hint } = this.state;\n    if (hint?.fix?.action) {\n      onChange(datasource.modifyQuery(query, hint.fix.action));\n    }\n    onRunQuery();\n  };\n\n  onUpdateLanguage = () => {\n    const {\n      datasource: { languageProvider },\n    } = this.props;\n    const { metrics } = languageProvider;\n\n    if (!metrics) {\n      return;\n    }\n\n    this.setState({ syntaxLoaded: true });\n  };\n\n  render() {\n    const {\n      datasource,\n      datasource: { languageProvider },\n      query,\n      ExtraFieldElement,\n      history = [],\n      theme,\n    } = this.props;\n\n    const { labelBrowserVisible, syntaxLoaded, hint } = this.state;\n    const hasMetrics = languageProvider.metrics.length > 0;\n    const chooserText = getChooserText(datasource.lookupsDisabled, syntaxLoaded, hasMetrics);\n    const buttonDisabled = !(syntaxLoaded && hasMetrics);\n\n    return (\n      <LocalStorageValueProvider<string[]> storageKey={LAST_USED_LABELS_KEY} defaultValue={[]}>\n        {(lastUsedLabels, onLastUsedLabelsSave, onLastUsedLabelsDelete) => {\n          return (\n            <>\n              <div\n                className=\"gf-form-inline gf-form-inline--xs-view-flex-column flex-grow-1\"\n                data-testid={this.props['data-testid']}\n              >\n                <button\n                  className=\"gf-form-label query-keyword pointer\"\n                  onClick={this.onClickChooserButton}\n                  disabled={buttonDisabled}\n                  type=\"button\"\n                  data-testid={selectors.components.DataSource.Prometheus.queryEditor.code.metricsBrowser.openButton}\n                >\n                  {chooserText}\n                  <Icon name={labelBrowserVisible ? 'angle-down' : 'angle-right'} />\n                </button>\n\n                <div className=\"flex-grow-1 min-width-15\">\n                  <MonacoQueryFieldWrapper\n                    languageProvider={languageProvider}\n                    history={history}\n                    onChange={this.onChangeQuery}\n                    onRunQuery={this.props.onRunQuery}\n                    initialValue={query.expr ?? ''}\n                    placeholder=\"Enter a PromQL queryâ€¦\"\n                    datasource={datasource}\n                  />\n                </div>\n              </div>\n              {labelBrowserVisible && (\n                <div className=\"gf-form\">\n                  <PrometheusMetricsBrowser\n                    languageProvider={languageProvider}\n                    onChange={this.onChangeLabelBrowser}\n                    lastUsedLabels={lastUsedLabels || []}\n                    storeLastUsedLabels={onLastUsedLabelsSave}\n                    deleteLastUsedLabels={onLastUsedLabelsDelete}\n                    timeRange={this.props.range}\n                  />\n                </div>\n              )}\n\n              {ExtraFieldElement}\n              {hint ? (\n                <div className=\"query-row-break\">\n                  <div className=\"prom-query-field-info text-warning\">\n                    {hint.label}{' '}\n                    {hint.fix ? (\n                      <button\n                        type=\"button\"\n                        className={cx(clearButtonStyles(theme), 'text-link', 'muted')}\n                        onClick={this.onClickHintFix}\n                      >\n                        {hint.fix.label}\n                      </button>\n                    ) : null}\n                  </div>\n                </div>\n              ) : null}\n            </>\n          );\n        }}\n      </LocalStorageValueProvider>\n    );\n  }\n}\n\nexport const PromQueryField = withTheme2(PromQueryFieldClass);\n"],"names":[],"mappings":"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"}