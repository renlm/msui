{"version":3,"file":"VariableQueryEditor.js","sources":["../../../src/components/VariableQueryEditor.tsx"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/VariableQueryEditor.tsx\nimport React, { FormEvent, useCallback, useEffect, useState } from 'react';\n\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { InlineField, InlineFieldRow, Input, Select, TextArea } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../datasource';\nimport {\n  migrateVariableEditorBackToVariableSupport,\n  migrateVariableQueryToEditor,\n} from '../migrations/variableMigration';\nimport { promQueryModeller } from '../querybuilder/PromQueryModeller';\nimport { MetricsLabelsSection } from '../querybuilder/components/MetricsLabelsSection';\nimport { QueryBuilderLabelFilter } from '../querybuilder/shared/types';\nimport { PromVisualQuery } from '../querybuilder/types';\nimport {\n  PromOptions,\n  PromQuery,\n  PromVariableQuery,\n  PromVariableQueryType as QueryType,\n  StandardPromVariableQuery,\n} from '../types';\n\nexport const variableOptions = [\n  { label: 'Label names', value: QueryType.LabelNames },\n  { label: 'Label values', value: QueryType.LabelValues },\n  { label: 'Metrics', value: QueryType.MetricNames },\n  { label: 'Query result', value: QueryType.VarQueryResult },\n  { label: 'Series query', value: QueryType.SeriesQuery },\n  { label: 'Classic query', value: QueryType.ClassicQuery },\n];\n\nexport type Props = QueryEditorProps<PrometheusDatasource, PromQuery, PromOptions, PromVariableQuery>;\n\nconst refId = 'PrometheusVariableQueryEditor-VariableQuery';\n\nexport const PromVariableQueryEditor = ({ onChange, query, datasource, range }: Props) => {\n  // to select the query type, i.e. label_names, label_values, etc.\n  const [qryType, setQryType] = useState<number | undefined>(undefined);\n  // list of variables for each function\n  const [label, setLabel] = useState('');\n\n  const [labelNamesMatch, setLabelNamesMatch] = useState('');\n\n  // metric is used for both label_values() and metric()\n  // label_values() metric requires a whole/complete metric\n  // metric() is expected to be a part of a metric string\n  const [metric, setMetric] = useState('');\n  // varQuery is a whole query, can include math/rates/etc\n  const [varQuery, setVarQuery] = useState('');\n  // seriesQuery is only a whole\n  const [seriesQuery, setSeriesQuery] = useState('');\n\n  // the original variable query implementation, e.g. label_value(metric, label_name)\n  const [classicQuery, setClassicQuery] = useState('');\n\n  // list of label names for label_values(), /api/v1/labels, contains the same results as label_names() function\n  const [labelOptions, setLabelOptions] = useState<Array<SelectableValue<string>>>([]);\n\n  // label filters have been added as a filter for metrics in label values query type\n  const [labelFilters, setLabelFilters] = useState<QueryBuilderLabelFilter[]>([]);\n\n  useEffect(() => {\n    datasource.languageProvider.start(range);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n\n    if (query.qryType === QueryType.ClassicQuery) {\n      setQryType(query.qryType);\n      setClassicQuery(query.query ?? '');\n    } else {\n      // 1. Changing from standard to custom variable editor changes the string attr from expr to query\n      // 2. jsonnet grafana as code passes a variable as a string\n      const variableQuery = variableMigration(query);\n\n      setLabelNamesMatch(variableQuery.match ?? '');\n      setQryType(variableQuery.qryType);\n      setLabel(variableQuery.label ?? '');\n      setMetric(variableQuery.metric ?? '');\n      setLabelFilters(variableQuery.labelFilters ?? []);\n      setVarQuery(variableQuery.varQuery ?? '');\n      setSeriesQuery(variableQuery.seriesQuery ?? '');\n      setClassicQuery(variableQuery.classicQuery ?? '');\n    }\n  }, [query]);\n\n  // set the label names options for the label values var query\n  useEffect(() => {\n    if (qryType !== QueryType.LabelValues) {\n      return;\n    }\n    const variables = datasource.getVariables().map((variable: string) => ({ label: variable, value: variable }));\n    if (!metric) {\n      // get all the labels\n      datasource.getTagKeys({ filters: [] }).then((labelNames: Array<{ text: string }>) => {\n        const names = labelNames.map(({ text }) => ({ label: text, value: text }));\n        setLabelOptions([...variables, ...names]);\n      });\n    } else {\n      // fetch the labels filtered by the metric\n      const labelToConsider = [{ label: '__name__', op: '=', value: metric }];\n      const expr = promQueryModeller.renderLabels(labelToConsider);\n\n      datasource.languageProvider.fetchLabelsWithMatch(expr).then((labelsIndex: Record<string, string[]>) => {\n        const labelNames = Object.keys(labelsIndex);\n        const names = labelNames.map((value) => ({ label: value, value: value }));\n        setLabelOptions([...variables, ...names]);\n      });\n    }\n  }, [datasource, qryType, metric]);\n\n  const onChangeWithVariableString = (\n    updateVar: { [key: string]: QueryType | string },\n    updLabelFilters?: QueryBuilderLabelFilter[]\n  ) => {\n    const queryVar = {\n      qryType,\n      label,\n      metric,\n      match: labelNamesMatch,\n      varQuery,\n      seriesQuery,\n      classicQuery,\n      refId: 'PrometheusVariableQueryEditor-VariableQuery',\n    };\n\n    let updateLabelFilters = updLabelFilters ? { labelFilters: updLabelFilters } : { labelFilters: labelFilters };\n\n    const updatedVar = { ...queryVar, ...updateVar, ...updateLabelFilters };\n\n    const queryString = migrateVariableEditorBackToVariableSupport(updatedVar);\n\n    // setting query.query property allows for update of variable definition\n    onChange({\n      query: queryString,\n      qryType: updatedVar.qryType,\n      refId,\n    });\n  };\n\n  /** Call onchange for label names query type change */\n  const onQueryTypeChange = (newType: SelectableValue<QueryType>) => {\n    setQryType(newType.value);\n    if (newType.value !== QueryType.SeriesQuery) {\n      onChangeWithVariableString({ qryType: newType.value ?? 0 });\n    }\n  };\n\n  /** Call onchange for label select when query type is label values */\n  const onLabelChange = (newLabel: SelectableValue<string>) => {\n    const newLabelvalue = newLabel && newLabel.value ? newLabel.value : '';\n    setLabel(newLabelvalue);\n    if (qryType === QueryType.LabelValues && newLabelvalue) {\n      onChangeWithVariableString({ label: newLabelvalue });\n    }\n  };\n\n  /**\n   * Call onChange for MetricsLabels component change for label values query type\n   * if there is a label (required) and\n   * if the labels or metric are updated.\n   */\n  const metricsLabelsChange = (update: PromVisualQuery) => {\n    setMetric(update.metric);\n    setLabelFilters(update.labels);\n\n    const updMetric = update.metric;\n    const updLabelFilters = update.labels ?? [];\n\n    if (qryType === QueryType.LabelValues && label && (updMetric || updLabelFilters)) {\n      onChangeWithVariableString({ qryType, metric: updMetric }, updLabelFilters);\n    }\n  };\n\n  const onLabelNamesMatchChange = (regex: string) => {\n    if (qryType === QueryType.LabelNames) {\n      onChangeWithVariableString({ qryType, match: regex });\n    }\n  };\n\n  /**\n   * Call onchange for metric change if metrics names (regex) query type\n   * Debounce this because to not call the API for every keystroke.\n   */\n  const onMetricChange = (value: string) => {\n    if (qryType === QueryType.MetricNames && value) {\n      onChangeWithVariableString({ metric: value });\n    }\n  };\n\n  /**\n   *  Do not call onchange for variable query result when query type is var query result\n   *  because the query may not be finished typing and an error is returned\n   *  for incorrectly formatted series. Call onchange for blur instead.\n   */\n  const onVarQueryChange = (e: FormEvent<HTMLTextAreaElement>) => {\n    setVarQuery(e.currentTarget.value);\n  };\n\n  /**\n   *  Do not call onchange for seriesQuery when query type is series query\n   *  because the series may not be finished typing and an error is returned\n   *  for incorrectly formatted series. Call onchange for blur instead.\n   */\n  const onSeriesQueryChange = (e: FormEvent<HTMLInputElement>) => {\n    setSeriesQuery(e.currentTarget.value);\n  };\n\n  const onClassicQueryChange = (e: FormEvent<HTMLInputElement>) => {\n    setClassicQuery(e.currentTarget.value);\n  };\n\n  const promVisualQuery = useCallback(() => {\n    return { metric: metric, labels: labelFilters, operations: [] };\n  }, [metric, labelFilters]);\n\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField\n          label=\"Query type\"\n          labelWidth={20}\n          tooltip={\n            <div>The Prometheus data source plugin provides the following query types for template variables.</div>\n          }\n        >\n          <Select\n            placeholder=\"Select query type\"\n            aria-label=\"Query type\"\n            onChange={onQueryTypeChange}\n            value={qryType}\n            options={variableOptions}\n            width={25}\n            data-testid={selectors.components.DataSource.Prometheus.variableQueryEditor.queryType}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      {qryType === QueryType.LabelValues && (\n        <>\n          <InlineFieldRow>\n            <InlineField\n              label=\"Label\"\n              labelWidth={20}\n              required\n              aria-labelledby=\"label-select\"\n              tooltip={\n                <div>\n                  Returns a list of label values for the label name in all metrics unless the metric is specified.\n                </div>\n              }\n            >\n              <Select\n                aria-label=\"label-select\"\n                onChange={onLabelChange}\n                value={label}\n                options={labelOptions}\n                width={25}\n                allowCustomValue\n                isClearable={true}\n                data-testid={selectors.components.DataSource.Prometheus.variableQueryEditor.labelValues.labelSelect}\n              />\n            </InlineField>\n          </InlineFieldRow>\n          {/* Used to select an optional metric with optional label filters */}\n          <MetricsLabelsSection\n            query={promVisualQuery()}\n            datasource={datasource}\n            onChange={metricsLabelsChange}\n            variableEditor={true}\n          />\n        </>\n      )}\n\n      {qryType === QueryType.LabelNames && (\n        <InlineFieldRow>\n          <InlineField\n            label=\"Metric regex\"\n            labelWidth={20}\n            aria-labelledby=\"Metric regex\"\n            tooltip={<div>Returns a list of label names, optionally filtering by specified metric regex.</div>}\n          >\n            <Input\n              type=\"text\"\n              aria-label=\"Metric regex\"\n              placeholder=\"Metric regex\"\n              value={labelNamesMatch}\n              onBlur={(event) => {\n                setLabelNamesMatch(event.currentTarget.value);\n                onLabelNamesMatchChange(event.currentTarget.value);\n              }}\n              onChange={(e) => {\n                setLabelNamesMatch(e.currentTarget.value);\n              }}\n              width={25}\n              data-testid={selectors.components.DataSource.Prometheus.variableQueryEditor.labelnames.metricRegex}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n\n      {qryType === QueryType.MetricNames && (\n        <InlineFieldRow>\n          <InlineField\n            label=\"Metric regex\"\n            labelWidth={20}\n            aria-labelledby=\"Metric selector\"\n            tooltip={<div>Returns a list of metrics matching the specified metric regex.</div>}\n          >\n            <Input\n              type=\"text\"\n              aria-label=\"Metric selector\"\n              placeholder=\"Metric regex\"\n              value={metric}\n              onChange={(e) => {\n                setMetric(e.currentTarget.value);\n              }}\n              onBlur={(e) => {\n                setMetric(e.currentTarget.value);\n                onMetricChange(e.currentTarget.value);\n              }}\n              width={25}\n              data-testid={selectors.components.DataSource.Prometheus.variableQueryEditor.metricNames.metricRegex}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n\n      {qryType === QueryType.VarQueryResult && (\n        <InlineFieldRow>\n          <InlineField\n            label=\"Query\"\n            labelWidth={20}\n            tooltip={\n              <div>\n                Returns a list of Prometheus query results for the query. This can include Prometheus functions, i.e.\n                sum(go_goroutines).\n              </div>\n            }\n          >\n            <TextArea\n              type=\"text\"\n              aria-label=\"Prometheus Query\"\n              placeholder=\"Prometheus Query\"\n              value={varQuery}\n              onChange={onVarQueryChange}\n              onBlur={() => {\n                if (qryType === QueryType.VarQueryResult && varQuery) {\n                  onChangeWithVariableString({ qryType });\n                }\n              }}\n              cols={100}\n              data-testid={selectors.components.DataSource.Prometheus.variableQueryEditor.varQueryResult}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n\n      {qryType === QueryType.SeriesQuery && (\n        <InlineFieldRow>\n          <InlineField\n            label=\"Series Query\"\n            labelWidth={20}\n            tooltip={\n              <div>\n                Enter a metric with labels, only a metric or only labels, i.e.\n                go_goroutines&#123;instance=&quot;localhost:9090&quot;&#125;, go_goroutines, or\n                &#123;instance=&quot;localhost:9090&quot;&#125;. Returns a list of time series associated with the\n                entered data.\n              </div>\n            }\n          >\n            <Input\n              type=\"text\"\n              aria-label=\"Series Query\"\n              placeholder=\"Series Query\"\n              value={seriesQuery}\n              onChange={onSeriesQueryChange}\n              onBlur={() => {\n                if (qryType === QueryType.SeriesQuery && seriesQuery) {\n                  onChangeWithVariableString({ qryType });\n                }\n              }}\n              width={100}\n              data-testid={selectors.components.DataSource.Prometheus.variableQueryEditor.seriesQuery}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n\n      {qryType === QueryType.ClassicQuery && (\n        <InlineFieldRow>\n          <InlineField\n            label=\"Classic Query\"\n            labelWidth={20}\n            tooltip={\n              <div>\n                The original implemetation of the Prometheus variable query editor. Enter a string with the correct\n                query type and parameters as described in these docs. For example, label_values(label, metric).\n              </div>\n            }\n          >\n            <Input\n              type=\"text\"\n              aria-label=\"Classic Query\"\n              placeholder=\"Classic Query\"\n              value={classicQuery}\n              onChange={onClassicQueryChange}\n              onBlur={() => {\n                if (qryType === QueryType.ClassicQuery && classicQuery) {\n                  onChangeWithVariableString({ qryType });\n                }\n              }}\n              width={100}\n              data-testid={selectors.components.DataSource.Prometheus.variableQueryEditor.classicQuery}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n    </>\n  );\n};\n\nexport function variableMigration(query: string | PromVariableQuery | StandardPromVariableQuery): PromVariableQuery {\n  if (typeof query === 'string') {\n    return migrateVariableQueryToEditor(query);\n  } else if (query.query) {\n    return migrateVariableQueryToEditor(query.query);\n  } else {\n    return query;\n  }\n}\n"],"names":["QueryType"],"mappings":"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"}