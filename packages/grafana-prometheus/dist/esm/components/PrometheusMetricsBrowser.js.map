{"version":3,"file":"PrometheusMetricsBrowser.js","sources":["../../../src/components/PrometheusMetricsBrowser.tsx"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/PrometheusMetricsBrowser.tsx\nimport { css, cx } from '@emotion/css';\nimport React, { ChangeEvent } from 'react';\nimport { FixedSizeList } from 'react-window';\n\nimport { GrafanaTheme2, TimeRange } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport {\n  BrowserLabel as PromLabel,\n  Button,\n  HorizontalGroup,\n  Input,\n  Label,\n  LoadingPlaceholder,\n  stylesFactory,\n  withTheme2,\n} from '@grafana/ui';\n\nimport PromQlLanguageProvider from '../language_provider';\nimport { escapeLabelValueInExactSelector, escapeLabelValueInRegexSelector } from '../language_utils';\n\n// Hard limit on labels to render\nconst EMPTY_SELECTOR = '{}';\nconst METRIC_LABEL = '__name__';\nconst LIST_ITEM_SIZE = 25;\n\nexport interface BrowserProps {\n  languageProvider: PromQlLanguageProvider;\n  onChange: (selector: string) => void;\n  theme: GrafanaTheme2;\n  autoSelect?: number;\n  hide?: () => void;\n  lastUsedLabels: string[];\n  storeLastUsedLabels: (labels: string[]) => void;\n  deleteLastUsedLabels: () => void;\n  timeRange?: TimeRange;\n}\n\ninterface BrowserState {\n  labels: SelectableLabel[];\n  labelSearchTerm: string;\n  metricSearchTerm: string;\n  status: string;\n  error: string;\n  validationStatus: string;\n  valueSearchTerm: string;\n}\n\ninterface FacettableValue {\n  name: string;\n  selected?: boolean;\n  details?: string;\n}\n\nexport interface SelectableLabel {\n  name: string;\n  selected?: boolean;\n  loading?: boolean;\n  values?: FacettableValue[];\n  hidden?: boolean;\n  facets?: number;\n}\n\nexport function buildSelector(labels: SelectableLabel[]): string {\n  let singleMetric = '';\n  const selectedLabels = [];\n  for (const label of labels) {\n    if ((label.name === METRIC_LABEL || label.selected) && label.values && label.values.length > 0) {\n      const selectedValues = label.values.filter((value) => value.selected).map((value) => value.name);\n      if (selectedValues.length > 1) {\n        selectedLabels.push(`${label.name}=~\"${selectedValues.map(escapeLabelValueInRegexSelector).join('|')}\"`);\n      } else if (selectedValues.length === 1) {\n        if (label.name === METRIC_LABEL) {\n          singleMetric = selectedValues[0];\n        } else {\n          selectedLabels.push(`${label.name}=\"${escapeLabelValueInExactSelector(selectedValues[0])}\"`);\n        }\n      }\n    }\n  }\n  return [singleMetric, '{', selectedLabels.join(','), '}'].join('');\n}\n\nexport function facetLabels(\n  labels: SelectableLabel[],\n  possibleLabels: Record<string, string[]>,\n  lastFacetted?: string\n): SelectableLabel[] {\n  return labels.map((label) => {\n    const possibleValues = possibleLabels[label.name];\n    if (possibleValues) {\n      let existingValues: FacettableValue[];\n      if (label.name === lastFacetted && label.values) {\n        // Facetting this label, show all values\n        existingValues = label.values;\n      } else {\n        // Keep selection in other facets\n        const selectedValues: Set<string> = new Set(\n          label.values?.filter((value) => value.selected).map((value) => value.name) || []\n        );\n        // Values for this label have not been requested yet, let's use the facetted ones as the initial values\n        existingValues = possibleValues.map((value) => ({ name: value, selected: selectedValues.has(value) }));\n      }\n      return {\n        ...label,\n        loading: false,\n        values: existingValues,\n        hidden: !possibleValues,\n        facets: existingValues.length,\n      };\n    }\n\n    // Label is facetted out, hide all values\n    return { ...label, loading: false, hidden: !possibleValues, values: undefined, facets: 0 };\n  });\n}\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2) => ({\n  wrapper: css({\n    backgroundColor: theme.colors.background.secondary,\n    padding: theme.spacing(1),\n    width: '100%',\n  }),\n  list: css({\n    marginTop: theme.spacing(1),\n    display: 'flex',\n    flexWrap: 'wrap',\n    maxHeight: '200px',\n    overflow: 'auto',\n    alignContent: 'flex-start',\n  }),\n  section: css({\n    '& + &': {\n      margin: `${theme.spacing(2)} 0`,\n    },\n    position: 'relative',\n  }),\n  selector: css({\n    fontFamily: theme.typography.fontFamilyMonospace,\n    marginBottom: theme.spacing(1),\n  }),\n  status: css({\n    padding: theme.spacing(0.5),\n    color: theme.colors.text.secondary,\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    /* using absolute positioning because flex interferes with ellipsis */\n    position: 'absolute',\n    width: '50%',\n    right: 0,\n    textAlign: 'right',\n    opacity: 0,\n    [theme.transitions.handleMotion('no-preference', 'reduce')]: {\n      transition: 'opacity 100ms linear',\n    },\n  }),\n  statusShowing: css({\n    opacity: 1,\n  }),\n  error: css({\n    color: theme.colors.error.main,\n  }),\n  valueList: css({\n    marginRight: theme.spacing(1),\n    resize: 'horizontal',\n  }),\n  valueListWrapper: css({\n    borderLeft: `1px solid ${theme.colors.border.medium}`,\n    margin: `${theme.spacing(1)} 0`,\n    padding: `${theme.spacing(1)} 0 ${theme.spacing(1)} ${theme.spacing(1)}`,\n  }),\n  valueListArea: css({\n    display: 'flex',\n    flexWrap: 'wrap',\n    marginTop: theme.spacing(1),\n  }),\n  valueTitle: css({\n    marginLeft: `-${theme.spacing(0.5)}`,\n    marginBottom: theme.spacing(1),\n  }),\n  validationStatus: css({\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n    color: theme.colors.text.maxContrast,\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  }),\n}));\n\n/**\n * TODO #33976: Remove duplicated code. The component is very similar to LokiLabelBrowser.tsx. Check if it's possible\n *              to create a single, generic component.\n */\nexport class UnthemedPrometheusMetricsBrowser extends React.Component<BrowserProps, BrowserState> {\n  valueListsRef = React.createRef<HTMLDivElement>();\n  state: BrowserState = {\n    labels: [],\n    labelSearchTerm: '',\n    metricSearchTerm: '',\n    status: 'Ready',\n    error: '',\n    validationStatus: '',\n    valueSearchTerm: '',\n  };\n\n  onChangeLabelSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ labelSearchTerm: event.target.value });\n  };\n\n  onChangeMetricSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ metricSearchTerm: event.target.value });\n  };\n\n  onChangeValueSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ valueSearchTerm: event.target.value });\n  };\n\n  onClickRunQuery = () => {\n    const selector = buildSelector(this.state.labels);\n    this.props.onChange(selector);\n  };\n\n  onClickRunRateQuery = () => {\n    const selector = buildSelector(this.state.labels);\n    const query = `rate(${selector}[$__rate_interval])`;\n    this.props.onChange(query);\n  };\n\n  onClickClear = () => {\n    this.setState((state) => {\n      const labels: SelectableLabel[] = state.labels.map((label) => ({\n        ...label,\n        values: undefined,\n        selected: false,\n        loading: false,\n        hidden: false,\n        facets: undefined,\n      }));\n      return {\n        labels,\n        labelSearchTerm: '',\n        metricSearchTerm: '',\n        status: '',\n        error: '',\n        validationStatus: '',\n        valueSearchTerm: '',\n      };\n    });\n    this.props.deleteLastUsedLabels();\n    // Get metrics\n    this.fetchValues(METRIC_LABEL, EMPTY_SELECTOR);\n  };\n\n  onClickLabel = (name: string, value: string | undefined, event: React.MouseEvent<HTMLElement>) => {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label) {\n      return;\n    }\n    // Toggle selected state\n    const selected = !label.selected;\n    let nextValue: Partial<SelectableLabel> = { selected };\n    if (label.values && !selected) {\n      // Deselect all values if label was deselected\n      const values = label.values.map((value) => ({ ...value, selected: false }));\n      nextValue = { ...nextValue, facets: 0, values };\n    }\n    // Resetting search to prevent empty results\n    this.setState({ labelSearchTerm: '' });\n    this.updateLabelState(name, nextValue, '', () => this.doFacettingForLabel(name));\n  };\n\n  onClickValue = (name: string, value: string | undefined, event: React.MouseEvent<HTMLElement>) => {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label || !label.values) {\n      return;\n    }\n    // Resetting search to prevent empty results\n    this.setState({ labelSearchTerm: '' });\n    // Toggling value for selected label, leaving other values intact\n    const values = label.values.map((v) => ({ ...v, selected: v.name === value ? !v.selected : v.selected }));\n    this.updateLabelState(name, { values }, '', () => this.doFacetting(name));\n  };\n\n  onClickMetric = (name: string, value: string | undefined, event: React.MouseEvent<HTMLElement>) => {\n    // Finding special metric label\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label || !label.values) {\n      return;\n    }\n    // Resetting search to prevent empty results\n    this.setState({ metricSearchTerm: '' });\n    // Toggling value for selected label, leaving other values intact\n    const values = label.values.map((v) => ({\n      ...v,\n      selected: v.name === value || v.selected ? !v.selected : v.selected,\n    }));\n    // Toggle selected state of special metrics label\n    const selected = values.some((v) => v.selected);\n    this.updateLabelState(name, { selected, values }, '', () => this.doFacetting(name));\n  };\n\n  onClickValidate = () => {\n    const selector = buildSelector(this.state.labels);\n    this.validateSelector(selector);\n  };\n\n  updateLabelState(name: string, updatedFields: Partial<SelectableLabel>, status = '', cb?: () => void) {\n    this.setState((state) => {\n      const labels: SelectableLabel[] = state.labels.map((label) => {\n        if (label.name === name) {\n          return { ...label, ...updatedFields };\n        }\n        return label;\n      });\n      // New status overrides errors\n      const error = status ? '' : state.error;\n      return { labels, status, error, validationStatus: '' };\n    }, cb);\n  }\n\n  componentDidMount() {\n    const { languageProvider, lastUsedLabels } = this.props;\n    if (languageProvider) {\n      const selectedLabels: string[] = lastUsedLabels;\n      languageProvider.start(this.props.timeRange).then(() => {\n        let rawLabels: string[] = languageProvider.getLabelKeys();\n        // Get metrics\n        this.fetchValues(METRIC_LABEL, EMPTY_SELECTOR);\n        // Auto-select previously selected labels\n        const labels: SelectableLabel[] = rawLabels.map((label, i, arr) => ({\n          name: label,\n          selected: selectedLabels.includes(label),\n          loading: false,\n        }));\n        // Pre-fetch values for selected labels\n        this.setState({ labels }, () => {\n          this.state.labels.forEach((label) => {\n            if (label.selected) {\n              this.fetchValues(label.name, EMPTY_SELECTOR);\n            }\n          });\n        });\n      });\n    }\n  }\n\n  doFacettingForLabel(name: string) {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label) {\n      return;\n    }\n    const selectedLabels = this.state.labels.filter((label) => label.selected).map((label) => label.name);\n    this.props.storeLastUsedLabels(selectedLabels);\n    if (label.selected) {\n      // Refetch values for newly selected label...\n      if (!label.values) {\n        this.fetchValues(name, buildSelector(this.state.labels));\n      }\n    } else {\n      // Only need to facet when deselecting labels\n      this.doFacetting();\n    }\n  }\n\n  doFacetting = (lastFacetted?: string) => {\n    const selector = buildSelector(this.state.labels);\n    if (selector === EMPTY_SELECTOR) {\n      // Clear up facetting\n      const labels: SelectableLabel[] = this.state.labels.map((label) => {\n        return { ...label, facets: 0, values: undefined, hidden: false };\n      });\n      this.setState({ labels }, () => {\n        // Get fresh set of values\n        this.state.labels.forEach(\n          (label) => (label.selected || label.name === METRIC_LABEL) && this.fetchValues(label.name, selector)\n        );\n      });\n    } else {\n      // Do facetting\n      this.fetchSeries(selector, lastFacetted);\n    }\n  };\n\n  async fetchValues(name: string, selector: string) {\n    const { languageProvider } = this.props;\n    this.updateLabelState(name, { loading: true }, `Fetching values for ${name}`);\n    try {\n      let rawValues = await languageProvider.getLabelValues(name);\n      // If selector changed, clear loading state and discard result by returning early\n      if (selector !== buildSelector(this.state.labels)) {\n        this.updateLabelState(name, { loading: false });\n        return;\n      }\n      const values: FacettableValue[] = [];\n      const { metricsMetadata } = languageProvider;\n      for (const labelValue of rawValues) {\n        const value: FacettableValue = { name: labelValue };\n        // Adding type/help text to metrics\n        if (name === METRIC_LABEL && metricsMetadata) {\n          const meta = metricsMetadata[labelValue];\n          if (meta) {\n            value.details = `(${meta.type}) ${meta.help}`;\n          }\n        }\n        values.push(value);\n      }\n      this.updateLabelState(name, { values, loading: false });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchSeries(selector: string, lastFacetted?: string) {\n    const { languageProvider } = this.props;\n    if (lastFacetted) {\n      this.updateLabelState(lastFacetted, { loading: true }, `Facetting labels for ${selector}`);\n    }\n    try {\n      const possibleLabels = await languageProvider.fetchSeriesLabels(selector, true);\n      // If selector changed, clear loading state and discard result by returning early\n      if (selector !== buildSelector(this.state.labels)) {\n        if (lastFacetted) {\n          this.updateLabelState(lastFacetted, { loading: false });\n        }\n        return;\n      }\n      if (Object.keys(possibleLabels).length === 0) {\n        this.setState({ error: `Empty results, no matching label for ${selector}` });\n        return;\n      }\n      const labels: SelectableLabel[] = facetLabels(this.state.labels, possibleLabels, lastFacetted);\n      this.setState({ labels, error: '' });\n      if (lastFacetted) {\n        this.updateLabelState(lastFacetted, { loading: false });\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async validateSelector(selector: string) {\n    const { languageProvider } = this.props;\n    this.setState({ validationStatus: `Validating selector ${selector}`, error: '' });\n    const streams = await languageProvider.fetchSeries(selector);\n    this.setState({ validationStatus: `Selector is valid (${streams.length} series found)` });\n  }\n\n  render() {\n    const { theme } = this.props;\n    const { labels, labelSearchTerm, metricSearchTerm, status, error, validationStatus, valueSearchTerm } = this.state;\n    const styles = getStyles(theme);\n    if (labels.length === 0) {\n      return (\n        <div className={styles.wrapper}>\n          <LoadingPlaceholder text=\"Loading labels...\" />\n        </div>\n      );\n    }\n\n    // Filter metrics\n    let metrics = labels.find((label) => label.name === METRIC_LABEL);\n    if (metrics && metricSearchTerm) {\n      metrics = {\n        ...metrics,\n        values: metrics.values?.filter((value) => value.selected || value.name.includes(metricSearchTerm)),\n      };\n    }\n\n    // Filter labels\n    let nonMetricLabels = labels.filter((label) => !label.hidden && label.name !== METRIC_LABEL);\n    if (labelSearchTerm) {\n      nonMetricLabels = nonMetricLabels.filter((label) => label.selected || label.name.includes(labelSearchTerm));\n    }\n\n    // Filter non-metric label values\n    let selectedLabels = nonMetricLabels.filter((label) => label.selected && label.values);\n    if (valueSearchTerm) {\n      selectedLabels = selectedLabels.map((label) => ({\n        ...label,\n        values: label.values?.filter((value) => value.selected || value.name.includes(valueSearchTerm)),\n      }));\n    }\n    const selector = buildSelector(this.state.labels);\n    const empty = selector === EMPTY_SELECTOR;\n    const metricCount = metrics?.values?.length || 0;\n\n    return (\n      <div className={styles.wrapper}>\n        <HorizontalGroup align=\"flex-start\" spacing=\"lg\">\n          <div>\n            <div className={styles.section}>\n              <Label description=\"Once a metric is selected only possible labels are shown.\">1. Select a metric</Label>\n              <div>\n                <Input\n                  onChange={this.onChangeMetricSearch}\n                  aria-label=\"Filter expression for metric\"\n                  value={metricSearchTerm}\n                  data-testid={selectors.components.DataSource.Prometheus.queryEditor.code.metricsBrowser.selectMetric}\n                />\n              </div>\n              <div\n                role=\"list\"\n                className={styles.valueListWrapper}\n                data-testid={selectors.components.DataSource.Prometheus.queryEditor.code.metricsBrowser.metricList}\n              >\n                <FixedSizeList\n                  height={Math.min(450, metricCount * LIST_ITEM_SIZE)}\n                  itemCount={metricCount}\n                  itemSize={LIST_ITEM_SIZE}\n                  itemKey={(i) => metrics!.values![i].name}\n                  width={300}\n                  className={styles.valueList}\n                >\n                  {({ index, style }) => {\n                    const value = metrics?.values?.[index];\n                    if (!value) {\n                      return null;\n                    }\n                    return (\n                      <div style={style}>\n                        <PromLabel\n                          name={metrics!.name}\n                          value={value?.name}\n                          title={value.details}\n                          active={value?.selected}\n                          onClick={this.onClickMetric}\n                          searchTerm={metricSearchTerm}\n                        />\n                      </div>\n                    );\n                  }}\n                </FixedSizeList>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <div className={styles.section}>\n              <Label description=\"Once label values are selected, only possible label combinations are shown.\">\n                2. Select labels to search in\n              </Label>\n              <div>\n                <Input\n                  onChange={this.onChangeLabelSearch}\n                  aria-label=\"Filter expression for label\"\n                  value={labelSearchTerm}\n                  data-testid={\n                    selectors.components.DataSource.Prometheus.queryEditor.code.metricsBrowser.labelNamesFilter\n                  }\n                />\n              </div>\n              {/* Using fixed height here to prevent jumpy layout */}\n              <div className={styles.list} style={{ height: 120 }}>\n                {nonMetricLabels.map((label) => (\n                  <PromLabel\n                    key={label.name}\n                    name={label.name}\n                    loading={label.loading}\n                    active={label.selected}\n                    hidden={label.hidden}\n                    facets={label.facets}\n                    onClick={this.onClickLabel}\n                    searchTerm={labelSearchTerm}\n                  />\n                ))}\n              </div>\n            </div>\n            <div className={styles.section}>\n              <Label description=\"Use the search field to find values across selected labels.\">\n                3. Select (multiple) values for your labels\n              </Label>\n              <div>\n                <Input\n                  onChange={this.onChangeValueSearch}\n                  aria-label=\"Filter expression for label values\"\n                  value={valueSearchTerm}\n                  data-testid={\n                    selectors.components.DataSource.Prometheus.queryEditor.code.metricsBrowser.labelValuesFilter\n                  }\n                />\n              </div>\n              <div className={styles.valueListArea} ref={this.valueListsRef}>\n                {selectedLabels.map((label) => (\n                  <div\n                    role=\"list\"\n                    key={label.name}\n                    aria-label={`Values for ${label.name}`}\n                    className={styles.valueListWrapper}\n                  >\n                    <div className={styles.valueTitle}>\n                      <PromLabel\n                        name={label.name}\n                        loading={label.loading}\n                        active={label.selected}\n                        hidden={label.hidden}\n                        //If no facets, we want to show number of all label values\n                        facets={label.facets || label.values?.length}\n                        onClick={this.onClickLabel}\n                      />\n                    </div>\n                    <FixedSizeList\n                      height={Math.min(200, LIST_ITEM_SIZE * (label.values?.length || 0))}\n                      itemCount={label.values?.length || 0}\n                      itemSize={28}\n                      itemKey={(i) => label.values![i].name}\n                      width={200}\n                      className={styles.valueList}\n                    >\n                      {({ index, style }) => {\n                        const value = label.values?.[index];\n                        if (!value) {\n                          return null;\n                        }\n                        return (\n                          <div style={style}>\n                            <PromLabel\n                              name={label.name}\n                              value={value?.name}\n                              active={value?.selected}\n                              onClick={this.onClickValue}\n                              searchTerm={valueSearchTerm}\n                            />\n                          </div>\n                        );\n                      }}\n                    </FixedSizeList>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </HorizontalGroup>\n\n        <div className={styles.section}>\n          <Label>4. Resulting selector</Label>\n          <div aria-label=\"selector\" className={styles.selector}>\n            {selector}\n          </div>\n          {validationStatus && <div className={styles.validationStatus}>{validationStatus}</div>}\n          <HorizontalGroup>\n            <Button\n              data-testid={selectors.components.DataSource.Prometheus.queryEditor.code.metricsBrowser.useQuery}\n              aria-label=\"Use selector for query button\"\n              disabled={empty}\n              onClick={this.onClickRunQuery}\n            >\n              Use query\n            </Button>\n            <Button\n              data-testid={selectors.components.DataSource.Prometheus.queryEditor.code.metricsBrowser.useAsRateQuery}\n              aria-label=\"Use selector as metrics button\"\n              variant=\"secondary\"\n              disabled={empty}\n              onClick={this.onClickRunRateQuery}\n            >\n              Use as rate query\n            </Button>\n            <Button\n              data-testid={selectors.components.DataSource.Prometheus.queryEditor.code.metricsBrowser.validateSelector}\n              aria-label=\"Validate submit button\"\n              variant=\"secondary\"\n              disabled={empty}\n              onClick={this.onClickValidate}\n            >\n              Validate selector\n            </Button>\n            <Button\n              data-testid={selectors.components.DataSource.Prometheus.queryEditor.code.metricsBrowser.clear}\n              aria-label=\"Selector clear button\"\n              variant=\"secondary\"\n              onClick={this.onClickClear}\n            >\n              Clear\n            </Button>\n            <div className={cx(styles.status, (status || error) && styles.statusShowing)}>\n              <span className={error ? styles.error : ''}>{error || status}</span>\n            </div>\n          </HorizontalGroup>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const PrometheusMetricsBrowser = withTheme2(UnthemedPrometheusMetricsBrowser);\n"],"names":["value","label","_a","PromLabel","_b"],"mappings":"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"}