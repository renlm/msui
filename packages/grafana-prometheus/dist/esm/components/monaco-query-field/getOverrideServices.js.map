{"version":3,"file":"getOverrideServices.js","sources":["../../../../src/components/monaco-query-field/getOverrideServices.ts"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/monaco-query-field/getOverrideServices.ts\nimport { monacoTypes } from '@grafana/ui';\n\n// this thing here is a workaround in a way.\n// what we want to achieve, is that when the autocomplete-window\n// opens, the \"second, extra popup\" with the extra help,\n// also opens automatically.\n// but there is no API to achieve it.\n// the way to do it is to implement the `storageService`\n// interface, and provide our custom implementation,\n// which will default to `true` for the correct string-key.\n// unfortunately, while the typescript-interface exists,\n// it is not exported from monaco-editor,\n// so we cannot rely on typescript to make sure\n// we do it right. all we can do is to manually\n// lookup the interface, and make sure we code our code right.\n// our code is a \"best effort\" approach,\n// i am not 100% how the `scope` and `target` things work,\n// but so far it seems to work ok.\n// i would use an another approach, if there was one available.\n\nfunction makeStorageService() {\n  // we need to return an object that fulfills this interface:\n  // https://github.com/microsoft/vscode/blob/ff1e16eebb93af79fd6d7af1356c4003a120c563/src/vs/platform/storage/common/storage.ts#L37\n  // unfortunately it is not export from monaco-editor\n\n  const strings = new Map<string, string>();\n\n  // we want this to be true by default\n  strings.set('expandSuggestionDocs', true.toString());\n\n  return {\n    // we do not implement the on* handlers\n    onDidChangeValue: (data: unknown): void => undefined,\n    onDidChangeTarget: (data: unknown): void => undefined,\n    onWillSaveState: (data: unknown): void => undefined,\n\n    get: (key: string, scope: unknown, fallbackValue?: string): string | undefined => {\n      return strings.get(key) ?? fallbackValue;\n    },\n\n    getBoolean: (key: string, scope: unknown, fallbackValue?: boolean): boolean | undefined => {\n      const val = strings.get(key);\n      if (val !== undefined) {\n        // the interface-docs say the value will be converted\n        // to a boolean but do not specify how, so we improvise\n        return val === 'true';\n      } else {\n        return fallbackValue;\n      }\n    },\n\n    getNumber: (key: string, scope: unknown, fallbackValue?: number): number | undefined => {\n      const val = strings.get(key);\n      if (val !== undefined) {\n        return parseInt(val, 10);\n      } else {\n        return fallbackValue;\n      }\n    },\n\n    store: (\n      key: string,\n      value: string | boolean | number | undefined | null,\n      scope: unknown,\n      target: unknown\n    ): void => {\n      // the interface-docs say if the value is nullish, it should act as delete\n      if (value === null || value === undefined) {\n        strings.delete(key);\n      } else {\n        strings.set(key, value.toString());\n      }\n    },\n\n    remove: (key: string, scope: unknown): void => {\n      strings.delete(key);\n    },\n\n    keys: (scope: unknown, target: unknown): string[] => {\n      return Array.from(strings.keys());\n    },\n\n    logStorage: (): void => {\n      console.log('logStorage: not implemented');\n    },\n\n    migrate: (): Promise<void> => {\n      // we do not implement this\n      return Promise.resolve(undefined);\n    },\n\n    isNew: (scope: unknown): boolean => {\n      // we create a new storage for every session, we do not persist it,\n      // so we return `true`.\n      return true;\n    },\n\n    flush: (reason?: unknown): Promise<void> => {\n      // we do not implement this\n      return Promise.resolve(undefined);\n    },\n  };\n}\n\nlet overrideServices: monacoTypes.editor.IEditorOverrideServices | null = null;\n\nexport function getOverrideServices(): monacoTypes.editor.IEditorOverrideServices {\n  // only have one instance of this for every query editor\n  if (overrideServices === null) {\n    overrideServices = {\n      storageService: makeStorageService(),\n    };\n  }\n\n  return overrideServices;\n}\n"],"names":[],"mappings":"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"}