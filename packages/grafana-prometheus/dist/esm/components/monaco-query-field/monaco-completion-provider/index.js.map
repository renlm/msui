{"version":3,"file":"index.js","sources":["../../../../../src/components/monaco-query-field/monaco-completion-provider/index.ts"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/monaco-query-field/monaco-completion-provider/index.ts\nimport type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { CompletionType, getCompletions } from './completions';\nimport { DataProvider } from './data_provider';\nimport { getSituation } from './situation';\nimport { NeverCaseError } from './util';\n\nexport function getSuggestOptions(): monacoTypes.editor.ISuggestOptions {\n  return {\n    // monaco-editor sometimes provides suggestions automatically, i am not\n    // sure based on what, seems to be by analyzing the words already\n    // written.\n    // to try it out:\n    // - enter `go_goroutines{job~`\n    // - have the cursor at the end of the string\n    // - press ctrl-enter\n    // - you will get two suggestions\n    // those were not provided by grafana, they are offered automatically.\n    // i want to remove those. the only way i found is:\n    // - every suggestion-item has a `kind` attribute,\n    //   that controls the icon to the left of the suggestion.\n    // - items auto-generated by monaco have `kind` set to `text`.\n    // - we make sure grafana-provided suggestions do not have `kind` set to `text`.\n    // - and then we tell monaco not to show suggestions of kind `text`\n    showWords: false,\n  };\n}\n\nfunction getMonacoCompletionItemKind(type: CompletionType, monaco: Monaco): monacoTypes.languages.CompletionItemKind {\n  switch (type) {\n    case 'DURATION':\n      return monaco.languages.CompletionItemKind.Unit;\n    case 'FUNCTION':\n      return monaco.languages.CompletionItemKind.Variable;\n    case 'HISTORY':\n      return monaco.languages.CompletionItemKind.Snippet;\n    case 'LABEL_NAME':\n      return monaco.languages.CompletionItemKind.Enum;\n    case 'LABEL_VALUE':\n      return monaco.languages.CompletionItemKind.EnumMember;\n    case 'METRIC_NAME':\n      return monaco.languages.CompletionItemKind.Constructor;\n    default:\n      throw new NeverCaseError(type);\n  }\n}\n\nexport function getCompletionProvider(\n  monaco: Monaco,\n  dataProvider: DataProvider\n): monacoTypes.languages.CompletionItemProvider {\n  const provideCompletionItems = (\n    model: monacoTypes.editor.ITextModel,\n    position: monacoTypes.Position\n  ): monacoTypes.languages.ProviderResult<monacoTypes.languages.CompletionList> => {\n    const word = model.getWordAtPosition(position);\n    const range =\n      word != null\n        ? monaco.Range.lift({\n            startLineNumber: position.lineNumber,\n            endLineNumber: position.lineNumber,\n            startColumn: word.startColumn,\n            endColumn: word.endColumn,\n          })\n        : monaco.Range.fromPositions(position);\n    // documentation says `position` will be \"adjusted\" in `getOffsetAt`\n    // i don't know what that means, to be sure i clone it\n\n    const positionClone = {\n      column: position.column,\n      lineNumber: position.lineNumber,\n    };\n    dataProvider.monacoSettings.setInputInRange(model.getValueInRange(range));\n\n    // Check to see if the browser supports window.getSelection()\n    if (window.getSelection) {\n      const selectedText = window.getSelection()?.toString();\n      // If the user has selected text, adjust the cursor position to be at the start of the selection, instead of the end\n      if (selectedText && selectedText.length > 0) {\n        positionClone.column = positionClone.column - selectedText.length;\n      }\n    }\n\n    const offset = model.getOffsetAt(positionClone);\n    const situation = getSituation(model.getValue(), offset);\n    const completionsPromise = situation != null ? getCompletions(situation, dataProvider) : Promise.resolve([]);\n\n    return completionsPromise.then((items) => {\n      // monaco by-default alphabetically orders the items.\n      // to stop it, we use a number-as-string sortkey,\n      // so that monaco keeps the order we use\n      const maxIndexDigits = items.length.toString().length;\n      const suggestions: monacoTypes.languages.CompletionItem[] = items.map((item, index) => ({\n        kind: getMonacoCompletionItemKind(item.type, monaco),\n        label: item.label,\n        insertText: item.insertText,\n        detail: item.detail,\n        documentation: item.documentation,\n        sortText: index.toString().padStart(maxIndexDigits, '0'), // to force the order we have\n        range,\n        command: item.triggerOnInsert\n          ? {\n              id: 'editor.action.triggerSuggest',\n              title: '',\n            }\n          : undefined,\n      }));\n      return { suggestions, incomplete: dataProvider.monacoSettings.suggestionsIncomplete };\n    });\n  };\n\n  return {\n    triggerCharacters: ['{', ',', '[', '(', '=', '~', ' ', '\"'],\n    provideCompletionItems,\n  };\n}\n"],"names":[],"mappings":"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"}