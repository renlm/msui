{"version":3,"file":"data_provider.js","sources":["../../../../../src/components/monaco-query-field/monaco-completion-provider/data_provider.ts"],"sourcesContent":["import { HistoryItem } from '@grafana/data';\nimport type { Monaco } from '@grafana/ui'; // used in TSDoc `@link` below\n\nimport PromQlLanguageProvider from '../../../language_provider';\nimport { PromQuery } from '../../../types';\n\nexport const CODE_MODE_SUGGESTIONS_INCOMPLETE_EVENT = 'codeModeSuggestionsIncomplete';\n\nexport type SuggestionsIncompleteEvent = CustomEvent<{\n  limit: number;\n  datasourceUid: string;\n}>;\n\nexport function isSuggestionsIncompleteEvent(e: Event): e is SuggestionsIncompleteEvent {\n  return (\n    e.type === CODE_MODE_SUGGESTIONS_INCOMPLETE_EVENT &&\n    'detail' in e &&\n    typeof e.detail === 'object' &&\n    e.detail !== null &&\n    'limit' in e.detail &&\n    'datasourceUid' in e.detail\n  );\n}\n\ninterface Metric {\n  name: string;\n  help: string;\n  type: string;\n}\n\nexport interface DataProviderParams {\n  languageProvider: PromQlLanguageProvider;\n  historyProvider: Array<HistoryItem<PromQuery>>;\n}\n\nexport class DataProvider {\n  readonly languageProvider: PromQlLanguageProvider;\n  readonly historyProvider: Array<HistoryItem<PromQuery>>;\n  readonly getSeriesLabels: typeof this.languageProvider.getSeriesLabels;\n  readonly getSeriesValues: typeof this.languageProvider.getSeriesValues;\n  readonly getAllLabelNames: typeof this.languageProvider.getLabelKeys;\n  readonly getLabelValues: typeof this.languageProvider.getLabelValues;\n  readonly metricNamesSuggestionLimit: number;\n  /**\n   * The text that's been typed so far within the current {@link Monaco.Range | Range}.\n   *\n   * @remarks\n   * This is useful with fuzzy searching items to provide as Monaco autocomplete suggestions.\n   */\n  private inputInRange: string;\n  private suggestionsIncomplete: boolean;\n\n  constructor(params: DataProviderParams) {\n    this.languageProvider = params.languageProvider;\n    this.historyProvider = params.historyProvider;\n    this.inputInRange = '';\n    this.metricNamesSuggestionLimit = this.languageProvider.datasource.metricNamesAutocompleteSuggestionLimit;\n    this.suggestionsIncomplete = false;\n    this.getSeriesLabels = this.languageProvider.getSeriesLabels.bind(this.languageProvider);\n    this.getSeriesValues = this.languageProvider.getSeriesValues.bind(this.languageProvider);\n    this.getAllLabelNames = this.languageProvider.getLabelKeys.bind(this.languageProvider);\n    this.getLabelValues = this.languageProvider.getLabelValues.bind(this.languageProvider);\n  }\n\n  getHistory(): string[] {\n    return this.historyProvider.map((h) => h.query.expr).filter(Boolean);\n  }\n\n  getAllMetricNames(): string[] {\n    return this.languageProvider.metrics;\n  }\n\n  metricNamesToMetrics(metricNames: string[]): Metric[] {\n    const { metricsMetadata } = this.languageProvider;\n    const result: Metric[] = metricNames.map((m) => {\n      const metaItem = metricsMetadata?.[m];\n      return {\n        name: m,\n        help: metaItem?.help ?? '',\n        type: metaItem?.type ?? '',\n      };\n    });\n\n    return result;\n  }\n\n  private enableAutocompleteSuggestionsUpdate(): void {\n    this.suggestionsIncomplete = true;\n    dispatchEvent(\n      new CustomEvent(CODE_MODE_SUGGESTIONS_INCOMPLETE_EVENT, {\n        detail: { limit: this.metricNamesSuggestionLimit, datasourceUid: this.languageProvider.datasource.uid },\n      })\n    );\n  }\n\n  private setInputInRange(textInput: string): void {\n    this.inputInRange = textInput;\n  }\n\n  get monacoSettings() {\n    return {\n      /**\n       * Enable autocomplete suggestions update on every input change.\n       *\n       * @remarks\n       * If fuzzy search is used in `getCompletions` to trim down results to improve performance,\n       * we need to instruct Monaco to update the completions on every input change, so that the\n       * completions reflect the current input.\n       */\n      enableAutocompleteSuggestionsUpdate: this.enableAutocompleteSuggestionsUpdate.bind(this),\n      inputInRange: this.inputInRange,\n      setInputInRange: this.setInputInRange.bind(this),\n      suggestionsIncomplete: this.suggestionsIncomplete,\n    };\n  }\n}\n"],"names":[],"mappings":";;;;;;AAMO,MAAM,sCAAyC,GAAA,gCAAA;AAO/C,SAAS,6BAA6B,CAA2C,EAAA;AACtF,EAAA,OACE,EAAE,IAAS,KAAA,sCAAA,IACX,QAAY,IAAA,CAAA,IACZ,OAAO,CAAE,CAAA,MAAA,KAAW,QACpB,IAAA,CAAA,CAAE,WAAW,IACb,IAAA,OAAA,IAAW,CAAE,CAAA,MAAA,IACb,mBAAmB,CAAE,CAAA,MAAA,CAAA;AAEzB,CAAA;AAaO,MAAM,YAAa,CAAA;AAAA,EAiBxB,YAAY,MAA4B,EAAA;AAhBxC,IAAS,aAAA,CAAA,IAAA,EAAA,kBAAA,CAAA,CAAA;AACT,IAAS,aAAA,CAAA,IAAA,EAAA,iBAAA,CAAA,CAAA;AACT,IAAS,aAAA,CAAA,IAAA,EAAA,iBAAA,CAAA,CAAA;AACT,IAAS,aAAA,CAAA,IAAA,EAAA,iBAAA,CAAA,CAAA;AACT,IAAS,aAAA,CAAA,IAAA,EAAA,kBAAA,CAAA,CAAA;AACT,IAAS,aAAA,CAAA,IAAA,EAAA,gBAAA,CAAA,CAAA;AACT,IAAS,aAAA,CAAA,IAAA,EAAA,4BAAA,CAAA,CAAA;AAOT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAQ,aAAA,CAAA,IAAA,EAAA,cAAA,CAAA,CAAA;AACR,IAAQ,aAAA,CAAA,IAAA,EAAA,uBAAA,CAAA,CAAA;AAGN,IAAA,IAAA,CAAK,mBAAmB,MAAO,CAAA,gBAAA,CAAA;AAC/B,IAAA,IAAA,CAAK,kBAAkB,MAAO,CAAA,eAAA,CAAA;AAC9B,IAAA,IAAA,CAAK,YAAe,GAAA,EAAA,CAAA;AACpB,IAAK,IAAA,CAAA,0BAAA,GAA6B,IAAK,CAAA,gBAAA,CAAiB,UAAW,CAAA,sCAAA,CAAA;AACnE,IAAA,IAAA,CAAK,qBAAwB,GAAA,KAAA,CAAA;AAC7B,IAAA,IAAA,CAAK,kBAAkB,IAAK,CAAA,gBAAA,CAAiB,eAAgB,CAAA,IAAA,CAAK,KAAK,gBAAgB,CAAA,CAAA;AACvF,IAAA,IAAA,CAAK,kBAAkB,IAAK,CAAA,gBAAA,CAAiB,eAAgB,CAAA,IAAA,CAAK,KAAK,gBAAgB,CAAA,CAAA;AACvF,IAAA,IAAA,CAAK,mBAAmB,IAAK,CAAA,gBAAA,CAAiB,YAAa,CAAA,IAAA,CAAK,KAAK,gBAAgB,CAAA,CAAA;AACrF,IAAA,IAAA,CAAK,iBAAiB,IAAK,CAAA,gBAAA,CAAiB,cAAe,CAAA,IAAA,CAAK,KAAK,gBAAgB,CAAA,CAAA;AAAA,GACvF;AAAA,EAEA,UAAuB,GAAA;AACrB,IAAO,OAAA,IAAA,CAAK,eAAgB,CAAA,GAAA,CAAI,CAAC,CAAA,KAAM,EAAE,KAAM,CAAA,IAAI,CAAE,CAAA,MAAA,CAAO,OAAO,CAAA,CAAA;AAAA,GACrE;AAAA,EAEA,iBAA8B,GAAA;AAC5B,IAAA,OAAO,KAAK,gBAAiB,CAAA,OAAA,CAAA;AAAA,GAC/B;AAAA,EAEA,qBAAqB,WAAiC,EAAA;AACpD,IAAM,MAAA,EAAE,eAAgB,EAAA,GAAI,IAAK,CAAA,gBAAA,CAAA;AACjC,IAAA,MAAM,MAAmB,GAAA,WAAA,CAAY,GAAI,CAAA,CAAC,CAAM,KAAA;AA1EpD,MAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AA2EM,MAAA,MAAM,WAAW,eAAkB,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,eAAA,CAAA,CAAA,CAAA,CAAA;AACnC,MAAO,OAAA;AAAA,QACL,IAAM,EAAA,CAAA;AAAA,QACN,IAAA,EAAA,CAAM,EAAU,GAAA,QAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAA,IAAA,KAAV,IAAkB,GAAA,EAAA,GAAA,EAAA;AAAA,QACxB,IAAA,EAAA,CAAM,EAAU,GAAA,QAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAA,IAAA,KAAV,IAAkB,GAAA,EAAA,GAAA,EAAA;AAAA,OAC1B,CAAA;AAAA,KACD,CAAA,CAAA;AAED,IAAO,OAAA,MAAA,CAAA;AAAA,GACT;AAAA,EAEQ,mCAA4C,GAAA;AAClD,IAAA,IAAA,CAAK,qBAAwB,GAAA,IAAA,CAAA;AAC7B,IAAA,aAAA;AAAA,MACE,IAAI,YAAY,sCAAwC,EAAA;AAAA,QACtD,MAAA,EAAQ,EAAE,KAAO,EAAA,IAAA,CAAK,4BAA4B,aAAe,EAAA,IAAA,CAAK,gBAAiB,CAAA,UAAA,CAAW,GAAI,EAAA;AAAA,OACvG,CAAA;AAAA,KACH,CAAA;AAAA,GACF;AAAA,EAEQ,gBAAgB,SAAyB,EAAA;AAC/C,IAAA,IAAA,CAAK,YAAe,GAAA,SAAA,CAAA;AAAA,GACtB;AAAA,EAEA,IAAI,cAAiB,GAAA;AACnB,IAAO,OAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASL,mCAAqC,EAAA,IAAA,CAAK,mCAAoC,CAAA,IAAA,CAAK,IAAI,CAAA;AAAA,MACvF,cAAc,IAAK,CAAA,YAAA;AAAA,MACnB,eAAiB,EAAA,IAAA,CAAK,eAAgB,CAAA,IAAA,CAAK,IAAI,CAAA;AAAA,MAC/C,uBAAuB,IAAK,CAAA,qBAAA;AAAA,KAC9B,CAAA;AAAA,GACF;AACF;;;;"}