{"version":3,"file":"MonacoQueryField.js","sources":["../../../../src/components/monaco-query-field/MonacoQueryField.tsx"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/monaco-query-field/MonacoQueryField.tsx\nimport { css } from '@emotion/css';\nimport { parser } from '@prometheus-io/lezer-promql';\nimport { debounce } from 'lodash';\nimport { promLanguageDefinition } from 'monaco-promql';\nimport React, { useEffect, useRef } from 'react';\nimport { useLatest } from 'react-use';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Monaco, monacoTypes, ReactMonacoEditor, useTheme2 } from '@grafana/ui';\n\nimport { Props } from './MonacoQueryFieldProps';\nimport { getOverrideServices } from './getOverrideServices';\nimport { getCompletionProvider, getSuggestOptions } from './monaco-completion-provider';\nimport { DataProvider } from './monaco-completion-provider/data_provider';\nimport { placeHolderScopedVars, validateQuery } from './monaco-completion-provider/validation';\nimport { language, languageConfiguration } from './promql';\n\nconst options: monacoTypes.editor.IStandaloneEditorConstructionOptions = {\n  codeLens: false,\n  contextmenu: false,\n  // we need `fixedOverflowWidgets` because otherwise in grafana-dashboards\n  // the popup is clipped by the panel-visualizations.\n  fixedOverflowWidgets: true,\n  folding: false,\n  fontSize: 14,\n  lineDecorationsWidth: 8, // used as \"padding-left\"\n  lineNumbers: 'off',\n  minimap: { enabled: false },\n  overviewRulerBorder: false,\n  overviewRulerLanes: 0,\n  padding: {\n    // these numbers were picked so that visually this matches the previous version\n    // of the query-editor the best\n    top: 4,\n    bottom: 5,\n  },\n  renderLineHighlight: 'none',\n  scrollbar: {\n    vertical: 'hidden',\n    verticalScrollbarSize: 8, // used as \"padding-right\"\n    horizontal: 'hidden',\n    horizontalScrollbarSize: 0,\n    alwaysConsumeMouseWheel: false,\n  },\n  scrollBeyondLastLine: false,\n  suggest: getSuggestOptions(),\n  suggestFontSize: 12,\n  wordWrap: 'on',\n};\n\n// this number was chosen by testing various values. it might be necessary\n// because of the width of the border, not sure.\n//it needs to do 2 things:\n// 1. when the editor is single-line, it should make the editor height be visually correct\n// 2. when the editor is multi-line, the editor should not be \"scrollable\" (meaning,\n//    you do a scroll-movement in the editor, and it will scroll the content by a couple pixels\n//    up & down. this we want to avoid)\nconst EDITOR_HEIGHT_OFFSET = 2;\n\nconst PROMQL_LANG_ID = promLanguageDefinition.id;\n\n// we must only run the promql-setup code once\nlet PROMQL_SETUP_STARTED = false;\n\nfunction ensurePromQL(monaco: Monaco) {\n  if (PROMQL_SETUP_STARTED === false) {\n    PROMQL_SETUP_STARTED = true;\n    const { aliases, extensions, mimetypes } = promLanguageDefinition;\n    monaco.languages.register({ id: PROMQL_LANG_ID, aliases, extensions, mimetypes });\n\n    // @ts-ignore\n    monaco.languages.setMonarchTokensProvider(PROMQL_LANG_ID, language);\n    // @ts-ignore\n    monaco.languages.setLanguageConfiguration(PROMQL_LANG_ID, languageConfiguration);\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2, placeholder: string) => {\n  return {\n    container: css({\n      borderRadius: theme.shape.radius.default,\n      border: `1px solid ${theme.components.input.borderColor}`,\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'start',\n      alignItems: 'center',\n      height: '100%',\n    }),\n    placeholder: css({\n      '::after': {\n        content: `'${placeholder}'`,\n        fontFamily: theme.typography.fontFamilyMonospace,\n        opacity: 0.6,\n      },\n    }),\n  };\n};\n\nconst MonacoQueryField = (props: Props) => {\n  const id = uuidv4();\n\n  // we need only one instance of `overrideServices` during the lifetime of the react component\n  const overrideServicesRef = useRef(getOverrideServices());\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { languageProvider, history, onBlur, onRunQuery, initialValue, placeholder, onChange, datasource } = props;\n\n  const lpRef = useLatest(languageProvider);\n  const historyRef = useLatest(history);\n  const onRunQueryRef = useLatest(onRunQuery);\n  const onBlurRef = useLatest(onBlur);\n  const onChangeRef = useLatest(onChange);\n\n  const autocompleteDisposeFun = useRef<(() => void) | null>(null);\n\n  const theme = useTheme2();\n  const styles = getStyles(theme, placeholder);\n\n  useEffect(() => {\n    // when we unmount, we unregister the autocomplete-function, if it was registered\n    return () => {\n      autocompleteDisposeFun.current?.();\n    };\n  }, []);\n\n  return (\n    <div\n      data-testid={selectors.components.QueryField.container}\n      className={styles.container}\n      // NOTE: we will be setting inline-style-width/height on this element\n      ref={containerRef}\n    >\n      <ReactMonacoEditor\n        overrideServices={overrideServicesRef.current}\n        options={options}\n        language=\"promql\"\n        value={initialValue}\n        beforeMount={(monaco) => {\n          ensurePromQL(monaco);\n        }}\n        onMount={(editor, monaco) => {\n          const isEditorFocused = editor.createContextKey<boolean>('isEditorFocused' + id, false);\n          // we setup on-blur\n          editor.onDidBlurEditorWidget(() => {\n            isEditorFocused.set(false);\n            onBlurRef.current(editor.getValue());\n          });\n          editor.onDidFocusEditorText(() => {\n            isEditorFocused.set(true);\n          });\n          const dataProvider = new DataProvider({\n            historyProvider: historyRef.current,\n            languageProvider: lpRef.current,\n          });\n          const completionProvider = getCompletionProvider(monaco, dataProvider);\n\n          // completion-providers in monaco are not registered directly to editor-instances,\n          // they are registered to languages. this makes it hard for us to have\n          // separate completion-providers for every query-field-instance\n          // (but we need that, because they might connect to different datasources).\n          // the trick we do is, we wrap the callback in a \"proxy\",\n          // and in the proxy, the first thing is, we check if we are called from\n          // \"our editor instance\", and if not, we just return nothing. if yes,\n          // we call the completion-provider.\n          const filteringCompletionProvider: monacoTypes.languages.CompletionItemProvider = {\n            ...completionProvider,\n            provideCompletionItems: (model, position, context, token) => {\n              // if the model-id does not match, then this call is from a different editor-instance,\n              // not \"our instance\", so return nothing\n              if (editor.getModel()?.id !== model.id) {\n                return { suggestions: [] };\n              }\n              return completionProvider.provideCompletionItems(model, position, context, token);\n            },\n          };\n\n          const { dispose } = monaco.languages.registerCompletionItemProvider(\n            PROMQL_LANG_ID,\n            filteringCompletionProvider\n          );\n\n          autocompleteDisposeFun.current = dispose;\n          // this code makes the editor resize itself so that the content fits\n          // (it will grow taller when necessary)\n          // FIXME: maybe move this functionality into CodeEditor, like:\n          // <CodeEditor resizingMode=\"single-line\"/>\n          const updateElementHeight = () => {\n            const containerDiv = containerRef.current;\n            if (containerDiv !== null) {\n              const pixelHeight = editor.getContentHeight();\n              containerDiv.style.height = `${pixelHeight + EDITOR_HEIGHT_OFFSET}px`;\n              containerDiv.style.width = '100%';\n              const pixelWidth = containerDiv.clientWidth;\n              editor.layout({ width: pixelWidth, height: pixelHeight });\n            }\n          };\n\n          editor.onDidContentSizeChange(updateElementHeight);\n          updateElementHeight();\n\n          // Whenever the editor changes, lets save the last value so the next query for this editor will be up-to-date.\n          // This change is being introduced to fix a bug where you can submit a query via shift+enter:\n          // If you clicked into another field and haven't un-blurred the active field,\n          // then the query that is run will be stale, as the reference is only updated\n          // with the value of the last blurred input.\n          // This can run quite slowly, so we're debouncing this which should accomplish two things\n          // 1. Should prevent this function from blocking the current call stack by pushing into the web API callback queue\n          // 2. Should prevent a bunch of duplicates of this function being called as the user is typing\n          const updateCurrentEditorValue = debounce(() => {\n            const editorValue = editor.getValue();\n            onChangeRef.current(editorValue);\n          }, lpRef.current.datasource.getDebounceTimeInMilliseconds());\n\n          editor.getModel()?.onDidChangeContent(() => {\n            updateCurrentEditorValue();\n          });\n\n          // handle: shift + enter\n          // FIXME: maybe move this functionality into CodeEditor?\n          editor.addCommand(\n            monaco.KeyMod.Shift | monaco.KeyCode.Enter,\n            () => {\n              onRunQueryRef.current(editor.getValue());\n            },\n            'isEditorFocused' + id\n          );\n\n          // Fixes Monaco capturing the search key binding and displaying a useless search box within the Editor.\n          // See https://github.com/grafana/grafana/issues/85850\n          monaco.editor.addKeybindingRule({\n            keybinding: monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyF,\n            command: null,\n          });\n\n          /* Something in this configuration of monaco doesn't bubble up [mod]+K, which the\n                    command palette uses. Pass the event out of monaco manually\n                    */\n          editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyK, function () {\n            global.dispatchEvent(new KeyboardEvent('keydown', { key: 'k', metaKey: true }));\n          });\n\n          if (placeholder) {\n            const placeholderDecorators = [\n              {\n                range: new monaco.Range(1, 1, 1, 1),\n                options: {\n                  className: styles.placeholder,\n                  isWholeLine: true,\n                },\n              },\n            ];\n\n            let decorators: string[] = [];\n\n            const checkDecorators: () => void = () => {\n              const model = editor.getModel();\n\n              if (!model) {\n                return;\n              }\n\n              const newDecorators = model.getValueLength() === 0 ? placeholderDecorators : [];\n              decorators = model.deltaDecorations(decorators, newDecorators);\n            };\n\n            checkDecorators();\n            editor.onDidChangeModelContent(checkDecorators);\n\n            editor.onDidChangeModelContent((e) => {\n              const model = editor.getModel();\n              if (!model) {\n                return;\n              }\n              const query = model.getValue();\n              const errors =\n                validateQuery(\n                  query,\n                  datasource.interpolateString(query, placeHolderScopedVars),\n                  model.getLinesContent(),\n                  parser\n                ) || [];\n\n              const markers = errors.map(({ error, ...boundary }) => ({\n                message: `${\n                  error ? `Error parsing \"${error}\"` : 'Parse error'\n                }. The query appears to be incorrect and could fail to be executed.`,\n                severity: monaco.MarkerSeverity.Error,\n                ...boundary,\n              }));\n\n              monaco.editor.setModelMarkers(model, 'owner', markers);\n            });\n          }\n        }}\n      />\n    </div>\n  );\n};\n\n// we will lazy-load this module using React.lazy,\n// and that only supports default-exports,\n// so we have to default-export this, even if\n// it is against the style-guidelines.\n\nexport default MonacoQueryField;\n"],"names":["uuidv4","_a"],"mappings":"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"}