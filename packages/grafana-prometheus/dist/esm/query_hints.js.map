{"version":3,"file":"query_hints.js","sources":["../../src/query_hints.ts"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/query_hints.ts\nimport { size } from 'lodash';\n\nimport { QueryFix, QueryHint } from '@grafana/data';\n\nimport { PrometheusDatasource } from './datasource';\nimport { PromMetricsMetadata } from './types';\n\n/**\n * Number of time series results needed before starting to suggest sum aggregation hints\n */\nexport const SUM_HINT_THRESHOLD_COUNT = 20;\n\nexport function getQueryHints(query: string, series?: unknown[], datasource?: PrometheusDatasource): QueryHint[] {\n  const hints = [];\n\n  const metricsMetadata = datasource?.languageProvider?.metricsMetadata;\n\n  // ..._bucket metric needs a histogram_quantile()\n  // this regex also prevents hints from being shown when a query already has a function\n  const oldHistogramMetric = query.trim().match(/^\\w+_bucket$|^\\w+_bucket{.*}$/);\n  if (oldHistogramMetric) {\n    const label = 'Selected metric has buckets.';\n    hints.push({\n      type: 'HISTOGRAM_QUANTILE',\n      label,\n      fix: {\n        label: 'Consider calculating aggregated quantile by adding histogram_quantile().',\n        action: {\n          type: 'ADD_HISTOGRAM_QUANTILE',\n          query,\n        },\n      },\n    });\n  } else if (metricsMetadata && simpleQueryCheck(query)) {\n    // having migrated to native histograms\n    // there will be no more old histograms (no buckets)\n    // and we can identify a native histogram by the following\n    // type === 'histogram'\n    // metric name does not include '_bucket'\n    const queryTokens = getQueryTokens(query);\n\n    // Determine whether any of the query identifier tokens refers to a native histogram metric\n    const { nameMetric } = checkMetricType(queryTokens, 'histogram', metricsMetadata, false);\n\n    const nativeHistogramNameMetric = nameMetric;\n\n    if (nativeHistogramNameMetric) {\n      // add hints:\n      // histogram_avg, histogram_count, histogram_sum, histogram_fraction, histogram_stddev, histogram_stdvar\n      const label = 'Selected metric is a native histogram.';\n      hints.push(\n        {\n          type: 'HISTOGRAM_AVG',\n          label,\n          fix: {\n            label: 'Consider calculating the arithmetic average of observed values by adding histogram_avg().',\n            action: {\n              type: 'ADD_HISTOGRAM_AVG',\n              query,\n            },\n          },\n        },\n        {\n          type: 'HISTOGRAM_COUNT',\n          label,\n          fix: {\n            label: 'Consider calculating the count of observations by adding histogram_count().',\n            action: {\n              type: 'ADD_HISTOGRAM_COUNT',\n              query,\n            },\n          },\n        },\n        {\n          type: 'HISTOGRAM_SUM',\n          label,\n          fix: {\n            label: 'Consider calculating the sum of observations by adding histogram_sum().',\n            action: {\n              type: 'ADD_HISTOGRAM_SUM',\n              query,\n            },\n          },\n        },\n        {\n          type: 'HISTOGRAM_FRACTION',\n          label,\n          fix: {\n            label:\n              'Consider calculating the estimated fraction of observations between the provided lower and upper values by adding histogram_fraction().',\n            action: {\n              type: 'ADD_HISTOGRAM_FRACTION',\n              query,\n            },\n          },\n        },\n        {\n          type: 'HISTOGRAM_STDDEV',\n          label,\n          fix: {\n            label:\n              'Consider calculating the estimated standard deviation of observations by adding histogram_stddev().',\n            action: {\n              type: 'ADD_HISTOGRAM_STDDEV',\n              query,\n            },\n          },\n        },\n        {\n          type: 'HISTOGRAM_STDVAR',\n          label,\n          fix: {\n            label: 'Consider calculating the estimated standard variance of observations by adding histogram_stdvar().',\n            action: {\n              type: 'ADD_HISTOGRAM_STDVAR',\n              query,\n            },\n          },\n        }\n      );\n    }\n  }\n\n  // Check for need of rate()\n  if (query.indexOf('rate(') === -1 && query.indexOf('increase(') === -1) {\n    // Use metric metadata for exact types\n    const nameMatch = query.match(/\\b((?<!:)\\w+_(total|sum|count)(?!:))\\b/);\n    let counterNameMetric = nameMatch ? nameMatch[1] : '';\n    let certain = false;\n\n    if (metricsMetadata) {\n      // Tokenize the query into its identifiers (see https://prometheus.io/docs/concepts/data_model/#metric-names-and-labels)\n      const queryTokens = getQueryTokens(query);\n      // Determine whether any of the query identifier tokens refers to a counter metric\n      const metricTypeChecked = checkMetricType(queryTokens, 'counter', metricsMetadata, certain);\n\n      counterNameMetric = metricTypeChecked.nameMetric;\n      certain = metricTypeChecked.certain;\n    }\n\n    if (counterNameMetric) {\n      // FixableQuery consists of metric name and optionally label-value pairs. We are not offering fix for complex queries yet.\n      const fixableQuery = simpleQueryCheck(query);\n      const verb = certain ? 'is' : 'looks like';\n      let label = `Selected metric ${verb} a counter.`;\n      let fix: QueryFix | undefined;\n\n      if (fixableQuery) {\n        fix = {\n          label: 'Consider calculating rate of counter by adding rate().',\n          action: {\n            type: 'ADD_RATE',\n            query,\n          },\n        };\n      } else {\n        label = `${label} Consider calculating rate of counter by adding rate().`;\n      }\n\n      hints.push({\n        type: 'APPLY_RATE',\n        label,\n        fix,\n      });\n    }\n  }\n\n  // Check for recording rules expansion\n  if (datasource && datasource.ruleMappings) {\n    const mapping = datasource.ruleMappings;\n    const mappingForQuery = Object.keys(mapping).reduce((acc, ruleName) => {\n      if (query.search(ruleName) > -1) {\n        return {\n          ...acc,\n          [ruleName]: mapping[ruleName],\n        };\n      }\n      return acc;\n    }, {});\n    if (size(mappingForQuery) > 0) {\n      const label = 'Query contains recording rules.';\n      hints.push({\n        type: 'EXPAND_RULES',\n        label,\n        fix: {\n          label: 'Expand rules',\n          action: {\n            type: 'EXPAND_RULES',\n            query,\n            options: mappingForQuery,\n          },\n        },\n      });\n    }\n  }\n\n  if (series && series.length >= SUM_HINT_THRESHOLD_COUNT) {\n    const simpleMetric = query.trim().match(/^\\w+$/);\n    if (simpleMetric) {\n      hints.push({\n        type: 'ADD_SUM',\n        label: 'Many time series results returned.',\n        fix: {\n          label: 'Consider aggregating with sum().',\n          action: {\n            type: 'ADD_SUM',\n            query: query,\n            preventSubmit: true,\n          },\n        },\n      });\n    }\n  }\n\n  return hints;\n}\n\nexport function getInitHints(datasource: PrometheusDatasource): QueryHint[] {\n  const hints = [];\n\n  // Hint for big disabled lookups\n  if (datasource.lookupsDisabled) {\n    hints.push({\n      label: `Labels and metrics lookup was disabled in data source settings.`,\n      type: 'INFO',\n    });\n  }\n\n  return hints;\n}\n\nfunction getQueryTokens(query: string) {\n  return (\n    Array.from(query.matchAll(/\\$?[a-zA-Z_:][a-zA-Z0-9_:]*/g))\n      .map(([match]) => match)\n      // Exclude variable identifiers\n      .filter((token) => !token.startsWith('$'))\n      // Split composite keys to match the tokens returned by the language provider\n      .flatMap((token) => token.split(':'))\n  );\n}\n\nfunction checkMetricType(\n  queryTokens: string[],\n  metricType: string,\n  metricsMetadata: PromMetricsMetadata,\n  certain: boolean\n) {\n  // update certain to change language for counters\n  const nameMetric =\n    queryTokens.find((metricName) => {\n      // Only considering first type information, could be non-deterministic\n      const metadata = metricsMetadata[metricName];\n      if (metadata && metadata.type.toLowerCase() === metricType) {\n        certain = true;\n        return true;\n      } else {\n        return false;\n      }\n    }) ?? '';\n\n  return { nameMetric, certain };\n}\n\n/**\n * This regex check looks for only metric name and label filters.\n * This prevents hints from being shown when a query already has a functions or is complex.\n * */\nfunction simpleQueryCheck(query: string) {\n  return query.trim().match(/^\\w+$|^\\w+{.*}$/);\n}\n"],"names":[],"mappings":"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"}