{"version":3,"file":"language_provider.js","sources":["../../src/language_provider.ts"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/language_provider.ts\nimport { once } from 'lodash';\nimport Prism from 'prismjs';\n\nimport {\n  AbstractLabelMatcher,\n  AbstractLabelOperator,\n  AbstractQuery,\n  getDefaultTimeRange,\n  LanguageProvider,\n  TimeRange,\n} from '@grafana/data';\nimport { BackendSrvRequest } from '@grafana/runtime';\n\nimport { Label } from './components/monaco-query-field/monaco-completion-provider/situation';\nimport { PrometheusDatasource } from './datasource';\nimport {\n  extractLabelMatchers,\n  fixSummariesMetadata,\n  processHistogramMetrics,\n  processLabels,\n  toPromLikeQuery,\n} from './language_utils';\nimport PromqlSyntax from './promql';\nimport { buildVisualQueryFromString } from './querybuilder/parsing';\nimport { PrometheusCacheLevel, PromMetricsMetadata, PromQuery } from './types';\n\nconst DEFAULT_KEYS = ['job', 'instance'];\nconst EMPTY_SELECTOR = '{}';\n// Max number of items (metrics, labels, values) that we display as suggestions. Prevents from running out of memory.\nexport const SUGGESTIONS_LIMIT = 10000;\n\nconst buildCacheHeaders = (durationInSeconds: number) => {\n  return {\n    headers: {\n      'X-Grafana-Cache': `private, max-age=${durationInSeconds}`,\n    },\n  };\n};\n\nexport function getMetadataString(metric: string, metadata: PromMetricsMetadata): string | undefined {\n  if (!metadata[metric]) {\n    return undefined;\n  }\n  const { type, help } = metadata[metric];\n  return `${type.toUpperCase()}: ${help}`;\n}\n\nexport function getMetadataHelp(metric: string, metadata: PromMetricsMetadata): string | undefined {\n  if (!metadata[metric]) {\n    return undefined;\n  }\n  return metadata[metric].help;\n}\n\nexport function getMetadataType(metric: string, metadata: PromMetricsMetadata): string | undefined {\n  if (!metadata[metric]) {\n    return undefined;\n  }\n  return metadata[metric].type;\n}\n\nconst PREFIX_DELIMITER_REGEX =\n  /(=\"|!=\"|=~\"|!~\"|\\{|\\[|\\(|\\+|-|\\/|\\*|%|\\^|\\band\\b|\\bor\\b|\\bunless\\b|==|>=|!=|<=|>|<|=|~|,)/;\n\nconst secondsInDay = 86400;\nexport default class PromQlLanguageProvider extends LanguageProvider {\n  histogramMetrics: string[];\n  timeRange: TimeRange;\n  metrics: string[];\n  metricsMetadata?: PromMetricsMetadata;\n  declare startTask: Promise<any>;\n  datasource: PrometheusDatasource;\n  labelKeys: string[] = [];\n  declare labelFetchTs: number;\n\n  constructor(datasource: PrometheusDatasource, initialValues?: Partial<PromQlLanguageProvider>) {\n    super();\n\n    this.datasource = datasource;\n    this.histogramMetrics = [];\n    this.timeRange = getDefaultTimeRange();\n    this.metrics = [];\n\n    Object.assign(this, initialValues);\n  }\n\n  getDefaultCacheHeaders() {\n    if (this.datasource.cacheLevel !== PrometheusCacheLevel.None) {\n      return buildCacheHeaders(this.datasource.getCacheDurationInMinutes() * 60);\n    }\n    return;\n  }\n\n  // Strip syntax chars so that typeahead suggestions can work on clean inputs\n  cleanText(s: string) {\n    const parts = s.split(PREFIX_DELIMITER_REGEX);\n    const last = parts.pop()!;\n    return last.trimLeft().replace(/\"$/, '').replace(/^\"/, '');\n  }\n\n  get syntax() {\n    return PromqlSyntax;\n  }\n\n  request = async (url: string, defaultValue: any, params = {}, options?: Partial<BackendSrvRequest>) => {\n    try {\n      const res = await this.datasource.metadataRequest(url, params, options);\n      return res.data.data;\n    } catch (error) {\n      if (!isCancelledError(error)) {\n        console.error(error);\n      }\n    }\n\n    return defaultValue;\n  };\n\n  start = async (timeRange?: TimeRange): Promise<any[]> => {\n    this.timeRange = timeRange ?? getDefaultTimeRange();\n\n    if (this.datasource.lookupsDisabled) {\n      return [];\n    }\n\n    this.metrics = (await this.fetchLabelValues('__name__')) || [];\n    this.histogramMetrics = processHistogramMetrics(this.metrics).sort();\n    return Promise.all([this.loadMetricsMetadata(), this.fetchLabels()]);\n  };\n\n  async loadMetricsMetadata() {\n    const headers = buildCacheHeaders(this.datasource.getDaysToCacheMetadata() * secondsInDay);\n    this.metricsMetadata = fixSummariesMetadata(\n      await this.request(\n        '/api/v1/metadata',\n        {},\n        {},\n        {\n          showErrorAlert: false,\n          ...headers,\n        }\n      )\n    );\n  }\n\n  getLabelKeys(): string[] {\n    return this.labelKeys;\n  }\n\n  importFromAbstractQuery(labelBasedQuery: AbstractQuery): PromQuery {\n    return toPromLikeQuery(labelBasedQuery);\n  }\n\n  exportToAbstractQuery(query: PromQuery): AbstractQuery {\n    const promQuery = query.expr;\n    if (!promQuery || promQuery.length === 0) {\n      return { refId: query.refId, labelMatchers: [] };\n    }\n    const tokens = Prism.tokenize(promQuery, PromqlSyntax);\n    const labelMatchers: AbstractLabelMatcher[] = extractLabelMatchers(tokens);\n    const nameLabelValue = getNameLabelValue(promQuery, tokens);\n    if (nameLabelValue && nameLabelValue.length > 0) {\n      labelMatchers.push({\n        name: '__name__',\n        operator: AbstractLabelOperator.Equal,\n        value: nameLabelValue,\n      });\n    }\n\n    return {\n      refId: query.refId,\n      labelMatchers,\n    };\n  }\n\n  async getSeries(selector: string, withName?: boolean): Promise<Record<string, string[]>> {\n    if (this.datasource.lookupsDisabled) {\n      return {};\n    }\n    try {\n      if (selector === EMPTY_SELECTOR) {\n        return await this.fetchDefaultSeries();\n      } else {\n        return await this.fetchSeriesLabels(selector, withName);\n      }\n    } catch (error) {\n      // TODO: better error handling\n      console.error(error);\n      return {};\n    }\n  }\n\n  /**\n   * @param key\n   */\n  fetchLabelValues = async (key: string): Promise<string[]> => {\n    const params = this.datasource.getAdjustedInterval(this.timeRange);\n    const interpolatedName = this.datasource.interpolateString(key);\n    const url = `/api/v1/label/${interpolatedName}/values`;\n    const value = await this.request(url, [], params, this.getDefaultCacheHeaders());\n    return value ?? [];\n  };\n\n  async getLabelValues(key: string): Promise<string[]> {\n    return await this.fetchLabelValues(key);\n  }\n\n  /**\n   * Fetches all label keys\n   */\n  fetchLabels = async (timeRange?: TimeRange, queries?: PromQuery[]): Promise<string[]> => {\n    if (timeRange) {\n      this.timeRange = timeRange;\n    }\n    let url = '/api/v1/labels';\n    const timeParams = this.datasource.getAdjustedInterval(this.timeRange);\n    this.labelFetchTs = Date.now().valueOf();\n\n    const searchParams = new URLSearchParams({ ...timeParams });\n    queries?.forEach((q) => {\n      const visualQuery = buildVisualQueryFromString(q.expr);\n      if (visualQuery.query.metric !== '') {\n        searchParams.append('match[]', visualQuery.query.metric);\n        if (visualQuery.query.binaryQueries) {\n          visualQuery.query.binaryQueries.forEach((bq) => {\n            searchParams.append('match[]', bq.query.metric);\n          });\n        }\n      }\n    });\n\n    if (this.datasource.httpMethod === 'GET') {\n      url += `?${searchParams.toString()}`;\n    }\n\n    const res = await this.request(url, [], searchParams, this.getDefaultCacheHeaders());\n    if (Array.isArray(res)) {\n      this.labelKeys = res.slice().sort();\n    }\n\n    return [];\n  };\n\n  /**\n   * Gets series values\n   * Function to replace old getSeries calls in a way that will provide faster endpoints for new prometheus instances,\n   * while maintaining backward compatability\n   * @param labelName\n   * @param selector\n   */\n  getSeriesValues = async (labelName: string, selector: string): Promise<string[]> => {\n    if (!this.datasource.hasLabelsMatchAPISupport()) {\n      const data = await this.getSeries(selector);\n      return data[labelName] ?? [];\n    }\n    return await this.fetchSeriesValuesWithMatch(labelName, selector);\n  };\n\n  /**\n   * Fetches all values for a label, with optional match[]\n   * @param name\n   * @param match\n   * @param timeRange\n   * @param requestId\n   */\n  fetchSeriesValuesWithMatch = async (\n    name: string,\n    match: string,\n    requestId?: string,\n    timeRange: TimeRange = this.timeRange\n  ): Promise<string[]> => {\n    const interpolatedName = name ? this.datasource.interpolateString(name) : null;\n    const interpolatedMatch = match ? this.datasource.interpolateString(match) : null;\n    const range = this.datasource.getAdjustedInterval(timeRange);\n    const urlParams = {\n      ...range,\n      ...(interpolatedMatch && { 'match[]': interpolatedMatch }),\n    };\n    let requestOptions: Partial<BackendSrvRequest> | undefined = {\n      ...this.getDefaultCacheHeaders(),\n      ...(requestId && { requestId }),\n    };\n\n    if (!Object.keys(requestOptions).length) {\n      requestOptions = undefined;\n    }\n\n    const value = await this.request(`/api/v1/label/${interpolatedName}/values`, [], urlParams, requestOptions);\n    return value ?? [];\n  };\n\n  /**\n   * Gets series labels\n   * Function to replace old getSeries calls in a way that will provide faster endpoints for new prometheus instances,\n   * while maintaining backward compatability. The old API call got the labels and the values in a single query,\n   * but with the new query we need two calls, one to get the labels, and another to get the values.\n   *\n   * @param selector\n   * @param otherLabels\n   */\n  getSeriesLabels = async (selector: string, otherLabels: Label[]): Promise<string[]> => {\n    let possibleLabelNames, data: Record<string, string[]>;\n\n    if (!this.datasource.hasLabelsMatchAPISupport()) {\n      data = await this.getSeries(selector);\n      possibleLabelNames = Object.keys(data); // all names from prometheus\n    } else {\n      // Exclude __name__ from output\n      otherLabels.push({ name: '__name__', value: '', op: '!=' });\n      data = await this.fetchSeriesLabelsMatch(selector);\n      possibleLabelNames = Object.keys(data);\n    }\n\n    const usedLabelNames = new Set(otherLabels.map((l) => l.name)); // names used in the query\n    return possibleLabelNames.filter((l) => !usedLabelNames.has(l));\n  };\n\n  /**\n   * Fetch labels using the best endpoint that datasource supports.\n   * This is cached by its args but also by the global timeRange currently selected as they can change over requested time.\n   * @param name\n   * @param withName\n   */\n  fetchLabelsWithMatch = async (name: string, withName?: boolean): Promise<Record<string, string[]>> => {\n    if (this.datasource.hasLabelsMatchAPISupport()) {\n      return this.fetchSeriesLabelsMatch(name, withName);\n    } else {\n      return this.fetchSeriesLabels(name, withName);\n    }\n  };\n\n  /**\n   * Fetch labels for a series using /series endpoint. This is cached by its args but also by the global timeRange currently selected as\n   * they can change over requested time.\n   * @param name\n   * @param withName\n   */\n  fetchSeriesLabels = async (name: string, withName?: boolean): Promise<Record<string, string[]>> => {\n    const interpolatedName = this.datasource.interpolateString(name);\n    const range = this.datasource.getAdjustedInterval(this.timeRange);\n    const urlParams = {\n      ...range,\n      'match[]': interpolatedName,\n    };\n    const url = `/api/v1/series`;\n\n    const data = await this.request(url, [], urlParams, this.getDefaultCacheHeaders());\n    const { values } = processLabels(data, withName);\n    return values;\n  };\n\n  /**\n   * Fetch labels for a series using /labels endpoint.  This is cached by its args but also by the global timeRange currently selected as\n   * they can change over requested time.\n   * @param name\n   * @param withName\n   */\n  fetchSeriesLabelsMatch = async (name: string, withName?: boolean): Promise<Record<string, string[]>> => {\n    const interpolatedName = this.datasource.interpolateString(name);\n    const range = this.datasource.getAdjustedInterval(this.timeRange);\n    const urlParams = {\n      ...range,\n      'match[]': interpolatedName,\n    };\n    const url = `/api/v1/labels`;\n\n    const data: string[] = await this.request(url, [], urlParams, this.getDefaultCacheHeaders());\n    // Convert string array to Record<string , []>\n    return data.reduce((ac, a) => ({ ...ac, [a]: '' }), {});\n  };\n\n  /**\n   * Fetch series for a selector. Use this for raw results. Use fetchSeriesLabels() to get labels.\n   * @param match\n   */\n  fetchSeries = async (match: string): Promise<Array<Record<string, string>>> => {\n    const url = '/api/v1/series';\n    const range = this.datasource.getTimeRangeParams(this.timeRange);\n    const params = { ...range, 'match[]': match };\n    return await this.request(url, {}, params, this.getDefaultCacheHeaders());\n  };\n\n  /**\n   * Fetch this only one as we assume this won't change over time. This is cached differently from fetchSeriesLabels\n   * because we can cache more aggressively here and also we do not want to invalidate this cache the same way as in\n   * fetchSeriesLabels.\n   */\n  fetchDefaultSeries = once(async () => {\n    const values = await Promise.all(DEFAULT_KEYS.map((key) => this.fetchLabelValues(key)));\n    return DEFAULT_KEYS.reduce((acc, key, i) => ({ ...acc, [key]: values[i] }), {});\n  });\n}\n\nfunction getNameLabelValue(promQuery: string, tokens: Array<string | Prism.Token>): string {\n  let nameLabelValue = '';\n\n  for (const token of tokens) {\n    if (typeof token === 'string') {\n      nameLabelValue = token;\n      break;\n    }\n  }\n  return nameLabelValue;\n}\n\nfunction isCancelledError(error: unknown): error is {\n  cancelled: boolean;\n} {\n  return typeof error === 'object' && error !== null && 'cancelled' in error && error.cancelled === true;\n}\n"],"names":["PromqlSyntax"],"mappings":"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"}