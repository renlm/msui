{"version":3,"file":"metric_find_query.js","sources":["../../src/metric_find_query.ts"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/metric_find_query.ts\nimport { chain, map as _map, uniq } from 'lodash';\n\nimport { getDefaultTimeRange, MetricFindValue, TimeRange } from '@grafana/data';\n\nimport { PrometheusDatasource } from './datasource';\nimport { getPrometheusTime } from './language_utils';\nimport {\n  PrometheusLabelNamesRegex,\n  PrometheusLabelNamesRegexWithMatch,\n  PrometheusMetricNamesRegex,\n  PrometheusQueryResultRegex,\n} from './migrations/variableMigration';\n\nexport class PrometheusMetricFindQuery {\n  range: TimeRange;\n\n  constructor(\n    private datasource: PrometheusDatasource,\n    private query: string\n  ) {\n    this.datasource = datasource;\n    this.query = query;\n    this.range = getDefaultTimeRange();\n  }\n\n  process(timeRange: TimeRange): Promise<MetricFindValue[]> {\n    this.range = timeRange;\n    const labelNamesRegex = PrometheusLabelNamesRegex;\n    const labelNamesRegexWithMatch = PrometheusLabelNamesRegexWithMatch;\n    const labelValuesRegex = /^label_values\\((?:(.+),\\s*)?([a-zA-Z_][a-zA-Z0-9_]*)\\)\\s*$/;\n    const metricNamesRegex = PrometheusMetricNamesRegex;\n    const queryResultRegex = PrometheusQueryResultRegex;\n    const labelNamesQuery = this.query.match(labelNamesRegex);\n    const labelNamesMatchQuery = this.query.match(labelNamesRegexWithMatch);\n\n    if (labelNamesMatchQuery) {\n      const selector = `{__name__=~\".*${labelNamesMatchQuery[1]}.*\"}`;\n      return this.datasource.languageProvider.getSeriesLabels(selector, []).then((results) =>\n        results.map((result) => ({\n          text: result,\n        }))\n      );\n    }\n\n    if (labelNamesQuery) {\n      return this.datasource.getTagKeys({ filters: [], timeRange });\n    }\n\n    const labelValuesQuery = this.query.match(labelValuesRegex);\n    if (labelValuesQuery) {\n      const filter = labelValuesQuery[1];\n      const label = labelValuesQuery[2];\n      if (isFilterDefined(filter)) {\n        return this.labelValuesQuery(label, filter);\n      } else {\n        // Exclude the filter part of the expression because it is blank or empty\n        return this.labelValuesQuery(label);\n      }\n    }\n\n    const metricNamesQuery = this.query.match(metricNamesRegex);\n    if (metricNamesQuery) {\n      return this.metricNameQuery(metricNamesQuery[1]);\n    }\n\n    const queryResultQuery = this.query.match(queryResultRegex);\n    if (queryResultQuery) {\n      return this.queryResultQuery(queryResultQuery[1]);\n    }\n\n    // if query contains full metric name, return metric name and label list\n    const expressions = ['label_values()', 'metrics()', 'query_result()'];\n    if (!expressions.includes(this.query)) {\n      return this.metricNameAndLabelsQuery(this.query);\n    }\n\n    return Promise.resolve([]);\n  }\n\n  labelValuesQuery(label: string, metric?: string) {\n    const start = getPrometheusTime(this.range.from, false);\n    const end = getPrometheusTime(this.range.to, true);\n    const params = { ...(metric && { 'match[]': metric }), start: start.toString(), end: end.toString() };\n\n    if (!metric || this.datasource.hasLabelsMatchAPISupport()) {\n      const url = `/api/v1/label/${label}/values`;\n\n      return this.datasource.metadataRequest(url, params).then((result) => {\n        return _map(result.data.data, (value) => {\n          return { text: value };\n        });\n      });\n    } else {\n      const url = `/api/v1/series`;\n\n      return this.datasource.metadataRequest(url, params).then((result) => {\n        const _labels = _map(result.data.data, (metric) => {\n          return metric[label] || '';\n        }).filter((label) => {\n          return label !== '';\n        });\n\n        return uniq(_labels).map((metric) => {\n          return {\n            text: metric,\n            expandable: true,\n          };\n        });\n      });\n    }\n  }\n\n  metricNameQuery(metricFilterPattern: string) {\n    const start = getPrometheusTime(this.range.from, false);\n    const end = getPrometheusTime(this.range.to, true);\n    const params = {\n      start: start.toString(),\n      end: end.toString(),\n    };\n    const url = `/api/v1/label/__name__/values`;\n\n    return this.datasource.metadataRequest(url, params).then((result) => {\n      return chain(result.data.data)\n        .filter((metricName) => {\n          const r = new RegExp(metricFilterPattern);\n          return r.test(metricName);\n        })\n        .map((matchedMetricName) => {\n          return {\n            text: matchedMetricName,\n            expandable: true,\n          };\n        })\n        .value();\n    });\n  }\n\n  queryResultQuery(query: string) {\n    const url = '/api/v1/query';\n    const params = {\n      query,\n      time: getPrometheusTime(this.range.to, true).toString(),\n    };\n    return this.datasource.metadataRequest(url, params).then((result) => {\n      switch (result.data.data.resultType) {\n        case 'scalar': // [ <unix_time>, \"<scalar_value>\" ]\n        case 'string': // [ <unix_time>, \"<string_value>\" ]\n          return [\n            {\n              text: result.data.data.result[1] || '',\n              expandable: false,\n            },\n          ];\n        case 'vector':\n          return _map(result.data.data.result, (metricData) => {\n            let text = metricData.metric.__name__ || '';\n            delete metricData.metric.__name__;\n            text +=\n              '{' +\n              _map(metricData.metric, (v, k) => {\n                return k + '=\"' + v + '\"';\n              }).join(',') +\n              '}';\n            text += ' ' + metricData.value[1] + ' ' + metricData.value[0] * 1000;\n\n            return {\n              text: text,\n              expandable: true,\n            };\n          });\n        default:\n          throw Error(`Unknown/Unhandled result type: [${result.data.data.resultType}]`);\n      }\n    });\n  }\n\n  metricNameAndLabelsQuery(query: string): Promise<MetricFindValue[]> {\n    const start = getPrometheusTime(this.range.from, false);\n    const end = getPrometheusTime(this.range.to, true);\n    const params = {\n      'match[]': query,\n      start: start.toString(),\n      end: end.toString(),\n    };\n\n    const url = `/api/v1/series`;\n    const self = this;\n\n    return this.datasource.metadataRequest(url, params).then((result) => {\n      return _map(result.data.data, (metric: { [key: string]: string }) => {\n        return {\n          text: self.datasource.getOriginalMetricName(metric),\n          expandable: true,\n        };\n      });\n    });\n  }\n}\n\nfunction isFilterDefined(filter: string) {\n  // We consider blank strings or the empty filter {} as an undefined filter\n  return filter && filter.split(' ').join('') !== '{}';\n}\n"],"names":["_map","metric","label"],"mappings":"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"}