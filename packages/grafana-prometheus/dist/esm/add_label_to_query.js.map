{"version":3,"file":"add_label_to_query.js","sources":["../../src/add_label_to_query.ts"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/add_label_to_query.ts\nimport { parser, VectorSelector } from '@prometheus-io/lezer-promql';\n\nimport { PromQueryModeller } from './querybuilder/PromQueryModeller';\nimport { buildVisualQueryFromString } from './querybuilder/parsing';\nimport { QueryBuilderLabelFilter } from './querybuilder/shared/types';\nimport { PromVisualQuery } from './querybuilder/types';\n\n/**\n * Adds label filter to existing query. Useful for query modification for example for ad hoc filters.\n *\n * It uses PromQL parser to find instances of metric and labels, alters them and then splices them back into the query.\n * Ideally we could use the parse -> change -> render is a simple 3 steps but right now building the visual query\n * object does not support all possible queries.\n *\n * So instead this just operates on substrings of the query with labels and operates just on those. This makes this\n * more robust and can alter even invalid queries, and preserves in general the query structure and whitespace.\n * @param query\n * @param key\n * @param value\n * @param operator\n */\nexport function addLabelToQuery(query: string, key: string, value: string | number, operator = '='): string {\n  if (!key || !value) {\n    throw new Error('Need label to add to query.');\n  }\n\n  const vectorSelectorPositions = getVectorSelectorPositions(query);\n  if (!vectorSelectorPositions.length) {\n    return query;\n  }\n\n  const filter = toLabelFilter(key, value, operator);\n  return addFilter(query, vectorSelectorPositions, filter);\n}\n\ntype VectorSelectorPosition = { from: number; to: number; query: PromVisualQuery };\n\n/**\n * Parse the string and get all VectorSelector positions in the query together with parsed representation of the vector\n * selector.\n * @param query\n */\nfunction getVectorSelectorPositions(query: string): VectorSelectorPosition[] {\n  const tree = parser.parse(query);\n  const positions: VectorSelectorPosition[] = [];\n  tree.iterate({\n    enter: ({ to, from, type }): false | void => {\n      if (type.id === VectorSelector) {\n        const visQuery = buildVisualQueryFromString(query.substring(from, to));\n        positions.push({ query: visQuery.query, from, to });\n        return false;\n      }\n    },\n  });\n  return positions;\n}\n\nfunction toLabelFilter(key: string, value: string | number, operator: string): QueryBuilderLabelFilter {\n  // We need to make sure that we convert the value back to string because it may be a number\n  const transformedValue = value === Infinity ? '+Inf' : value.toString();\n  return { label: key, op: operator, value: transformedValue };\n}\n\nfunction addFilter(\n  query: string,\n  vectorSelectorPositions: VectorSelectorPosition[],\n  filter: QueryBuilderLabelFilter\n): string {\n  const modeller = new PromQueryModeller();\n  let newQuery = '';\n  let prev = 0;\n\n  for (let i = 0; i < vectorSelectorPositions.length; i++) {\n    // This is basically just doing splice on a string for each matched vector selector.\n\n    const match = vectorSelectorPositions[i];\n    const isLast = i === vectorSelectorPositions.length - 1;\n\n    const start = query.substring(prev, match.from);\n    const end = isLast ? query.substring(match.to) : '';\n\n    if (!labelExists(match.query.labels, filter)) {\n      // We don't want to add duplicate labels.\n      match.query.labels.push(filter);\n    }\n    const newLabels = modeller.renderQuery(match.query);\n    newQuery += start + newLabels + end;\n    prev = match.to;\n  }\n  return newQuery;\n}\n\n/**\n * Check if label exists in the list of labels but ignore the operator.\n * @param labels\n * @param filter\n */\nfunction labelExists(labels: QueryBuilderLabelFilter[], filter: QueryBuilderLabelFilter) {\n  return labels.find((label) => label.label === filter.label && label.value === filter.value);\n}\n"],"names":[],"mappings":";;;;AAsBO,SAAS,eAAgB,CAAA,KAAA,EAAe,GAAa,EAAA,KAAA,EAAwB,WAAW,GAAa,EAAA;AAC1G,EAAI,IAAA,CAAC,GAAO,IAAA,CAAC,KAAO,EAAA;AAClB,IAAM,MAAA,IAAI,MAAM,6BAA6B,CAAA,CAAA;AAAA,GAC/C;AAEA,EAAM,MAAA,uBAAA,GAA0B,2BAA2B,KAAK,CAAA,CAAA;AAChE,EAAI,IAAA,CAAC,wBAAwB,MAAQ,EAAA;AACnC,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AAEA,EAAA,MAAM,MAAS,GAAA,aAAA,CAAc,GAAK,EAAA,KAAA,EAAO,QAAQ,CAAA,CAAA;AACjD,EAAO,OAAA,SAAA,CAAU,KAAO,EAAA,uBAAA,EAAyB,MAAM,CAAA,CAAA;AACzD,CAAA;AASA,SAAS,2BAA2B,KAAyC,EAAA;AAC3E,EAAM,MAAA,IAAA,GAAO,MAAO,CAAA,KAAA,CAAM,KAAK,CAAA,CAAA;AAC/B,EAAA,MAAM,YAAsC,EAAC,CAAA;AAC7C,EAAA,IAAA,CAAK,OAAQ,CAAA;AAAA,IACX,OAAO,CAAC,EAAE,EAAI,EAAA,IAAA,EAAM,MAAyB,KAAA;AAC3C,MAAI,IAAA,IAAA,CAAK,OAAO,cAAgB,EAAA;AAC9B,QAAA,MAAM,WAAW,0BAA2B,CAAA,KAAA,CAAM,SAAU,CAAA,IAAA,EAAM,EAAE,CAAC,CAAA,CAAA;AACrE,QAAA,SAAA,CAAU,KAAK,EAAE,KAAA,EAAO,SAAS,KAAO,EAAA,IAAA,EAAM,IAAI,CAAA,CAAA;AAClD,QAAO,OAAA,KAAA,CAAA;AAAA,OACT;AAAA,KACF;AAAA,GACD,CAAA,CAAA;AACD,EAAO,OAAA,SAAA,CAAA;AACT,CAAA;AAEA,SAAS,aAAA,CAAc,GAAa,EAAA,KAAA,EAAwB,QAA2C,EAAA;AAErG,EAAA,MAAM,gBAAmB,GAAA,KAAA,KAAU,QAAW,GAAA,MAAA,GAAS,MAAM,QAAS,EAAA,CAAA;AACtE,EAAA,OAAO,EAAE,KAAO,EAAA,GAAA,EAAK,EAAI,EAAA,QAAA,EAAU,OAAO,gBAAiB,EAAA,CAAA;AAC7D,CAAA;AAEA,SAAS,SAAA,CACP,KACA,EAAA,uBAAA,EACA,MACQ,EAAA;AACR,EAAM,MAAA,QAAA,GAAW,IAAI,iBAAkB,EAAA,CAAA;AACvC,EAAA,IAAI,QAAW,GAAA,EAAA,CAAA;AACf,EAAA,IAAI,IAAO,GAAA,CAAA,CAAA;AAEX,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,uBAAA,CAAwB,QAAQ,CAAK,EAAA,EAAA;AAGvD,IAAM,MAAA,KAAA,GAAQ,wBAAwB,CAAC,CAAA,CAAA;AACvC,IAAM,MAAA,MAAA,GAAS,CAAM,KAAA,uBAAA,CAAwB,MAAS,GAAA,CAAA,CAAA;AAEtD,IAAA,MAAM,KAAQ,GAAA,KAAA,CAAM,SAAU,CAAA,IAAA,EAAM,MAAM,IAAI,CAAA,CAAA;AAC9C,IAAA,MAAM,MAAM,MAAS,GAAA,KAAA,CAAM,SAAU,CAAA,KAAA,CAAM,EAAE,CAAI,GAAA,EAAA,CAAA;AAEjD,IAAA,IAAI,CAAC,WAAY,CAAA,KAAA,CAAM,KAAM,CAAA,MAAA,EAAQ,MAAM,CAAG,EAAA;AAE5C,MAAM,KAAA,CAAA,KAAA,CAAM,MAAO,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAAA,KAChC;AACA,IAAA,MAAM,SAAY,GAAA,QAAA,CAAS,WAAY,CAAA,KAAA,CAAM,KAAK,CAAA,CAAA;AAClD,IAAA,QAAA,IAAY,QAAQ,SAAY,GAAA,GAAA,CAAA;AAChC,IAAA,IAAA,GAAO,KAAM,CAAA,EAAA,CAAA;AAAA,GACf;AACA,EAAO,OAAA,QAAA,CAAA;AACT,CAAA;AAOA,SAAS,WAAA,CAAY,QAAmC,MAAiC,EAAA;AACvF,EAAO,OAAA,MAAA,CAAO,IAAK,CAAA,CAAC,KAAU,KAAA,KAAA,CAAM,KAAU,KAAA,MAAA,CAAO,KAAS,IAAA,KAAA,CAAM,KAAU,KAAA,MAAA,CAAO,KAAK,CAAA,CAAA;AAC5F;;;;"}