{"version":3,"file":"index.js","sources":["../../grafana-e2e-selectors/src/selectors/components.ts","../../grafana-e2e-selectors/src/selectors/pages.ts","../../grafana-e2e-selectors/src/selectors/index.ts","../src/gcopypaste/app/core/utils/query.ts","../src/promql.ts","../src/querybuilder/components/LabelParamEditor.tsx","../src/querybuilder/types.ts","../src/querybuilder/operationUtils.ts","../src/querybuilder/binaryScalarOperations.ts","../src/querybuilder/operations.ts","../src/querybuilder/aggregations.ts","../src/querybuilder/shared/LokiAndPromQueryModellerBase.ts","../src/querybuilder/PromQueryModeller.ts","../src/querybuilder/shared/RawQuery.tsx","../src/querybuilder/QueryPattern.tsx","../src/querybuilder/parsingUtils.ts","../src/querybuilder/parsing.ts","../src/querybuilder/QueryPatternsModal.tsx","../src/gcopypaste/app/core/store.ts","../src/querybuilder/hooks/useFlag.ts","../src/querybuilder/shared/types.ts","../src/querybuilder/shared/QueryEditorModeToggle.tsx","../src/querybuilder/shared/QueryHeaderSwitch.tsx","../src/types.ts","../src/querybuilder/state.ts","../src/querybuilder/shared/OperationExplainedBox.tsx","../src/querybuilder/shared/OperationInfoButton.tsx","../src/querybuilder/shared/OperationHeader.tsx","../src/querybuilder/shared/OperationParamEditor.tsx","../src/querybuilder/shared/OperationEditor.tsx","../src/querybuilder/shared/OperationList.tsx","../src/querybuilder/shared/OperationListExplained.tsx","../src/querybuilder/shared/OperationsEditorRow.tsx","../src/querybuilder/shared/QueryBuilderHints.tsx","../src/add_label_to_query.ts","../src/gcopypaste/packages/grafana-ui/src/components/Select/SelectBase.tsx","../src/querybuilder/components/metrics-modal/state/helpers.ts","../src/querybuilder/components/metrics-modal/AdditionalSettings.tsx","../src/querybuilder/components/metrics-modal/FeedbackLink.tsx","../src/configuration/AlertingSettingsOverhaul.tsx","../src/configuration/DataSourceHttpSettingsOverhaul.tsx","../src/gcopypaste/app/features/live/data/amendTimeSeries.ts","../src/querycache/QueryCache.ts","../src/configuration/ExemplarSetting.tsx","../src/configuration/ExemplarsSettings.tsx","../src/configuration/PromFlavorVersions.ts","../src/configuration/PromSettings.tsx","../src/configuration/ConfigEditor.tsx","../src/querybuilder/components/metrics-modal/ResultsTable.tsx","../src/querybuilder/components/metrics-modal/state/state.ts","../src/querybuilder/components/metrics-modal/styles.ts","../src/querybuilder/components/metrics-modal/uFuzzy.ts","../src/querybuilder/components/metrics-modal/MetricsModal.tsx","../src/querybuilder/components/MetricSelect.tsx","../src/language_utils.ts","../src/language_provider.ts","../src/querybuilder/components/LabelFilterItem.tsx","../src/querybuilder/components/LabelFilters.tsx","../src/querybuilder/components/MetricsLabelsSection.tsx","../src/querybuilder/components/NestedQuery.tsx","../src/querybuilder/components/NestedQueryList.tsx","../src/querybuilder/components/PromQueryBuilderExplained.tsx","../src/querybuilder/components/promQail/QuerySuggestionItem.tsx","../src/querybuilder/components/promQail/types.ts","../src/querybuilder/components/promQail/QuerySuggestionContainer.tsx","../src/querybuilder/components/promQail/resources/AI_Logo_color.svg","../src/querybuilder/components/promQail/prompts.ts","../src/querybuilder/components/promQail/state/state.ts","../src/querybuilder/components/promQail/state/templates.ts","../src/querybuilder/components/promQail/state/helpers.ts","../src/querybuilder/components/promQail/PromQail.tsx","../src/querybuilder/components/promQail/QueryAssistantButton.tsx","../src/querybuilder/components/PromQueryBuilder.tsx","../src/querybuilder/components/QueryPreview.tsx","../src/querybuilder/components/PromQueryBuilderContainer.tsx","../src/components/PromExemplarField.tsx","../src/components/PromExploreExtraField.tsx","../src/querybuilder/shared/QueryOptionGroup.tsx","../src/querybuilder/components/PromQueryLegendEditor.tsx","../src/querybuilder/components/PromQueryBuilderOptions.tsx","../src/gcopypaste/app/core/components/LocalStorageValueProvider/LocalStorageValueProvider.tsx","../src/gcopypaste/app/core/utils/CancelablePromise.ts","../src/components/PrometheusMetricsBrowser.tsx","../src/components/monaco-query-field/getOverrideServices.ts","../src/components/monaco-query-field/monaco-completion-provider/util.ts","../src/components/monaco-query-field/monaco-completion-provider/completions.ts","../src/components/monaco-query-field/monaco-completion-provider/situation.ts","../src/components/monaco-query-field/monaco-completion-provider/index.ts","../src/components/monaco-query-field/monaco-completion-provider/data_provider.ts","../src/components/monaco-query-field/monaco-completion-provider/validation.ts","../src/components/monaco-query-field/promql.ts","../src/components/monaco-query-field/MonacoQueryField.tsx","../src/components/monaco-query-field/MonacoQueryFieldLazy.tsx","../src/components/monaco-query-field/MonacoQueryFieldWrapper.tsx","../src/components/PromQueryField.tsx","../src/querybuilder/components/PromQueryCodeEditor.tsx","../src/querybuilder/components/PromQueryCodeEditorAutocompleteInfo.tsx","../src/querybuilder/components/PromQueryEditorSelector.tsx","../src/components/PromQueryEditorForAlerting.tsx","../src/components/PromQueryEditorByApp.tsx","../src/components/AnnotationQueryEditor.tsx","../src/components/PromCheatSheet.tsx","../src/migrations/variableMigration.ts","../src/components/VariableQueryEditor.tsx","../src/metric_find_query.ts","../src/query_hints.ts","../src/result_transformer.ts","../src/tracking.ts","../src/variables.ts","../src/datasource.ts"],"sourcesContent":["// NOTE: by default Component string selectors are set up to be aria-labels,\n// however there are many cases where your component may not need an aria-label\n// (a <button> with clear text, for example, does not need an aria-label as it's already labeled)\n// but you still might need to select it for testing,\n// in that case please add the attribute data-testid={selector} in the component and\n// prefix your selector string with 'data-testid' so that when create the selectors we know to search for it on the right attribute\n/**\n * Selectors grouped/defined in Components\n *\n * @alpha\n */\nexport const Components = {\n  RadioButton: {\n    container: 'data-testid radio-button',\n  },\n  Breadcrumbs: {\n    breadcrumb: (title: string) => `data-testid ${title} breadcrumb`,\n  },\n  TimePicker: {\n    openButton: 'data-testid TimePicker Open Button',\n    overlayContent: 'data-testid TimePicker Overlay Content',\n    fromField: 'data-testid Time Range from field',\n    toField: 'data-testid Time Range to field',\n    applyTimeRange: 'data-testid TimePicker submit button',\n    copyTimeRange: 'data-testid TimePicker copy button',\n    pasteTimeRange: 'data-testid TimePicker paste button',\n    calendar: {\n      label: 'data-testid Time Range calendar',\n      openButton: 'data-testid Open time range calendar',\n      closeButton: 'data-testid Close time range Calendar',\n    },\n    absoluteTimeRangeTitle: 'data-testid-absolute-time-range-narrow',\n  },\n  DataSourcePermissions: {\n    form: () => 'form[name=\"addPermission\"]',\n    roleType: 'Role to add new permission to',\n    rolePicker: 'Built-in role picker',\n    permissionLevel: 'Permission Level',\n  },\n  DateTimePicker: {\n    input: 'data-testid date-time-input',\n  },\n  DataSource: {\n    TestData: {\n      QueryTab: {\n        scenarioSelectContainer: 'Test Data Query scenario select container',\n        scenarioSelect: 'Test Data Query scenario select',\n        max: 'TestData max',\n        min: 'TestData min',\n        noise: 'TestData noise',\n        seriesCount: 'TestData series count',\n        spread: 'TestData spread',\n        startValue: 'TestData start value',\n        drop: 'TestData drop values',\n      },\n    },\n    DataSourceHttpSettings: {\n      urlInput: 'data-testid Datasource HTTP settings url',\n    },\n    Jaeger: {\n      traceIDInput: 'Trace ID',\n    },\n    Prometheus: {\n      configPage: {\n        connectionSettings: 'Data source connection URL', // aria-label in grafana experimental\n        manageAlerts: 'prometheus-alerts-manager', // id for switch component\n        scrapeInterval: 'data-testid scrape interval',\n        queryTimeout: 'data-testid query timeout',\n        defaultEditor: 'data-testid default editor',\n        disableMetricLookup: 'disable-metric-lookup', // id for switch component\n        prometheusType: 'data-testid prometheus type',\n        prometheusVersion: 'data-testid prometheus version',\n        cacheLevel: 'data-testid cache level',\n        incrementalQuerying: 'prometheus-incremental-querying', // id for switch component\n        queryOverlapWindow: 'data-testid query overlap window',\n        disableRecordingRules: 'disable-recording-rules', // id for switch component\n        customQueryParameters: 'data-testid custom query parameters',\n        httpMethod: 'data-testid http method',\n        exemplarsAddButton: 'data-testid Add exemplar config button',\n        internalLinkSwitch: 'data-testid Internal link switch',\n        codeModeMetricNamesSuggestionLimit: 'data-testid code mode metric names suggestion limit',\n      },\n      queryEditor: {\n        // kickstart: '', see QueryBuilder queryPatterns below\n        explain: 'data-testid prometheus explain switch wrapper',\n        editorToggle: 'data-testid QueryEditorModeToggle', // wrapper for toggle\n        options: 'data-testid prometheus options', // wrapper for options group\n        legend: 'data-testid prometheus legend wrapper', // wrapper for multiple compomnents\n        format: 'data-testid prometheus format',\n        step: 'prometheus-step', // id for autosize component\n        type: 'data-testid prometheus type', //wrapper for radio button group\n        exemplars: 'prometheus-exemplars', // id for editor switch component\n        builder: {\n          // see QueryBuilder below for commented selectors\n          // labelSelect: 'data-testid Select label',\n          // valueSelect: 'data-testid Select value',\n          // matchOperatorSelect: 'data-testid Select match operator',\n          metricSelect: 'data-testid metric select',\n          hints: 'data-testid prometheus hints', // wrapper for hints component\n          metricsExplorer: 'data-testid metrics explorer',\n          queryAdvisor: 'data-testid query advisor',\n        },\n        code: {\n          queryField: 'data-testid prometheus query field',\n          metricsCountInfo: 'data-testid metrics count disclaimer',\n          metricsBrowser: {\n            openButton: 'data-testid open metrics browser',\n            selectMetric: 'data-testid select a metric',\n            metricList: 'data-testid metric list',\n            labelNamesFilter: 'data-testid label names filter',\n            labelValuesFilter: 'data-testid label values filter',\n            useQuery: 'data-testid use query',\n            useAsRateQuery: 'data-testid use as rate query',\n            validateSelector: 'data-testid validate selector',\n            clear: 'data-testid clear',\n          },\n        },\n      },\n      exemplarMarker: 'data-testid Exemplar marker',\n      variableQueryEditor: {\n        queryType: 'data-testid query type',\n        labelnames: {\n          metricRegex: 'data-testid label names metric regex',\n        },\n        labelValues: {\n          labelSelect: 'data-testid label values label select',\n          // metric select see queryEditor: builder for more context\n          // label select for metric filtering see queryEditor: builder for more context\n        },\n        metricNames: {\n          metricRegex: 'data-testid metric names metric regex',\n        },\n        varQueryResult: 'data-testid variable query result',\n        seriesQuery: 'data-testid prometheus series query',\n        classicQuery: 'data-testid prometheus classic query',\n      },\n      annotations: {\n        minStep: 'prometheus-annotation-min-step', // id for autosize input\n        title: 'data-testid prometheus annotation title',\n        tags: 'data-testid prometheus annotation tags',\n        text: 'data-testid prometheus annotation text',\n        seriesValueAsTimestamp: 'data-testid prometheus annotation series value as timestamp',\n      },\n    },\n  },\n  Menu: {\n    MenuComponent: (title: string) => `${title} menu`,\n    MenuGroup: (title: string) => `${title} menu group`,\n    MenuItem: (title: string) => `${title} menu item`,\n    SubMenu: {\n      container: 'data-testid SubMenu container',\n      icon: 'data-testid SubMenu icon',\n    },\n  },\n  Panels: {\n    Panel: {\n      title: (title: string) => `data-testid Panel header ${title}`,\n      content: 'data-testid panel content',\n      headerItems: (item: string) => `data-testid Panel header item ${item}`,\n      menuItems: (item: string) => `data-testid Panel menu item ${item}`,\n      menu: (title: string) => `data-testid Panel menu ${title}`,\n      containerByTitle: (title: string) => `${title} panel`,\n      headerCornerInfo: (mode: string) => `Panel header ${mode}`,\n      status: (status: string) => `data-testid Panel status ${status}`,\n      loadingBar: () => `Panel loading bar`,\n      HoverWidget: {\n        container: 'data-testid hover-header-container',\n        dragIcon: 'data-testid drag-icon',\n      },\n      PanelDataErrorMessage: 'data-testid Panel data error message',\n    },\n    Visualization: {\n      Graph: {\n        container: 'Graph container',\n        VisualizationTab: {\n          legendSection: 'Legend section',\n        },\n        Legend: {\n          legendItemAlias: (name: string) => `gpl alias ${name}`,\n          showLegendSwitch: 'gpl show legend',\n        },\n        xAxis: {\n          labels: () => 'div.flot-x-axis > div.flot-tick-label',\n        },\n      },\n      BarGauge: {\n        /**\n         * @deprecated use valueV2 from Grafana 8.3 instead\n         */\n        value: 'Bar gauge value',\n        valueV2: 'data-testid Bar gauge value',\n      },\n      PieChart: {\n        svgSlice: 'data testid Pie Chart Slice',\n      },\n      Text: {\n        container: () => '.markdown-html',\n      },\n      Table: {\n        header: 'table header',\n        footer: 'table-footer',\n        body: 'data-testid table body',\n      },\n    },\n  },\n  VizLegend: {\n    seriesName: (name: string) => `data-testid VizLegend series ${name}`,\n  },\n  Drawer: {\n    General: {\n      title: (title: string) => `Drawer title ${title}`,\n      expand: 'Drawer expand',\n      contract: 'Drawer contract',\n      close: 'data-testid Drawer close',\n      rcContentWrapper: () => '.rc-drawer-content-wrapper',\n      subtitle: 'data-testid drawer subtitle',\n    },\n    DashboardSaveDrawer: {\n      saveButton: 'data-testid Save dashboard drawer button',\n      saveAsButton: 'data-testid Save as dashboard drawer button',\n      saveAsTitleInput: 'Save dashboard title field',\n    },\n  },\n  PanelEditor: {\n    General: {\n      content: 'data-testid Panel editor content',\n    },\n    OptionsPane: {\n      content: 'data-testid Panel editor option pane content',\n      select: 'Panel editor option pane select',\n      fieldLabel: (type: string) => `${type} field property editor`,\n      fieldInput: (title: string) => `data-testid Panel editor option pane field input ${title}`,\n    },\n    // not sure about the naming *DataPane*\n    DataPane: {\n      content: 'data-testid Panel editor data pane content',\n    },\n    applyButton: 'data-testid Apply changes and go back to dashboard',\n    toggleVizPicker: 'data-testid toggle-viz-picker',\n    toggleVizOptions: 'data-testid toggle-viz-options',\n    toggleTableView: 'data-testid toggle-table-view',\n\n    // [Geomap] Map controls\n    showZoomField: 'Map controls Show zoom control field property editor',\n    showAttributionField: 'Map controls Show attribution field property editor',\n    showScaleField: 'Map controls Show scale field property editor',\n    showMeasureField: 'Map controls Show measure tools field property editor',\n    showDebugField: 'Map controls Show debug field property editor',\n\n    measureButton: 'show measure tools',\n  },\n  PanelInspector: {\n    Data: {\n      content: 'Panel inspector Data content',\n    },\n    Stats: {\n      content: 'Panel inspector Stats content',\n    },\n    Json: {\n      content: 'data-testid Panel inspector Json content',\n    },\n    Query: {\n      content: 'Panel inspector Query content',\n      refreshButton: 'Panel inspector Query refresh button',\n      jsonObjectKeys: () => '.json-formatter-key',\n    },\n  },\n  Tab: {\n    title: (title: string) => `Tab ${title}`,\n    active: () => '[class*=\"-activeTabStyle\"]',\n  },\n  RefreshPicker: {\n    /**\n     * @deprecated use runButtonV2 from Grafana 8.3 instead\n     */\n    runButton: 'RefreshPicker run button',\n    /**\n     * @deprecated use intervalButtonV2 from Grafana 8.3 instead\n     */\n    intervalButton: 'RefreshPicker interval button',\n    runButtonV2: 'data-testid RefreshPicker run button',\n    intervalButtonV2: 'data-testid RefreshPicker interval button',\n  },\n  QueryTab: {\n    content: 'Query editor tab content',\n    queryInspectorButton: 'Query inspector button',\n    queryHistoryButton: 'data-testid query-history-button',\n    addQuery: 'data-testid query-tab-add-query',\n    queryGroupTopSection: 'data-testid query group top section',\n    addExpression: 'data-testid query-tab-add-expression',\n  },\n  QueryHistory: {\n    queryText: 'Query text',\n  },\n  QueryEditorRows: {\n    rows: 'Query editor row',\n  },\n  QueryEditorRow: {\n    actionButton: (title: string) => `data-testid ${title}`,\n    title: (refId: string) => `Query editor row title ${refId}`,\n    container: (refId: string) => `Query editor row ${refId}`,\n  },\n  AlertTab: {\n    content: 'data-testid Alert editor tab content',\n  },\n  AlertRules: {\n    groupToggle: 'data-testid group-collapse-toggle',\n    toggle: 'data-testid collapse-toggle',\n    expandedContent: 'data-testid expanded-content',\n    previewButton: 'data-testid alert-rule preview-button',\n    ruleNameField: 'data-testid alert-rule name-field',\n    newFolderButton: 'data-testid alert-rule new-folder-button',\n    newFolderNameField: 'data-testid alert-rule name-folder-name-field',\n    newFolderNameCreateButton: 'data-testid alert-rule name-folder-name-create-button',\n    newEvaluationGroupButton: 'data-testid alert-rule new-evaluation-group-button',\n    newEvaluationGroupName: 'data-testid alert-rule new-evaluation-group-name',\n    newEvaluationGroupInterval: 'data-testid alert-rule new-evaluation-group-interval',\n    newEvaluationGroupCreate: 'data-testid alert-rule new-evaluation-group-create-button',\n  },\n  Alert: {\n    /**\n     * @deprecated use alertV2 from Grafana 8.3 instead\n     */\n    alert: (severity: string) => `Alert ${severity}`,\n    alertV2: (severity: string) => `data-testid Alert ${severity}`,\n  },\n  TransformTab: {\n    content: 'data-testid Transform editor tab content',\n    newTransform: (name: string) => `data-testid New transform ${name}`,\n    transformationEditor: (name: string) => `data-testid Transformation editor ${name}`,\n    transformationEditorDebugger: (name: string) => `data-testid Transformation editor debugger ${name}`,\n  },\n  Transforms: {\n    card: (name: string) => `data-testid New transform ${name}`,\n    disableTransformationButton: 'data-testid Disable transformation button',\n    Reduce: {\n      modeLabel: 'data-testid Transform mode label',\n      calculationsLabel: 'data-testid Transform calculations label',\n    },\n    SpatialOperations: {\n      actionLabel: 'root Action field property editor',\n      locationLabel: 'root Location Mode field property editor',\n      location: {\n        autoOption: 'Auto location option',\n        coords: {\n          option: 'Coords location option',\n          latitudeFieldLabel: 'root Latitude field field property editor',\n          longitudeFieldLabel: 'root Longitude field field property editor',\n        },\n        geohash: {\n          option: 'Geohash location option',\n          geohashFieldLabel: 'root Geohash field field property editor',\n        },\n        lookup: {\n          option: 'Lookup location option',\n          lookupFieldLabel: 'root Lookup field field property editor',\n          gazetteerFieldLabel: 'root Gazetteer field property editor',\n        },\n      },\n    },\n    searchInput: 'data-testid search transformations',\n    noTransformationsMessage: 'data-testid no transformations message',\n    addTransformationButton: 'data-testid add transformation button',\n    removeAllTransformationsButton: 'data-testid remove all transformations button',\n  },\n  NavBar: {\n    Configuration: {\n      button: 'Configuration',\n    },\n    Toggle: {\n      button: 'data-testid Toggle menu',\n    },\n    Reporting: {\n      button: 'Reporting',\n    },\n  },\n  NavMenu: {\n    Menu: 'data-testid navigation mega-menu',\n    item: 'data-testid Nav menu item',\n  },\n  NavToolbar: {\n    container: 'data-testid Nav toolbar',\n    shareDashboard: 'data-testid Share dashboard',\n    markAsFavorite: 'data-testid Mark as favorite',\n    editDashboard: {\n      editButton: 'data-testid Edit dashboard button',\n      saveButton: 'data-testid Save dashboard button',\n      exitButton: 'data-testid Exit edit mode button',\n      settingsButton: 'data-testid Dashboard settings',\n      addRowButton: 'data-testid Add row button',\n      addLibraryPanelButton: 'data-testid Add a panel from the panel library button',\n      addVisualizationButton: 'data-testid Add new visualization menu item',\n      pastePanelButton: 'data-testid Paste panel button',\n      discardChangesButton: 'data-testid Discard changes button',\n      discardLibraryPanelButton: 'data-testid Discard library panel button',\n      unlinkLibraryPanelButton: 'data-testid Unlink library panel button',\n      saveLibraryPanelButton: 'data-testid Save library panel button',\n      backToDashboardButton: 'data-testid Back to dashboard button',\n    },\n  },\n\n  PageToolbar: {\n    container: () => '.page-toolbar',\n    item: (tooltip: string) => `${tooltip}`,\n    itemButton: (title: string) => `data-testid ${title}`,\n  },\n  QueryEditorToolbarItem: {\n    button: (title: string) => `QueryEditor toolbar item button ${title}`,\n  },\n  BackButton: {\n    backArrow: 'data-testid Go Back',\n  },\n  OptionsGroup: {\n    group: (title?: string) => (title ? `data-testid Options group ${title}` : 'data-testid Options group'),\n    toggle: (title?: string) =>\n      title ? `data-testid Options group ${title} toggle` : 'data-testid Options group toggle',\n  },\n  PluginVisualization: {\n    item: (title: string) => `Plugin visualization item ${title}`,\n    current: () => '[class*=\"-currentVisualizationItem\"]',\n  },\n  Select: {\n    option: 'data-testid Select option',\n    input: () => 'input[id*=\"time-options-input\"]',\n    singleValue: () => 'div[class*=\"-singleValue\"]',\n  },\n  FieldConfigEditor: {\n    content: 'Field config editor content',\n  },\n  OverridesConfigEditor: {\n    content: 'Field overrides editor content',\n  },\n  FolderPicker: {\n    /**\n     * @deprecated use containerV2 from Grafana 8.3 instead\n     */\n    container: 'Folder picker select container',\n    containerV2: 'data-testid Folder picker select container',\n    input: 'data-testid folder-picker-input',\n  },\n  ReadonlyFolderPicker: {\n    container: 'data-testid Readonly folder picker select container',\n  },\n  DataSourcePicker: {\n    container: 'data-testid Data source picker select container',\n    /**\n     * @deprecated use inputV2 instead\n     */\n    input: () => 'input[id=\"data-source-picker\"]',\n    inputV2: 'data-testid Select a data source',\n    dataSourceList: 'data-testid Data source list dropdown',\n    advancedModal: {\n      dataSourceList: 'data-testid Data source list',\n      builtInDataSourceList: 'data-testid Built in data source list',\n    },\n  },\n  TimeZonePicker: {\n    /**\n     * @deprecated use TimeZonePicker.containerV2 from Grafana 8.3 instead\n     */\n    container: 'Time zone picker select container',\n    containerV2: 'data-testid Time zone picker select container',\n    changeTimeSettingsButton: 'data-testid Time zone picker Change time settings button',\n  },\n  WeekStartPicker: {\n    /**\n     * @deprecated use WeekStartPicker.containerV2 from Grafana 8.3 instead\n     */\n    container: 'Choose starting day of the week',\n    containerV2: 'data-testid Choose starting day of the week',\n    placeholder: 'Choose starting day of the week',\n  },\n  TraceViewer: {\n    spanBar: 'data-testid SpanBar--wrapper',\n  },\n  QueryField: { container: 'data-testid Query field' },\n  QueryBuilder: {\n    queryPatterns: 'data-testid Query patterns',\n    labelSelect: 'data-testid Select label',\n    inputSelect: 'data-testid Select label-input',\n    valueSelect: 'data-testid Select value',\n    matchOperatorSelect: 'data-testid Select match operator',\n  },\n  ValuePicker: {\n    button: (name: string) => `data-testid Value picker button ${name}`,\n    select: (name: string) => `data-testid Value picker select ${name}`,\n  },\n  Search: {\n    /**\n     * @deprecated use sectionV2 from Grafana 8.3 instead\n     */\n    section: 'Search section',\n    sectionV2: 'data-testid Search section',\n    /**\n     * @deprecated use itemsV2 from Grafana 8.3 instead\n     */\n    items: 'Search items',\n    itemsV2: 'data-testid Search items',\n    cards: 'data-testid Search cards',\n    collapseFolder: (sectionId: string) => `data-testid Collapse folder ${sectionId}`,\n    expandFolder: (sectionId: string) => `data-testid Expand folder ${sectionId}`,\n    dashboardItem: (item: string) => `${Components.Search.dashboardItems} ${item}`,\n    dashboardCard: (item: string) => `data-testid Search card ${item}`,\n    folderHeader: (folderName: string) => `data-testid Folder header ${folderName}`,\n    folderContent: (folderName: string) => `data-testid Folder content ${folderName}`,\n    dashboardItems: 'data-testid Dashboard search item',\n  },\n  DashboardLinks: {\n    container: 'data-testid Dashboard link container',\n    dropDown: 'data-testid Dashboard link dropdown',\n    link: 'data-testid Dashboard link',\n  },\n  LoadingIndicator: {\n    icon: 'data-testid Loading indicator',\n  },\n  CallToActionCard: {\n    /**\n     * @deprecated use buttonV2 from Grafana 8.3 instead\n     */\n    button: (name: string) => `Call to action button ${name}`,\n    buttonV2: (name: string) => `data-testid Call to action button ${name}`,\n  },\n  DataLinksContextMenu: {\n    singleLink: 'data-testid Data link',\n  },\n  CodeEditor: {\n    container: 'data-testid Code editor container',\n  },\n  ReactMonacoEditor: {\n    editorLazy: 'data-testid ReactMonacoEditor editorLazy',\n  },\n  DashboardImportPage: {\n    textarea: 'data-testid-import-dashboard-textarea',\n    submit: 'data-testid-load-dashboard',\n  },\n  ImportDashboardForm: {\n    name: 'data-testid-import-dashboard-title',\n    submit: 'data-testid-import-dashboard-submit',\n  },\n  PanelAlertTabContent: {\n    content: 'data-testid Unified alert editor tab content',\n  },\n  VisualizationPreview: {\n    card: (name: string) => `data-testid suggestion-${name}`,\n  },\n  ColorSwatch: {\n    name: `data-testid-colorswatch`,\n  },\n  DashboardRow: {\n    title: (title: string) => `data-testid dashboard-row-title-${title}`,\n  },\n  UserProfile: {\n    profileSaveButton: 'data-testid-user-profile-save',\n    preferencesSaveButton: 'data-testid-shared-prefs-save',\n    orgsTable: 'data-testid-user-orgs-table',\n    sessionsTable: 'data-testid-user-sessions-table',\n    extensionPointTabs: 'data-testid-extension-point-tabs',\n    extensionPointTab: (tabId: string) => `data-testid-extension-point-tab-${tabId}`,\n  },\n  FileUpload: {\n    inputField: 'data-testid-file-upload-input-field',\n    fileNameSpan: 'data-testid-file-upload-file-name',\n  },\n  DebugOverlay: {\n    wrapper: 'debug-overlay',\n  },\n  OrgRolePicker: {\n    input: 'Role',\n  },\n  AnalyticsToolbarButton: {\n    button: 'Dashboard insights',\n  },\n  Variables: {\n    variableOption: 'data-testid variable-option',\n  },\n  Annotations: {\n    annotationsTypeInput: 'data-testid annotations-type-input',\n    annotationsChoosePanelInput: 'data-testid choose-panels-input',\n    editor: {\n      testButton: 'data-testid annotations-test-button',\n      resultContainer: 'data-testid annotations-query-result-container',\n    },\n  },\n  Tooltip: {\n    container: 'data-testid tooltip',\n  },\n  ReturnToPrevious: {\n    buttonGroup: 'data-testid dismissable button group',\n    backButton: 'data-testid back',\n    dismissButton: 'data-testid dismiss',\n  },\n  SQLQueryEditor: {\n    selectColumn: 'data-testid select-column',\n    selectAggregation: 'data-testid select-aggregation',\n    selectAlias: 'data-testid select-alias',\n    filterConjunction: 'data-testid filter-conjunction',\n    filterField: 'data-testid filter-field',\n    filterOperator: 'data-testid filter-operator',\n    headerTableSelector: 'data-testid header-table-selector',\n    headerFilterSwitch: 'data-testid header-filter-switch',\n    headerGroupSwitch: 'data-testid header-group-switch',\n    headerOrderSwitch: 'data-testid header-order-switch',\n    headerPreviewSwitch: 'data-testid header-preview-switch',\n  },\n};\n","import { Components } from './components';\n\n/**\n * Selectors grouped/defined in Pages\n *\n * @alpha\n */\nexport const Pages = {\n  Login: {\n    url: '/login',\n    username: 'data-testid Username input field',\n    password: 'data-testid Password input field',\n    submit: 'data-testid Login button',\n    skip: 'data-testid Skip change password button',\n  },\n  Home: {\n    url: '/',\n  },\n  DataSource: {\n    name: 'data-testid Data source settings page name input field',\n    delete: 'Data source settings page Delete button',\n    readOnly: 'data-testid Data source settings page read only message',\n    saveAndTest: 'data-testid Data source settings page Save and Test button',\n    alert: 'data-testid Data source settings page Alert',\n  },\n  DataSources: {\n    url: '/datasources',\n    dataSources: (dataSourceName: string) => `Data source list item ${dataSourceName}`,\n  },\n  EditDataSource: {\n    url: (dataSourceUid: string) => `/datasources/edit/${dataSourceUid}`,\n    settings: 'Datasource settings page basic settings',\n  },\n  AddDataSource: {\n    url: '/datasources/new',\n    /** @deprecated Use dataSourcePluginsV2 */\n    dataSourcePlugins: (pluginName: string) => `Data source plugin item ${pluginName}`,\n    dataSourcePluginsV2: (pluginName: string) => `Add new data source ${pluginName}`,\n  },\n  ConfirmModal: {\n    delete: 'data-testid Confirm Modal Danger Button',\n  },\n  AddDashboard: {\n    url: '/dashboard/new',\n    itemButton: (title: string) => `data-testid ${title}`,\n    addNewPanel: 'data-testid Add new panel',\n    addNewRow: 'data-testid Add new row',\n    addNewPanelLibrary: 'data-testid Add new panel from panel library',\n  },\n  Dashboard: {\n    url: (uid: string) => `/d/${uid}`,\n    DashNav: {\n      /**\n       * @deprecated use navV2 from Grafana 8.3 instead\n       */\n      nav: 'Dashboard navigation',\n      navV2: 'data-testid Dashboard navigation',\n      publicDashboardTag: 'data-testid public dashboard tag',\n      shareButton: 'data-testid share-button',\n      scrollContainer: 'data-testid Dashboard canvas scroll container',\n      newShareButton: {\n        container: 'data-testid new share button',\n        shareLink: 'data-testid new share link-button',\n        arrowMenu: 'data-testid new share button arrow menu',\n        menu: {\n          container: 'data-testid new share button menu',\n          shareInternally: 'data-testid new share button share internally',\n        },\n      },\n      playlistControls: {\n        prev: 'data-testid playlist previous dashboard button',\n        stop: 'data-testid playlist stop dashboard button',\n        next: 'data-testid playlist next dashboard button',\n      },\n    },\n    Controls: 'data-testid dashboard controls',\n    SubMenu: {\n      submenu: 'Dashboard submenu',\n      submenuItem: 'data-testid template variable',\n      submenuItemLabels: (item: string) => `data-testid Dashboard template variables submenu Label ${item}`,\n      submenuItemValueDropDownValueLinkTexts: (item: string) =>\n        `data-testid Dashboard template variables Variable Value DropDown value link text ${item}`,\n      submenuItemValueDropDownDropDown: 'Variable options',\n      submenuItemValueDropDownOptionTexts: (item: string) =>\n        `data-testid Dashboard template variables Variable Value DropDown option text ${item}`,\n      Annotations: {\n        annotationsWrapper: 'data-testid annotation-wrapper',\n        annotationLabel: (label: string) => `data-testid Dashboard annotations submenu Label ${label}`,\n        annotationToggle: (label: string) => `data-testid Dashboard annotations submenu Toggle ${label}`,\n      },\n    },\n    Settings: {\n      Actions: {\n        close: 'data-testid dashboard-settings-close',\n      },\n      General: {\n        deleteDashBoard: 'data-testid Dashboard settings page delete dashboard button',\n        sectionItems: (item: string) => `Dashboard settings section item ${item}`,\n        saveDashBoard: 'Dashboard settings aside actions Save button',\n        saveAsDashBoard: 'Dashboard settings aside actions Save As button',\n        /**\n         * @deprecated use components.TimeZonePicker.containerV2 from Grafana 8.3 instead\n         */\n        timezone: 'Time zone picker select container',\n        title: 'Tab General',\n      },\n      Annotations: {\n        List: {\n          /**\n           * @deprecated use addAnnotationCTAV2 from Grafana 8.3 instead\n           */\n          addAnnotationCTA: Components.CallToActionCard.button('Add annotation query'),\n          addAnnotationCTAV2: Components.CallToActionCard.buttonV2('Add annotation query'),\n          annotations: 'data-testid list-annotations',\n        },\n        Settings: {\n          name: 'data-testid Annotations settings name input',\n        },\n        NewAnnotation: {\n          panelFilterSelect: 'data-testid annotations-panel-filter',\n          showInLabel: 'data-testid show-in-label',\n          previewInDashboard: 'data-testid annotations-preview',\n          delete: 'data-testid annotations-delete',\n          apply: 'data-testid annotations-apply',\n          enable: 'data-testid annotation-enable',\n          hide: 'data-testid annotation-hide',\n        },\n      },\n      Variables: {\n        List: {\n          /**\n           * @deprecated use addVariableCTAV2 from Grafana 8.3 instead\n           */\n          addVariableCTA: Components.CallToActionCard.button('Add variable'),\n          addVariableCTAV2: Components.CallToActionCard.buttonV2('Add variable'),\n          newButton: 'Variable editor New variable button',\n          table: 'Variable editor Table',\n          tableRowNameFields: (variableName: string) => `Variable editor Table Name field ${variableName}`,\n          tableRowDefinitionFields: (variableName: string) => `Variable editor Table Definition field ${variableName}`,\n          tableRowArrowUpButtons: (variableName: string) => `Variable editor Table ArrowUp button ${variableName}`,\n          tableRowArrowDownButtons: (variableName: string) => `Variable editor Table ArrowDown button ${variableName}`,\n          tableRowDuplicateButtons: (variableName: string) => `Variable editor Table Duplicate button ${variableName}`,\n          tableRowRemoveButtons: (variableName: string) => `Variable editor Table Remove button ${variableName}`,\n        },\n        Edit: {\n          General: {\n            headerLink: 'Variable editor Header link',\n            modeLabelNew: 'Variable editor Header mode New',\n            /**\n             * @deprecated\n             */\n            modeLabelEdit: 'Variable editor Header mode Edit',\n            generalNameInput: 'Variable editor Form Name field',\n            generalNameInputV2: 'data-testid Variable editor Form Name field',\n            generalTypeSelect: 'Variable editor Form Type select',\n            generalTypeSelectV2: 'data-testid Variable editor Form Type select',\n            generalLabelInput: 'Variable editor Form Label field',\n            generalLabelInputV2: 'data-testid Variable editor Form Label field',\n            generalHideSelect: 'Variable editor Form Hide select',\n            generalHideSelectV2: 'data-testid Variable editor Form Hide select',\n            selectionOptionsMultiSwitch: 'data-testid Variable editor Form Multi switch',\n            selectionOptionsIncludeAllSwitch: 'data-testid Variable editor Form IncludeAll switch',\n            selectionOptionsCustomAllInput: 'data-testid Variable editor Form IncludeAll field',\n            previewOfValuesOption: 'data-testid Variable editor Preview of Values option',\n            submitButton: 'data-testid Variable editor Run Query button',\n            applyButton: 'data-testid Variable editor Apply button',\n          },\n          QueryVariable: {\n            queryOptionsDataSourceSelect: Components.DataSourcePicker.inputV2,\n            queryOptionsRefreshSelect: 'Variable editor Form Query Refresh select',\n            queryOptionsRefreshSelectV2: 'data-testid Variable editor Form Query Refresh select',\n            queryOptionsRegExInput: 'Variable editor Form Query RegEx field',\n            queryOptionsRegExInputV2: 'data-testid Variable editor Form Query RegEx field',\n            queryOptionsSortSelect: 'Variable editor Form Query Sort select',\n            queryOptionsSortSelectV2: 'data-testid Variable editor Form Query Sort select',\n            queryOptionsQueryInput: 'data-testid Variable editor Form Default Variable Query Editor textarea',\n            valueGroupsTagsEnabledSwitch: 'Variable editor Form Query UseTags switch',\n            valueGroupsTagsTagsQueryInput: 'Variable editor Form Query TagsQuery field',\n            valueGroupsTagsTagsValuesQueryInput: 'Variable editor Form Query TagsValuesQuery field',\n          },\n          ConstantVariable: {\n            constantOptionsQueryInput: 'Variable editor Form Constant Query field',\n            constantOptionsQueryInputV2: 'data-testid Variable editor Form Constant Query field',\n          },\n          DatasourceVariable: {\n            datasourceSelect: 'data-testid datasource variable datasource type',\n          },\n          TextBoxVariable: {\n            textBoxOptionsQueryInput: 'Variable editor Form TextBox Query field',\n            textBoxOptionsQueryInputV2: 'data-testid Variable editor Form TextBox Query field',\n          },\n          CustomVariable: {\n            customValueInput: 'data-testid custom-variable-input',\n          },\n          IntervalVariable: {\n            intervalsValueInput: 'data-testid interval variable intervals input',\n            autoEnabledCheckbox: 'data-testid interval variable auto value checkbox',\n            stepCountIntervalSelect: 'data-testid interval variable step count input',\n            minIntervalInput: 'data-testid interval variable mininum interval input',\n          },\n          GroupByVariable: {\n            dataSourceSelect: Components.DataSourcePicker.inputV2,\n            infoText: 'data-testid group by variable info text',\n            modeToggle: 'data-testid group by variable mode toggle',\n          },\n          AdHocFiltersVariable: {\n            datasourceSelect: Components.DataSourcePicker.inputV2,\n            infoText: 'data-testid ad-hoc filters variable info text',\n            modeToggle: 'data-testid ad-hoc filters variable mode toggle',\n          },\n        },\n      },\n    },\n    Annotations: {\n      marker: 'data-testid annotation-marker',\n    },\n    Rows: {\n      Repeated: {\n        ConfigSection: {\n          warningMessage: 'data-testid Repeated rows warning message',\n        },\n      },\n    },\n  },\n  Dashboards: {\n    url: '/dashboards',\n    /**\n     * @deprecated use components.Search.dashboardItem from Grafana 8.3 instead\n     */\n    dashboards: (title: string) => `Dashboard search item ${title}`,\n  },\n  SaveDashboardAsModal: {\n    newName: 'Save dashboard title field',\n    save: 'Save dashboard button',\n  },\n  SaveDashboardModal: {\n    save: 'Dashboard settings Save Dashboard Modal Save button',\n    saveVariables: 'Dashboard settings Save Dashboard Modal Save variables checkbox',\n    saveTimerange: 'Dashboard settings Save Dashboard Modal Save timerange checkbox',\n    saveRefresh: 'Dashboard settings Save Dashboard Modal Save refresh checkbox',\n  },\n  SharePanelModal: {\n    linkToRenderedImage: 'Link to rendered image',\n  },\n  ShareDashboardModal: {\n    PublicDashboard: {\n      Tab: 'Tab Public dashboard',\n      WillBePublicCheckbox: 'data-testid public dashboard will be public checkbox',\n      LimitedDSCheckbox: 'data-testid public dashboard limited datasources checkbox',\n      CostIncreaseCheckbox: 'data-testid public dashboard cost may increase checkbox',\n      PauseSwitch: 'data-testid public dashboard pause switch',\n      EnableAnnotationsSwitch: 'data-testid public dashboard on off switch for annotations',\n      CreateButton: 'data-testid public dashboard create button',\n      DeleteButton: 'data-testid public dashboard delete button',\n      CopyUrlInput: 'data-testid public dashboard copy url input',\n      CopyUrlButton: 'data-testid public dashboard copy url button',\n      SettingsDropdown: 'data-testid public dashboard settings dropdown',\n      TemplateVariablesWarningAlert: 'data-testid public dashboard disabled template variables alert',\n      UnsupportedDataSourcesWarningAlert: 'data-testid public dashboard unsupported data sources alert',\n      NoUpsertPermissionsWarningAlert: 'data-testid public dashboard no upsert permissions alert',\n      EnableTimeRangeSwitch: 'data-testid public dashboard on off switch for time range',\n      EmailSharingConfiguration: {\n        Container: 'data-testid email sharing config container',\n        ShareType: 'data-testid public dashboard share type',\n        EmailSharingInput: 'data-testid public dashboard email sharing input',\n        EmailSharingInviteButton: 'data-testid public dashboard email sharing invite button',\n        EmailSharingList: 'data-testid public dashboard email sharing list',\n        DeleteEmail: 'data-testid public dashboard delete email button',\n        ReshareLink: 'data-testid public dashboard reshare link button',\n      },\n    },\n    PublicDashboardScene: {\n      Tab: 'Tab Public Dashboard',\n    },\n    SnapshotScene: {\n      url: (key: string) => `/dashboard/snapshot/${key}`,\n      Tab: 'Tab Snapshot',\n      PublishSnapshot: 'data-testid publish snapshot button',\n      CopyUrlButton: 'data-testid snapshot copy url button',\n      CopyUrlInput: 'data-testid snapshot copy url input',\n    },\n  },\n  PublicDashboard: {\n    page: 'public-dashboard-page',\n    NotAvailable: {\n      container: 'public-dashboard-not-available',\n      title: 'public-dashboard-title',\n      pausedDescription: 'public-dashboard-paused-description',\n    },\n    footer: 'public-dashboard-footer',\n  },\n  PublicDashboardScene: {\n    loadingPage: 'public-dashboard-scene-loading-page',\n    page: 'public-dashboard-scene-page',\n    controls: 'public-dashboard-controls',\n  },\n  RequestViewAccess: {\n    form: 'request-view-access-form',\n    recipientInput: 'request-view-access-recipient-input',\n    submitButton: 'request-view-access-submit-button',\n  },\n  PublicDashboardConfirmAccess: {\n    submitButton: 'data-testid confirm-access-submit-button',\n  },\n  Explore: {\n    url: '/explore',\n    General: {\n      container: 'data-testid Explore',\n      graph: 'Explore Graph',\n      table: 'Explore Table',\n      scrollView: 'data-testid explorer scroll view',\n    },\n    QueryHistory: {\n      container: 'data-testid QueryHistory',\n    },\n  },\n  SoloPanel: {\n    url: (page: string) => `/d-solo/${page}`,\n  },\n  PluginsList: {\n    page: 'Plugins list page',\n    list: 'Plugins list',\n    listItem: 'Plugins list item',\n    signatureErrorNotice: 'data-testid Unsigned plugins notice',\n  },\n  PluginPage: {\n    page: 'Plugin page',\n    signatureInfo: 'data-testid Plugin signature info',\n    disabledInfo: 'data-testid Plugin disabled info',\n  },\n  PlaylistForm: {\n    name: 'Playlist name',\n    interval: 'Playlist interval',\n    itemDelete: 'data-testid playlist-form-delete-item',\n  },\n  BrowseDashboards: {\n    table: {\n      body: 'data-testid browse-dashboards-table',\n      row: (name: string) => `data-testid browse dashboards row ${name}`,\n      checkbox: (uid: string) => `data-testid ${uid} checkbox`,\n    },\n    NewFolderForm: {\n      form: 'data-testid new folder form',\n      nameInput: 'data-testid new-folder-name-input',\n      createButton: 'data-testid new-folder-create-button',\n    },\n  },\n  Search: {\n    url: '/?search=openn',\n    FolderView: {\n      url: '/?search=open&layout=folders',\n    },\n  },\n  PublicDashboards: {\n    ListItem: {\n      linkButton: 'public-dashboard-link-button',\n      configButton: 'public-dashboard-configuration-button',\n      trashcanButton: 'public-dashboard-remove-button',\n      pauseSwitch: 'data-testid public dashboard pause switch',\n    },\n  },\n  UserListPage: {\n    tabs: {\n      allUsers: 'data-testid all-users-tab',\n      orgUsers: 'data-testid org-users-tab',\n      anonUserDevices: 'data-testid anon-user-devices-tab',\n      publicDashboardsUsers: 'data-testid public-dashboards-users-tab',\n      users: 'data-testid users-tab',\n    },\n    org: {\n      url: '/org/users',\n    },\n    admin: {\n      url: '/admin/users',\n    },\n    publicDashboards: {\n      container: 'data-testid public-dashboards-users-list',\n    },\n    UserListAdminPage: {\n      container: 'data-testid user-list-admin-page',\n    },\n    UsersListPage: {\n      container: 'data-testid users-list-page',\n    },\n    UserAnonListPage: {\n      container: 'data-testid user-anon-list-page',\n    },\n    UsersListPublicDashboardsPage: {\n      container: 'data-testid users-list-public-dashboards-page',\n      DashboardsListModal: {\n        listItem: (uid: string) => `data-testid dashboards-list-item-${uid}`,\n      },\n    },\n  },\n  ProfilePage: {\n    url: '/profile',\n  },\n};\n","import { E2ESelectors } from '../types';\n\nimport { Components } from './components';\nimport { Pages } from './pages';\n\n/**\n * Exposes selectors in package for easy use in e2e tests and in production code\n *\n * @alpha\n */\nexport const selectors: { pages: E2ESelectors<typeof Pages>; components: E2ESelectors<typeof Components> } = {\n  pages: Pages,\n  components: Components,\n};\n\n/**\n * Exposes Pages, Component selectors and E2ESelectors type in package for easy use in e2e tests and in production code\n *\n * @alpha\n */\nexport { Pages, Components, type E2ESelectors };\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/core/utils/query.ts\nimport { DataQuery } from '@grafana/data';\n\nexport const getNextRefIdChar = (queries: DataQuery[]): string => {\n  for (let num = 0; ; num++) {\n    const refId = getRefId(num);\n    if (!queries.some((query) => query.refId === refId)) {\n      return refId;\n    }\n  }\n};\n\nfunction getRefId(num: number): string {\n  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n  if (num < letters.length) {\n    return letters[num];\n  } else {\n    return getRefId(Math.floor(num / letters.length) - 1) + letters[num % letters.length];\n  }\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/promql.ts\nimport { Grammar } from 'prismjs';\n\nimport { CompletionItem } from '@grafana/ui';\n\n// When changing RATE_RANGES, check if Loki/LogQL ranges should be changed too\n// @see public/app/plugins/datasource/loki/LanguageProvider.ts\nexport const RATE_RANGES: CompletionItem[] = [\n  { label: '$__interval', sortValue: '$__interval' },\n  { label: '$__rate_interval', sortValue: '$__rate_interval' },\n  { label: '$__range', sortValue: '$__range' },\n  { label: '1m', sortValue: '00:01:00' },\n  { label: '5m', sortValue: '00:05:00' },\n  { label: '10m', sortValue: '00:10:00' },\n  { label: '30m', sortValue: '00:30:00' },\n  { label: '1h', sortValue: '01:00:00' },\n  { label: '1d', sortValue: '24:00:00' },\n];\n\nexport const OPERATORS = ['by', 'group_left', 'group_right', 'ignoring', 'on', 'offset', 'without'];\nexport const LOGICAL_OPERATORS = ['or', 'and', 'unless'];\n\nconst TRIGONOMETRIC_FUNCTIONS: CompletionItem[] = [\n  {\n    label: 'acos',\n    insertText: 'acos',\n    detail: 'acos(v instant-vector)',\n    documentation: 'calculates the arccosine of all elements in v',\n  },\n  {\n    label: 'acosh',\n    insertText: 'acosh',\n    detail: 'acosh(v instant-vector)',\n    documentation: 'calculates the inverse hyperbolic cosine of all elements in v',\n  },\n  {\n    label: 'asin',\n    insertText: 'asin',\n    detail: 'asin(v instant-vector)',\n    documentation: 'calculates the arcsine of all elements in v',\n  },\n  {\n    label: 'asinh',\n    insertText: 'asinh',\n    detail: 'asinh(v instant-vector)',\n    documentation: 'calculates the inverse hyperbolic sine of all elements in v',\n  },\n  {\n    label: 'atan',\n    insertText: 'atan',\n    detail: 'atan(v instant-vector)',\n    documentation: 'calculates the arctangent of all elements in v',\n  },\n  {\n    label: 'atanh',\n    insertText: 'atanh',\n    detail: 'atanh(v instant-vector)',\n    documentation: 'calculates the inverse hyperbolic tangent of all elements in v',\n  },\n  {\n    label: 'cos',\n    insertText: 'cos',\n    detail: 'cos(v instant-vector)',\n    documentation: 'calculates the cosine of all elements in v',\n  },\n  {\n    label: 'cosh',\n    insertText: 'cosh',\n    detail: 'cosh(v instant-vector)',\n    documentation: 'calculates the hyperbolic cosine of all elements in v',\n  },\n  {\n    label: 'sin',\n    insertText: 'sin',\n    detail: 'sin(v instant-vector)',\n    documentation: 'calculates the sine of all elements in v',\n  },\n  {\n    label: 'sinh',\n    insertText: 'sinh',\n    detail: 'sinh(v instant-vector)',\n    documentation: 'calculates the hyperbolic sine of all elements in v',\n  },\n  {\n    label: 'tan',\n    insertText: 'tan',\n    detail: 'tan(v instant-vector)',\n    documentation: 'calculates the tangent of all elements in v',\n  },\n  {\n    label: 'tanh',\n    insertText: 'tanh',\n    detail: 'tanh(v instant-vector)',\n    documentation: 'calculates the hyperbolic tangent of all elements in v',\n  },\n];\n\nconst AGGREGATION_OPERATORS: CompletionItem[] = [\n  {\n    label: 'sum',\n    insertText: 'sum',\n    documentation: 'Calculate sum over dimensions',\n  },\n  {\n    label: 'min',\n    insertText: 'min',\n    documentation: 'Select minimum over dimensions',\n  },\n  {\n    label: 'max',\n    insertText: 'max',\n    documentation: 'Select maximum over dimensions',\n  },\n  {\n    label: 'avg',\n    insertText: 'avg',\n    documentation: 'Calculate the average over dimensions',\n  },\n  {\n    label: 'group',\n    insertText: 'group',\n    documentation: 'All values in the resulting vector are 1',\n  },\n  {\n    label: 'stddev',\n    insertText: 'stddev',\n    documentation: 'Calculate population standard deviation over dimensions',\n  },\n  {\n    label: 'stdvar',\n    insertText: 'stdvar',\n    documentation: 'Calculate population standard variance over dimensions',\n  },\n  {\n    label: 'count',\n    insertText: 'count',\n    documentation: 'Count number of elements in the vector',\n  },\n  {\n    label: 'count_values',\n    insertText: 'count_values',\n    documentation: 'Count number of elements with the same value',\n  },\n  {\n    label: 'bottomk',\n    insertText: 'bottomk',\n    documentation: 'Smallest k elements by sample value',\n  },\n  {\n    label: 'topk',\n    insertText: 'topk',\n    documentation: 'Largest k elements by sample value',\n  },\n  {\n    label: 'quantile',\n    insertText: 'quantile',\n    documentation: 'Calculate φ-quantile (0 ≤ φ ≤ 1) over dimensions',\n  },\n];\n\nexport const FUNCTIONS = [\n  ...AGGREGATION_OPERATORS,\n  ...TRIGONOMETRIC_FUNCTIONS,\n  {\n    insertText: 'abs',\n    label: 'abs',\n    detail: 'abs(v instant-vector)',\n    documentation: 'Returns the input vector with all sample values converted to their absolute value.',\n  },\n  {\n    insertText: 'absent',\n    label: 'absent',\n    detail: 'absent(v instant-vector)',\n    documentation:\n      'Returns an empty vector if the vector passed to it has any elements and a 1-element vector with the value 1 if the vector passed to it has no elements. This is useful for alerting on when no time series exist for a given metric name and label combination.',\n  },\n  {\n    insertText: 'absent_over_time',\n    label: 'absent_over_time',\n    detail: 'absent(v range-vector)',\n    documentation:\n      'Returns an empty vector if the range vector passed to it has any elements and a 1-element vector with the value 1 if the range vector passed to it has no elements.',\n  },\n  {\n    insertText: 'ceil',\n    label: 'ceil',\n    detail: 'ceil(v instant-vector)',\n    documentation: 'Rounds the sample values of all elements in `v` up to the nearest integer.',\n  },\n  {\n    insertText: 'changes',\n    label: 'changes',\n    detail: 'changes(v range-vector)',\n    documentation:\n      'For each input time series, `changes(v range-vector)` returns the number of times its value has changed within the provided time range as an instant vector.',\n  },\n  {\n    insertText: 'clamp',\n    label: 'clamp',\n    detail: 'clamp(v instant-vector, min scalar, max scalar)',\n    documentation:\n      'Clamps the sample values of all elements in `v` to have a lower limit of `min` and an upper limit of `max`.',\n  },\n  {\n    insertText: 'clamp_max',\n    label: 'clamp_max',\n    detail: 'clamp_max(v instant-vector, max scalar)',\n    documentation: 'Clamps the sample values of all elements in `v` to have an upper limit of `max`.',\n  },\n  {\n    insertText: 'clamp_min',\n    label: 'clamp_min',\n    detail: 'clamp_min(v instant-vector, min scalar)',\n    documentation: 'Clamps the sample values of all elements in `v` to have a lower limit of `min`.',\n  },\n  {\n    insertText: 'count_scalar',\n    label: 'count_scalar',\n    detail: 'count_scalar(v instant-vector)',\n    documentation:\n      'Returns the number of elements in a time series vector as a scalar. This is in contrast to the `count()` aggregation operator, which always returns a vector (an empty one if the input vector is empty) and allows grouping by labels via a `by` clause.',\n  },\n  {\n    insertText: 'deg',\n    label: 'deg',\n    detail: 'deg(v instant-vector)',\n    documentation: 'Converts radians to degrees for all elements in v',\n  },\n  {\n    insertText: 'day_of_month',\n    label: 'day_of_month',\n    detail: 'day_of_month(v=vector(time()) instant-vector)',\n    documentation: 'Returns the day of the month for each of the given times in UTC. Returned values are from 1 to 31.',\n  },\n  {\n    insertText: 'day_of_week',\n    label: 'day_of_week',\n    detail: 'day_of_week(v=vector(time()) instant-vector)',\n    documentation:\n      'Returns the day of the week for each of the given times in UTC. Returned values are from 0 to 6, where 0 means Sunday etc.',\n  },\n  {\n    insertText: 'day_of_year',\n    label: 'day_of_year',\n    detail: 'day_of_year(v=vector(time()) instant-vector)',\n    documentation:\n      'Returns the day of the year for each of the given times in UTC. Returned values are from 1 to 365 for non-leap years, and 1 to 366 in leap years.',\n  },\n  {\n    insertText: 'days_in_month',\n    label: 'days_in_month',\n    detail: 'days_in_month(v=vector(time()) instant-vector)',\n    documentation:\n      'Returns number of days in the month for each of the given times in UTC. Returned values are from 28 to 31.',\n  },\n  {\n    insertText: 'delta',\n    label: 'delta',\n    detail: 'delta(v range-vector)',\n    documentation:\n      'Calculates the difference between the first and last value of each time series element in a range vector `v`, returning an instant vector with the given deltas and equivalent labels. The delta is extrapolated to cover the full time range as specified in the range vector selector, so that it is possible to get a non-integer result even if the sample values are all integers.',\n  },\n  {\n    insertText: 'deriv',\n    label: 'deriv',\n    detail: 'deriv(v range-vector)',\n    documentation:\n      'Calculates the per-second derivative of the time series in a range vector `v`, using simple linear regression.',\n  },\n  {\n    insertText: 'drop_common_labels',\n    label: 'drop_common_labels',\n    detail: 'drop_common_labels(instant-vector)',\n    documentation: 'Drops all labels that have the same name and value across all series in the input vector.',\n  },\n  {\n    insertText: 'exp',\n    label: 'exp',\n    detail: 'exp(v instant-vector)',\n    documentation:\n      'Calculates the exponential function for all elements in `v`.\\nSpecial cases are:\\n* `Exp(+Inf) = +Inf` \\n* `Exp(NaN) = NaN`',\n  },\n  {\n    insertText: 'floor',\n    label: 'floor',\n    detail: 'floor(v instant-vector)',\n    documentation: 'Rounds the sample values of all elements in `v` down to the nearest integer.',\n  },\n  {\n    insertText: 'histogram_quantile',\n    label: 'histogram_quantile',\n    detail: 'histogram_quantile(φ float, b instant-vector)',\n    documentation:\n      'Calculates the φ-quantile (0 ≤ φ ≤ 1) from the buckets `b` of a histogram. The samples in `b` are the counts of observations in each bucket. Each sample must have a label `le` where the label value denotes the inclusive upper bound of the bucket. (Samples without such a label are silently ignored.) The histogram metric type automatically provides time series with the `_bucket` suffix and the appropriate labels.',\n  },\n  {\n    insertText: 'holt_winters',\n    label: 'holt_winters',\n    detail: 'holt_winters(v range-vector, sf scalar, tf scalar)',\n    documentation:\n      'Produces a smoothed value for time series based on the range in `v`. The lower the smoothing factor `sf`, the more importance is given to old data. The higher the trend factor `tf`, the more trends in the data is considered. Both `sf` and `tf` must be between 0 and 1.',\n  },\n  {\n    insertText: 'hour',\n    label: 'hour',\n    detail: 'hour(v=vector(time()) instant-vector)',\n    documentation: 'Returns the hour of the day for each of the given times in UTC. Returned values are from 0 to 23.',\n  },\n  {\n    insertText: 'idelta',\n    label: 'idelta',\n    detail: 'idelta(v range-vector)',\n    documentation:\n      'Calculates the difference between the last two samples in the range vector `v`, returning an instant vector with the given deltas and equivalent labels.',\n  },\n  {\n    insertText: 'increase',\n    label: 'increase',\n    detail: 'increase(v range-vector)',\n    documentation:\n      'Calculates the increase in the time series in the range vector. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for. The increase is extrapolated to cover the full time range as specified in the range vector selector, so that it is possible to get a non-integer result even if a counter increases only by integer increments.',\n  },\n  {\n    insertText: 'irate',\n    label: 'irate',\n    detail: 'irate(v range-vector)',\n    documentation:\n      'Calculates the per-second instant rate of increase of the time series in the range vector. This is based on the last two data points. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for.',\n  },\n  {\n    insertText: 'label_join',\n    label: 'label_join',\n    detail:\n      'label_join(v instant-vector, dst_label string, separator string, src_label_1 string, src_label_2 string, ...)',\n    documentation:\n      'For each timeseries in `v`, joins all the values of all the `src_labels` using `separator` and returns the timeseries with the label `dst_label` containing the joined value. There can be any number of `src_labels` in this function.',\n  },\n  {\n    insertText: 'label_replace',\n    label: 'label_replace',\n    detail: 'label_replace(v instant-vector, dst_label string, replacement string, src_label string, regex string)',\n    documentation:\n      \"For each timeseries in `v`, `label_replace(v instant-vector, dst_label string, replacement string, src_label string, regex string)`  matches the regular expression `regex` against the label `src_label`.  If it matches, then the timeseries is returned with the label `dst_label` replaced by the expansion of `replacement`. `$1` is replaced with the first matching subgroup, `$2` with the second etc. If the regular expression doesn't match then the timeseries is returned unchanged.\",\n  },\n  {\n    insertText: 'ln',\n    label: 'ln',\n    detail: 'ln(v instant-vector)',\n    documentation:\n      'Calculates the natural logarithm for all elements in `v`.\\nSpecial cases are:\\n * `ln(+Inf) = +Inf`\\n * `ln(0) = -Inf`\\n * `ln(x < 0) = NaN`\\n * `ln(NaN) = NaN`',\n  },\n  {\n    insertText: 'log2',\n    label: 'log2',\n    detail: 'log2(v instant-vector)',\n    documentation:\n      'Calculates the binary logarithm for all elements in `v`. The special cases are equivalent to those in `ln`.',\n  },\n  {\n    insertText: 'log10',\n    label: 'log10',\n    detail: 'log10(v instant-vector)',\n    documentation:\n      'Calculates the decimal logarithm for all elements in `v`. The special cases are equivalent to those in `ln`.',\n  },\n  {\n    insertText: 'minute',\n    label: 'minute',\n    detail: 'minute(v=vector(time()) instant-vector)',\n    documentation:\n      'Returns the minute of the hour for each of the given times in UTC. Returned values are from 0 to 59.',\n  },\n  {\n    insertText: 'month',\n    label: 'month',\n    detail: 'month(v=vector(time()) instant-vector)',\n    documentation:\n      'Returns the month of the year for each of the given times in UTC. Returned values are from 1 to 12, where 1 means January etc.',\n  },\n  {\n    insertText: 'pi',\n    label: 'pi',\n    detail: 'pi()',\n    documentation: 'Returns pi',\n  },\n  {\n    insertText: 'predict_linear',\n    label: 'predict_linear',\n    detail: 'predict_linear(v range-vector, t scalar)',\n    documentation:\n      'Predicts the value of time series `t` seconds from now, based on the range vector `v`, using simple linear regression.',\n  },\n  {\n    insertText: 'rad',\n    label: 'rad',\n    detail: 'rad(v instant-vector)',\n    documentation: 'Converts degrees to radians for all elements in v',\n  },\n  {\n    insertText: 'rate',\n    label: 'rate',\n    detail: 'rate(v range-vector)',\n    documentation:\n      \"Calculates the per-second average rate of increase of the time series in the range vector. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for. Also, the calculation extrapolates to the ends of the time range, allowing for missed scrapes or imperfect alignment of scrape cycles with the range's time period.\",\n  },\n  {\n    insertText: 'resets',\n    label: 'resets',\n    detail: 'resets(v range-vector)',\n    documentation:\n      'For each input time series, `resets(v range-vector)` returns the number of counter resets within the provided time range as an instant vector. Any decrease in the value between two consecutive samples is interpreted as a counter reset.',\n  },\n  {\n    insertText: 'round',\n    label: 'round',\n    detail: 'round(v instant-vector, to_nearest=1 scalar)',\n    documentation:\n      'Rounds the sample values of all elements in `v` to the nearest integer. Ties are resolved by rounding up. The optional `to_nearest` argument allows specifying the nearest multiple to which the sample values should be rounded. This multiple may also be a fraction.',\n  },\n  {\n    insertText: 'scalar',\n    label: 'scalar',\n    detail: 'scalar(v instant-vector)',\n    documentation:\n      'Given a single-element input vector, `scalar(v instant-vector)` returns the sample value of that single element as a scalar. If the input vector does not have exactly one element, `scalar` will return `NaN`.',\n  },\n  {\n    insertText: 'sgn',\n    label: 'sgn',\n    detail: 'sgn(v instant-vector)',\n    documentation:\n      'Returns a vector with all sample values converted to their sign, defined as this: 1 if v is positive, -1 if v is negative and 0 if v is equal to zero.',\n  },\n  {\n    insertText: 'sort',\n    label: 'sort',\n    detail: 'sort(v instant-vector)',\n    documentation: 'Returns vector elements sorted by their sample values, in ascending order.',\n  },\n  {\n    insertText: 'sort_desc',\n    label: 'sort_desc',\n    detail: 'sort_desc(v instant-vector)',\n    documentation: 'Returns vector elements sorted by their sample values, in descending order.',\n  },\n  {\n    insertText: 'sqrt',\n    label: 'sqrt',\n    detail: 'sqrt(v instant-vector)',\n    documentation: 'Calculates the square root of all elements in `v`.',\n  },\n  {\n    insertText: 'time',\n    label: 'time',\n    detail: 'time()',\n    documentation:\n      'Returns the number of seconds since January 1, 1970 UTC. Note that this does not actually return the current time, but the time at which the expression is to be evaluated.',\n  },\n  {\n    insertText: 'timestamp',\n    label: 'timestamp',\n    detail: 'timestamp(v instant-vector)',\n    documentation:\n      'Returns the timestamp of each of the samples of the given vector as the number of seconds since January 1, 1970 UTC.',\n  },\n  {\n    insertText: 'vector',\n    label: 'vector',\n    detail: 'vector(s scalar)',\n    documentation: 'Returns the scalar `s` as a vector with no labels.',\n  },\n  {\n    insertText: 'year',\n    label: 'year',\n    detail: 'year(v=vector(time()) instant-vector)',\n    documentation: 'Returns the year for each of the given times in UTC.',\n  },\n  {\n    insertText: 'avg_over_time',\n    label: 'avg_over_time',\n    detail: 'avg_over_time(range-vector)',\n    documentation: 'The average value of all points in the specified interval.',\n  },\n  {\n    insertText: 'min_over_time',\n    label: 'min_over_time',\n    detail: 'min_over_time(range-vector)',\n    documentation: 'The minimum value of all points in the specified interval.',\n  },\n  {\n    insertText: 'max_over_time',\n    label: 'max_over_time',\n    detail: 'max_over_time(range-vector)',\n    documentation: 'The maximum value of all points in the specified interval.',\n  },\n  {\n    insertText: 'sum_over_time',\n    label: 'sum_over_time',\n    detail: 'sum_over_time(range-vector)',\n    documentation: 'The sum of all values in the specified interval.',\n  },\n  {\n    insertText: 'count_over_time',\n    label: 'count_over_time',\n    detail: 'count_over_time(range-vector)',\n    documentation: 'The count of all values in the specified interval.',\n  },\n  {\n    insertText: 'quantile_over_time',\n    label: 'quantile_over_time',\n    detail: 'quantile_over_time(scalar, range-vector)',\n    documentation: 'The φ-quantile (0 ≤ φ ≤ 1) of the values in the specified interval.',\n  },\n  {\n    insertText: 'stddev_over_time',\n    label: 'stddev_over_time',\n    detail: 'stddev_over_time(range-vector)',\n    documentation: 'The population standard deviation of the values in the specified interval.',\n  },\n  {\n    insertText: 'stdvar_over_time',\n    label: 'stdvar_over_time',\n    detail: 'stdvar_over_time(range-vector)',\n    documentation: 'The population standard variance of the values in the specified interval.',\n  },\n  {\n    insertText: 'last_over_time',\n    label: 'last_over_time',\n    detail: 'last_over_time(range-vector)',\n    documentation: 'The most recent point value in specified interval.',\n  },\n  {\n    insertText: 'present_over_time',\n    label: 'present_over_time',\n    detail: 'present_over_time(range-vector)',\n    documentation: 'The value 1 for any series in the specified interval.',\n  },\n  {\n    insertText: 'histogram_avg',\n    label: 'histogram_avg',\n    detail: 'histogram_avg(v instant-vector)',\n    documentation:\n      'Returns the arithmetic average of observed values stored in a native histogram. Samples that are not native histograms are ignored and do not show up in the returned vector.',\n  },\n  {\n    insertText: 'histogram_count',\n    label: 'histogram_count',\n    detail: 'histogram_count(v instant-vector)',\n    documentation: 'Returns the count of observations stored in a native histogram.',\n  },\n  {\n    insertText: 'histogram_sum',\n    label: 'histogram_sum',\n    detail: 'histogram_sum(v instant-vector)',\n    documentation: 'Returns the sum of observations stored in a native histogram.',\n  },\n  {\n    insertText: 'histogram_fraction',\n    label: 'histogram_fraction',\n    detail: 'histogram_fraction(lower scalar, upper scalar, v instant-vector)',\n    documentation: 'Returns the estimated fraction of observations between the provided lower and upper values.',\n  },\n  {\n    insertText: 'histogram_stddev',\n    label: 'histogram_stddev',\n    detail: 'histogram_stddev(v instant-vector)',\n    documentation:\n      'Returns the estimated standard deviation of observations in a native histogram, based on the geometric mean of the buckets where the observations lie.',\n  },\n  {\n    insertText: 'histogram_stdvar',\n    label: 'histogram_stdvar',\n    detail: 'histogram_stdvar(v instant-vector)',\n    documentation: 'Returns the estimated standard variance of observations in a native histogram.',\n  },\n];\n\nexport const PROM_KEYWORDS = FUNCTIONS.map((keyword) => keyword.label);\n\nexport const promqlGrammar: Grammar = {\n  comment: {\n    pattern: /#.*/,\n  },\n  'context-aggregation': {\n    pattern: /((by|without)\\s*)\\([^)]*\\)/, // by ()\n    lookbehind: true,\n    inside: {\n      'label-key': {\n        pattern: /[^(),\\s][^,)]*[^),\\s]*/,\n        alias: 'attr-name',\n      },\n      punctuation: /[()]/,\n    },\n  },\n  'context-labels': {\n    pattern: /\\{[^}]*(?=}?)/,\n    greedy: true,\n    inside: {\n      comment: {\n        pattern: /#.*/,\n      },\n      'label-key': {\n        pattern: /[a-z_]\\w*(?=\\s*(=|!=|=~|!~))/,\n        alias: 'attr-name',\n        greedy: true,\n      },\n      'label-value': {\n        pattern: /\"(?:\\\\.|[^\\\\\"])*\"/,\n        greedy: true,\n        alias: 'attr-value',\n      },\n      punctuation: /[{]/,\n    },\n  },\n  function: new RegExp(`\\\\b(?:${FUNCTIONS.map((f) => f.label).join('|')})(?=\\\\s*\\\\()`, 'i'),\n  'context-range': [\n    {\n      pattern: /\\[[^\\]]*(?=])/, // [1m]\n      inside: {\n        'range-duration': {\n          pattern: /\\b\\d+[smhdwy]\\b/i,\n          alias: 'number',\n        },\n      },\n    },\n    {\n      pattern: /(offset\\s+)\\w+/, // offset 1m\n      lookbehind: true,\n      inside: {\n        'range-duration': {\n          pattern: /\\b\\d+[smhdwy]\\b/i,\n          alias: 'number',\n        },\n      },\n    },\n  ],\n  idList: {\n    pattern: /\\d+(\\|\\d+)+/,\n    alias: 'number',\n  },\n  number: /\\b-?\\d+((\\.\\d*)?([eE][+-]?\\d+)?)?\\b/,\n  operator: new RegExp(`/[-+*/=%^~]|&&?|\\\\|?\\\\||!=?|<(?:=>?|<|>)?|>[>=]?|\\\\b(?:${OPERATORS.join('|')})\\\\b`, 'i'),\n  punctuation: /[{};()`,.]/,\n};\n\nexport default promqlGrammar;\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/LabelParamEditor.tsx\nimport React, { useState } from 'react';\n\nimport { DataSourceApi, SelectableValue, toOption } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { getOperationParamId } from '../operationUtils';\nimport { QueryBuilderLabelFilter, QueryBuilderOperationParamEditorProps } from '../shared/types';\nimport { PromVisualQuery } from '../types';\n\nexport function LabelParamEditor({\n  onChange,\n  index,\n  operationId,\n  value,\n  query,\n  datasource,\n}: QueryBuilderOperationParamEditorProps) {\n  const [state, setState] = useState<{\n    options?: SelectableValue[];\n    isLoading?: boolean;\n  }>({});\n\n  return (\n    <Select\n      inputId={getOperationParamId(operationId, index)}\n      autoFocus={value === '' ? true : undefined}\n      openMenuOnFocus\n      onOpenMenu={async () => {\n        setState({ isLoading: true });\n        const options = await loadGroupByLabels(query, datasource);\n        setState({ options, isLoading: undefined });\n      }}\n      isLoading={state.isLoading}\n      allowCustomValue\n      noOptionsMessage=\"No labels found\"\n      loadingMessage=\"Loading labels\"\n      options={state.options}\n      value={toOption(value as string)}\n      onChange={(value) => onChange(index, value.value!)}\n    />\n  );\n}\n\nasync function loadGroupByLabels(query: PromVisualQuery, datasource: DataSourceApi): Promise<SelectableValue[]> {\n  let labels: QueryBuilderLabelFilter[] = query.labels;\n\n  // This function is used by both Prometheus and Loki and this the only difference.\n  if (datasource.type === 'prometheus') {\n    labels = [{ label: '__name__', op: '=', value: query.metric }, ...query.labels];\n  }\n\n  const expr = promQueryModeller.renderLabels(labels);\n  const result = await datasource.languageProvider.fetchLabelsWithMatch(expr);\n\n  return Object.keys(result).map((x) => ({\n    label: x,\n    value: x,\n  }));\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/types.ts\nimport { VisualQueryBinary } from './shared/LokiAndPromQueryModellerBase';\nimport { QueryBuilderLabelFilter, QueryBuilderOperation } from './shared/types';\n\n/**\n * Visual query model\n */\nexport interface PromVisualQuery {\n  metric: string;\n  labels: QueryBuilderLabelFilter[];\n  operations: QueryBuilderOperation[];\n  binaryQueries?: PromVisualQueryBinary[];\n  // metrics explorer additional settings\n  useBackend?: boolean;\n  disableTextWrap?: boolean;\n  includeNullMetadata?: boolean;\n  fullMetaSearch?: boolean;\n}\n\nexport type PromVisualQueryBinary = VisualQueryBinary<PromVisualQuery>;\n\nexport enum PromVisualQueryOperationCategory {\n  Aggregations = 'Aggregations',\n  RangeFunctions = 'Range functions',\n  Functions = 'Functions',\n  BinaryOps = 'Binary operations',\n  Trigonometric = 'Trigonometric',\n  Time = 'Time Functions',\n}\n\nexport enum PromOperationId {\n  Abs = 'abs',\n  Absent = 'absent',\n  AbsentOverTime = 'absent_over_time',\n  Acos = 'acos',\n  Acosh = 'acosh',\n  Asin = 'asin',\n  Asinh = 'asinh',\n  Atan = 'atan',\n  Atanh = 'atanh',\n  Avg = 'avg',\n  AvgOverTime = 'avg_over_time',\n  BottomK = 'bottomk',\n  Ceil = 'ceil',\n  Changes = 'changes',\n  Clamp = 'clamp',\n  ClampMax = 'clamp_max',\n  ClampMin = 'clamp_min',\n  Cos = 'cos',\n  Cosh = 'cosh',\n  Count = 'count',\n  CountOverTime = 'count_over_time',\n  CountScalar = 'count_scalar',\n  CountValues = 'count_values',\n  DayOfMonth = 'day_of_month',\n  DayOfWeek = 'day_of_week',\n  DayOfYear = 'day_of_year',\n  DaysInMonth = 'days_in_month',\n  Deg = 'deg',\n  Delta = 'delta',\n  Deriv = 'deriv',\n  DropCommonLabels = 'drop_common_labels',\n  Exp = 'exp',\n  Floor = 'floor',\n  Group = 'group',\n  HistogramQuantile = 'histogram_quantile',\n  HistogramAvg = 'histogram_avg',\n  HistogramCount = 'histogram_count',\n  HistogramSum = 'histogram_sum',\n  HistogramFraction = 'histogram_fraction',\n  HistogramStddev = 'histogram_stddev',\n  HistogramStdvar = 'histogram_stdvar',\n  HoltWinters = 'holt_winters',\n  Hour = 'hour',\n  Idelta = 'idelta',\n  Increase = 'increase',\n  Irate = 'irate',\n  LabelJoin = 'label_join',\n  LabelReplace = 'label_replace',\n  Last = 'last',\n  LastOverTime = 'last_over_time',\n  Ln = 'ln',\n  Log10 = 'log10',\n  Log2 = 'log2',\n  Max = 'max',\n  MaxOverTime = 'max_over_time',\n  Min = 'min',\n  MinOverTime = 'min_over_time',\n  Minute = 'minute',\n  Month = 'month',\n  Pi = 'pi',\n  PredictLinear = 'predict_linear',\n  Present = 'present',\n  PresentOverTime = 'present_over_time',\n  Quantile = 'quantile',\n  QuantileOverTime = 'quantile_over_time',\n  Rad = 'rad',\n  Rate = 'rate',\n  Resets = 'resets',\n  Round = 'round',\n  Scalar = 'scalar',\n  Sgn = 'sgn',\n  Sin = 'sin',\n  Sinh = 'sinh',\n  Sort = 'sort',\n  SortDesc = 'sort_desc',\n  Sqrt = 'sqrt',\n  Stddev = 'stddev',\n  StddevOverTime = 'stddev_over_time',\n  Sum = 'sum',\n  SumOverTime = 'sum_over_time',\n  Tan = 'tan',\n  Tanh = 'tanh',\n  Time = 'time',\n  Timestamp = 'timestamp',\n  TopK = 'topk',\n  Vector = 'vector',\n  Year = 'year',\n  // Binary ops\n  Addition = '__addition',\n  Subtraction = '__subtraction',\n  MultiplyBy = '__multiply_by',\n  DivideBy = '__divide_by',\n  Modulo = '__modulo',\n  Exponent = '__exponent',\n  NestedQuery = '__nested_query',\n  EqualTo = '__equal_to',\n  NotEqualTo = '__not_equal_to',\n  GreaterThan = '__greater_than',\n  LessThan = '__less_than',\n  GreaterOrEqual = '__greater_or_equal',\n  LessOrEqual = '__less_or_equal',\n}\n\nexport enum PromQueryPatternType {\n  Rate = 'rate',\n  Histogram = 'histogram',\n  Binary = 'binary',\n}\n\nexport interface PromQueryPattern {\n  name: string;\n  operations: QueryBuilderOperation[];\n  type: PromQueryPatternType;\n  binaryQueries?: PromVisualQueryBinary[];\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/operationUtils.ts\nimport { capitalize } from 'lodash';\nimport pluralize from 'pluralize';\n\nimport { SelectableValue } from '@grafana/data/src';\n\nimport { LabelParamEditor } from './components/LabelParamEditor';\nimport {\n  QueryBuilderLabelFilter,\n  QueryBuilderOperation,\n  QueryBuilderOperationDef,\n  QueryBuilderOperationParamDef,\n  QueryBuilderOperationParamValue,\n  QueryWithOperations,\n} from './shared/types';\nimport { PromVisualQueryOperationCategory } from './types';\n\nexport function functionRendererLeft(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n  const params = renderParams(model, def, innerExpr);\n  const str = model.id + '(';\n\n  if (innerExpr) {\n    params.push(innerExpr);\n  }\n\n  return str + params.join(', ') + ')';\n}\n\nexport function functionRendererRight(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n  const params = renderParams(model, def, innerExpr);\n  const str = model.id + '(';\n\n  if (innerExpr) {\n    params.unshift(innerExpr);\n  }\n\n  return str + params.join(', ') + ')';\n}\n\nfunction rangeRendererWithParams(\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string,\n  renderLeft: boolean\n) {\n  if (def.params.length < 2) {\n    throw `Cannot render a function with params of length [${def.params.length}]`;\n  }\n\n  let rangeVector = (model.params ?? [])[0] ?? '5m';\n\n  // Next frame the remaining parameters, but get rid of the first one because it's used to move the\n  // instant vector into a range vector.\n  const params = renderParams(\n    {\n      ...model,\n      params: model.params.slice(1),\n    },\n    {\n      ...def,\n      params: def.params.slice(1),\n      defaultParams: def.defaultParams.slice(1),\n    },\n    innerExpr\n  );\n\n  const str = model.id + '(';\n\n  // Depending on the renderLeft variable, render parameters to the left or right\n  // renderLeft === true (renderLeft) => (param1, param2, rangeVector[...])\n  // renderLeft === false (renderRight) => (rangeVector[...], param1, param2)\n  if (innerExpr) {\n    renderLeft ? params.push(`${innerExpr}[${rangeVector}]`) : params.unshift(`${innerExpr}[${rangeVector}]`);\n  }\n\n  // stick everything together\n  return str + params.join(', ') + ')';\n}\n\nexport function rangeRendererRightWithParams(\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string\n) {\n  return rangeRendererWithParams(model, def, innerExpr, false);\n}\n\nexport function rangeRendererLeftWithParams(\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string\n) {\n  return rangeRendererWithParams(model, def, innerExpr, true);\n}\n\nfunction renderParams(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n  return (model.params ?? []).map((value, index) => {\n    const paramDef = def.params[index];\n    if (paramDef.type === 'string') {\n      return '\"' + value + '\"';\n    }\n\n    return value;\n  });\n}\n\nexport function defaultAddOperationHandler<T extends QueryWithOperations>(def: QueryBuilderOperationDef, query: T) {\n  const newOperation: QueryBuilderOperation = {\n    id: def.id,\n    params: def.defaultParams,\n  };\n\n  return {\n    ...query,\n    operations: [...query.operations, newOperation],\n  };\n}\n\nexport function getPromOperationDisplayName(funcName: string) {\n  return capitalize(funcName.replace(/_/g, ' '));\n}\n\nexport function getOperationParamId(operationId: string, paramIndex: number) {\n  return `operations.${operationId}.param.${paramIndex}`;\n}\n\nexport function getRangeVectorParamDef(withRateInterval = false): QueryBuilderOperationParamDef {\n  const options: Array<SelectableValue<string>> = [\n    {\n      label: '$__interval',\n      value: '$__interval',\n      // tooltip: 'Dynamic interval based on max data points, scrape and min interval',\n    },\n    { label: '1m', value: '1m' },\n    { label: '5m', value: '5m' },\n    { label: '10m', value: '10m' },\n    { label: '1h', value: '1h' },\n    { label: '24h', value: '24h' },\n  ];\n\n  if (withRateInterval) {\n    options.unshift({\n      label: '$__rate_interval',\n      value: '$__rate_interval',\n      // tooltip: 'Always above 4x scrape interval',\n    });\n  }\n\n  const param: QueryBuilderOperationParamDef = {\n    name: 'Range',\n    type: 'string',\n    options,\n  };\n\n  return param;\n}\n\nexport function createAggregationOperation(\n  name: string,\n  overrides: Partial<QueryBuilderOperationDef> = {}\n): QueryBuilderOperationDef[] {\n  const operations: QueryBuilderOperationDef[] = [\n    {\n      id: name,\n      name: getPromOperationDisplayName(name),\n      params: [\n        {\n          name: 'By label',\n          type: 'string',\n          restParam: true,\n          optional: true,\n        },\n      ],\n      defaultParams: [],\n      alternativesKey: 'plain aggregations',\n      category: PromVisualQueryOperationCategory.Aggregations,\n      renderer: functionRendererLeft,\n      paramChangedHandler: getOnLabelAddedHandler(`__${name}_by`),\n      explainHandler: getAggregationExplainer(name, ''),\n      addOperationHandler: defaultAddOperationHandler,\n      ...overrides,\n    },\n    {\n      id: `__${name}_by`,\n      name: `${getPromOperationDisplayName(name)} by`,\n      params: [\n        {\n          name: 'Label',\n          type: 'string',\n          restParam: true,\n          optional: true,\n          editor: LabelParamEditor,\n        },\n      ],\n      defaultParams: [''],\n      alternativesKey: 'aggregations by',\n      category: PromVisualQueryOperationCategory.Aggregations,\n      renderer: getAggregationByRenderer(name),\n      paramChangedHandler: getLastLabelRemovedHandler(name),\n      explainHandler: getAggregationExplainer(name, 'by'),\n      addOperationHandler: defaultAddOperationHandler,\n      hideFromList: true,\n      ...overrides,\n    },\n    {\n      id: `__${name}_without`,\n      name: `${getPromOperationDisplayName(name)} without`,\n      params: [\n        {\n          name: 'Label',\n          type: 'string',\n          restParam: true,\n          optional: true,\n          editor: LabelParamEditor,\n        },\n      ],\n      defaultParams: [''],\n      alternativesKey: 'aggregations by',\n      category: PromVisualQueryOperationCategory.Aggregations,\n      renderer: getAggregationWithoutRenderer(name),\n      paramChangedHandler: getLastLabelRemovedHandler(name),\n      explainHandler: getAggregationExplainer(name, 'without'),\n      addOperationHandler: defaultAddOperationHandler,\n      hideFromList: true,\n      ...overrides,\n    },\n  ];\n\n  return operations;\n}\n\nexport function createAggregationOperationWithParam(\n  name: string,\n  paramsDef: { params: QueryBuilderOperationParamDef[]; defaultParams: QueryBuilderOperationParamValue[] },\n  overrides: Partial<QueryBuilderOperationDef> = {}\n): QueryBuilderOperationDef[] {\n  const operations = createAggregationOperation(name, overrides);\n  operations[0].params.unshift(...paramsDef.params);\n  operations[1].params.unshift(...paramsDef.params);\n  operations[2].params.unshift(...paramsDef.params);\n  operations[0].defaultParams = paramsDef.defaultParams;\n  operations[1].defaultParams = [...paramsDef.defaultParams, ''];\n  operations[2].defaultParams = [...paramsDef.defaultParams, ''];\n  operations[1].renderer = getAggregationByRendererWithParameter(name);\n  operations[2].renderer = getAggregationByRendererWithParameter(name);\n  return operations;\n}\n\nfunction getAggregationByRenderer(aggregation: string) {\n  return function aggregationRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    return `${aggregation} by(${model.params.join(', ')}) (${innerExpr})`;\n  };\n}\n\nfunction getAggregationWithoutRenderer(aggregation: string) {\n  return function aggregationRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    return `${aggregation} without(${model.params.join(', ')}) (${innerExpr})`;\n  };\n}\n\n/**\n * Very simple poc implementation, needs to be modified to support all aggregation operators\n */\nexport function getAggregationExplainer(aggregationName: string, mode: 'by' | 'without' | '') {\n  return function aggregationExplainer(model: QueryBuilderOperation) {\n    const labels = model.params.map((label) => `\\`${label}\\``).join(' and ');\n    const labelWord = pluralize('label', model.params.length);\n\n    switch (mode) {\n      case 'by':\n        return `Calculates ${aggregationName} over dimensions while preserving ${labelWord} ${labels}.`;\n      case 'without':\n        return `Calculates ${aggregationName} over the dimensions ${labels}. All other labels are preserved.`;\n      default:\n        return `Calculates ${aggregationName} over the dimensions.`;\n    }\n  };\n}\n\nfunction getAggregationByRendererWithParameter(aggregation: string) {\n  return function aggregationRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    const restParamIndex = def.params.findIndex((param) => param.restParam);\n    const params = model.params.slice(0, restParamIndex);\n    const restParams = model.params.slice(restParamIndex);\n\n    return `${aggregation} by(${restParams.join(', ')}) (${params\n      .map((param, idx) => (def.params[idx].type === 'string' ? `\\\"${param}\\\"` : param))\n      .join(', ')}, ${innerExpr})`;\n  };\n}\n\n/**\n * This function will transform operations without labels to their plan aggregation operation\n */\nexport function getLastLabelRemovedHandler(changeToOperationId: string) {\n  return function onParamChanged(index: number, op: QueryBuilderOperation, def: QueryBuilderOperationDef) {\n    // If definition has more params then is defined there are no optional rest params anymore.\n    // We then transform this operation into a different one\n    if (op.params.length < def.params.length) {\n      return {\n        ...op,\n        id: changeToOperationId,\n      };\n    }\n\n    return op;\n  };\n}\n\nexport function getOnLabelAddedHandler(changeToOperationId: string) {\n  return function onParamChanged(index: number, op: QueryBuilderOperation, def: QueryBuilderOperationDef) {\n    // Check if we actually have the label param. As it's optional the aggregation can have one less, which is the\n    // case of just simple aggregation without label. When user adds the label it now has the same number of params\n    // as its definition, and now we can change it to its `_by` variant.\n    if (op.params.length === def.params.length) {\n      return {\n        ...op,\n        id: changeToOperationId,\n      };\n    }\n    return op;\n  };\n}\n\nexport function isConflictingSelector(\n  newLabel: Partial<QueryBuilderLabelFilter>,\n  labels: Array<Partial<QueryBuilderLabelFilter>>\n): boolean {\n  if (!newLabel.label || !newLabel.op || !newLabel.value) {\n    return false;\n  }\n\n  if (labels.length < 2) {\n    return false;\n  }\n\n  const operationIsNegative = newLabel.op.toString().startsWith('!');\n\n  const candidates = labels.filter(\n    (label) => label.label === newLabel.label && label.value === newLabel.value && label.op !== newLabel.op\n  );\n\n  const conflict = candidates.some((candidate) => {\n    if (operationIsNegative && candidate?.op?.toString().startsWith('!') === false) {\n      return true;\n    }\n    if (operationIsNegative === false && candidate?.op?.toString().startsWith('!')) {\n      return true;\n    }\n    return false;\n  });\n\n  return conflict;\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/binaryScalarOperations.ts\nimport { defaultAddOperationHandler } from './operationUtils';\nimport { QueryBuilderOperation, QueryBuilderOperationDef, QueryBuilderOperationParamDef } from './shared/types';\nimport { PromOperationId, PromVisualQueryOperationCategory } from './types';\n\nexport const binaryScalarDefs = [\n  {\n    id: PromOperationId.Addition,\n    name: 'Add scalar',\n    sign: '+',\n  },\n  {\n    id: PromOperationId.Subtraction,\n    name: 'Subtract scalar',\n    sign: '-',\n  },\n  {\n    id: PromOperationId.MultiplyBy,\n    name: 'Multiply by scalar',\n    sign: '*',\n  },\n  {\n    id: PromOperationId.DivideBy,\n    name: 'Divide by scalar',\n    sign: '/',\n  },\n  {\n    id: PromOperationId.Modulo,\n    name: 'Modulo by scalar',\n    sign: '%',\n  },\n  {\n    id: PromOperationId.Exponent,\n    name: 'Exponent',\n    sign: '^',\n  },\n  {\n    id: PromOperationId.EqualTo,\n    name: 'Equal to',\n    sign: '==',\n    comparison: true,\n  },\n  {\n    id: PromOperationId.NotEqualTo,\n    name: 'Not equal to',\n    sign: '!=',\n    comparison: true,\n  },\n  {\n    id: PromOperationId.GreaterThan,\n    name: 'Greater than',\n    sign: '>',\n    comparison: true,\n  },\n  {\n    id: PromOperationId.LessThan,\n    name: 'Less than',\n    sign: '<',\n    comparison: true,\n  },\n  {\n    id: PromOperationId.GreaterOrEqual,\n    name: 'Greater or equal to',\n    sign: '>=',\n    comparison: true,\n  },\n  {\n    id: PromOperationId.LessOrEqual,\n    name: 'Less or equal to',\n    sign: '<=',\n    comparison: true,\n  },\n];\n\nexport const binaryScalarOperatorToOperatorName = binaryScalarDefs.reduce<\n  Record<string, { id: string; comparison?: boolean }>\n>((acc, def) => {\n  acc[def.sign] = {\n    id: def.id,\n    comparison: def.comparison,\n  };\n  return acc;\n}, {});\n\n// Not sure about this one. It could also be a more generic 'Simple math operation' where user specifies\n// both the operator and the operand in a single input\nexport const binaryScalarOperations: QueryBuilderOperationDef[] = binaryScalarDefs.map((opDef) => {\n  const params: QueryBuilderOperationParamDef[] = [{ name: 'Value', type: 'number' }];\n  let defaultParams: [number] | [number, boolean] = [2];\n  if (opDef.comparison) {\n    params.push({\n      name: 'Bool',\n      type: 'boolean',\n      description: 'If checked comparison will return 0 or 1 for the value rather than filtering.',\n    });\n    defaultParams = [2, false];\n  }\n\n  return {\n    id: opDef.id,\n    name: opDef.name,\n    params,\n    defaultParams,\n    alternativesKey: 'binary scalar operations',\n    category: PromVisualQueryOperationCategory.BinaryOps,\n    renderer: getSimpleBinaryRenderer(opDef.sign),\n    addOperationHandler: defaultAddOperationHandler,\n  };\n});\n\nfunction getSimpleBinaryRenderer(operator: string) {\n  return function binaryRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    let param = model.params[0];\n    let bool = '';\n    if (model.params.length === 2) {\n      bool = model.params[1] ? ' bool' : '';\n    }\n\n    return `${innerExpr} ${operator}${bool} ${param}`;\n  };\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/operations.ts\nimport { binaryScalarOperations } from './binaryScalarOperations';\nimport { LabelParamEditor } from './components/LabelParamEditor';\nimport {\n  defaultAddOperationHandler,\n  functionRendererLeft,\n  functionRendererRight,\n  getPromOperationDisplayName,\n  getRangeVectorParamDef,\n  rangeRendererLeftWithParams,\n  rangeRendererRightWithParams,\n} from './operationUtils';\nimport {\n  QueryBuilderOperation,\n  QueryBuilderOperationDef,\n  QueryWithOperations,\n  VisualQueryModeller,\n} from './shared/types';\nimport { PromOperationId, PromVisualQuery, PromVisualQueryOperationCategory } from './types';\n\nexport function getOperationDefinitions(): QueryBuilderOperationDef[] {\n  const list: QueryBuilderOperationDef[] = [\n    {\n      id: PromOperationId.HistogramQuantile,\n      name: 'Histogram quantile',\n      params: [{ name: 'Quantile', type: 'number', options: [0.99, 0.95, 0.9, 0.75, 0.5, 0.25] }],\n      defaultParams: [0.9],\n      category: PromVisualQueryOperationCategory.Functions,\n      renderer: functionRendererLeft,\n      addOperationHandler: defaultAddOperationHandler,\n    },\n    createFunction({ id: PromOperationId.HistogramAvg }),\n    createFunction({ id: PromOperationId.HistogramCount }),\n    createFunction({ id: PromOperationId.HistogramSum }),\n    {\n      id: PromOperationId.HistogramFraction,\n      name: 'Histogram fraction',\n      params: [\n        { name: 'Lower scalar', type: 'number' },\n        { name: 'Upper scalar', type: 'number' },\n      ],\n      defaultParams: [0.0, 0.2],\n      category: PromVisualQueryOperationCategory.Functions,\n      renderer: functionRendererLeft,\n      addOperationHandler: defaultAddOperationHandler,\n    },\n    createFunction({ id: PromOperationId.HistogramStddev }),\n    createFunction({ id: PromOperationId.HistogramStdvar }),\n    {\n      id: PromOperationId.LabelReplace,\n      name: 'Label replace',\n      params: [\n        { name: 'Destination label', type: 'string' },\n        { name: 'Replacement', type: 'string' },\n        { name: 'Source label', type: 'string' },\n        { name: 'Regex', type: 'string' },\n      ],\n      category: PromVisualQueryOperationCategory.Functions,\n      defaultParams: ['', '$1', '', '(.*)'],\n      renderer: functionRendererRight,\n      addOperationHandler: defaultAddOperationHandler,\n    },\n    {\n      id: PromOperationId.Ln,\n      name: 'Ln',\n      params: [],\n      defaultParams: [],\n      category: PromVisualQueryOperationCategory.Functions,\n      renderer: functionRendererLeft,\n      addOperationHandler: defaultAddOperationHandler,\n    },\n    createRangeFunction(PromOperationId.Changes),\n    createRangeFunction(PromOperationId.Rate, true),\n    createRangeFunction(PromOperationId.Irate),\n    createRangeFunction(PromOperationId.Increase, true),\n    createRangeFunction(PromOperationId.Idelta),\n    createRangeFunction(PromOperationId.Delta),\n    createFunction({\n      id: PromOperationId.HoltWinters,\n      params: [\n        getRangeVectorParamDef(),\n        { name: 'Smoothing Factor', type: 'number' },\n        { name: 'Trend Factor', type: 'number' },\n      ],\n      defaultParams: ['$__interval', 0.5, 0.5],\n      alternativesKey: 'range function',\n      category: PromVisualQueryOperationCategory.RangeFunctions,\n      renderer: rangeRendererRightWithParams,\n      addOperationHandler: addOperationWithRangeVector,\n      changeTypeHandler: operationTypeChangedHandlerForRangeFunction,\n    }),\n    createFunction({\n      id: PromOperationId.PredictLinear,\n      params: [getRangeVectorParamDef(), { name: 'Seconds from now', type: 'number' }],\n      defaultParams: ['$__interval', 60],\n      alternativesKey: 'range function',\n      category: PromVisualQueryOperationCategory.RangeFunctions,\n      renderer: rangeRendererRightWithParams,\n      addOperationHandler: addOperationWithRangeVector,\n      changeTypeHandler: operationTypeChangedHandlerForRangeFunction,\n    }),\n    createFunction({\n      id: PromOperationId.QuantileOverTime,\n      params: [getRangeVectorParamDef(), { name: 'Quantile', type: 'number' }],\n      defaultParams: ['$__interval', 0.5],\n      alternativesKey: 'overtime function',\n      category: PromVisualQueryOperationCategory.RangeFunctions,\n      renderer: rangeRendererLeftWithParams,\n      addOperationHandler: addOperationWithRangeVector,\n      changeTypeHandler: operationTypeChangedHandlerForRangeFunction,\n    }),\n    ...binaryScalarOperations,\n    {\n      id: PromOperationId.NestedQuery,\n      name: 'Binary operation with query',\n      params: [],\n      defaultParams: [],\n      category: PromVisualQueryOperationCategory.BinaryOps,\n      renderer: (model, def, innerExpr) => innerExpr,\n      addOperationHandler: addNestedQueryHandler,\n    },\n    createFunction({ id: PromOperationId.Abs }),\n    createFunction({ id: PromOperationId.Absent }),\n    createFunction({\n      id: PromOperationId.Acos,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Acosh,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Asin,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Asinh,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Atan,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Atanh,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({ id: PromOperationId.Ceil }),\n    createFunction({\n      id: PromOperationId.Clamp,\n      name: 'Clamp',\n      params: [\n        { name: 'Minimum Scalar', type: 'number' },\n        { name: 'Maximum Scalar', type: 'number' },\n      ],\n      defaultParams: [1, 1],\n    }),\n\n    createFunction({\n      id: PromOperationId.ClampMax,\n      params: [{ name: 'Maximum Scalar', type: 'number' }],\n      defaultParams: [1],\n    }),\n    createFunction({\n      id: PromOperationId.ClampMin,\n      params: [{ name: 'Minimum Scalar', type: 'number' }],\n      defaultParams: [1],\n    }),\n    createFunction({\n      id: PromOperationId.Cos,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Cosh,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.DayOfMonth,\n      category: PromVisualQueryOperationCategory.Time,\n    }),\n    createFunction({\n      id: PromOperationId.DayOfWeek,\n      category: PromVisualQueryOperationCategory.Time,\n    }),\n    createFunction({\n      id: PromOperationId.DayOfYear,\n      category: PromVisualQueryOperationCategory.Time,\n    }),\n    createFunction({\n      id: PromOperationId.DaysInMonth,\n      category: PromVisualQueryOperationCategory.Time,\n    }),\n    createFunction({ id: PromOperationId.Deg }),\n    createRangeFunction(PromOperationId.Deriv),\n    //\n    createFunction({ id: PromOperationId.Exp }),\n    createFunction({ id: PromOperationId.Floor }),\n    createFunction({ id: PromOperationId.Group }),\n    createFunction({ id: PromOperationId.Hour }),\n    createFunction({\n      id: PromOperationId.LabelJoin,\n      params: [\n        {\n          name: 'Destination Label',\n          type: 'string',\n          editor: LabelParamEditor,\n        },\n        {\n          name: 'Separator',\n          type: 'string',\n        },\n        {\n          name: 'Source Label',\n          type: 'string',\n          restParam: true,\n          optional: true,\n          editor: LabelParamEditor,\n        },\n      ],\n      defaultParams: ['', ',', ''],\n      renderer: labelJoinRenderer,\n      explainHandler: labelJoinExplainHandler,\n      addOperationHandler: labelJoinAddOperationHandler,\n    }),\n    createFunction({ id: PromOperationId.Log10 }),\n    createFunction({ id: PromOperationId.Log2 }),\n    createFunction({ id: PromOperationId.Minute }),\n    createFunction({ id: PromOperationId.Month }),\n    createFunction({\n      id: PromOperationId.Pi,\n      renderer: (model) => `${model.id}()`,\n    }),\n    createFunction({\n      id: PromOperationId.Quantile,\n      params: [{ name: 'Value', type: 'number' }],\n      defaultParams: [1],\n      renderer: functionRendererLeft,\n    }),\n    createFunction({ id: PromOperationId.Rad }),\n    createRangeFunction(PromOperationId.Resets),\n    createFunction({\n      id: PromOperationId.Round,\n      category: PromVisualQueryOperationCategory.Functions,\n      params: [{ name: 'To Nearest', type: 'number' }],\n      defaultParams: [1],\n    }),\n    createFunction({ id: PromOperationId.Scalar }),\n    createFunction({ id: PromOperationId.Sgn }),\n    createFunction({ id: PromOperationId.Sin, category: PromVisualQueryOperationCategory.Trigonometric }),\n    createFunction({\n      id: PromOperationId.Sinh,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({ id: PromOperationId.Sort }),\n    createFunction({ id: PromOperationId.SortDesc }),\n    createFunction({ id: PromOperationId.Sqrt }),\n    createFunction({ id: PromOperationId.Stddev }),\n    createFunction({\n      id: PromOperationId.Tan,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Tanh,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Time,\n      renderer: (model) => `${model.id}()`,\n    }),\n    createFunction({ id: PromOperationId.Timestamp }),\n    createFunction({\n      id: PromOperationId.Vector,\n      params: [{ name: 'Value', type: 'number' }],\n      defaultParams: [1],\n      renderer: (model) => `${model.id}(${model.params[0]})`,\n    }),\n    createFunction({ id: PromOperationId.Year }),\n  ];\n\n  return list;\n}\n\nexport function createFunction(definition: Partial<QueryBuilderOperationDef>): QueryBuilderOperationDef {\n  return {\n    ...definition,\n    id: definition.id!,\n    name: definition.name ?? getPromOperationDisplayName(definition.id!),\n    params: definition.params ?? [],\n    defaultParams: definition.defaultParams ?? [],\n    category: definition.category ?? PromVisualQueryOperationCategory.Functions,\n    renderer: definition.renderer ?? (definition.params ? functionRendererRight : functionRendererLeft),\n    addOperationHandler: definition.addOperationHandler ?? defaultAddOperationHandler,\n  };\n}\n\nexport function createRangeFunction(name: string, withRateInterval = false): QueryBuilderOperationDef {\n  return {\n    id: name,\n    name: getPromOperationDisplayName(name),\n    params: [getRangeVectorParamDef(withRateInterval)],\n    defaultParams: [withRateInterval ? '$__rate_interval' : '$__interval'],\n    alternativesKey: 'range function',\n    category: PromVisualQueryOperationCategory.RangeFunctions,\n    renderer: operationWithRangeVectorRenderer,\n    addOperationHandler: addOperationWithRangeVector,\n    changeTypeHandler: operationTypeChangedHandlerForRangeFunction,\n  };\n}\n\nfunction operationTypeChangedHandlerForRangeFunction(\n  operation: QueryBuilderOperation,\n  newDef: QueryBuilderOperationDef\n) {\n  // validate current parameter\n  if (operation.params[0] === '$__rate_interval' && newDef.defaultParams[0] !== '$__rate_interval') {\n    operation.params = newDef.defaultParams;\n  } else if (operation.params[0] === '$__interval' && newDef.defaultParams[0] !== '$__interval') {\n    operation.params = newDef.defaultParams;\n  }\n\n  return operation;\n}\n\nexport function operationWithRangeVectorRenderer(\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string\n) {\n  let rangeVector = (model.params ?? [])[0] ?? '5m';\n  return `${def.id}(${innerExpr}[${rangeVector}])`;\n}\n\n/**\n * Since there can only be one operation with range vector this will replace the current one (if one was added )\n */\nexport function addOperationWithRangeVector(\n  def: QueryBuilderOperationDef,\n  query: PromVisualQuery,\n  modeller: VisualQueryModeller\n) {\n  const newOperation: QueryBuilderOperation = {\n    id: def.id,\n    params: def.defaultParams,\n  };\n\n  if (query.operations.length > 0) {\n    // If operation exists it has to be in the registry so no point to check if it was found\n    const firstOp = modeller.getOperationDef(query.operations[0].id)!;\n\n    if (firstOp.addOperationHandler === addOperationWithRangeVector) {\n      return {\n        ...query,\n        operations: [newOperation, ...query.operations.slice(1)],\n      };\n    }\n  }\n\n  return {\n    ...query,\n    operations: [newOperation, ...query.operations],\n  };\n}\n\nfunction addNestedQueryHandler(def: QueryBuilderOperationDef, query: PromVisualQuery): PromVisualQuery {\n  return {\n    ...query,\n    binaryQueries: [\n      ...(query.binaryQueries ?? []),\n      {\n        operator: '/',\n        query,\n      },\n    ],\n  };\n}\n\nfunction labelJoinRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n  const paramZero = model.params[0] ?? '';\n  const paramOne = model.params[1] ?? '';\n\n  const separator = `\"${paramOne}\"`;\n  return `${model.id}(${innerExpr}, \"${paramZero}\", ${separator}, \"${model.params.slice(2).join(separator)}\")`;\n}\n\nfunction labelJoinExplainHandler(op: QueryBuilderOperation, def?: QueryBuilderOperationDef): string {\n  let explainMessage = def?.documentation ?? 'no docs';\n\n  if (typeof op.params[1] !== 'string') {\n    explainMessage += ' 🚨🚨🚨 The `separator` must be a string.';\n  }\n\n  return explainMessage;\n}\n\nfunction labelJoinAddOperationHandler<T extends QueryWithOperations>(def: QueryBuilderOperationDef, query: T) {\n  const newOperation: QueryBuilderOperation = {\n    id: def.id,\n    params: def.defaultParams,\n  };\n\n  return {\n    ...query,\n    operations: [...query.operations, newOperation],\n  };\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/aggregations.ts\nimport {\n  createAggregationOperation,\n  createAggregationOperationWithParam,\n  getPromOperationDisplayName,\n  getRangeVectorParamDef,\n} from './operationUtils';\nimport { addOperationWithRangeVector } from './operations';\nimport { QueryBuilderOperation, QueryBuilderOperationDef } from './shared/types';\nimport { PromOperationId, PromVisualQueryOperationCategory } from './types';\n\nexport function getAggregationOperations(): QueryBuilderOperationDef[] {\n  return [\n    ...createAggregationOperation(PromOperationId.Sum),\n    ...createAggregationOperation(PromOperationId.Avg),\n    ...createAggregationOperation(PromOperationId.Min),\n    ...createAggregationOperation(PromOperationId.Max),\n    ...createAggregationOperation(PromOperationId.Count),\n    ...createAggregationOperationWithParam(PromOperationId.TopK, {\n      params: [{ name: 'K-value', type: 'number' }],\n      defaultParams: [5],\n    }),\n    ...createAggregationOperationWithParam(PromOperationId.BottomK, {\n      params: [{ name: 'K-value', type: 'number' }],\n      defaultParams: [5],\n    }),\n    ...createAggregationOperationWithParam(PromOperationId.CountValues, {\n      params: [{ name: 'Identifier', type: 'string' }],\n      defaultParams: ['count'],\n    }),\n    createAggregationOverTime(PromOperationId.SumOverTime),\n    createAggregationOverTime(PromOperationId.AvgOverTime),\n    createAggregationOverTime(PromOperationId.MinOverTime),\n    createAggregationOverTime(PromOperationId.MaxOverTime),\n    createAggregationOverTime(PromOperationId.CountOverTime),\n    createAggregationOverTime(PromOperationId.LastOverTime),\n    createAggregationOverTime(PromOperationId.PresentOverTime),\n    createAggregationOverTime(PromOperationId.AbsentOverTime),\n    createAggregationOverTime(PromOperationId.StddevOverTime),\n  ];\n}\n\nfunction createAggregationOverTime(name: string): QueryBuilderOperationDef {\n  return {\n    id: name,\n    name: getPromOperationDisplayName(name),\n    params: [getRangeVectorParamDef()],\n    defaultParams: ['$__interval'],\n    alternativesKey: 'overtime function',\n    category: PromVisualQueryOperationCategory.RangeFunctions,\n    renderer: operationWithRangeVectorRenderer,\n    addOperationHandler: addOperationWithRangeVector,\n  };\n}\n\nfunction operationWithRangeVectorRenderer(\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string\n) {\n  let rangeVector = (model.params ?? [])[0] ?? '$__interval';\n  return `${def.id}(${innerExpr}[${rangeVector}])`;\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/LokiAndPromQueryModellerBase.ts\nimport { Registry } from '@grafana/data';\n\nimport { PromVisualQueryOperationCategory } from '../types';\n\nimport { QueryBuilderLabelFilter, QueryBuilderOperation, QueryBuilderOperationDef, VisualQueryModeller } from './types';\n\nexport interface VisualQueryBinary<T> {\n  operator: string;\n  vectorMatchesType?: 'on' | 'ignoring';\n  vectorMatches?: string;\n  query: T;\n}\n\nexport interface PromLokiVisualQuery {\n  metric?: string;\n  labels: QueryBuilderLabelFilter[];\n  operations: QueryBuilderOperation[];\n  binaryQueries?: Array<VisualQueryBinary<PromLokiVisualQuery>>;\n}\n\nexport abstract class LokiAndPromQueryModellerBase implements VisualQueryModeller {\n  protected operationsRegistry: Registry<QueryBuilderOperationDef>;\n  private categories: string[] = [];\n\n  constructor(getOperations: () => QueryBuilderOperationDef[]) {\n    this.operationsRegistry = new Registry<QueryBuilderOperationDef>(getOperations);\n  }\n\n  protected setOperationCategories(categories: string[]) {\n    this.categories = categories;\n  }\n\n  getOperationsForCategory(category: string) {\n    return this.operationsRegistry.list().filter((op) => op.category === category && !op.hideFromList);\n  }\n\n  getAlternativeOperations(key: string) {\n    return this.operationsRegistry.list().filter((op) => op.alternativesKey && op.alternativesKey === key);\n  }\n\n  getCategories() {\n    return this.categories;\n  }\n\n  getOperationDef(id: string): QueryBuilderOperationDef | undefined {\n    return this.operationsRegistry.getIfExists(id);\n  }\n\n  renderOperations(queryString: string, operations: QueryBuilderOperation[]) {\n    for (const operation of operations) {\n      const def = this.operationsRegistry.getIfExists(operation.id);\n      if (!def) {\n        throw new Error(`Could not find operation ${operation.id} in the registry`);\n      }\n      queryString = def.renderer(operation, def, queryString);\n    }\n\n    return queryString;\n  }\n\n  renderBinaryQueries(queryString: string, binaryQueries?: Array<VisualQueryBinary<PromLokiVisualQuery>>) {\n    if (binaryQueries) {\n      for (const binQuery of binaryQueries) {\n        queryString = `${this.renderBinaryQuery(queryString, binQuery)}`;\n      }\n    }\n    return queryString;\n  }\n\n  private renderBinaryQuery(leftOperand: string, binaryQuery: VisualQueryBinary<PromLokiVisualQuery>) {\n    let result = leftOperand + ` ${binaryQuery.operator} `;\n\n    if (binaryQuery.vectorMatches) {\n      result += `${binaryQuery.vectorMatchesType}(${binaryQuery.vectorMatches}) `;\n    }\n\n    return result + this.renderQuery(binaryQuery.query, true);\n  }\n\n  renderLabels(labels: QueryBuilderLabelFilter[]) {\n    if (labels.length === 0) {\n      return '';\n    }\n\n    let expr = '{';\n    for (const filter of labels) {\n      if (expr !== '{') {\n        expr += ', ';\n      }\n\n      expr += `${filter.label}${filter.op}\"${filter.value}\"`;\n    }\n\n    return expr + `}`;\n  }\n\n  renderQuery(query: PromLokiVisualQuery, nested?: boolean) {\n    let queryString = `${query.metric ?? ''}${this.renderLabels(query.labels)}`;\n    queryString = this.renderOperations(queryString, query.operations);\n\n    if (!nested && this.hasBinaryOp(query) && Boolean(query.binaryQueries?.length)) {\n      queryString = `(${queryString})`;\n    }\n\n    queryString = this.renderBinaryQueries(queryString, query.binaryQueries);\n\n    if (nested && (this.hasBinaryOp(query) || Boolean(query.binaryQueries?.length))) {\n      queryString = `(${queryString})`;\n    }\n\n    return queryString;\n  }\n\n  hasBinaryOp(query: PromLokiVisualQuery): boolean {\n    return (\n      query.operations.find((op) => {\n        const def = this.getOperationDef(op.id);\n        return def?.category === PromVisualQueryOperationCategory.BinaryOps;\n      }) !== undefined\n    );\n  }\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/PromQueryModeller.ts\nimport { FUNCTIONS } from '../promql';\n\nimport { getAggregationOperations } from './aggregations';\nimport { getOperationDefinitions } from './operations';\nimport { LokiAndPromQueryModellerBase } from './shared/LokiAndPromQueryModellerBase';\nimport { PromQueryPattern, PromQueryPatternType, PromVisualQueryOperationCategory } from './types';\n\nexport class PromQueryModeller extends LokiAndPromQueryModellerBase {\n  constructor() {\n    super(() => {\n      const allOperations = [...getOperationDefinitions(), ...getAggregationOperations()];\n      for (const op of allOperations) {\n        const func = FUNCTIONS.find((x) => x.insertText === op.id);\n        if (func) {\n          op.documentation = func.documentation;\n        }\n      }\n      return allOperations;\n    });\n\n    this.setOperationCategories([\n      PromVisualQueryOperationCategory.Aggregations,\n      PromVisualQueryOperationCategory.RangeFunctions,\n      PromVisualQueryOperationCategory.Functions,\n      PromVisualQueryOperationCategory.BinaryOps,\n      PromVisualQueryOperationCategory.Trigonometric,\n      PromVisualQueryOperationCategory.Time,\n    ]);\n  }\n\n  getQueryPatterns(): PromQueryPattern[] {\n    return [\n      {\n        name: 'Rate then sum',\n        type: PromQueryPatternType.Rate,\n        operations: [\n          { id: 'rate', params: ['$__rate_interval'] },\n          { id: 'sum', params: [] },\n        ],\n      },\n      {\n        name: 'Rate then sum by(label) then avg',\n        type: PromQueryPatternType.Rate,\n        operations: [\n          { id: 'rate', params: ['$__rate_interval'] },\n          { id: '__sum_by', params: [''] },\n          { id: 'avg', params: [] },\n        ],\n      },\n      {\n        name: 'Histogram quantile on rate',\n        type: PromQueryPatternType.Histogram,\n        operations: [\n          { id: 'rate', params: ['$__rate_interval'] },\n          { id: '__sum_by', params: ['le'] },\n          { id: 'histogram_quantile', params: [0.95] },\n        ],\n      },\n      {\n        name: 'Histogram quantile on increase',\n        type: PromQueryPatternType.Histogram,\n        operations: [\n          { id: 'increase', params: ['$__rate_interval'] },\n          { id: '__max_by', params: ['le'] },\n          { id: 'histogram_quantile', params: [0.95] },\n        ],\n      },\n      {\n        name: 'Binary Query',\n        type: PromQueryPatternType.Binary,\n        operations: [\n          { id: 'rate', params: ['$__rate_interval'] },\n          { id: 'sum', params: [] },\n        ],\n        binaryQueries: [\n          {\n            operator: '/',\n            query: {\n              metric: '',\n              labels: [],\n              operations: [\n                { id: 'rate', params: ['$__rate_interval'] },\n                { id: 'sum', params: [] },\n              ],\n            },\n          },\n        ],\n      },\n    ];\n  }\n}\n\nexport const promQueryModeller = new PromQueryModeller();\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/RawQuery.tsx\nimport { css, cx } from '@emotion/css';\nimport Prism, { Grammar } from 'prismjs';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\n\nexport interface Props {\n  query: string;\n  lang: {\n    grammar: Grammar;\n    name: string;\n  };\n  className?: string;\n}\n\nexport function RawQuery({ query, lang, className }: Props) {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n  const highlighted = Prism.highlight(query, lang.grammar, lang.name);\n\n  return (\n    <div\n      className={cx(styles.editorField, 'prism-syntax-highlight', className)}\n      aria-label=\"selector\"\n      dangerouslySetInnerHTML={{ __html: highlighted }}\n    />\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    editorField: css({\n      fontFamily: theme.typography.fontFamilyMonospace,\n      fontSize: theme.typography.bodySmall.fontSize,\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/QueryPattern.tsx\nimport { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Card, useStyles2 } from '@grafana/ui';\n\nimport promqlGrammar from '../promql';\n\nimport { promQueryModeller } from './PromQueryModeller';\nimport { RawQuery } from './shared/RawQuery';\nimport { PromQueryPattern } from './types';\n\ntype Props = {\n  pattern: PromQueryPattern;\n  hasNewQueryOption: boolean;\n  hasPreviousQuery: boolean | string;\n  selectedPatternName: string | null;\n  setSelectedPatternName: (name: string | null) => void;\n  onPatternSelect: (pattern: PromQueryPattern, selectAsNewQuery?: boolean) => void;\n};\n\nexport const QueryPattern = (props: Props) => {\n  const { pattern, onPatternSelect, hasNewQueryOption, hasPreviousQuery, selectedPatternName, setSelectedPatternName } =\n    props;\n\n  const styles = useStyles2(getStyles);\n  const lang = { grammar: promqlGrammar, name: 'promql' };\n\n  return (\n    <Card className={styles.card}>\n      <Card.Heading>{pattern.name}</Card.Heading>\n      <div className={styles.rawQueryContainer}>\n        <RawQuery\n          aria-label={`${pattern.name} raw query`}\n          query={promQueryModeller.renderQuery({\n            labels: [],\n            operations: pattern.operations,\n            binaryQueries: pattern.binaryQueries,\n          })}\n          lang={lang}\n          className={styles.rawQuery}\n        />\n      </div>\n      <Card.Actions>\n        {selectedPatternName !== pattern.name ? (\n          <Button\n            size=\"sm\"\n            aria-label=\"use this query button\"\n            onClick={() => {\n              if (hasPreviousQuery) {\n                // If user has previous query, we need to confirm that they want to apply this query pattern\n                setSelectedPatternName(pattern.name);\n              } else {\n                onPatternSelect(pattern);\n              }\n            }}\n          >\n            Use this query\n          </Button>\n        ) : (\n          <>\n            <div className={styles.spacing}>\n              {`If you would like to use this query, ${\n                hasNewQueryOption\n                  ? 'you can either apply this query pattern or create a new query'\n                  : 'this query pattern will be applied to your current query'\n              }.`}\n            </div>\n            <Button size=\"sm\" aria-label=\"back button\" fill=\"outline\" onClick={() => setSelectedPatternName(null)}>\n              Back\n            </Button>\n            <Button\n              size=\"sm\"\n              aria-label=\"apply query starter button\"\n              onClick={() => {\n                onPatternSelect(pattern);\n              }}\n            >\n              Apply query\n            </Button>\n            {hasNewQueryOption && (\n              <Button\n                size=\"sm\"\n                aria-label=\"create new query button\"\n                onClick={() => {\n                  onPatternSelect(pattern, true);\n                }}\n              >\n                Create new query\n              </Button>\n            )}\n          </>\n        )}\n      </Card.Actions>\n    </Card>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css({\n      width: '49.5%',\n      display: 'flex',\n      flexDirection: 'column',\n    }),\n    rawQueryContainer: css({\n      flexGrow: 1,\n    }),\n    rawQuery: css({\n      backgroundColor: theme.colors.background.primary,\n      padding: theme.spacing(1),\n      marginTop: theme.spacing(1),\n    }),\n    spacing: css({\n      marginBottom: theme.spacing(1),\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/parsingUtils.ts\nimport { SyntaxNode, TreeCursor } from '@lezer/common';\n\nimport { QueryBuilderOperation, QueryBuilderOperationParamValue } from './shared/types';\n\n// Although 0 isn't explicitly provided in the lezer-promql library as the error node ID, it does appear to be the ID of error nodes within lezer.\nexport const ErrorId = 0;\n\nexport function getLeftMostChild(cur: SyntaxNode): SyntaxNode {\n  return cur.firstChild ? getLeftMostChild(cur.firstChild) : cur;\n}\n\nexport function makeError(expr: string, node: SyntaxNode) {\n  return {\n    text: getString(expr, node),\n    // TODO: this are positions in the string with the replaced variables. Means it cannot be used to show exact\n    //  placement of the error for the user. We need some translation table to positions before the variable\n    //  replace.\n    from: node.from,\n    to: node.to,\n    parentType: node.parent?.name,\n  };\n}\n\n// Taken from template_srv, but copied so to not mess with the regex.index which is manipulated in the service\n/*\n * This regex matches 3 types of variable reference with an optional format specifier\n * \\$(\\w+)                          $var1\n * \\[\\[([\\s\\S]+?)(?::(\\w+))?\\]\\]    [[var2]] or [[var2:fmt2]]\n * \\${(\\w+)(?::(\\w+))?}             ${var3} or ${var3:fmt3}\n */\nconst variableRegex = /\\$(\\w+)|\\[\\[([\\s\\S]+?)(?::(\\w+))?\\]\\]|\\${(\\w+)(?:\\.([^:^\\}]+))?(?::([^\\}]+))?}/g;\n\n/**\n * As variables with $ are creating parsing errors, we first replace them with magic string that is parsable and at\n * the same time we can get the variable and its format back from it.\n * @param expr\n */\nexport function replaceVariables(expr: string) {\n  return expr.replace(variableRegex, (match, var1, var2, fmt2, var3, fieldPath, fmt3) => {\n    const fmt = fmt2 || fmt3;\n    let variable = var1;\n    let varType = '0';\n\n    if (var2) {\n      variable = var2;\n      varType = '1';\n    }\n\n    if (var3) {\n      variable = var3;\n      varType = '2';\n    }\n\n    return `__V_${varType}__` + variable + '__V__' + (fmt ? '__F__' + fmt + '__F__' : '');\n  });\n}\n\nconst varTypeFunc = [\n  (v: string, f?: string) => `\\$${v}`,\n  (v: string, f?: string) => `[[${v}${f ? `:${f}` : ''}]]`,\n  (v: string, f?: string) => `\\$\\{${v}${f ? `:${f}` : ''}\\}`,\n];\n\n/**\n * Get back the text with variables in their original format.\n * @param expr\n */\nexport function returnVariables(expr: string) {\n  return expr.replace(/__V_(\\d)__(.+?)__V__(?:__F__(\\w+)__F__)?/g, (match, type, v, f) => {\n    return varTypeFunc[parseInt(type, 10)](v, f);\n  });\n}\n\n/**\n * Get the actual string of the expression. That is not stored in the tree so we have to get the indexes from the node\n * and then based on that get it from the expression.\n * @param expr\n * @param node\n */\nexport function getString(expr: string, node: SyntaxNode | TreeCursor | null | undefined) {\n  if (!node) {\n    return '';\n  }\n  return returnVariables(expr.substring(node.from, node.to));\n}\n\n/**\n * Create simple scalar binary op object.\n * @param opDef - definition of the op to be created\n * @param expr\n * @param numberNode - the node for the scalar\n * @param hasBool - whether operation has a bool modifier. Is used only for ops for which it makes sense.\n */\nexport function makeBinOp(\n  opDef: { id: string; comparison?: boolean },\n  expr: string,\n  numberNode: SyntaxNode,\n  hasBool: boolean\n): QueryBuilderOperation {\n  const params: QueryBuilderOperationParamValue[] = [parseFloat(getString(expr, numberNode))];\n  if (opDef.comparison) {\n    params.push(hasBool);\n  }\n  return {\n    id: opDef.id,\n    params,\n  };\n}\n\n/**\n * Get all nodes with type in the tree. This traverses the tree so it is safe only when you know there shouldn't be\n * too much nesting but you just want to skip some of the wrappers. For example getting function args this way would\n * not be safe is it would also find arguments of nested functions.\n * @param expr\n * @param cur\n * @param type\n */\nexport function getAllByType(expr: string, cur: SyntaxNode, type: number): string[] {\n  if (cur.type.id === type) {\n    return [getString(expr, cur)];\n  }\n  const values: string[] = [];\n  let pos = 0;\n  let child = cur.childAfter(pos);\n  while (child) {\n    values.push(...getAllByType(expr, child, type));\n    pos = child.to;\n    child = cur.childAfter(pos);\n  }\n  return values;\n}\n\n/**\n * There aren't any spaces in the metric names, so let's introduce a wildcard into the regex for each space to better facilitate a fuzzy search\n */\nexport const regexifyLabelValuesQueryString = (query: string) => {\n  const queryArray = query.split(' ');\n  return queryArray.map((query) => `${query}.*`).join('');\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/parsing.ts\nimport { SyntaxNode } from '@lezer/common';\nimport {\n  AggregateExpr,\n  AggregateModifier,\n  AggregateOp,\n  BinaryExpr,\n  BoolModifier,\n  FunctionCall,\n  FunctionCallBody,\n  FunctionIdentifier,\n  GroupingLabels,\n  Identifier,\n  LabelMatcher,\n  LabelName,\n  MatchingModifierClause,\n  MatchOp,\n  NumberLiteral,\n  On,\n  ParenExpr,\n  parser,\n  StringLiteral,\n  VectorSelector,\n  Without,\n} from '@prometheus-io/lezer-promql';\n\nimport { binaryScalarOperatorToOperatorName } from './binaryScalarOperations';\nimport {\n  ErrorId,\n  getAllByType,\n  getLeftMostChild,\n  getString,\n  makeBinOp,\n  makeError,\n  replaceVariables,\n} from './parsingUtils';\nimport { QueryBuilderLabelFilter, QueryBuilderOperation } from './shared/types';\nimport { PromVisualQuery, PromVisualQueryBinary } from './types';\n\n/**\n * Parses a PromQL query into a visual query model.\n *\n * It traverses the tree and uses sort of state machine to update the query model. The query model is modified\n * during the traversal and sent to each handler as context.\n *\n * @param expr\n */\nexport function buildVisualQueryFromString(expr: string): Context {\n  const replacedExpr = replaceVariables(expr);\n  const tree = parser.parse(replacedExpr);\n  const node = tree.topNode;\n\n  // This will be modified in the handlers.\n  const visQuery: PromVisualQuery = {\n    metric: '',\n    labels: [],\n    operations: [],\n  };\n  const context: Context = {\n    query: visQuery,\n    errors: [],\n  };\n\n  try {\n    handleExpression(replacedExpr, node, context);\n  } catch (err) {\n    // Not ideal to log it here, but otherwise we would lose the stack trace.\n    console.error(err);\n    if (err instanceof Error) {\n      context.errors.push({\n        text: err.message,\n      });\n    }\n  }\n\n  // If we have empty query, we want to reset errors\n  if (isEmptyQuery(context.query)) {\n    context.errors = [];\n  }\n\n  // We don't want parsing errors related to Grafana global variables\n  if (isValidPromQLMinusGrafanaGlobalVariables(expr)) {\n    context.errors = [];\n  }\n\n  return context;\n}\n\ninterface ParsingError {\n  text: string;\n  from?: number;\n  to?: number;\n  parentType?: string;\n}\n\ninterface Context {\n  query: PromVisualQuery;\n  errors: ParsingError[];\n}\n\n// TODO find a better approach for grafana global variables\nfunction isValidPromQLMinusGrafanaGlobalVariables(expr: string) {\n  const context: Context = {\n    query: {\n      metric: '',\n      labels: [],\n      operations: [],\n    },\n    errors: [],\n  };\n\n  expr = expr.replace(/\\$__interval/g, '1s');\n  expr = expr.replace(/\\$__interval_ms/g, '1000');\n  expr = expr.replace(/\\$__rate_interval/g, '1s');\n  expr = expr.replace(/\\$__range_ms/g, '1000');\n  expr = expr.replace(/\\$__range_s/g, '1');\n  expr = expr.replace(/\\$__range/g, '1s');\n\n  const tree = parser.parse(expr);\n  const node = tree.topNode;\n\n  try {\n    handleExpression(expr, node, context);\n  } catch (err) {\n    return false;\n  }\n\n  return context.errors.length === 0;\n}\n\n/**\n * Handler for default state. It will traverse the tree and call the appropriate handler for each node. The node\n * handled here does not necessarily need to be of type == Expr.\n * @param expr\n * @param node\n * @param context\n */\nexport function handleExpression(expr: string, node: SyntaxNode, context: Context) {\n  const visQuery = context.query;\n\n  switch (node.type.id) {\n    case Identifier: {\n      // Expectation is that there is only one of those per query.\n      visQuery.metric = getString(expr, node);\n      break;\n    }\n\n    case LabelMatcher: {\n      // Same as MetricIdentifier should be just one per query.\n      visQuery.labels.push(getLabel(expr, node));\n      const err = node.getChild(ErrorId);\n      if (err) {\n        context.errors.push(makeError(expr, err));\n      }\n      break;\n    }\n\n    case FunctionCall: {\n      handleFunction(expr, node, context);\n      break;\n    }\n\n    case AggregateExpr: {\n      handleAggregation(expr, node, context);\n      break;\n    }\n\n    case BinaryExpr: {\n      handleBinary(expr, node, context);\n      break;\n    }\n\n    case ErrorId: {\n      if (isIntervalVariableError(node)) {\n        break;\n      }\n      context.errors.push(makeError(expr, node));\n      break;\n    }\n\n    default: {\n      if (node.type.id === ParenExpr) {\n        // We don't support parenthesis in the query to group expressions.\n        // We just report error but go on with the parsing.\n        context.errors.push(makeError(expr, node));\n      }\n      // Any other nodes we just ignore and go to its children. This should be fine as there are lots of wrapper\n      // nodes that can be skipped.\n      // TODO: there are probably cases where we will just skip nodes we don't support and we should be able to\n      //  detect those and report back.\n      let child = node.firstChild;\n      while (child) {\n        handleExpression(expr, child, context);\n        child = child.nextSibling;\n      }\n    }\n  }\n}\n\n// TODO check if we still need this\nfunction isIntervalVariableError(node: SyntaxNode) {\n  return node.prevSibling?.firstChild?.type.id === VectorSelector;\n}\n\nfunction getLabel(expr: string, node: SyntaxNode): QueryBuilderLabelFilter {\n  const label = getString(expr, node.getChild(LabelName));\n  const op = getString(expr, node.getChild(MatchOp));\n  const value = getString(expr, node.getChild(StringLiteral)).replace(/\"/g, '');\n  return {\n    label,\n    op,\n    value,\n  };\n}\n\nconst rangeFunctions = ['changes', 'rate', 'irate', 'increase', 'delta'];\n\n/**\n * Handle function call which is usually and identifier and its body > arguments.\n * @param expr\n * @param node\n * @param context\n */\nfunction handleFunction(expr: string, node: SyntaxNode, context: Context) {\n  const visQuery = context.query;\n  const nameNode = node.getChild(FunctionIdentifier);\n  const funcName = getString(expr, nameNode);\n\n  const body = node.getChild(FunctionCallBody);\n  const params = [];\n  let interval = '';\n\n  // This is a bit of a shortcut to get the interval argument. Reasons are\n  // - interval is not part of the function args per promQL grammar but we model it as argument for the function in\n  //   the query model.\n  // - it is easier to handle template variables this way as template variable is an error for the parser\n  if (rangeFunctions.includes(funcName) || funcName.endsWith('_over_time')) {\n    let match = getString(expr, node).match(/\\[(.+)\\]/);\n    if (match?.[1]) {\n      interval = match[1];\n      params.push(match[1]);\n    }\n  }\n\n  const op = { id: funcName, params };\n  // We unshift operations to keep the more natural order that we want to have in the visual query editor.\n  visQuery.operations.unshift(op);\n\n  if (body) {\n    if (getString(expr, body) === '([' + interval + '])') {\n      // This is a special case where we have a function with a single argument and it is the interval.\n      // This happens when you start adding operations in query builder and did not set a metric yet.\n      return;\n    }\n    updateFunctionArgs(expr, body, context, op);\n  }\n}\n\n/**\n * Handle aggregation as they are distinct type from other functions.\n * @param expr\n * @param node\n * @param context\n */\nfunction handleAggregation(expr: string, node: SyntaxNode, context: Context) {\n  const visQuery = context.query;\n  const nameNode = node.getChild(AggregateOp);\n  let funcName = getString(expr, nameNode);\n\n  const modifier = node.getChild(AggregateModifier);\n  const labels = [];\n\n  if (modifier) {\n    const byModifier = modifier.getChild(`By`);\n    if (byModifier && funcName) {\n      funcName = `__${funcName}_by`;\n    }\n\n    const withoutModifier = modifier.getChild(Without);\n    if (withoutModifier) {\n      funcName = `__${funcName}_without`;\n    }\n\n    labels.push(...getAllByType(expr, modifier, LabelName));\n  }\n\n  const body = node.getChild(FunctionCallBody);\n\n  const op: QueryBuilderOperation = { id: funcName, params: [] };\n  visQuery.operations.unshift(op);\n  updateFunctionArgs(expr, body, context, op);\n  // We add labels after params in the visual query editor.\n  op.params.push(...labels);\n}\n\n/**\n * Handle (probably) all types of arguments that function or aggregation can have.\n *\n * We cannot just get all the children and iterate them as arguments we have to again recursively traverse through\n *  them.\n *\n * @param expr\n * @param node\n * @param context\n * @param op - We need the operation to add the params to as an additional context.\n */\nfunction updateFunctionArgs(expr: string, node: SyntaxNode | null, context: Context, op: QueryBuilderOperation) {\n  if (!node) {\n    return;\n  }\n  switch (node.type.id) {\n    case FunctionCallBody: {\n      let child = node.firstChild;\n\n      while (child) {\n        let binaryExpressionWithinFunctionArgs: SyntaxNode | null;\n        if (child.type.id === BinaryExpr) {\n          binaryExpressionWithinFunctionArgs = child;\n        } else {\n          binaryExpressionWithinFunctionArgs = child.getChild(BinaryExpr);\n        }\n\n        if (binaryExpressionWithinFunctionArgs) {\n          context.errors.push({\n            text: 'Query parsing is ambiguous.',\n            from: binaryExpressionWithinFunctionArgs.from,\n            to: binaryExpressionWithinFunctionArgs.to,\n          });\n        }\n\n        updateFunctionArgs(expr, child, context, op);\n        child = child.nextSibling;\n      }\n      break;\n    }\n\n    case NumberLiteral: {\n      op.params.push(parseFloat(getString(expr, node)));\n      break;\n    }\n\n    case StringLiteral: {\n      op.params.push(getString(expr, node).replace(/\"/g, ''));\n      break;\n    }\n\n    default: {\n      // Means we get to something that does not seem like simple function arg and is probably nested query so jump\n      // back to main context\n      handleExpression(expr, node, context);\n    }\n  }\n}\n\n/**\n * Right now binary expressions can be represented in 2 way in visual query. As additional operation in case it is\n * just operation with scalar or it creates a binaryQuery when it's 2 queries.\n * @param expr\n * @param node\n * @param context\n */\nfunction handleBinary(expr: string, node: SyntaxNode, context: Context) {\n  const visQuery = context.query;\n  const left = node.firstChild!;\n  const op = getString(expr, left.nextSibling);\n  const binModifier = getBinaryModifier(expr, node.getChild(BoolModifier) ?? node.getChild(MatchingModifierClause));\n\n  const right = node.lastChild!;\n\n  const opDef = binaryScalarOperatorToOperatorName[op];\n\n  const leftNumber = left.type.id === NumberLiteral;\n  const rightNumber = right.type.id === NumberLiteral;\n\n  const rightBinary = right.type.id === BinaryExpr;\n\n  if (leftNumber) {\n    // TODO: this should be already handled in case parent is binary expression as it has to be added to parent\n    //  if query starts with a number that isn't handled now.\n  } else {\n    // If this is binary we don't really know if there is a query or just chained scalars. So\n    // we have to traverse a bit deeper to know\n    handleExpression(expr, left, context);\n  }\n\n  if (rightNumber) {\n    visQuery.operations.push(makeBinOp(opDef, expr, right, !!binModifier?.isBool));\n  } else if (rightBinary) {\n    // Due to the way binary ops are parsed we can get a binary operation on the right that starts with a number which\n    // is a factor for a current binary operation. So we have to add it as an operation now.\n    const leftMostChild = getLeftMostChild(right);\n    if (leftMostChild?.type.id === NumberLiteral) {\n      visQuery.operations.push(makeBinOp(opDef, expr, leftMostChild, !!binModifier?.isBool));\n    }\n\n    // If we added the first number literal as operation here we still can continue and handle the rest as the first\n    // number will be just skipped.\n    handleExpression(expr, right, context);\n  } else {\n    visQuery.binaryQueries = visQuery.binaryQueries || [];\n    const binQuery: PromVisualQueryBinary = {\n      operator: op,\n      query: {\n        metric: '',\n        labels: [],\n        operations: [],\n      },\n    };\n    if (binModifier?.isMatcher) {\n      binQuery.vectorMatchesType = binModifier.matchType;\n      binQuery.vectorMatches = binModifier.matches;\n    }\n    visQuery.binaryQueries.push(binQuery);\n    handleExpression(expr, right, {\n      query: binQuery.query,\n      errors: context.errors,\n    });\n  }\n}\n\n// TODO revisit this function.\nfunction getBinaryModifier(\n  expr: string,\n  node: SyntaxNode | null\n):\n  | { isBool: true; isMatcher: false }\n  | { isBool: false; isMatcher: true; matches: string; matchType: 'ignoring' | 'on' }\n  | undefined {\n  if (!node) {\n    return undefined;\n  }\n  if (node.getChild('Bool')) {\n    return { isBool: true, isMatcher: false };\n  } else {\n    let labels = '';\n    const groupingLabels = node.getChild(GroupingLabels);\n    if (groupingLabels) {\n      labels = getAllByType(expr, groupingLabels, LabelName).join(', ');\n    }\n\n    return {\n      isMatcher: true,\n      isBool: false,\n      matches: labels,\n      matchType: node.getChild(On) ? 'on' : 'ignoring',\n    };\n  }\n}\n\nfunction isEmptyQuery(query: PromVisualQuery) {\n  if (query.labels.length === 0 && query.operations.length === 0 && !query.metric) {\n    return true;\n  }\n  return false;\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/QueryPatternsModal.tsx\nimport { css } from '@emotion/css';\nimport { capitalize } from 'lodash';\nimport React, { useMemo, useState } from 'react';\n\nimport { CoreApp, DataQuery, GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, Collapse, Modal, useStyles2 } from '@grafana/ui';\n\nimport { getNextRefIdChar } from '../gcopypaste/app/core/utils/query';\nimport { PromQuery } from '../types';\n\nimport { promQueryModeller } from './PromQueryModeller';\nimport { QueryPattern } from './QueryPattern';\nimport { buildVisualQueryFromString } from './parsing';\nimport { PromQueryPattern, PromQueryPatternType } from './types';\n\ntype Props = {\n  isOpen: boolean;\n  query: PromQuery;\n  queries: DataQuery[] | undefined;\n  app?: CoreApp;\n  onClose: () => void;\n  onChange: (query: PromQuery) => void;\n  onAddQuery?: (query: PromQuery) => void;\n};\n\nexport const QueryPatternsModal = (props: Props) => {\n  const { isOpen, onClose, onChange, onAddQuery, query, queries, app } = props;\n  const [openTabs, setOpenTabs] = useState<string[]>([]);\n  const [selectedPatternName, setSelectedPatternName] = useState<string | null>(null);\n\n  const styles = useStyles2(getStyles);\n  const hasNewQueryOption = !!onAddQuery;\n  const hasPreviousQuery = useMemo(() => {\n    const visualQuery = buildVisualQueryFromString(query.expr ?? '');\n    // has anything entered in the query, metric, labels, operations, or binary queries\n    const hasOperations = visualQuery.query.operations.length > 0,\n      hasMetric = visualQuery.query.metric,\n      hasLabels = visualQuery.query.labels.length > 0,\n      hasBinaryQueries = visualQuery.query.binaryQueries ? visualQuery.query.binaryQueries.length > 0 : false;\n\n    return hasOperations || hasMetric || hasLabels || hasBinaryQueries;\n  }, [query.expr]);\n\n  const onPatternSelect = (pattern: PromQueryPattern, selectAsNewQuery = false) => {\n    const visualQuery = buildVisualQueryFromString(selectAsNewQuery ? '' : query.expr);\n    reportInteraction('grafana_prom_kickstart_your_query_selected', {\n      app: app ?? '',\n      editorMode: query.editorMode,\n      selectedPattern: pattern.name,\n      preSelectedOperationsCount: visualQuery.query.operations.length,\n      preSelectedLabelsCount: visualQuery.query.labels.length,\n      createNewQuery: hasNewQueryOption && selectAsNewQuery,\n    });\n\n    visualQuery.query.operations = pattern.operations;\n    visualQuery.query.binaryQueries = pattern.binaryQueries;\n    if (hasNewQueryOption && selectAsNewQuery) {\n      onAddQuery({\n        ...query,\n        refId: getNextRefIdChar(queries ?? [query]),\n        expr: promQueryModeller.renderQuery(visualQuery.query),\n      });\n    } else {\n      onChange({\n        ...query,\n        expr: promQueryModeller.renderQuery(visualQuery.query),\n      });\n    }\n    setSelectedPatternName(null);\n    onClose();\n  };\n\n  return (\n    <Modal aria-label=\"Kick start your query modal\" isOpen={isOpen} title=\"Kick start your query\" onDismiss={onClose}>\n      <div className={styles.spacing}>\n        Kick start your query by selecting one of these queries. You can then continue to complete your query.\n      </div>\n      {Object.values(PromQueryPatternType).map((patternType) => {\n        return (\n          <Collapse\n            aria-label={`open and close ${patternType} query starter card`}\n            key={patternType}\n            label={`${capitalize(patternType)} query starters`}\n            isOpen={openTabs.includes(patternType)}\n            collapsible={true}\n            onToggle={() =>\n              setOpenTabs((tabs) =>\n                // close tab if it's already open, otherwise open it\n                tabs.includes(patternType) ? tabs.filter((t) => t !== patternType) : [...tabs, patternType]\n              )\n            }\n          >\n            <div className={styles.cardsContainer}>\n              {promQueryModeller\n                .getQueryPatterns()\n                .filter((pattern) => pattern.type === patternType)\n                .map((pattern) => (\n                  <QueryPattern\n                    key={pattern.name}\n                    pattern={pattern}\n                    hasNewQueryOption={hasNewQueryOption}\n                    hasPreviousQuery={hasPreviousQuery}\n                    onPatternSelect={onPatternSelect}\n                    selectedPatternName={selectedPatternName}\n                    setSelectedPatternName={setSelectedPatternName}\n                  />\n                ))}\n            </div>\n          </Collapse>\n        );\n      })}\n      <Button aria-label=\"close kick start your query modal\" variant=\"secondary\" onClick={onClose}>\n        Close\n      </Button>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    cardsContainer: css({\n      display: 'flex',\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      justifyContent: 'space-between',\n    }),\n    spacing: css({\n      marginBottom: theme.spacing(1),\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/core/store.ts\ntype StoreValue = string | number | boolean | null;\n\nexport class Store {\n  get(key: string) {\n    return window.localStorage[key];\n  }\n\n  set(key: string, value: StoreValue) {\n    window.localStorage[key] = value;\n  }\n\n  getBool(key: string, def: boolean): boolean {\n    if (def !== void 0 && !this.exists(key)) {\n      return def;\n    }\n    return window.localStorage[key] === 'true';\n  }\n\n  getObject<T = unknown>(key: string): T | undefined;\n  getObject<T = unknown>(key: string, def: T): T;\n  getObject<T = unknown>(key: string, def?: T) {\n    let ret = def;\n    if (this.exists(key)) {\n      const json = window.localStorage[key];\n      try {\n        ret = JSON.parse(json);\n      } catch (error) {\n        console.error(`Error parsing store object: ${key}. Returning default: ${def}. [${error}]`);\n      }\n    }\n    return ret;\n  }\n\n  /* Returns true when successfully stored, throws error if not successfully stored */\n  setObject(key: string, value: unknown) {\n    let json;\n    try {\n      json = JSON.stringify(value);\n    } catch (error) {\n      throw new Error(`Could not stringify object: ${key}. [${error}]`);\n    }\n    try {\n      this.set(key, json);\n    } catch (error) {\n      // Likely hitting storage quota\n      const errorToThrow = new Error(`Could not save item in localStorage: ${key}. [${error}]`);\n      if (error instanceof Error) {\n        errorToThrow.name = error.name;\n      }\n      throw errorToThrow;\n    }\n    return true;\n  }\n\n  exists(key: string) {\n    return window.localStorage[key] !== void 0;\n  }\n\n  delete(key: string) {\n    window.localStorage.removeItem(key);\n  }\n}\n\nconst store = new Store();\nexport default store;\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/hooks/useFlag.ts\nimport { useCallback, useState } from 'react';\n\nimport store from '../../gcopypaste/app/core/store';\n\nexport const promQueryEditorExplainKey = 'PrometheusQueryEditorExplainDefault';\n\nexport type QueryEditorFlags = typeof promQueryEditorExplainKey;\n\nfunction getFlagValue(key: QueryEditorFlags, defaultValue = false): boolean {\n  const val = store.get(key);\n  return val === undefined ? defaultValue : Boolean(parseInt(val, 10));\n}\n\nfunction setFlagValue(key: QueryEditorFlags, value: boolean) {\n  store.set(key, value ? '1' : '0');\n}\n\ntype UseFlagHookReturnType = { flag: boolean; setFlag: (val: boolean) => void };\n\n/**\n *\n * Use and store value of explain switch in local storage.\n * Needs to be a hook with local state to trigger re-renders.\n */\nexport function useFlag(key: QueryEditorFlags, defaultValue = false): UseFlagHookReturnType {\n  const [flag, updateFlag] = useState(getFlagValue(key, defaultValue));\n  const setter = useCallback(\n    (value: boolean) => {\n      setFlagValue(key, value);\n      updateFlag(value);\n    },\n    [key]\n  );\n\n  return { flag, setFlag: setter };\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/types.ts\n/**\n * Shared types that can be reused by Loki and other data sources\n */\nimport { ComponentType } from 'react';\n\nimport { DataSourceApi, RegistryItem, SelectableValue, TimeRange } from '@grafana/data';\n\nexport interface QueryBuilderLabelFilter {\n  label: string;\n  op: string;\n  value: string;\n}\n\nexport interface QueryBuilderOperation {\n  id: string;\n  params: QueryBuilderOperationParamValue[];\n}\n\nexport interface QueryWithOperations {\n  operations: QueryBuilderOperation[];\n}\n\nexport interface QueryBuilderOperationDef<T = any> extends RegistryItem {\n  documentation?: string;\n  params: QueryBuilderOperationParamDef[];\n  defaultParams: QueryBuilderOperationParamValue[];\n  category: string;\n  hideFromList?: boolean;\n  alternativesKey?: string;\n  /** Can be used to control operation placement when adding a new operations, lower are placed first */\n  orderRank?: number;\n  renderer: QueryBuilderOperationRenderer;\n  addOperationHandler: QueryBuilderAddOperationHandler<T>;\n  paramChangedHandler?: QueryBuilderOnParamChangedHandler;\n  explainHandler?: QueryBuilderExplainOperationHandler;\n  changeTypeHandler?: (op: QueryBuilderOperation, newDef: QueryBuilderOperationDef<T>) => QueryBuilderOperation;\n}\n\nexport type QueryBuilderAddOperationHandler<T> = (\n  def: QueryBuilderOperationDef,\n  query: T,\n  modeller: VisualQueryModeller\n) => T;\n\nexport type QueryBuilderExplainOperationHandler = (op: QueryBuilderOperation, def?: QueryBuilderOperationDef) => string;\n\nexport type QueryBuilderOnParamChangedHandler = (\n  index: number,\n  operation: QueryBuilderOperation,\n  operationDef: QueryBuilderOperationDef\n) => QueryBuilderOperation;\n\nexport type QueryBuilderOperationRenderer = (\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string\n) => string;\n\nexport type QueryBuilderOperationParamValue = string | number | boolean;\n\nexport interface QueryBuilderOperationParamDef {\n  name: string;\n  type: 'string' | 'number' | 'boolean';\n  options?: string[] | number[] | Array<SelectableValue<string>>;\n  hideName?: boolean;\n  restParam?: boolean;\n  optional?: boolean;\n  placeholder?: string;\n  description?: string;\n  minWidth?: number;\n  editor?: ComponentType<QueryBuilderOperationParamEditorProps>;\n  runQueryOnEnter?: boolean;\n}\n\nexport interface QueryBuilderOperationEditorProps {\n  operation: QueryBuilderOperation;\n  index: number;\n  query: any;\n  datasource: DataSourceApi;\n  queryModeller: VisualQueryModeller;\n  onChange: (index: number, update: QueryBuilderOperation) => void;\n  onRemove: (index: number) => void;\n}\n\nexport interface QueryBuilderOperationParamEditorProps {\n  value?: QueryBuilderOperationParamValue;\n  paramDef: QueryBuilderOperationParamDef;\n  /** Parameter index */\n  index: number;\n  operation: QueryBuilderOperation;\n  operationId: string;\n  query: any;\n  datasource: DataSourceApi;\n  timeRange?: TimeRange;\n  onChange: (index: number, value: QueryBuilderOperationParamValue) => void;\n  onRunQuery: () => void;\n}\n\nexport enum QueryEditorMode {\n  Code = 'code',\n  Builder = 'builder',\n}\n\nexport interface VisualQueryModeller {\n  getOperationsForCategory(category: string): QueryBuilderOperationDef[];\n\n  getAlternativeOperations(key: string): QueryBuilderOperationDef[];\n\n  getCategories(): string[];\n\n  getOperationDef(id: string): QueryBuilderOperationDef | undefined;\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/QueryEditorModeToggle.tsx\nimport React from 'react';\n\nimport { RadioButtonGroup } from '@grafana/ui';\n\nimport { QueryEditorMode } from './types';\n\nexport interface Props {\n  mode: QueryEditorMode;\n  onChange: (mode: QueryEditorMode) => void;\n}\n\nconst editorModes = [\n  { label: 'Builder', value: QueryEditorMode.Builder },\n  { label: 'Code', value: QueryEditorMode.Code },\n];\n\nexport function QueryEditorModeToggle({ mode, onChange }: Props) {\n  return (\n    <div data-testid={'QueryEditorModeToggle'}>\n      <RadioButtonGroup options={editorModes} size=\"sm\" value={mode} onChange={onChange} />\n    </div>\n  );\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/QueryHeaderSwitch.tsx\nimport { css } from '@emotion/css';\nimport { uniqueId } from 'lodash';\nimport React, { HTMLProps, useRef } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Switch, useStyles2, Stack } from '@grafana/ui';\n\nexport interface Props extends Omit<HTMLProps<HTMLInputElement>, 'value' | 'ref'> {\n  value?: boolean;\n  label: string;\n}\n\nexport function QueryHeaderSwitch({ label, ...inputProps }: Props) {\n  const dashedLabel = label.replace(' ', '-');\n  const switchIdRef = useRef(uniqueId(`switch-${dashedLabel}`));\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Stack gap={1}>\n      <label htmlFor={switchIdRef.current} className={styles.switchLabel}>\n        {label}\n      </label>\n      <Switch {...inputProps} id={switchIdRef.current} />\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    switchLabel: css({\n      color: theme.colors.text.secondary,\n      cursor: 'pointer',\n      fontSize: theme.typography.bodySmall.fontSize,\n      '&:hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/types.ts\nimport { DataSourceJsonData } from '@grafana/data';\nimport { DataQuery } from '@grafana/schema';\n\nimport { Prometheus as GenPromQuery } from './dataquery';\nimport { QueryBuilderLabelFilter, QueryEditorMode } from './querybuilder/shared/types';\n\nexport interface PromQuery extends GenPromQuery, DataQuery {\n  /**\n   * Timezone offset to align start & end time on backend\n   */\n  utcOffsetSec?: number;\n  valueWithRefId?: boolean;\n  showingGraph?: boolean;\n  showingTable?: boolean;\n  hinting?: boolean;\n  interval?: string;\n  // store the metrics explorer additional settings\n  useBackend?: boolean;\n  disableTextWrap?: boolean;\n  fullMetaSearch?: boolean;\n  includeNullMetadata?: boolean;\n}\n\nexport enum PrometheusCacheLevel {\n  Low = 'Low',\n  Medium = 'Medium',\n  High = 'High',\n  None = 'None',\n}\n\nexport enum PromApplication {\n  Cortex = 'Cortex',\n  Mimir = 'Mimir',\n  Prometheus = 'Prometheus',\n  Thanos = 'Thanos',\n}\n\nexport interface PromOptions extends DataSourceJsonData {\n  timeInterval?: string;\n  queryTimeout?: string;\n  httpMethod?: string;\n  customQueryParameters?: string;\n  disableMetricsLookup?: boolean;\n  exemplarTraceIdDestinations?: ExemplarTraceIdDestination[];\n  prometheusType?: PromApplication;\n  prometheusVersion?: string;\n  cacheLevel?: PrometheusCacheLevel;\n  defaultEditor?: QueryEditorMode;\n  incrementalQuerying?: boolean;\n  incrementalQueryOverlapWindow?: string;\n  disableRecordingRules?: boolean;\n  sigV4Auth?: boolean;\n  oauthPassThru?: boolean;\n  codeModeMetricNamesSuggestionLimit?: number;\n}\n\nexport type ExemplarTraceIdDestination = {\n  name: string;\n  url?: string;\n  urlDisplayLabel?: string;\n  datasourceUid?: string;\n};\n\nexport interface PromQueryRequest extends PromQuery {\n  step?: number;\n  requestId?: string;\n  start: number;\n  end: number;\n  headers?: any;\n}\n\nexport interface PromMetricsMetadataItem {\n  type: string;\n  help: string;\n  unit?: string;\n}\n\nexport interface PromMetricsMetadata {\n  [metric: string]: PromMetricsMetadataItem;\n}\n\nexport type PromValue = [number, any];\n\nexport interface PromMetric {\n  __name__?: string;\n\n  [index: string]: any;\n}\n\nexport interface PromBuildInfoResponse {\n  data: {\n    application?: string;\n    version: string;\n    revision: string;\n    features?: {\n      ruler_config_api?: 'true' | 'false';\n      alertmanager_config_api?: 'true' | 'false';\n      query_sharding?: 'true' | 'false';\n      federated_rules?: 'true' | 'false';\n    };\n    [key: string]: unknown;\n  };\n  status: 'success';\n}\n\n/**\n * Auto = query.legendFormat == '__auto'\n * Verbose = query.legendFormat == null/undefined/''\n * Custom query.legendFormat.length > 0 && query.legendFormat !== '__auto'\n */\nexport enum LegendFormatMode {\n  Auto = '__auto',\n  Verbose = '__verbose',\n  Custom = '__custom',\n}\n\nexport enum PromVariableQueryType {\n  LabelNames,\n  LabelValues,\n  MetricNames,\n  VarQueryResult,\n  SeriesQuery,\n  ClassicQuery,\n}\n\nexport interface PromVariableQuery extends DataQuery {\n  query?: string;\n  expr?: string;\n  qryType?: PromVariableQueryType;\n  label?: string;\n  metric?: string;\n  varQuery?: string;\n  seriesQuery?: string;\n  labelFilters?: QueryBuilderLabelFilter[];\n  match?: string;\n  classicQuery?: string;\n}\n\nexport type StandardPromVariableQuery = {\n  query: string;\n  refId: string;\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/state.ts\nimport { CoreApp } from '@grafana/data';\n\nimport store from '../gcopypaste/app/core/store';\nimport { LegendFormatMode, PromQuery } from '../types';\n\nimport { QueryEditorMode } from './shared/types';\n\nconst queryEditorModeDefaultLocalStorageKey = 'PrometheusQueryEditorModeDefault';\n\nexport function changeEditorMode(query: PromQuery, editorMode: QueryEditorMode, onChange: (query: PromQuery) => void) {\n  // If empty query store new mode as default\n  if (query.expr === '') {\n    store.set(queryEditorModeDefaultLocalStorageKey, editorMode);\n  }\n\n  onChange({ ...query, editorMode });\n}\n\nfunction getDefaultEditorMode(expr: string, defaultEditor: QueryEditorMode = QueryEditorMode.Builder): QueryEditorMode {\n  // If we already have an expression default to code view\n  if (expr != null && expr !== '') {\n    return QueryEditorMode.Code;\n  }\n\n  const value: QueryEditorMode = store.get(queryEditorModeDefaultLocalStorageKey);\n  switch (value) {\n    case QueryEditorMode.Builder:\n    case QueryEditorMode.Code:\n      return value;\n    default:\n      return defaultEditor;\n  }\n}\n\n/**\n * Returns query with defaults, and boolean true/false depending on change was required\n */\nexport function getQueryWithDefaults(\n  query: PromQuery & { expr?: string },\n  app: CoreApp | undefined,\n  defaultEditor?: QueryEditorMode\n): PromQuery {\n  let result = query;\n\n  if (!query.editorMode) {\n    result = { ...query, editorMode: getDefaultEditorMode(query.expr, defaultEditor) };\n  }\n\n  // default query expr is now empty string, set in getDefaultQuery\n  // While expr is required in the types, it is not always defined at runtime, so we need to check for undefined and default to an empty string to prevent runtime errors\n  if (!query.expr) {\n    result = { ...result, expr: '', legendFormat: LegendFormatMode.Auto };\n  }\n\n  if (query.range == null && query.instant == null) {\n    // Default to range query\n    result = { ...result, range: true };\n\n    // In explore we default to both instant & range\n    if (app === CoreApp.Explore) {\n      result.instant = true;\n    }\n  }\n\n  // Unified Alerting does not support \"both\" for query type – fall back to \"range\".\n  const isBothInstantAndRange = query.instant && query.range;\n  if (app === CoreApp.UnifiedAlerting && isBothInstantAndRange) {\n    result = { ...result, instant: false, range: true };\n  }\n\n  return result;\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/OperationExplainedBox.tsx\nimport { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, renderMarkdown } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport interface Props {\n  title?: React.ReactNode;\n  children?: React.ReactNode;\n  markdown?: string;\n  stepNumber?: number;\n}\n\nexport function OperationExplainedBox({ title, stepNumber, markdown, children }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.box}>\n      {stepNumber !== undefined && <div className={styles.stepNumber}>{stepNumber}</div>}\n      <div className={styles.boxInner}>\n        {title && (\n          <div className={styles.header}>\n            <span>{title}</span>\n          </div>\n        )}\n        <div className={styles.body}>\n          {markdown && <div dangerouslySetInnerHTML={{ __html: renderMarkdown(markdown) }}></div>}\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    box: css({\n      background: theme.colors.background.secondary,\n      padding: theme.spacing(1),\n      borderRadius: theme.shape.radius.default,\n      position: 'relative',\n    }),\n    boxInner: css({\n      marginLeft: theme.spacing(4),\n    }),\n    stepNumber: css({\n      fontWeight: theme.typography.fontWeightMedium,\n      background: theme.colors.secondary.main,\n      width: '20px',\n      height: '20px',\n      borderRadius: theme.shape.radius.circle,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      position: 'absolute',\n      top: '10px',\n      left: '11px',\n      fontSize: theme.typography.bodySmall.fontSize,\n    }),\n    header: css({\n      paddingBottom: theme.spacing(0.5),\n      display: 'flex',\n      alignItems: 'center',\n      fontFamily: theme.typography.fontFamilyMonospace,\n    }),\n    body: css({\n      color: theme.colors.text.secondary,\n      'p:last-child': {\n        margin: 0,\n      },\n      a: {\n        color: theme.colors.text.link,\n        textDecoration: 'underline',\n      },\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/OperationInfoButton.tsx\nimport { css } from '@emotion/css';\nimport {\n  autoUpdate,\n  flip,\n  offset,\n  shift,\n  useClick,\n  useDismiss,\n  useFloating,\n  useInteractions,\n} from '@floating-ui/react';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2, renderMarkdown } from '@grafana/data';\nimport { FlexItem } from '@grafana/experimental';\nimport { Button, Portal, useStyles2 } from '@grafana/ui';\n\nimport { QueryBuilderOperation, QueryBuilderOperationDef } from './types';\n\nexport interface Props {\n  operation: QueryBuilderOperation;\n  def: QueryBuilderOperationDef;\n}\n\nexport const OperationInfoButton = React.memo<Props>(({ def, operation }) => {\n  const styles = useStyles2(getStyles);\n  const [show, setShow] = useState(false);\n\n  // the order of middleware is important!\n  const middleware = [\n    offset(16),\n    flip({\n      fallbackAxisSideDirection: 'end',\n      // see https://floating-ui.com/docs/flip#combining-with-shift\n      crossAxis: false,\n      boundary: document.body,\n    }),\n    shift(),\n  ];\n\n  const { context, refs, floatingStyles } = useFloating({\n    open: show,\n    placement: 'top',\n    onOpenChange: setShow,\n    middleware,\n    whileElementsMounted: autoUpdate,\n  });\n\n  const click = useClick(context);\n  const dismiss = useDismiss(context);\n\n  const { getReferenceProps, getFloatingProps } = useInteractions([dismiss, click]);\n\n  return (\n    <>\n      <Button\n        title=\"Click to show description\"\n        ref={refs.setReference}\n        icon=\"info-circle\"\n        size=\"sm\"\n        variant=\"secondary\"\n        fill=\"text\"\n        {...getReferenceProps()}\n      />\n      {show && (\n        <Portal>\n          <div ref={refs.setFloating} style={floatingStyles} {...getFloatingProps()} className={styles.docBox}>\n            <div className={styles.docBoxHeader}>\n              <span>{def.renderer(operation, def, '<expr>')}</span>\n              <FlexItem grow={1} />\n              <Button\n                icon=\"times\"\n                onClick={() => setShow(false)}\n                fill=\"text\"\n                variant=\"secondary\"\n                title=\"Remove operation\"\n              />\n            </div>\n            <div\n              className={styles.docBoxBody}\n              dangerouslySetInnerHTML={{ __html: getOperationDocs(def, operation) }}\n            ></div>\n          </div>\n        </Portal>\n      )}\n    </>\n  );\n});\n\nOperationInfoButton.displayName = 'OperationDocs';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    docBox: css({\n      overflow: 'hidden',\n      background: theme.colors.background.primary,\n      border: `1px solid ${theme.colors.border.strong}`,\n      boxShadow: theme.shadows.z3,\n      maxWidth: '600px',\n      padding: theme.spacing(1),\n      borderRadius: theme.shape.radius.default,\n      zIndex: theme.zIndex.tooltip,\n    }),\n    docBoxHeader: css({\n      fontSize: theme.typography.h5.fontSize,\n      fontFamily: theme.typography.fontFamilyMonospace,\n      paddingBottom: theme.spacing(1),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    docBoxBody: css({\n      // The markdown paragraph has a marginBottom this removes it\n      marginBottom: theme.spacing(-1),\n      color: theme.colors.text.secondary,\n    }),\n  };\n};\n\nfunction getOperationDocs(def: QueryBuilderOperationDef, op: QueryBuilderOperation): string {\n  return renderMarkdown(def.explainHandler ? def.explainHandler(op, def) : def.documentation ?? 'no docs');\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/OperationHeader.tsx\nimport { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { DraggableProvided } from 'react-beautiful-dnd';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { FlexItem } from '@grafana/experimental';\nimport { Button, Select, useStyles2 } from '@grafana/ui';\n\nimport { OperationInfoButton } from './OperationInfoButton';\nimport { QueryBuilderOperation, QueryBuilderOperationDef, VisualQueryModeller } from './types';\n\nexport interface Props {\n  operation: QueryBuilderOperation;\n  def: QueryBuilderOperationDef;\n  index: number;\n  queryModeller: VisualQueryModeller;\n  dragHandleProps?: DraggableProvided['dragHandleProps'];\n  onChange: (index: number, update: QueryBuilderOperation) => void;\n  onRemove: (index: number) => void;\n}\n\ninterface State {\n  isOpen?: boolean;\n  alternatives?: Array<SelectableValue<QueryBuilderOperationDef>>;\n}\n\nexport const OperationHeader = React.memo<Props>(\n  ({ operation, def, index, onChange, onRemove, queryModeller, dragHandleProps }) => {\n    const styles = useStyles2(getStyles);\n    const [state, setState] = useState<State>({});\n\n    const onToggleSwitcher = () => {\n      if (state.isOpen) {\n        setState({ ...state, isOpen: false });\n      } else {\n        const alternatives = queryModeller\n          .getAlternativeOperations(def.alternativesKey!)\n          .map((alt) => ({ label: alt.name, value: alt }));\n        setState({ isOpen: true, alternatives });\n      }\n    };\n\n    return (\n      <div className={styles.header}>\n        {!state.isOpen && (\n          <>\n            <div {...dragHandleProps}>{def.name ?? def.id}</div>\n            <FlexItem grow={1} />\n            <div className={`${styles.operationHeaderButtons} operation-header-show-on-hover`}>\n              <Button\n                icon=\"angle-down\"\n                size=\"sm\"\n                onClick={onToggleSwitcher}\n                fill=\"text\"\n                variant=\"secondary\"\n                title=\"Click to view alternative operations\"\n              />\n              <OperationInfoButton def={def} operation={operation} />\n              <Button\n                icon=\"times\"\n                size=\"sm\"\n                onClick={() => onRemove(index)}\n                fill=\"text\"\n                variant=\"secondary\"\n                title=\"Remove operation\"\n              />\n            </div>\n          </>\n        )}\n        {state.isOpen && (\n          <div className={styles.selectWrapper}>\n            <Select\n              autoFocus\n              openMenuOnFocus\n              placeholder=\"Replace with\"\n              options={state.alternatives}\n              isOpen={true}\n              onCloseMenu={onToggleSwitcher}\n              onChange={(value) => {\n                if (value.value) {\n                  // Operation should exist if it is selectable\n                  const newDef = queryModeller.getOperationDef(value.value.id)!;\n\n                  // copy default params, and override with all current params\n                  const newParams = [...newDef.defaultParams];\n                  for (let i = 0; i < Math.min(operation.params.length, newParams.length); i++) {\n                    if (newDef.params[i].type === def.params[i].type) {\n                      newParams[i] = operation.params[i];\n                    }\n                  }\n\n                  const changedOp = { ...operation, params: newParams, id: value.value.id };\n                  onChange(index, def.changeTypeHandler ? def.changeTypeHandler(changedOp, newDef) : changedOp);\n                }\n              }}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nOperationHeader.displayName = 'OperationHeader';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    header: css({\n      borderBottom: `1px solid ${theme.colors.border.medium}`,\n      padding: theme.spacing(0.5, 0.5, 0.5, 1),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    operationHeaderButtons: css({\n      opacity: 1,\n    }),\n    selectWrapper: css({\n      paddingRight: theme.spacing(2),\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/OperationParamEditor.tsx\nimport { css } from '@emotion/css';\nimport React, { ComponentType } from 'react';\n\nimport { GrafanaTheme2, SelectableValue, toOption } from '@grafana/data';\nimport { AutoSizeInput, Button, Checkbox, Select, useStyles2, Stack } from '@grafana/ui';\n\nimport { getOperationParamId } from '../operationUtils';\n\nimport { QueryBuilderOperationParamDef, QueryBuilderOperationParamEditorProps } from './types';\n\nexport function getOperationParamEditor(\n  paramDef: QueryBuilderOperationParamDef\n): ComponentType<QueryBuilderOperationParamEditorProps> {\n  if (paramDef.editor) {\n    return paramDef.editor;\n  }\n\n  if (paramDef.options) {\n    return SelectInputParamEditor;\n  }\n\n  switch (paramDef.type) {\n    case 'boolean':\n      return BoolInputParamEditor;\n    case 'number':\n    case 'string':\n    default:\n      return SimpleInputParamEditor;\n  }\n}\n\nfunction SimpleInputParamEditor(props: QueryBuilderOperationParamEditorProps) {\n  return (\n    <AutoSizeInput\n      id={getOperationParamId(props.operationId, props.index)}\n      defaultValue={props.value?.toString()}\n      minWidth={props.paramDef.minWidth}\n      placeholder={props.paramDef.placeholder}\n      title={props.paramDef.description}\n      maxWidth={(props.paramDef.minWidth || 20) * 3}\n      onCommitChange={(evt) => {\n        props.onChange(props.index, evt.currentTarget.value);\n        if (props.paramDef.runQueryOnEnter && evt.type === 'keydown') {\n          props.onRunQuery();\n        }\n      }}\n    />\n  );\n}\n\nfunction BoolInputParamEditor(props: QueryBuilderOperationParamEditorProps) {\n  return (\n    <Checkbox\n      id={getOperationParamId(props.operationId, props.index)}\n      value={Boolean(props.value)}\n      onChange={(evt) => props.onChange(props.index, evt.currentTarget.checked)}\n    />\n  );\n}\n\nfunction SelectInputParamEditor({\n  paramDef,\n  value,\n  index,\n  operationId,\n  onChange,\n}: QueryBuilderOperationParamEditorProps) {\n  const styles = useStyles2(getStyles);\n  let selectOptions = paramDef.options as SelectableValue[];\n\n  if (!selectOptions[0]?.label) {\n    selectOptions = paramDef.options!.map((option) => ({\n      label: option.toString(),\n      value: option,\n    }));\n  }\n\n  let valueOption = selectOptions.find((x) => x.value === value) ?? toOption(value as string);\n\n  // If we have optional options param and don't have value, we want to render button with which we add optional options.\n  // This makes it easier to understand what needs to be selected and what is optional.\n  if (!value && paramDef.optional) {\n    return (\n      <div className={styles.optionalParam}>\n        <Button\n          size=\"sm\"\n          variant=\"secondary\"\n          title={`Add ${paramDef.name}`}\n          icon=\"plus\"\n          onClick={() => onChange(index, selectOptions[0].value)}\n        >\n          {paramDef.name}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Stack gap={0.5} direction=\"row\" alignItems=\"center\">\n      <Select\n        id={getOperationParamId(operationId, index)}\n        value={valueOption}\n        options={selectOptions}\n        placeholder={paramDef.placeholder}\n        allowCustomValue={true}\n        onChange={(value) => onChange(index, value.value!)}\n        width={paramDef.minWidth || 'auto'}\n      />\n      {paramDef.optional && (\n        <Button\n          data-testid={`operations.${index}.remove-param`}\n          size=\"sm\"\n          fill=\"text\"\n          icon=\"times\"\n          variant=\"secondary\"\n          title={`Remove ${paramDef.name}`}\n          onClick={() => onChange(index, '')}\n        />\n      )}\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    optionalParam: css({\n      marginTop: theme.spacing(1),\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/OperationEditor.tsx\nimport { css, cx } from '@emotion/css';\nimport React, { useEffect, useId, useState } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport { DataSourceApi, GrafanaTheme2, TimeRange } from '@grafana/data';\nimport { Button, Icon, Stack, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { getOperationParamId } from '../operationUtils';\n\nimport { OperationHeader } from './OperationHeader';\nimport { getOperationParamEditor } from './OperationParamEditor';\nimport {\n  QueryBuilderOperation,\n  QueryBuilderOperationDef,\n  QueryBuilderOperationParamDef,\n  QueryBuilderOperationParamValue,\n  VisualQueryModeller,\n} from './types';\n\nexport interface Props {\n  operation: QueryBuilderOperation;\n  index: number;\n  query: any;\n  datasource: DataSourceApi;\n  queryModeller: VisualQueryModeller;\n  onChange: (index: number, update: QueryBuilderOperation) => void;\n  onRemove: (index: number) => void;\n  onRunQuery: () => void;\n  flash?: boolean;\n  highlight?: boolean;\n  timeRange?: TimeRange;\n}\n\nexport function OperationEditor({\n  operation,\n  index,\n  onRemove,\n  onChange,\n  onRunQuery,\n  queryModeller,\n  query,\n  datasource,\n  flash,\n  highlight,\n  timeRange,\n}: Props) {\n  const styles = useStyles2(getStyles);\n  const def = queryModeller.getOperationDef(operation.id);\n  const shouldFlash = useFlash(flash);\n  const id = useId();\n\n  if (!def) {\n    return <span>Operation {operation.id} not found</span>;\n  }\n\n  const onParamValueChanged = (paramIdx: number, value: QueryBuilderOperationParamValue) => {\n    const update: QueryBuilderOperation = { ...operation, params: [...operation.params] };\n    update.params[paramIdx] = value;\n    callParamChangedThenOnChange(def, update, index, paramIdx, onChange);\n  };\n\n  const onAddRestParam = () => {\n    const update: QueryBuilderOperation = { ...operation, params: [...operation.params, ''] };\n    callParamChangedThenOnChange(def, update, index, operation.params.length, onChange);\n  };\n\n  const onRemoveRestParam = (paramIdx: number) => {\n    const update: QueryBuilderOperation = {\n      ...operation,\n      params: [...operation.params.slice(0, paramIdx), ...operation.params.slice(paramIdx + 1)],\n    };\n    callParamChangedThenOnChange(def, update, index, paramIdx, onChange);\n  };\n\n  const operationElements: React.ReactNode[] = [];\n\n  for (let paramIndex = 0; paramIndex < operation.params.length; paramIndex++) {\n    const paramDef = def.params[Math.min(def.params.length - 1, paramIndex)];\n    const Editor = getOperationParamEditor(paramDef);\n\n    operationElements.push(\n      <div className={styles.paramRow} key={`${paramIndex}-1`}>\n        {!paramDef.hideName && (\n          <div className={styles.paramName}>\n            <label htmlFor={getOperationParamId(id, paramIndex)}>{paramDef.name}</label>\n            {paramDef.description && (\n              <Tooltip placement=\"top\" content={paramDef.description} theme=\"info\">\n                <Icon name=\"info-circle\" size=\"sm\" className={styles.infoIcon} />\n              </Tooltip>\n            )}\n          </div>\n        )}\n        <div className={styles.paramValue}>\n          <Stack gap={0.5} direction=\"row\" alignItems=\"center\">\n            <Editor\n              index={paramIndex}\n              paramDef={paramDef}\n              value={operation.params[paramIndex]}\n              operation={operation}\n              operationId={id}\n              onChange={onParamValueChanged}\n              onRunQuery={onRunQuery}\n              query={query}\n              datasource={datasource}\n              timeRange={timeRange}\n            />\n            {paramDef.restParam && (operation.params.length > def.params.length || paramDef.optional) && (\n              <Button\n                data-testid={`operations.${index}.remove-rest-param`}\n                size=\"sm\"\n                fill=\"text\"\n                icon=\"times\"\n                variant=\"secondary\"\n                title={`Remove ${paramDef.name}`}\n                onClick={() => onRemoveRestParam(paramIndex)}\n              />\n            )}\n          </Stack>\n        </div>\n      </div>\n    );\n  }\n\n  // Handle adding button for rest params\n  let restParam: React.ReactNode | undefined;\n  if (def.params.length > 0) {\n    const lastParamDef = def.params[def.params.length - 1];\n    if (lastParamDef.restParam) {\n      restParam = renderAddRestParamButton(lastParamDef, onAddRestParam, index, operation.params.length, styles);\n    }\n  }\n\n  return (\n    <Draggable draggableId={`operation-${index}`} index={index}>\n      {(provided) => (\n        <div\n          className={cx(styles.card, (shouldFlash || highlight) && styles.cardHighlight)}\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          data-testid={`operations.${index}.wrapper`}\n        >\n          <OperationHeader\n            operation={operation}\n            dragHandleProps={provided.dragHandleProps}\n            def={def}\n            index={index}\n            onChange={onChange}\n            onRemove={onRemove}\n            queryModeller={queryModeller}\n          />\n          <div className={styles.body}>{operationElements}</div>\n          {restParam}\n          {index < query.operations.length - 1 && (\n            <div className={styles.arrow}>\n              <div className={styles.arrowLine} />\n              <div className={styles.arrowArrow} />\n            </div>\n          )}\n        </div>\n      )}\n    </Draggable>\n  );\n}\n\n/**\n * When flash is switched on makes sure it is switched of right away, so we just flash the highlight and then fade\n * out.\n * @param flash\n */\nfunction useFlash(flash?: boolean) {\n  const [keepFlash, setKeepFlash] = useState(true);\n  useEffect(() => {\n    let t: ReturnType<typeof setTimeout>;\n    if (flash) {\n      t = setTimeout(() => {\n        setKeepFlash(false);\n      }, 1000);\n    } else {\n      setKeepFlash(true);\n    }\n\n    return () => clearTimeout(t);\n  }, [flash]);\n\n  return keepFlash && flash;\n}\n\nfunction renderAddRestParamButton(\n  paramDef: QueryBuilderOperationParamDef,\n  onAddRestParam: () => void,\n  operationIndex: number,\n  paramIndex: number,\n  styles: OperationEditorStyles\n) {\n  return (\n    <div className={styles.restParam} key={`${paramIndex}-2`}>\n      <Button\n        size=\"sm\"\n        icon=\"plus\"\n        title={`Add ${paramDef.name}`.trimEnd()}\n        variant=\"secondary\"\n        onClick={onAddRestParam}\n        data-testid={`operations.${operationIndex}.add-rest-param`}\n      >\n        {paramDef.name}\n      </Button>\n    </div>\n  );\n}\n\nfunction callParamChangedThenOnChange(\n  def: QueryBuilderOperationDef,\n  operation: QueryBuilderOperation,\n  operationIndex: number,\n  paramIndex: number,\n  onChange: (index: number, update: QueryBuilderOperation) => void\n) {\n  if (def.paramChangedHandler) {\n    onChange(operationIndex, def.paramChangedHandler(paramIndex, operation, def));\n  } else {\n    onChange(operationIndex, operation);\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    cardWrapper: css({\n      alignItems: 'stretch',\n    }),\n    error: css({\n      marginBottom: theme.spacing(1),\n    }),\n    card: css({\n      background: theme.colors.background.primary,\n      border: `1px solid ${theme.colors.border.medium}`,\n      cursor: 'grab',\n      borderRadius: theme.shape.radius.default,\n      marginBottom: theme.spacing(1),\n      position: 'relative',\n      [theme.transitions.handleMotion('no-preference', 'reduce')]: {\n        transition: 'all 0.5s ease-in 0s',\n      },\n      height: '100%',\n    }),\n    cardError: css({\n      boxShadow: `0px 0px 4px 0px ${theme.colors.warning.main}`,\n      border: `1px solid ${theme.colors.warning.main}`,\n    }),\n    cardHighlight: css({\n      boxShadow: `0px 0px 4px 0px ${theme.colors.primary.border}`,\n      border: `1px solid ${theme.colors.primary.border}`,\n    }),\n    infoIcon: css({\n      marginLeft: theme.spacing(0.5),\n      color: theme.colors.text.secondary,\n      ':hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n    body: css({\n      margin: theme.spacing(1, 1, 0.5, 1),\n      display: 'table',\n    }),\n    paramRow: css({\n      label: 'paramRow',\n      display: 'table-row',\n      verticalAlign: 'middle',\n    }),\n    paramName: css({\n      display: 'table-cell',\n      padding: theme.spacing(0, 1, 0, 0),\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.fontWeightMedium,\n      verticalAlign: 'middle',\n      height: '32px',\n    }),\n    paramValue: css({\n      label: 'paramValue',\n      display: 'table-cell',\n      verticalAlign: 'middle',\n    }),\n    restParam: css({\n      padding: theme.spacing(0, 1, 1, 1),\n    }),\n    arrow: css({\n      position: 'absolute',\n      top: '0',\n      right: '-18px',\n      display: 'flex',\n    }),\n    arrowLine: css({\n      height: '2px',\n      width: '8px',\n      backgroundColor: theme.colors.border.strong,\n      position: 'relative',\n      top: '14px',\n    }),\n    arrowArrow: css({\n      width: 0,\n      height: 0,\n      borderTop: `5px solid transparent`,\n      borderBottom: `5px solid transparent`,\n      borderLeft: `7px solid ${theme.colors.border.strong}`,\n      position: 'relative',\n      top: '10px',\n    }),\n  };\n};\n\ntype OperationEditorStyles = ReturnType<typeof getStyles>;\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/OperationList.tsx\nimport { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\nimport { useMountedState, usePrevious } from 'react-use';\n\nimport { DataSourceApi, GrafanaTheme2, TimeRange } from '@grafana/data';\nimport { Button, Cascader, CascaderOption, useStyles2, Stack } from '@grafana/ui';\n\nimport { OperationEditor } from './OperationEditor';\nimport { QueryBuilderOperation, QueryWithOperations, VisualQueryModeller } from './types';\n\nexport interface Props<T extends QueryWithOperations> {\n  query: T;\n  datasource: DataSourceApi;\n  onChange: (query: T) => void;\n  onRunQuery: () => void;\n  queryModeller: VisualQueryModeller;\n  explainMode?: boolean;\n  highlightedOp?: QueryBuilderOperation;\n  timeRange?: TimeRange;\n}\n\nexport function OperationList<T extends QueryWithOperations>({\n  query,\n  datasource,\n  queryModeller,\n  onChange,\n  onRunQuery,\n  highlightedOp,\n  timeRange,\n}: Props<T>) {\n  const styles = useStyles2(getStyles);\n  const { operations } = query;\n\n  const opsToHighlight = useOperationsHighlight(operations);\n\n  const [cascaderOpen, setCascaderOpen] = useState(false);\n\n  const onOperationChange = (index: number, update: QueryBuilderOperation) => {\n    const updatedList = [...operations];\n    updatedList.splice(index, 1, update);\n    onChange({ ...query, operations: updatedList });\n  };\n\n  const onRemove = (index: number) => {\n    const updatedList = [...operations.slice(0, index), ...operations.slice(index + 1)];\n    onChange({ ...query, operations: updatedList });\n  };\n\n  const addOptions: CascaderOption[] = queryModeller.getCategories().map((category) => {\n    return {\n      value: category,\n      label: category,\n      items: queryModeller.getOperationsForCategory(category).map((operation) => ({\n        value: operation.id,\n        label: operation.name,\n        isLeaf: true,\n      })),\n    };\n  });\n\n  const onAddOperation = (value: string) => {\n    const operationDef = queryModeller.getOperationDef(value);\n    if (!operationDef) {\n      return;\n    }\n    onChange(operationDef.addOperationHandler(operationDef, query, queryModeller));\n    setCascaderOpen(false);\n  };\n\n  const onDragEnd = (result: DropResult) => {\n    if (!result.destination) {\n      return;\n    }\n\n    const updatedList = [...operations];\n    const element = updatedList[result.source.index];\n    updatedList.splice(result.source.index, 1);\n    updatedList.splice(result.destination.index, 0, element);\n    onChange({ ...query, operations: updatedList });\n  };\n\n  const onCascaderBlur = () => {\n    setCascaderOpen(false);\n  };\n\n  return (\n    <Stack gap={1} direction=\"column\">\n      <Stack gap={1}>\n        {operations.length > 0 && (\n          <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId=\"sortable-field-mappings\" direction=\"horizontal\">\n              {(provided) => (\n                <div className={styles.operationList} ref={provided.innerRef} {...provided.droppableProps}>\n                  {operations.map((op, index) => {\n                    return (\n                      <OperationEditor\n                        key={op.id + JSON.stringify(op.params) + index}\n                        queryModeller={queryModeller}\n                        index={index}\n                        operation={op}\n                        query={query}\n                        datasource={datasource}\n                        onChange={onOperationChange}\n                        onRemove={onRemove}\n                        onRunQuery={onRunQuery}\n                        flash={opsToHighlight[index]}\n                        highlight={highlightedOp === op}\n                        timeRange={timeRange}\n                      />\n                    );\n                  })}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n        )}\n        <div className={styles.addButton}>\n          {cascaderOpen ? (\n            <Cascader\n              options={addOptions}\n              onSelect={onAddOperation}\n              onBlur={onCascaderBlur}\n              autoFocus={true}\n              alwaysOpen={true}\n              hideActiveLevelLabel={true}\n              placeholder={'Search'}\n            />\n          ) : (\n            <Button icon={'plus'} variant={'secondary'} onClick={() => setCascaderOpen(true)} title={'Add operation'}>\n              Operations\n            </Button>\n          )}\n        </div>\n      </Stack>\n    </Stack>\n  );\n}\n\n/**\n * Returns indexes of operations that should be highlighted. We check the diff of operations added but at the same time\n * we want to highlight operations only after the initial render, so we check for mounted state and calculate the diff\n * only after.\n * @param operations\n */\nfunction useOperationsHighlight(operations: QueryBuilderOperation[]) {\n  const isMounted = useMountedState();\n  const prevOperations = usePrevious(operations);\n\n  if (!isMounted()) {\n    return operations.map(() => false);\n  }\n\n  if (!prevOperations) {\n    return operations.map(() => true);\n  }\n\n  let newOps: boolean[] = [];\n\n  if (prevOperations.length - 1 === operations.length && operations.every((op) => prevOperations.includes(op))) {\n    // In case we remove one op and does not change any ops then don't highlight anything.\n    return operations.map(() => false);\n  }\n  if (prevOperations.length + 1 === operations.length && prevOperations.every((op) => operations.includes(op))) {\n    // If we add a single op just find it and highlight just that.\n    const newOp = operations.find((op) => !prevOperations.includes(op));\n    newOps = operations.map((op) => {\n      return op === newOp;\n    });\n  } else {\n    // Default diff of all ops.\n    newOps = operations.map((op, index) => {\n      return !isSameOp(op.id, prevOperations[index]?.id);\n    });\n  }\n  return newOps;\n}\n\nfunction isSameOp(op1?: string, op2?: string) {\n  return op1 === op2 || `__${op1}_by` === op2 || op1 === `__${op2}_by`;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    heading: css({\n      label: 'heading',\n      fontSize: 12,\n      fontWeight: theme.typography.fontWeightMedium,\n      marginBottom: 0,\n    }),\n    operationList: css({\n      label: 'operationList',\n      display: 'flex',\n      flexWrap: 'wrap',\n      gap: theme.spacing(2),\n    }),\n    addButton: css({\n      label: 'addButton',\n      width: 126,\n      paddingBottom: theme.spacing(1),\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/OperationListExplained.tsx\nimport { Grammar } from 'prismjs';\nimport React from 'react';\n\nimport { OperationExplainedBox } from './OperationExplainedBox';\nimport { RawQuery } from './RawQuery';\nimport { QueryBuilderOperation, QueryWithOperations, VisualQueryModeller } from './types';\n\nexport interface Props<T extends QueryWithOperations> {\n  query: T;\n  queryModeller: VisualQueryModeller;\n  explainMode?: boolean;\n  stepNumber: number;\n  lang: {\n    grammar: Grammar;\n    name: string;\n  };\n  onMouseEnter?: (op: QueryBuilderOperation, index: number) => void;\n  onMouseLeave?: (op: QueryBuilderOperation, index: number) => void;\n}\n\nexport function OperationListExplained<T extends QueryWithOperations>({\n  query,\n  queryModeller,\n  stepNumber,\n  lang,\n  onMouseEnter,\n  onMouseLeave,\n}: Props<T>) {\n  return (\n    <>\n      {query.operations.map((op, index) => {\n        const def = queryModeller.getOperationDef(op.id);\n        if (!def) {\n          return `Operation ${op.id} not found`;\n        }\n        const title = def.renderer(op, def, '<expr>');\n        const body = def.explainHandler ? def.explainHandler(op, def) : def.documentation ?? 'no docs';\n\n        return (\n          <div\n            key={index}\n            onMouseEnter={() => onMouseEnter?.(op, index)}\n            onMouseLeave={() => onMouseLeave?.(op, index)}\n          >\n            <OperationExplainedBox\n              stepNumber={index + stepNumber}\n              title={<RawQuery query={title} lang={lang} />}\n              markdown={body}\n            />\n          </div>\n        );\n      })}\n    </>\n  );\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/OperationsEditorRow.tsx\nimport { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, Stack } from '@grafana/ui';\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nexport function OperationsEditorRow({ children }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.root}>\n      <Stack gap={1}>{children}</Stack>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    root: css({\n      padding: theme.spacing(1, 1, 0, 1),\n      backgroundColor: theme.colors.background.secondary,\n      borderRadius: theme.shape.radius.default,\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/QueryBuilderHints.tsx\nimport { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2, PanelData, QueryHint } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\n\nimport { LokiAndPromQueryModellerBase, PromLokiVisualQuery } from './LokiAndPromQueryModellerBase';\n\nexport interface Props<T extends PromLokiVisualQuery> {\n  query: T;\n  datasource: PrometheusDatasource;\n  queryModeller: LokiAndPromQueryModellerBase;\n  buildVisualQueryFromString: (expr: string) => { query: T };\n  onChange: (update: T) => void;\n  data?: PanelData;\n}\n\nexport const QueryBuilderHints = <T extends PromLokiVisualQuery>({\n  datasource,\n  query: visualQuery,\n  onChange,\n  data,\n  queryModeller,\n  buildVisualQueryFromString,\n}: Props<T>) => {\n  const [hints, setHints] = useState<QueryHint[]>([]);\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    const query = { expr: queryModeller.renderQuery(visualQuery), refId: '' };\n    // For now show only actionable hints\n    const hints = datasource.getQueryHints(query, data?.series || []).filter((hint) => hint.fix?.action);\n    setHints(hints);\n  }, [datasource, visualQuery, data, queryModeller]);\n\n  return (\n    <>\n      {hints.length > 0 && (\n        <div className={styles.container}>\n          {hints.map((hint) => {\n            return (\n              <Tooltip content={`${hint.label} ${hint.fix?.label}`} key={hint.type}>\n                <Button\n                  onClick={() => {\n                    reportInteraction('grafana_query_builder_hints_clicked', {\n                      hint: hint.type,\n                      datasourceType: datasource.type,\n                    });\n\n                    if (hint?.fix?.action) {\n                      const query = { expr: queryModeller.renderQuery(visualQuery), refId: '' };\n                      const newQuery = datasource.modifyQuery(query, hint.fix.action);\n                      const newVisualQuery = buildVisualQueryFromString(newQuery.expr);\n                      return onChange(newVisualQuery.query);\n                    }\n                  }}\n                  fill=\"outline\"\n                  size=\"sm\"\n                  className={styles.hint}\n                >\n                  hint: {hint.fix?.title || hint.fix?.action?.type.toLowerCase().replace('_', ' ')}\n                </Button>\n              </Tooltip>\n            );\n          })}\n        </div>\n      )}\n    </>\n  );\n};\n\nQueryBuilderHints.displayName = 'QueryBuilderHints';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      display: 'flex',\n      alignItems: 'start',\n    }),\n    hint: css({\n      marginRight: theme.spacing(1),\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/add_label_to_query.ts\nimport { parser, VectorSelector } from '@prometheus-io/lezer-promql';\n\nimport { PromQueryModeller } from './querybuilder/PromQueryModeller';\nimport { buildVisualQueryFromString } from './querybuilder/parsing';\nimport { QueryBuilderLabelFilter } from './querybuilder/shared/types';\nimport { PromVisualQuery } from './querybuilder/types';\n\n/**\n * Adds label filter to existing query. Useful for query modification for example for ad hoc filters.\n *\n * It uses PromQL parser to find instances of metric and labels, alters them and then splices them back into the query.\n * Ideally we could use the parse -> change -> render is a simple 3 steps but right now building the visual query\n * object does not support all possible queries.\n *\n * So instead this just operates on substrings of the query with labels and operates just on those. This makes this\n * more robust and can alter even invalid queries, and preserves in general the query structure and whitespace.\n * @param query\n * @param key\n * @param value\n * @param operator\n */\nexport function addLabelToQuery(query: string, key: string, value: string | number, operator = '='): string {\n  if (!key || !value) {\n    throw new Error('Need label to add to query.');\n  }\n\n  const vectorSelectorPositions = getVectorSelectorPositions(query);\n  if (!vectorSelectorPositions.length) {\n    return query;\n  }\n\n  const filter = toLabelFilter(key, value, operator);\n  return addFilter(query, vectorSelectorPositions, filter);\n}\n\ntype VectorSelectorPosition = { from: number; to: number; query: PromVisualQuery };\n\n/**\n * Parse the string and get all VectorSelector positions in the query together with parsed representation of the vector\n * selector.\n * @param query\n */\nfunction getVectorSelectorPositions(query: string): VectorSelectorPosition[] {\n  const tree = parser.parse(query);\n  const positions: VectorSelectorPosition[] = [];\n  tree.iterate({\n    enter: ({ to, from, type }): false | void => {\n      if (type.id === VectorSelector) {\n        const visQuery = buildVisualQueryFromString(query.substring(from, to));\n        positions.push({ query: visQuery.query, from, to });\n        return false;\n      }\n    },\n  });\n  return positions;\n}\n\nfunction toLabelFilter(key: string, value: string | number, operator: string): QueryBuilderLabelFilter {\n  // We need to make sure that we convert the value back to string because it may be a number\n  const transformedValue = value === Infinity ? '+Inf' : value.toString();\n  return { label: key, op: operator, value: transformedValue };\n}\n\nfunction addFilter(\n  query: string,\n  vectorSelectorPositions: VectorSelectorPosition[],\n  filter: QueryBuilderLabelFilter\n): string {\n  const modeller = new PromQueryModeller();\n  let newQuery = '';\n  let prev = 0;\n\n  for (let i = 0; i < vectorSelectorPositions.length; i++) {\n    // This is basically just doing splice on a string for each matched vector selector.\n\n    const match = vectorSelectorPositions[i];\n    const isLast = i === vectorSelectorPositions.length - 1;\n\n    const start = query.substring(prev, match.from);\n    const end = isLast ? query.substring(match.to) : '';\n\n    if (!labelExists(match.query.labels, filter)) {\n      // We don't want to add duplicate labels.\n      match.query.labels.push(filter);\n    }\n    const newLabels = modeller.renderQuery(match.query);\n    newQuery += start + newLabels + end;\n    prev = match.to;\n  }\n  return newQuery;\n}\n\n/**\n * Check if label exists in the list of labels but ignore the operator.\n * @param labels\n * @param filter\n */\nfunction labelExists(labels: QueryBuilderLabelFilter[], filter: QueryBuilderLabelFilter) {\n  return labels.find((label) => label.label === filter.label && label.value === filter.value);\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/packages/grafana-ui/src/components/Select/SelectBase.tsx\nimport { cx } from '@emotion/css';\nimport { max } from 'lodash';\nimport React, { RefCallback } from 'react';\nimport { MenuListProps } from 'react-select';\nimport { FixedSizeList as List } from 'react-window';\n\nimport { SelectableValue, toIconName } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { CustomScrollbar, Icon, getSelectStyles, useTheme2 } from '@grafana/ui';\n\ninterface SelectMenuProps {\n  maxHeight: number;\n  innerRef: RefCallback<HTMLDivElement>;\n  innerProps: {};\n}\n\nexport const SelectMenu = ({ children, maxHeight, innerRef, innerProps }: React.PropsWithChildren<SelectMenuProps>) => {\n  const theme = useTheme2();\n  const styles = getSelectStyles(theme);\n\n  return (\n    <div {...innerProps} className={styles.menu} style={{ maxHeight }} aria-label=\"Select options menu\">\n      <CustomScrollbar scrollRefCallback={innerRef} autoHide={false} autoHeightMax=\"inherit\" hideHorizontalTrack>\n        {children}\n      </CustomScrollbar>\n    </div>\n  );\n};\n\nSelectMenu.displayName = 'SelectMenu';\n\nconst VIRTUAL_LIST_ITEM_HEIGHT = 37;\nconst VIRTUAL_LIST_WIDTH_ESTIMATE_MULTIPLIER = 7;\n\n// A virtualized version of the SelectMenu, descriptions for SelectableValue options not supported since those are of a variable height.\n//\n// To support the virtualized list we have to \"guess\" the width of the menu container based on the longest available option.\n// the reason for this is because all of the options will be positioned absolute, this takes them out of the document and no space\n// is created for them, thus the container can't grow to accomodate.\n//\n// VIRTUAL_LIST_ITEM_HEIGHT and WIDTH_ESTIMATE_MULTIPLIER are both magic numbers.\n// Some characters (such as emojis and other unicode characters) may consist of multiple code points in which case the width would be inaccurate (but larger than needed).\nexport const VirtualizedSelectMenu = ({ children, maxHeight, options, getValue }: MenuListProps<SelectableValue>) => {\n  const theme = useTheme2();\n  const styles = getSelectStyles(theme);\n  const [value] = getValue();\n\n  const valueIndex = value ? options.findIndex((option: SelectableValue<unknown>) => option.value === value.value) : 0;\n  const initialOffset = valueIndex * VIRTUAL_LIST_ITEM_HEIGHT;\n\n  if (!Array.isArray(children)) {\n    return null;\n  }\n\n  const longestOption = max(options.map((option) => option.label?.length)) ?? 0;\n  const widthEstimate = longestOption * VIRTUAL_LIST_WIDTH_ESTIMATE_MULTIPLIER;\n  const heightEstimate = Math.min(options.length * VIRTUAL_LIST_ITEM_HEIGHT, maxHeight);\n\n  return (\n    <List\n      className={styles.menu}\n      height={heightEstimate}\n      width={widthEstimate}\n      aria-label=\"Select options menu\"\n      itemCount={children.length}\n      itemSize={VIRTUAL_LIST_ITEM_HEIGHT}\n      initialScrollOffset={initialOffset}\n    >\n      {({ index, style }) => <div style={{ ...style, overflow: 'hidden' }}>{children[index]}</div>}\n    </List>\n  );\n};\n\nVirtualizedSelectMenu.displayName = 'VirtualizedSelectMenu';\n\ninterface SelectMenuOptionProps<T> {\n  isDisabled: boolean;\n  isFocused: boolean;\n  isSelected: boolean;\n  innerProps: JSX.IntrinsicElements['div'];\n  innerRef: RefCallback<HTMLDivElement>;\n  renderOptionLabel?: (value: SelectableValue<T>) => JSX.Element;\n  data: SelectableValue<T>;\n}\n\nexport const SelectMenuOptions = ({\n  children,\n  data,\n  innerProps,\n  innerRef,\n  isFocused,\n  isSelected,\n  renderOptionLabel,\n}: React.PropsWithChildren<SelectMenuOptionProps<unknown>>) => {\n  const theme = useTheme2();\n  const styles = getSelectStyles(theme);\n  const icon = data.icon ? toIconName(data.icon) : undefined;\n  // We are removing onMouseMove and onMouseOver from innerProps because they cause the whole\n  // list to re-render everytime the user hovers over an option. This is a performance issue.\n  // See https://github.com/JedWatson/react-select/issues/3128#issuecomment-451936743\n  const { onMouseMove, onMouseOver, ...rest } = innerProps;\n\n  return (\n    <div\n      ref={innerRef}\n      className={cx(\n        styles.option,\n        isFocused && styles.optionFocused,\n        isSelected && styles.optionSelected,\n        data.isDisabled && styles.optionDisabled\n      )}\n      {...rest}\n      data-testid={selectors.components.Select.option}\n      title={data.title}\n    >\n      {icon && <Icon name={icon} className={styles.optionIcon} />}\n      {data.imgUrl && <img className={styles.optionImage} src={data.imgUrl} alt={data.label || String(data.value)} />}\n      <div className={styles.optionBody}>\n        <span>{renderOptionLabel ? renderOptionLabel(data) : children}</span>\n        {data.description && <div className={styles.optionDescription}>{data.description}</div>}\n        {data.component && <data.component />}\n      </div>\n    </div>\n  );\n};\n\nSelectMenuOptions.displayName = 'SelectMenuOptions';\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/metrics-modal/state/helpers.ts\nimport { AnyAction } from '@reduxjs/toolkit';\n\nimport { reportInteraction } from '@grafana/runtime';\n\nimport { PrometheusDatasource } from '../../../../datasource';\nimport { getMetadataHelp, getMetadataType } from '../../../../language_provider';\nimport { regexifyLabelValuesQueryString } from '../../../parsingUtils';\nimport { QueryBuilderLabelFilter } from '../../../shared/types';\nimport { PromVisualQuery } from '../../../types';\nimport { setFilteredMetricCount } from '../MetricsModal';\nimport { HaystackDictionary, MetricData, MetricsData, PromFilterOption } from '../types';\n\nimport { MetricsModalMetadata, MetricsModalState } from './state';\n\n// const { setFilteredMetricCount } = stateSlice.actions;\n\nexport async function setMetrics(\n  datasource: PrometheusDatasource,\n  query: PromVisualQuery,\n  initialMetrics?: string[]\n): Promise<MetricsModalMetadata> {\n  // metadata is set in the metric select now\n  // use this to disable metadata search and display\n  let hasMetadata = true;\n  const metadata = datasource.languageProvider.metricsMetadata;\n  if (metadata && Object.keys(metadata).length === 0) {\n    hasMetadata = false;\n  }\n\n  let nameHaystackDictionaryData: HaystackDictionary = {};\n  let metaHaystackDictionaryData: HaystackDictionary = {};\n\n  // pass in metrics from getMetrics in the query builder, reduced in the metric select\n  let metricsData: MetricsData | undefined;\n\n  metricsData = initialMetrics?.map((m: string) => {\n    const metricData = buildMetricData(m, datasource);\n\n    const metaDataString = `${m}¦${metricData.description}`;\n\n    nameHaystackDictionaryData[m] = metricData;\n    metaHaystackDictionaryData[metaDataString] = metricData;\n\n    return metricData;\n  });\n\n  return {\n    isLoading: false,\n    hasMetadata: hasMetadata,\n    metrics: metricsData ?? [],\n    metaHaystackDictionary: metaHaystackDictionaryData,\n    nameHaystackDictionary: nameHaystackDictionaryData,\n    totalMetricCount: metricsData?.length ?? 0,\n    filteredMetricCount: metricsData?.length ?? 0,\n  };\n}\n\n/**\n * Builds the metric data object with type and description\n *\n * @param   metric  The metric name\n * @param   datasource  The Prometheus datasource for mapping metradata to the metric name\n * @returns A MetricData object.\n */\nfunction buildMetricData(metric: string, datasource: PrometheusDatasource): MetricData {\n  let type = getMetadataType(metric, datasource.languageProvider.metricsMetadata!);\n\n  const description = getMetadataHelp(metric, datasource.languageProvider.metricsMetadata!);\n\n  ['histogram', 'summary'].forEach((t) => {\n    if (description?.toLowerCase().includes(t) && type !== t) {\n      type += ` (${t})`;\n    }\n  });\n\n  const oldHistogramMatch = metric.match(/^\\w+_bucket$|^\\w+_bucket{.*}$/);\n\n  if (type === 'histogram' && !oldHistogramMatch) {\n    type = 'native histogram';\n  }\n\n  const metricData: MetricData = {\n    value: metric,\n    type: type,\n    description: description,\n  };\n\n  return metricData;\n}\n\n/**\n * The filtered and paginated metrics displayed in the modal\n * */\nexport function displayedMetrics(state: MetricsModalState, dispatch: React.Dispatch<AnyAction>) {\n  const filteredSorted: MetricsData = filterMetrics(state);\n\n  if (!state.isLoading && state.filteredMetricCount !== filteredSorted.length) {\n    dispatch(setFilteredMetricCount(filteredSorted.length));\n  }\n\n  return sliceMetrics(filteredSorted, state.pageNum, state.resultsPerPage);\n}\n\n/**\n * Filter the metrics with all the options, fuzzy, type, null metadata\n */\nexport function filterMetrics(state: MetricsModalState): MetricsData {\n  let filteredMetrics: MetricsData = state.metrics;\n\n  if (state.fuzzySearchQuery && !state.useBackend) {\n    if (state.fullMetaSearch) {\n      filteredMetrics = state.metaHaystackOrder.map((needle: string) => state.metaHaystackDictionary[needle]);\n    } else {\n      filteredMetrics = state.nameHaystackOrder.map((needle: string) => state.nameHaystackDictionary[needle]);\n    }\n  }\n\n  if (state.selectedTypes.length > 0) {\n    filteredMetrics = filteredMetrics.filter((m: MetricData, idx) => {\n      // Matches type\n      const matchesSelectedType = state.selectedTypes.some((t) => {\n        if (m.type && t.value) {\n          return m.type.includes(t.value);\n        }\n\n        if (!m.type && t.value === 'no type') {\n          return true;\n        }\n\n        return false;\n      });\n\n      // when a user filters for type, only return metrics with defined types\n      return matchesSelectedType;\n    });\n  }\n\n  if (!state.includeNullMetadata) {\n    filteredMetrics = filteredMetrics.filter((m: MetricData) => {\n      return m.type !== undefined && m.description !== undefined;\n    });\n  }\n\n  return filteredMetrics;\n}\n\nexport function calculatePageList(state: MetricsModalState) {\n  if (!state.metrics.length) {\n    return [];\n  }\n\n  const calcResultsPerPage: number = state.resultsPerPage === 0 ? 1 : state.resultsPerPage;\n\n  const pages = Math.floor(filterMetrics(state).length / calcResultsPerPage) + 1;\n\n  return [...Array(pages).keys()].map((i) => i + 1);\n}\n\nexport function sliceMetrics(metrics: MetricsData, pageNum: number, resultsPerPage: number) {\n  const calcResultsPerPage: number = resultsPerPage === 0 ? 1 : resultsPerPage;\n  const start: number = pageNum === 1 ? 0 : (pageNum - 1) * calcResultsPerPage;\n  const end: number = start + calcResultsPerPage;\n  return metrics.slice(start, end);\n}\n\nexport const calculateResultsPerPage = (results: number, defaultResults: number, max: number) => {\n  if (results < 1) {\n    return 1;\n  }\n\n  if (results > max) {\n    return max;\n  }\n\n  return results ?? defaultResults;\n};\n\n/**\n * The backend query that replaces the uFuzzy search when the option 'useBackend' has been selected\n * this is a regex search either to the series or labels Prometheus endpoint\n * depending on which the Prometheus type or version supports\n * @param metricText\n * @param labels\n * @param datasource\n */\nexport async function getBackendSearchMetrics(\n  metricText: string,\n  labels: QueryBuilderLabelFilter[],\n  datasource: PrometheusDatasource\n): Promise<Array<{ value: string }>> {\n  const queryString = regexifyLabelValuesQueryString(metricText);\n\n  const labelsParams = labels.map((label) => {\n    return `,${label.label}=\"${label.value}\"`;\n  });\n\n  const params = `label_values({__name__=~\".*${queryString}\"${labels ? labelsParams.join() : ''}},__name__)`;\n\n  const results = datasource.metricFindQuery(params);\n\n  return await results.then((results) => {\n    return results.map((result) => buildMetricData(result.text, datasource));\n  });\n}\n\nexport function tracking(event: string, state?: MetricsModalState | null, metric?: string, query?: PromVisualQuery) {\n  switch (event) {\n    case 'grafana_prom_metric_encycopedia_tracking':\n      reportInteraction(event, {\n        metric: metric,\n        hasMetadata: state?.hasMetadata,\n        totalMetricCount: state?.totalMetricCount,\n        fuzzySearchQuery: state?.fuzzySearchQuery,\n        fullMetaSearch: state?.fullMetaSearch,\n        selectedTypes: state?.selectedTypes,\n        useRegexSearch: state?.useBackend,\n        includeResultsWithoutMetadata: state?.includeNullMetadata,\n      });\n    case 'grafana_prom_metric_encycopedia_disable_text_wrap_interaction':\n      reportInteraction(event, {\n        disableTextWrap: state?.disableTextWrap,\n      });\n    case 'grafana_prometheus_metric_encyclopedia_open':\n      reportInteraction(event, {\n        query: query,\n      });\n  }\n}\n\nexport const promTypes: PromFilterOption[] = [\n  {\n    value: 'counter',\n    description:\n      'A cumulative metric that represents a single monotonically increasing counter whose value can only increase or be reset to zero on restart.',\n  },\n  {\n    value: 'gauge',\n    description: 'A metric that represents a single numerical value that can arbitrarily go up and down.',\n  },\n  {\n    value: 'histogram',\n    description:\n      'A histogram samples observations (usually things like request durations or response sizes) and counts them in configurable buckets.',\n  },\n  {\n    value: 'native histogram',\n    description:\n      'Native histograms are different from classic Prometheus histograms in a number of ways: Native histogram bucket boundaries are calculated by a formula that depends on the scale (resolution) of the native histogram, and are not user defined.',\n  },\n  {\n    value: 'summary',\n    description:\n      'A summary samples observations (usually things like request durations and response sizes) and can calculate configurable quantiles over a sliding time window.',\n  },\n  {\n    value: 'unknown',\n    description: 'These metrics have been given the type unknown in the metadata.',\n  },\n  {\n    value: 'no type',\n    description: 'These metrics have no defined type in the metadata.',\n  },\n];\n\nexport const placeholders = {\n  browse: 'Search metrics by name',\n  metadataSearchSwitch: 'Include description in search',\n  type: 'Filter by type',\n  includeNullMetadata: 'Include results with no metadata',\n  setUseBackend: 'Enable regex search',\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/metrics-modal/AdditionalSettings.tsx\nimport { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Switch, Tooltip, useTheme2 } from '@grafana/ui';\n\nimport { metricsModaltestIds } from './MetricsModal';\nimport { placeholders } from './state/helpers';\nimport { MetricsModalState } from './state/state';\n\ntype AdditionalSettingsProps = {\n  state: MetricsModalState;\n  onChangeFullMetaSearch: () => void;\n  onChangeIncludeNullMetadata: () => void;\n  onChangeDisableTextWrap: () => void;\n  onChangeUseBackend: () => void;\n};\n\nexport function AdditionalSettings(props: AdditionalSettingsProps) {\n  const { state, onChangeFullMetaSearch, onChangeIncludeNullMetadata, onChangeDisableTextWrap, onChangeUseBackend } =\n    props;\n\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  return (\n    <>\n      <div className={styles.selectItem}>\n        <Switch\n          data-testid={metricsModaltestIds.searchWithMetadata}\n          value={state.fullMetaSearch}\n          disabled={state.useBackend || !state.hasMetadata}\n          onChange={() => onChangeFullMetaSearch()}\n        />\n        <div className={styles.selectItemLabel}>{placeholders.metadataSearchSwitch}</div>\n      </div>\n      <div className={styles.selectItem}>\n        <Switch\n          value={state.includeNullMetadata}\n          disabled={!state.hasMetadata}\n          onChange={() => onChangeIncludeNullMetadata()}\n        />\n        <div className={styles.selectItemLabel}>{placeholders.includeNullMetadata}</div>\n      </div>\n      <div className={styles.selectItem}>\n        <Switch value={state.disableTextWrap} onChange={() => onChangeDisableTextWrap()} />\n        <div className={styles.selectItemLabel}>Disable text wrap</div>\n      </div>\n      <div className={styles.selectItem}>\n        <Switch\n          data-testid={metricsModaltestIds.setUseBackend}\n          value={state.useBackend}\n          onChange={() => onChangeUseBackend()}\n        />\n        <div className={styles.selectItemLabel}>{placeholders.setUseBackend}&nbsp;</div>\n        <Tooltip\n          content={'Filter metric names by regex search, using an additional call on the Prometheus API.'}\n          placement=\"bottom-end\"\n        >\n          <Icon name=\"info-circle\" size=\"xs\" className={styles.settingsIcon} />\n        </Tooltip>\n      </div>\n    </>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    settingsIcon: css({\n      color: theme.colors.text.secondary,\n    }),\n    selectItem: css({\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      padding: '4px 0',\n    }),\n    selectItemLabel: css({\n      margin: `0 0 0 ${theme.spacing(1)}`,\n      alignSelf: 'center',\n      color: theme.colors.text.secondary,\n      fontSize: '12px',\n    }),\n  };\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/metrics-modal/FeedbackLink.tsx\nimport { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, useStyles2, Stack } from '@grafana/ui';\n\nexport interface Props {\n  feedbackUrl?: string;\n}\n\nexport function FeedbackLink({ feedbackUrl }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Stack>\n      <a\n        href={feedbackUrl}\n        className={styles.link}\n        title=\"The metrics explorer is new, please let us know how we can improve it\"\n        target=\"_blank\"\n        rel=\"noreferrer noopener\"\n      >\n        <Icon name=\"comment-alt-message\" /> Give feedback\n      </a>\n    </Stack>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    link: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      ':hover': {\n        color: theme.colors.text.link,\n      },\n      margin: `-25px 0 30px 0`,\n    }),\n  };\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/configuration/AlertingSettingsOverhaul.tsx\nimport { cx } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourceJsonData, DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { ConfigSubSection } from '@grafana/experimental';\nimport { InlineField, Switch, useTheme2 } from '@grafana/ui';\n\nimport { docsTip, overhaulStyles } from './ConfigEditor';\n\ninterface Props<T extends DataSourceJsonData>\n  extends Pick<DataSourcePluginOptionsEditorProps<T>, 'options' | 'onOptionsChange'> {}\n\ninterface AlertingConfig extends DataSourceJsonData {\n  manageAlerts?: boolean;\n}\n\nexport function AlertingSettingsOverhaul<T extends AlertingConfig>({\n  options,\n  onOptionsChange,\n}: Props<T>): JSX.Element {\n  const theme = useTheme2();\n  // imported GrafanaTheme2 from @grafana/data does not match type of same from @grafana/ui\n  // @ts-ignore\n  const styles = overhaulStyles(theme);\n\n  return (\n    <ConfigSubSection title=\"Alerting\" className={cx(styles.container, styles.alertingTop)}>\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineField\n              labelWidth={30}\n              label=\"Manage alerts via Alerting UI\"\n              disabled={options.readOnly}\n              tooltip={\n                <>\n                  Manage alert rules for this data source. To manage other alerting resources, add an Alertmanager data\n                  source. {docsTip()}\n                </>\n              }\n              interactive={true}\n              className={styles.switchField}\n            >\n              <Switch\n                value={options.jsonData.manageAlerts !== false}\n                onChange={(event) =>\n                  onOptionsChange({\n                    ...options,\n                    jsonData: { ...options.jsonData, manageAlerts: event!.currentTarget.checked },\n                  })\n                }\n                id={selectors.components.DataSource.Prometheus.configPage.manageAlerts}\n              />\n            </InlineField>\n          </div>\n        </div>\n      </div>\n    </ConfigSubSection>\n  );\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/configuration/DataSourceHttpSettingsOverhaul.tsx\nimport React from 'react';\n\nimport { DataSourceSettings } from '@grafana/data';\nimport { Auth, AuthMethod, ConnectionSettings, convertLegacyAuthProps } from '@grafana/experimental';\nimport { SecureSocksProxySettings, useTheme2 } from '@grafana/ui';\n\nimport { PromOptions } from '../types';\n\nimport { docsTip, overhaulStyles } from './ConfigEditor';\n\nexport type DataSourceHttpSettingsProps = {\n  options: DataSourceSettings<PromOptions, {}>;\n  onOptionsChange: (options: DataSourceSettings<PromOptions, {}>) => void;\n  secureSocksDSProxyEnabled: boolean;\n};\n\nexport const DataSourceHttpSettingsOverhaul = (props: DataSourceHttpSettingsProps) => {\n  const { options, onOptionsChange, secureSocksDSProxyEnabled } = props;\n\n  const newAuthProps = convertLegacyAuthProps({\n    config: options,\n    onChange: onOptionsChange,\n  });\n\n  const theme = useTheme2();\n  const styles = overhaulStyles(theme);\n\n  function returnSelectedMethod() {\n    return newAuthProps.selectedMethod;\n  }\n\n  // Do we need this switch anymore? Update the language.\n  let urlTooltip;\n  switch (options.access) {\n    case 'direct':\n      urlTooltip = (\n        <>\n          Your access method is <em>Browser</em>, this means the URL needs to be accessible from the browser.\n          {docsTip()}\n        </>\n      );\n      break;\n    case 'proxy':\n      urlTooltip = (\n        <>\n          Your access method is <em>Server</em>, this means the URL needs to be accessible from the grafana\n          backend/server.\n          {docsTip()}\n        </>\n      );\n      break;\n    default:\n      urlTooltip = <>Specify a complete HTTP URL (for example http://your_server:8080) {docsTip()}</>;\n  }\n\n  return (\n    <>\n      <ConnectionSettings\n        urlPlaceholder=\"http://localhost:9090\"\n        config={options}\n        onChange={onOptionsChange}\n        urlLabel=\"Prometheus server URL\"\n        urlTooltip={urlTooltip}\n      />\n      <hr className={`${styles.hrTopSpace} ${styles.hrBottomSpace}`} />\n      <Auth\n        // Reshaped legacy props\n        {...newAuthProps}\n        // Still need to call `onAuthMethodSelect` function from\n        // `newAuthProps` to store the legacy data correctly.\n        // Also make sure to store the data about your component\n        // being selected/unselected.\n        onAuthMethodSelect={(method) => {\n          onOptionsChange({\n            ...options,\n            basicAuth: method === AuthMethod.BasicAuth,\n            withCredentials: method === AuthMethod.CrossSiteCredentials,\n            jsonData: {\n              ...options.jsonData,\n              oauthPassThru: method === AuthMethod.OAuthForward,\n            },\n          });\n        }}\n        // If your method is selected pass its id to `selectedMethod`,\n        // otherwise pass the id from converted legacy data\n        selectedMethod={returnSelectedMethod()}\n      />\n      <div className={styles.sectionBottomPadding} />\n      {secureSocksDSProxyEnabled && (\n        <>\n          <SecureSocksProxySettings options={options} onOptionsChange={onOptionsChange} />\n          <div className={styles.sectionBottomPadding} />\n        </>\n      )}\n    </>\n  );\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/features/live/data/amendTimeSeries.ts\nimport { closestIdx } from '@grafana/data';\n\nexport type Table = [times: number[], ...values: any[][]];\n\n// prevTable and nextTable are assumed sorted ASC on reference [0] arrays\n// nextTable is assumed to be contiguous, only edges are checked for overlap\n// ...so prev: [1,2,5] + next: [3,4,6] -> [1,2,3,4,6]\nexport function amendTable(prevTable: Table, nextTable: Table): Table {\n    let [prevTimes] = prevTable;\n    let [nextTimes] = nextTable;\n\n    let pLen = prevTimes.length;\n    let pStart = prevTimes[0];\n    let pEnd = prevTimes[pLen - 1];\n\n    let nLen = nextTimes.length;\n    let nStart = nextTimes[0];\n    let nEnd = nextTimes[nLen - 1];\n\n    let outTable: Table;\n\n    if (pLen) {\n        if (nLen) {\n            // append, no overlap\n            if (nStart > pEnd) {\n                outTable = prevTable.map((_, i) => prevTable[i].concat(nextTable[i])) as Table;\n            }\n            // prepend, no overlap\n            else if (nEnd < pStart) {\n                outTable = nextTable.map((_, i) => nextTable[i].concat(prevTable[i])) as Table;\n            }\n            // full replace\n            else if (nStart <= pStart && nEnd >= pEnd) {\n                outTable = nextTable;\n            }\n            // partial replace\n            else if (nStart > pStart && nEnd < pEnd) {\n            }\n            // append, with overlap\n            else if (nStart >= pStart) {\n                let idx = closestIdx(nStart, prevTimes);\n                idx = prevTimes[idx] < nStart ? idx - 1 : idx;\n                outTable = prevTable.map((_, i) => prevTable[i].slice(0, idx).concat(nextTable[i])) as Table;\n            }\n            // prepend, with overlap\n            else if (nEnd >= pStart) {\n                let idx = closestIdx(nEnd, prevTimes);\n                idx = prevTimes[idx] < nEnd ? idx : idx + 1;\n                outTable = nextTable.map((_, i) => nextTable[i].concat(prevTable[i].slice(idx))) as Table;\n            }\n        } else {\n            outTable = prevTable;\n        }\n    } else {\n        if (nLen) {\n            outTable = nextTable;\n        } else {\n            outTable = [[]];\n        }\n    }\n\n    return outTable!;\n}\n\nexport function trimTable(table: Table, fromTime: number, toTime: number): Table {\n    let [times, ...vals] = table;\n    let fromIdx: number | undefined;\n    let toIdx: number | undefined;\n\n    // trim to bounds\n    if (times[0] < fromTime) {\n        fromIdx = closestIdx(fromTime, times);\n\n        if (times[fromIdx] < fromTime) {\n            fromIdx++;\n        }\n    }\n\n    if (times[times.length - 1] > toTime) {\n        toIdx = closestIdx(toTime, times);\n\n        if (times[toIdx] > toTime) {\n            toIdx--;\n        }\n    }\n\n    if (fromIdx != null || toIdx != null) {\n        times = times.slice(fromIdx ?? 0, toIdx);\n        vals = vals.map(vals2 => vals2.slice(fromIdx ?? 0, toIdx));\n    }\n\n    return [times, ...vals];\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querycache/QueryCache.ts\nimport {\n  DataFrame,\n  DataQueryRequest,\n  dateTime,\n  durationToMilliseconds,\n  Field,\n  incrRoundDn,\n  isValidDuration,\n  parseDuration,\n} from '@grafana/data';\nimport { faro } from '@grafana/faro-web-sdk';\nimport { config, reportInteraction } from '@grafana/runtime';\n\nimport { amendTable, Table, trimTable } from '../gcopypaste/app/features/live/data/amendTimeSeries';\nimport { PromQuery } from '../types';\n\n// dashboardUID + panelId + refId\n// (must be stable across query changes, time range changes / interval changes / panel resizes / template variable changes)\ntype TargetIdent = string;\n\ntype RequestID = string;\n\n// query + template variables + interval + raw time range\n// used for full target cache busting -> full range re-query\ntype TargetSig = string;\n\ntype TimestampMs = number;\n\ntype SupportedQueryTypes = PromQuery;\n\n// string matching requirements defined in durationutil.ts\nexport const defaultPrometheusQueryOverlapWindow = '10m';\n\ninterface TargetCache {\n  sig: TargetSig;\n  prevTo: TimestampMs;\n  frames: DataFrame[];\n}\n\nexport interface CacheRequestInfo<T extends SupportedQueryTypes> {\n  requests: Array<DataQueryRequest<T>>;\n  targSigs: Map<TargetIdent, TargetSig>;\n  shouldCache: boolean;\n}\n\nexport interface DatasourceProfileData {\n  interval?: string;\n  expr: string;\n  datasource: string;\n}\n\ninterface ProfileData extends DatasourceProfileData {\n  identity: string;\n  bytes: number | null;\n  dashboardUID: string;\n  panelId?: number;\n  from: string;\n  queryRangeSeconds: number;\n  refreshIntervalMs: number;\n}\n\n/**\n * Get field identity\n * This is the string used to uniquely identify a field within a \"target\"\n * @param field\n */\nexport const getFieldIdent = (field: Field) => `${field.type}|${field.name}|${JSON.stringify(field.labels ?? '')}`;\n\n/**\n * NOMENCLATURE\n * Target: The request target (DataQueryRequest), i.e. a specific query reference within a panel\n * Ident: Identity: the string that is not expected to change\n * Sig: Signature: the string that is expected to change, upon which we wipe the cache fields\n */\nexport class QueryCache<T extends SupportedQueryTypes> {\n  private overlapWindowMs: number;\n  private getTargetSignature: (request: DataQueryRequest<T>, target: T) => string;\n  private getProfileData?: (request: DataQueryRequest<T>, target: T) => DatasourceProfileData;\n\n  private perfObeserver?: PerformanceObserver;\n  private shouldProfile: boolean;\n\n  // send profile events every 10 minutes\n  sendEventsInterval = 60000 * 10;\n\n  pendingRequestIdsToTargSigs = new Map<RequestID, ProfileData>();\n\n  pendingAccumulatedEvents = new Map<\n    string,\n    {\n      requestCount: number;\n      savedBytesTotal: number;\n      initialRequestSize: number;\n      lastRequestSize: number;\n      panelId: string;\n      dashId: string;\n      expr: string;\n      refreshIntervalMs: number;\n      sent: boolean;\n      datasource: string;\n      from: string;\n      queryRangeSeconds: number;\n    }\n  >();\n\n  cache = new Map<TargetIdent, TargetCache>();\n\n  constructor(options: {\n    getTargetSignature: (request: DataQueryRequest<T>, target: T) => string;\n    overlapString: string;\n    profileFunction?: (request: DataQueryRequest<T>, target: T) => DatasourceProfileData;\n  }) {\n    const unverifiedOverlap = options.overlapString;\n    if (isValidDuration(unverifiedOverlap)) {\n      const duration = parseDuration(unverifiedOverlap);\n      this.overlapWindowMs = durationToMilliseconds(duration);\n    } else {\n      const duration = parseDuration(defaultPrometheusQueryOverlapWindow);\n      this.overlapWindowMs = durationToMilliseconds(duration);\n    }\n\n    if (\n      (config.grafanaJavascriptAgent.enabled || config.featureToggles?.prometheusIncrementalQueryInstrumentation) &&\n      options.profileFunction !== undefined\n    ) {\n      this.profile();\n      this.shouldProfile = true;\n    } else {\n      this.shouldProfile = false;\n    }\n    this.getProfileData = options.profileFunction;\n    this.getTargetSignature = options.getTargetSignature;\n  }\n\n  private profile() {\n    // Check if PerformanceObserver is supported, and if we have Faro enabled for internal profiling\n    if (typeof PerformanceObserver === 'function') {\n      this.perfObeserver = new PerformanceObserver((list: PerformanceObserverEntryList) => {\n        list.getEntries().forEach((entry) => {\n          // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n          const entryTypeCast: PerformanceResourceTiming = entry as PerformanceResourceTiming;\n\n          // Safari support for this is coming in 16.4:\n          // https://caniuse.com/mdn-api_performanceresourcetiming_transfersize\n          // Gating that this exists to prevent runtime errors\n          const isSupported = typeof entryTypeCast?.transferSize === 'number';\n\n          if (entryTypeCast?.initiatorType === 'fetch' && isSupported) {\n            let fetchUrl = entryTypeCast.name;\n\n            if (fetchUrl.includes('/api/ds/query')) {\n              let match = fetchUrl.match(/requestId=([a-z\\d]+)/i);\n\n              if (match) {\n                let requestId = match[1];\n\n                const requestTransferSize = Math.round(entryTypeCast.transferSize);\n                const currentRequest = this.pendingRequestIdsToTargSigs.get(requestId);\n\n                if (currentRequest) {\n                  const entries = this.pendingRequestIdsToTargSigs.entries();\n\n                  for (let [, value] of entries) {\n                    if (value.identity === currentRequest.identity && value.bytes !== null) {\n                      const previous = this.pendingAccumulatedEvents.get(value.identity);\n\n                      const savedBytes = value.bytes - requestTransferSize;\n\n                      this.pendingAccumulatedEvents.set(value.identity, {\n                        datasource: value.datasource ?? 'N/A',\n                        requestCount: (previous?.requestCount ?? 0) + 1,\n                        savedBytesTotal: (previous?.savedBytesTotal ?? 0) + savedBytes,\n                        initialRequestSize: value.bytes,\n                        lastRequestSize: requestTransferSize,\n                        panelId: currentRequest.panelId?.toString() ?? '',\n                        dashId: currentRequest.dashboardUID ?? '',\n                        expr: currentRequest.expr ?? '',\n                        refreshIntervalMs: currentRequest.refreshIntervalMs ?? 0,\n                        sent: false,\n                        from: currentRequest.from ?? '',\n                        queryRangeSeconds: currentRequest.queryRangeSeconds ?? 0,\n                      });\n\n                      // We don't need to save each subsequent request, only the first one\n                      this.pendingRequestIdsToTargSigs.delete(requestId);\n\n                      return;\n                    }\n                  }\n\n                  // If we didn't return above, this should be the first request, let's save the observed size\n                  this.pendingRequestIdsToTargSigs.set(requestId, { ...currentRequest, bytes: requestTransferSize });\n                }\n              }\n            }\n          }\n        });\n      });\n\n      this.perfObeserver.observe({ type: 'resource', buffered: false });\n\n      setInterval(this.sendPendingTrackingEvents, this.sendEventsInterval);\n\n      // Send any pending profile information when the user navigates away\n      window.addEventListener('beforeunload', this.sendPendingTrackingEvents);\n    }\n  }\n\n  sendPendingTrackingEvents = () => {\n    const entries = this.pendingAccumulatedEvents.entries();\n\n    for (let [key, value] of entries) {\n      if (!value.sent) {\n        const event = {\n          datasource: value.datasource.toString(),\n          requestCount: value.requestCount.toString(),\n          savedBytesTotal: value.savedBytesTotal.toString(),\n          initialRequestSize: value.initialRequestSize.toString(),\n          lastRequestSize: value.lastRequestSize.toString(),\n          panelId: value.panelId.toString(),\n          dashId: value.dashId.toString(),\n          expr: value.expr.toString(),\n          refreshIntervalMs: value.refreshIntervalMs.toString(),\n          from: value.from.toString(),\n          queryRangeSeconds: value.queryRangeSeconds.toString(),\n        };\n\n        if (config.featureToggles.prometheusIncrementalQueryInstrumentation) {\n          reportInteraction('grafana_incremental_queries_profile', event);\n        } else if (faro.api.pushEvent) {\n          faro.api.pushEvent('incremental query response size', event, 'no-interaction', {\n            skipDedupe: true,\n          });\n        }\n\n        this.pendingAccumulatedEvents.set(key, {\n          ...value,\n          sent: true,\n          requestCount: 0,\n          savedBytesTotal: 0,\n          initialRequestSize: 0,\n          lastRequestSize: 0,\n        });\n      }\n    }\n  };\n\n  // can be used to change full range request to partial, split into multiple requests\n  requestInfo(request: DataQueryRequest<T>): CacheRequestInfo<T> {\n    // TODO: align from/to to interval to increase probability of hitting backend cache\n\n    const newFrom = request.range.from.valueOf();\n    const newTo = request.range.to.valueOf();\n\n    // only cache 'now'-relative queries (that can benefit from a backfill cache)\n    const shouldCache = request.rangeRaw?.to?.toString() === 'now';\n\n    // all targets are queried together, so we check for any that causes group cache invalidation & full re-query\n    let doPartialQuery = shouldCache;\n    let prevTo: TimestampMs | undefined = undefined;\n\n    const refreshIntervalMs = request.intervalMs;\n\n    // pre-compute reqTargSigs\n    const reqTargSigs = new Map<TargetIdent, TargetSig>();\n    request.targets.forEach((targ) => {\n      let targIdent = `${request.dashboardUID}|${request.panelId}|${targ.refId}`;\n      let targSig = this.getTargetSignature(request, targ); // ${request.maxDataPoints} ?\n\n      if (this.shouldProfile && this.getProfileData) {\n        this.pendingRequestIdsToTargSigs.set(request.requestId, {\n          ...this.getProfileData(request, targ),\n          identity: targIdent + '|' + targSig,\n          bytes: null,\n          panelId: request.panelId,\n          dashboardUID: request.dashboardUID ?? '',\n          from: request.rangeRaw?.from.toString() ?? '',\n          queryRangeSeconds: request.range.to.diff(request.range.from, 'seconds') ?? '',\n          refreshIntervalMs: refreshIntervalMs ?? 0,\n        });\n      }\n\n      reqTargSigs.set(targIdent, targSig);\n    });\n\n    // figure out if new query range or new target props trigger full cache invalidation & re-query\n    for (const [targIdent, targSig] of reqTargSigs) {\n      let cached = this.cache.get(targIdent);\n      let cachedSig = cached?.sig;\n\n      if (cachedSig !== targSig) {\n        doPartialQuery = false;\n      } else {\n        // only do partial queries when new request range follows prior request range (possibly with overlap)\n        // e.g. now-6h with refresh <= 6h\n        prevTo = cached?.prevTo ?? Infinity;\n\n        doPartialQuery = newTo > prevTo && newFrom <= prevTo;\n      }\n\n      if (!doPartialQuery) {\n        break;\n      }\n    }\n\n    if (doPartialQuery && prevTo) {\n      // clamp to make sure we don't re-query previous 10m when newFrom is ahead of it (e.g. 5min range, 30s refresh)\n      let newFromPartial = Math.max(prevTo - this.overlapWindowMs, newFrom);\n\n      const newToDate = dateTime(newTo);\n      const newFromPartialDate = dateTime(incrRoundDn(newFromPartial, request.intervalMs));\n\n      // modify to partial query\n      request = {\n        ...request,\n        range: {\n          ...request.range,\n          from: newFromPartialDate,\n          to: newToDate,\n        },\n      };\n    } else {\n      reqTargSigs.forEach((targSig, targIdent) => {\n        this.cache.delete(targIdent);\n      });\n    }\n\n    return {\n      requests: [request],\n      targSigs: reqTargSigs,\n      shouldCache,\n    };\n  }\n\n  // should amend existing cache with new frames and return full response\n  procFrames(\n    request: DataQueryRequest<T>,\n    requestInfo: CacheRequestInfo<T> | undefined,\n    respFrames: DataFrame[]\n  ): DataFrame[] {\n    if (requestInfo?.shouldCache) {\n      const newFrom = request.range.from.valueOf();\n      const newTo = request.range.to.valueOf();\n\n      // group frames by targets\n      const respByTarget = new Map<TargetIdent, DataFrame[]>();\n\n      respFrames.forEach((frame: DataFrame) => {\n        let targIdent = `${request.dashboardUID}|${request.panelId}|${frame.refId}`;\n\n        let frames = respByTarget.get(targIdent);\n\n        if (!frames) {\n          frames = [];\n          respByTarget.set(targIdent, frames);\n        }\n\n        frames.push(frame);\n      });\n\n      let outFrames: DataFrame[] = [];\n\n      respByTarget.forEach((respFrames, targIdent) => {\n        let cachedFrames = (targIdent ? this.cache.get(targIdent)?.frames : null) ?? [];\n\n        respFrames.forEach((respFrame: DataFrame) => {\n          // skip empty frames\n          if (respFrame.length === 0 || respFrame.fields.length === 0) {\n            return;\n          }\n\n          // frames are identified by their second (non-time) field's name + labels\n          // TODO: maybe also frame.meta.type?\n          let respFrameIdent = getFieldIdent(respFrame.fields[1]);\n\n          let cachedFrame = cachedFrames.find((cached) => getFieldIdent(cached.fields[1]) === respFrameIdent);\n\n          if (!cachedFrame) {\n            // append new unknown frames\n            cachedFrames.push(respFrame);\n          } else {\n            // we assume that fields cannot appear/disappear and will all exist in same order\n\n            // amend & re-cache\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            let prevTable: Table = cachedFrame.fields.map((field) => field.values) as Table;\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            let nextTable: Table = respFrame.fields.map((field) => field.values) as Table;\n\n            let amendedTable = amendTable(prevTable, nextTable);\n            if (amendedTable) {\n              for (let i = 0; i < amendedTable.length; i++) {\n                cachedFrame.fields[i].values = amendedTable[i];\n              }\n              cachedFrame.length = cachedFrame.fields[0].values.length;\n            }\n          }\n        });\n\n        // trim all frames to in-view range, evict those that end up with 0 length\n        let nonEmptyCachedFrames: DataFrame[] = [];\n\n        cachedFrames.forEach((frame) => {\n          // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n          let table: Table = frame.fields.map((field) => field.values) as Table;\n\n          let trimmed = trimTable(table, newFrom, newTo);\n\n          if (trimmed[0].length > 0) {\n            for (let i = 0; i < trimmed.length; i++) {\n              frame.fields[i].values = trimmed[i];\n            }\n            nonEmptyCachedFrames.push(frame);\n          }\n        });\n\n        this.cache.set(targIdent, {\n          sig: requestInfo.targSigs.get(targIdent)!,\n          frames: nonEmptyCachedFrames,\n          prevTo: newTo,\n        });\n\n        outFrames.push(...nonEmptyCachedFrames);\n      });\n\n      // transformV2 mutates field values for heatmap de-accum, and modifies field order, so we gotta clone here, for now :(\n      respFrames = outFrames.map((frame) => ({\n        ...frame,\n        fields: frame.fields.map((field) => ({\n          ...field,\n          config: {\n            ...field.config, // prevents mutatative exemplars links (re)enrichment\n          },\n          values: field.values.slice(),\n        })),\n      }));\n    }\n\n    return respFrames;\n  }\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/configuration/ExemplarSetting.tsx\nimport React, { useState } from 'react';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config, DataSourcePicker } from '@grafana/runtime';\nimport { Button, InlineField, Input, Switch, useTheme2 } from '@grafana/ui';\n\nimport { ExemplarTraceIdDestination } from '../types';\n\nimport { docsTip, overhaulStyles, PROM_CONFIG_LABEL_WIDTH } from './ConfigEditor';\n\ntype Props = {\n  value: ExemplarTraceIdDestination;\n  onChange: (value: ExemplarTraceIdDestination) => void;\n  onDelete: () => void;\n  disabled?: boolean;\n};\n\nexport function ExemplarSetting({ value, onChange, onDelete, disabled }: Props) {\n  const [isInternalLink, setIsInternalLink] = useState(Boolean(value.datasourceUid));\n\n  const theme = useTheme2();\n  const styles = overhaulStyles(theme);\n\n  return (\n    <div className=\"gf-form-group\">\n      <InlineField\n        label=\"Internal link\"\n        labelWidth={PROM_CONFIG_LABEL_WIDTH}\n        disabled={disabled}\n        tooltip={\n          <>\n            Enable this option if you have an internal link. When enabled, this reveals the data source selector. Select\n            the backend tracing data store for your exemplar data. {docsTip()}\n          </>\n        }\n        interactive={true}\n        className={styles.switchField}\n      >\n        <>\n          <Switch\n            value={isInternalLink}\n            data-testid={selectors.components.DataSource.Prometheus.configPage.internalLinkSwitch}\n            onChange={(ev) => setIsInternalLink(ev.currentTarget.checked)}\n          />\n        </>\n      </InlineField>\n\n      {isInternalLink ? (\n        <InlineField\n          label=\"Data source\"\n          labelWidth={PROM_CONFIG_LABEL_WIDTH}\n          tooltip={<>The data source the exemplar is going to navigate to. {docsTip()}</>}\n          disabled={disabled}\n          interactive={true}\n        >\n          <DataSourcePicker\n            filter={\n              config.featureToggles.azureMonitorPrometheusExemplars\n                ? undefined\n                : (ds) => ds.type !== 'grafana-azure-monitor-datasource'\n            }\n            tracing={true}\n            current={value.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds: DataSourceInstanceSettings) =>\n              onChange({\n                ...value,\n                datasourceUid: ds.uid,\n                url: undefined,\n              })\n            }\n          />\n        </InlineField>\n      ) : (\n        <InlineField\n          label=\"URL\"\n          labelWidth={PROM_CONFIG_LABEL_WIDTH}\n          tooltip={<>The URL of the trace backend the user would go to see its trace. {docsTip()}</>}\n          disabled={disabled}\n          interactive={true}\n        >\n          <Input\n            placeholder=\"https://example.com/${__value.raw}\"\n            spellCheck={false}\n            width={40}\n            value={value.url}\n            onChange={(event) =>\n              onChange({\n                ...value,\n                datasourceUid: undefined,\n                url: event.currentTarget.value,\n              })\n            }\n          />\n        </InlineField>\n      )}\n\n      <InlineField\n        label=\"URL Label\"\n        labelWidth={PROM_CONFIG_LABEL_WIDTH}\n        tooltip={<>Use to override the button label on the exemplar traceID field. {docsTip()}</>}\n        disabled={disabled}\n        interactive={true}\n      >\n        <Input\n          placeholder=\"Go to example.com\"\n          spellCheck={false}\n          width={40}\n          value={value.urlDisplayLabel}\n          onChange={(event) =>\n            onChange({\n              ...value,\n              urlDisplayLabel: event.currentTarget.value,\n            })\n          }\n        />\n      </InlineField>\n      <InlineField\n        label=\"Label name\"\n        labelWidth={PROM_CONFIG_LABEL_WIDTH}\n        tooltip={<>The name of the field in the labels object that should be used to get the traceID. {docsTip()}</>}\n        disabled={disabled}\n        interactive={true}\n      >\n        <Input\n          placeholder=\"traceID\"\n          spellCheck={false}\n          width={40}\n          value={value.name}\n          onChange={(event) =>\n            onChange({\n              ...value,\n              name: event.currentTarget.value,\n            })\n          }\n        />\n      </InlineField>\n      {!disabled && (\n        <InlineField label=\"Remove exemplar link\" labelWidth={PROM_CONFIG_LABEL_WIDTH} disabled={disabled}>\n          <Button\n            variant=\"destructive\"\n            title=\"Remove exemplar link\"\n            icon=\"times\"\n            onClick={(event) => {\n              event.preventDefault();\n              onDelete();\n            }}\n          />\n        </InlineField>\n      )}\n    </div>\n  );\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/configuration/ExemplarsSettings.tsx\nimport { css } from '@emotion/css';\nimport React from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { ConfigSubSection } from '@grafana/experimental';\nimport { Button, useTheme2 } from '@grafana/ui';\n\nimport { ExemplarTraceIdDestination } from '../types';\n\nimport { overhaulStyles } from './ConfigEditor';\nimport { ExemplarSetting } from './ExemplarSetting';\n\ntype Props = {\n  options?: ExemplarTraceIdDestination[];\n  onChange: (value: ExemplarTraceIdDestination[]) => void;\n  disabled?: boolean;\n};\n\nexport function ExemplarsSettings({ options, onChange, disabled }: Props) {\n  const theme = useTheme2();\n  const styles = overhaulStyles(theme);\n  return (\n    <div className={styles.sectionBottomPadding}>\n      <ConfigSubSection title=\"Exemplars\" className={styles.container}>\n        {options &&\n          options.map((option, index) => {\n            return (\n              <ExemplarSetting\n                key={index}\n                value={option}\n                onChange={(newField) => {\n                  const newOptions = [...options];\n                  newOptions.splice(index, 1, newField);\n                  onChange(newOptions);\n                }}\n                onDelete={() => {\n                  const newOptions = [...options];\n                  newOptions.splice(index, 1);\n                  onChange(newOptions);\n                }}\n                disabled={disabled}\n              />\n            );\n          })}\n\n        {!disabled && (\n          <Button\n            variant=\"secondary\"\n            data-testid={selectors.components.DataSource.Prometheus.configPage.exemplarsAddButton}\n            className={css({\n              marginBottom: '10px',\n            })}\n            icon=\"plus\"\n            onClick={(event) => {\n              event.preventDefault();\n              const newOptions = [...(options || []), { name: 'traceID' }];\n              onChange(newOptions);\n            }}\n          >\n            Add\n          </Button>\n        )}\n        {disabled && !options && <i>No exemplars configurations</i>}\n      </ConfigSubSection>\n    </div>\n  );\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/configuration/PromFlavorVersions.ts\nexport const PromFlavorVersions: { [index: string]: Array<{ value?: string; label: string }> } = {\n  Prometheus: [\n    { value: undefined, label: 'Please select' },\n    { value: '2.0.0', label: '< 2.14.x' },\n    { value: '2.14.0', label: '2.14.x' },\n    { value: '2.15.0', label: '2.15.x' },\n    { value: '2.16.0', label: '2.16.x' },\n    { value: '2.17.0', label: '2.17.x' },\n    { value: '2.18.0', label: '2.18.x' },\n    { value: '2.19.0', label: '2.19.x' },\n    { value: '2.20.0', label: '2.20.x' },\n    { value: '2.21.0', label: '2.21.x' },\n    { value: '2.22.0', label: '2.22.x' },\n    { value: '2.23.0', label: '2.23.x' },\n    { value: '2.24.0', label: '2.24.x' },\n    { value: '2.25.0', label: '2.25.x' },\n    { value: '2.26.0', label: '2.26.x' },\n    { value: '2.27.0', label: '2.27.x' },\n    { value: '2.28.0', label: '2.28.x' },\n    { value: '2.29.0', label: '2.29.x' },\n    { value: '2.30.0', label: '2.30.x' },\n    { value: '2.31.0', label: '2.31.x' },\n    { value: '2.32.0', label: '2.32.x' },\n    { value: '2.33.0', label: '2.33.x' },\n    { value: '2.34.0', label: '2.34.x' },\n    { value: '2.35.0', label: '2.35.x' },\n    { value: '2.36.0', label: '2.36.x' },\n    { value: '2.37.0', label: '2.37.x' },\n    { value: '2.38.0', label: '2.38.x' },\n    { value: '2.39.0', label: '2.39.x' },\n    { value: '2.40.0', label: '2.40.x' },\n    { value: '2.41.0', label: '2.41.x' },\n    { value: '2.42.0', label: '2.42.x' },\n    { value: '2.43.0', label: '2.43.x' },\n    { value: '2.44.0', label: '2.44.x' },\n    { value: '2.45.0', label: '2.45.x' },\n    { value: '2.46.0', label: '2.46.x' },\n    { value: '2.47.0', label: '2.47.x' },\n    { value: '2.48.0', label: '2.48.x' },\n    { value: '2.49.0', label: '2.49.x' },\n    { value: '2.50.0', label: '2.50.x' },\n\n    // This value will be returned for future versions of prometheus until we add new entries to this object\n    { value: '2.50.1', label: '> 2.50.x' },\n  ],\n  Mimir: [\n    { value: undefined, label: 'Please select' },\n    { value: '2.0.0', label: '2.0.x' },\n    { value: '2.1.0', label: '2.1.x' },\n    { value: '2.2.0', label: '2.2.x' },\n    { value: '2.3.0', label: '2.3.x' },\n    { value: '2.4.0', label: '2.4.x' },\n    { value: '2.5.0', label: '2.5.x' },\n    { value: '2.6.0', label: '2.6.x' },\n    { value: '2.7.0', label: '2.7.x' },\n    { value: '2.8.0', label: '2.8.x' },\n    { value: '2.9.0', label: '2.9.x' },\n    { value: '2.9.1', label: '> 2.9.x' },\n  ],\n  Thanos: [\n    { value: undefined, label: 'Please select' },\n    { value: '0.0.0', label: '< 0.16.x' },\n    { value: '0.16.0', label: '0.16.x' },\n    { value: '0.17.0', label: '0.17.x' },\n    { value: '0.18.0', label: '0.18.x' },\n    { value: '0.19.0', label: '0.19.x' },\n    { value: '0.20.0', label: '0.20.x' },\n    { value: '0.21.0', label: '0.21.x' },\n    { value: '0.22.0', label: '0.22.x' },\n    { value: '0.23.0', label: '0.23.x' },\n    { value: '0.24.0', label: '0.24.x' },\n    { value: '0.25.0', label: '0.25.x' },\n    { value: '0.26.0', label: '0.26.x' },\n    { value: '0.27.0', label: '0.27.x' },\n    { value: '0.28.0', label: '0.28.x' },\n    { value: '0.29.0', label: '0.29.x' },\n    { value: '0.30.0', label: '0.30.x' },\n    { value: '0.31.0', label: '0.31.x' },\n    { value: '0.31.1', label: '> 0.31.x' },\n  ],\n  Cortex: [\n    { value: undefined, label: 'Please select' },\n    { value: '0.0.0', label: '< 1.0.0' },\n    { value: '1.0.0', label: '1.0.0' },\n    { value: '1.1.0', label: '1.1.x' },\n    { value: '1.2.0', label: '1.2.x' },\n    { value: '1.3.0', label: '1.3.x' },\n    { value: '1.4.0', label: '1.4.x' },\n    { value: '1.5.0', label: '1.5.x' },\n    { value: '1.6.0', label: '1.6.x' },\n    { value: '1.7.0', label: '1.7.x' },\n    { value: '1.8.0', label: '1.8.x' },\n    { value: '1.9.0', label: '1.9.x' },\n    { value: '1.10.0', label: '1.10.x' },\n    { value: '1.11.0', label: '1.11.x' },\n    { value: '1.13.0', label: '1.13.x' },\n    { value: '1.14.0', label: '> 1.13.x' },\n  ],\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/configuration/PromSettings.tsx\nimport React, { SyntheticEvent, useState } from 'react';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOptionChecked,\n  SelectableValue,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { ConfigSubSection } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { InlineField, Input, Select, Switch, useTheme2 } from '@grafana/ui';\n\nimport { SUGGESTIONS_LIMIT } from '../language_provider';\nimport { QueryEditorMode } from '../querybuilder/shared/types';\nimport { defaultPrometheusQueryOverlapWindow } from '../querycache/QueryCache';\nimport { PromApplication, PrometheusCacheLevel, PromOptions } from '../types';\n\nimport { docsTip, overhaulStyles, PROM_CONFIG_LABEL_WIDTH, validateInput } from './ConfigEditor';\nimport { ExemplarsSettings } from './ExemplarsSettings';\nimport { PromFlavorVersions } from './PromFlavorVersions';\n\nconst httpOptions = [\n  { value: 'POST', label: 'POST' },\n  { value: 'GET', label: 'GET' },\n];\n\nconst editorOptions = [\n  { value: QueryEditorMode.Builder, label: 'Builder' },\n  { value: QueryEditorMode.Code, label: 'Code' },\n];\n\nconst cacheValueOptions = [\n  { value: PrometheusCacheLevel.Low, label: 'Low' },\n  { value: PrometheusCacheLevel.Medium, label: 'Medium' },\n  { value: PrometheusCacheLevel.High, label: 'High' },\n  { value: PrometheusCacheLevel.None, label: 'None' },\n];\n\ntype PrometheusSelectItemsType = Array<{ value: PromApplication; label: PromApplication }>;\n\nconst prometheusFlavorSelectItems: PrometheusSelectItemsType = [\n  { value: PromApplication.Prometheus, label: PromApplication.Prometheus },\n  { value: PromApplication.Cortex, label: PromApplication.Cortex },\n  { value: PromApplication.Mimir, label: PromApplication.Mimir },\n  { value: PromApplication.Thanos, label: PromApplication.Thanos },\n];\n\ntype Props = Pick<DataSourcePluginOptionsEditorProps<PromOptions>, 'options' | 'onOptionsChange'>;\n\n// single duration input\nexport const DURATION_REGEX = /^$|^\\d+(ms|[Mwdhmsy])$/;\n\n// multiple duration input\nexport const MULTIPLE_DURATION_REGEX = /(\\d+)(.+)/;\n\nexport const NON_NEGATIVE_INTEGER_REGEX = /^(0|[1-9]\\d*)(\\.\\d+)?(e\\+?\\d+)?$/; // non-negative integers, including scientific notation\n\nconst durationError = 'Value is not valid, you can use number with time unit specifier: y, M, w, d, h, m, s';\nexport const countError = 'Value is not valid, you can use non-negative integers, including scientific notation';\n\nexport const PromSettings = (props: Props) => {\n  const { options, onOptionsChange } = props;\n\n  // We are explicitly adding httpMethod so, it is correctly displayed in dropdown.\n  // This way, it is more predictable for users.\n  if (!options.jsonData.httpMethod) {\n    options.jsonData.httpMethod = 'POST';\n  }\n\n  const theme = useTheme2();\n  const styles = overhaulStyles(theme);\n\n  type ValidDuration = {\n    timeInterval: string;\n    queryTimeout: string;\n    incrementalQueryOverlapWindow: string;\n  };\n\n  const [validDuration, updateValidDuration] = useState<ValidDuration>({\n    timeInterval: '',\n    queryTimeout: '',\n    incrementalQueryOverlapWindow: '',\n  });\n\n  type ValidCount = {\n    codeModeMetricNamesSuggestionLimit: string;\n  };\n\n  const [validCount, updateValidCount] = useState<ValidCount>({\n    codeModeMetricNamesSuggestionLimit: '',\n  });\n\n  return (\n    <>\n      <ConfigSubSection title=\"Interval behaviour\" className={styles.container}>\n        <div className=\"gf-form-group\">\n          {/* Scrape interval */}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineField\n                label=\"Scrape interval\"\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={\n                  <>\n                    This interval is how frequently Prometheus scrapes targets. Set this to the typical scrape and\n                    evaluation interval configured in your Prometheus config file. If you set this to a greater value\n                    than your Prometheus config file interval, Grafana will evaluate the data according to this interval\n                    and you will see less data points. Defaults to 15s. {docsTip()}\n                  </>\n                }\n                interactive={true}\n                disabled={options.readOnly}\n              >\n                <>\n                  <Input\n                    className=\"width-20\"\n                    value={options.jsonData.timeInterval}\n                    spellCheck={false}\n                    placeholder=\"15s\"\n                    onChange={onChangeHandler('timeInterval', options, onOptionsChange)}\n                    onBlur={(e) =>\n                      updateValidDuration({\n                        ...validDuration,\n                        timeInterval: e.currentTarget.value,\n                      })\n                    }\n                    data-testid={selectors.components.DataSource.Prometheus.configPage.scrapeInterval}\n                  />\n                  {validateInput(validDuration.timeInterval, DURATION_REGEX, durationError)}\n                </>\n              </InlineField>\n            </div>\n          </div>\n          {/* Query Timeout */}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineField\n                label=\"Query timeout\"\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={<>Set the Prometheus query timeout. {docsTip()}</>}\n                interactive={true}\n                disabled={options.readOnly}\n              >\n                <>\n                  <Input\n                    className=\"width-20\"\n                    value={options.jsonData.queryTimeout}\n                    onChange={onChangeHandler('queryTimeout', options, onOptionsChange)}\n                    spellCheck={false}\n                    placeholder=\"60s\"\n                    onBlur={(e) =>\n                      updateValidDuration({\n                        ...validDuration,\n                        queryTimeout: e.currentTarget.value,\n                      })\n                    }\n                    data-testid={selectors.components.DataSource.Prometheus.configPage.queryTimeout}\n                  />\n                  {validateInput(validDuration.queryTimeout, DURATION_REGEX, durationError)}\n                </>\n              </InlineField>\n            </div>\n          </div>\n        </div>\n      </ConfigSubSection>\n\n      <ConfigSubSection title=\"Query editor\" className={styles.container}>\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form\">\n            <InlineField\n              label=\"Default editor\"\n              labelWidth={PROM_CONFIG_LABEL_WIDTH}\n              tooltip={<>Set default editor option for all users of this data source. {docsTip()}</>}\n              interactive={true}\n              disabled={options.readOnly}\n            >\n              <Select\n                aria-label={`Default Editor (Code or Builder)`}\n                options={editorOptions}\n                value={\n                  editorOptions.find((o) => o.value === options.jsonData.defaultEditor) ??\n                  editorOptions.find((o) => o.value === QueryEditorMode.Builder)\n                }\n                onChange={onChangeHandler('defaultEditor', options, onOptionsChange)}\n                width={40}\n                data-testid={selectors.components.DataSource.Prometheus.configPage.defaultEditor}\n              />\n            </InlineField>\n          </div>\n          <div className=\"gf-form\">\n            <InlineField\n              labelWidth={PROM_CONFIG_LABEL_WIDTH}\n              label=\"Disable metrics lookup\"\n              tooltip={\n                <>\n                  Checking this option will disable the metrics chooser and metric/label support in the query\n                  field&apos;s autocomplete. This helps if you have performance issues with bigger Prometheus instances.{' '}\n                  {docsTip()}\n                </>\n              }\n              interactive={true}\n              disabled={options.readOnly}\n              className={styles.switchField}\n            >\n              <Switch\n                value={options.jsonData.disableMetricsLookup ?? false}\n                onChange={onUpdateDatasourceJsonDataOptionChecked(props, 'disableMetricsLookup')}\n                id={selectors.components.DataSource.Prometheus.configPage.disableMetricLookup}\n              />\n            </InlineField>\n          </div>\n        </div>\n      </ConfigSubSection>\n\n      <ConfigSubSection title=\"Performance\" className={styles.container}>\n        {!options.jsonData.prometheusType && !options.jsonData.prometheusVersion && options.readOnly && (\n          <div className={styles.versionMargin}>\n            For more information on configuring prometheus type and version in data sources, see the{' '}\n            <a\n              className={styles.textUnderline}\n              href=\"https://grafana.com/docs/grafana/latest/administration/provisioning/\"\n            >\n              provisioning documentation\n            </a>\n            .\n          </div>\n        )}\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineField\n                label=\"Prometheus type\"\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={\n                  <>\n                    {/* , and attempt to detect the version */}\n                    Set this to the type of your prometheus database, e.g. Prometheus, Cortex, Mimir or Thanos. Changing\n                    this field will save your current settings. Certain types of Prometheus supports or does not support\n                    various APIs. For example, some types support regex matching for label queries to improve\n                    performance. Some types have an API for metadata. If you set this incorrectly you may experience odd\n                    behavior when querying metrics and labels. Please check your Prometheus documentation to ensure you\n                    enter the correct type. {docsTip()}\n                  </>\n                }\n                interactive={true}\n                disabled={options.readOnly}\n              >\n                <Select\n                  aria-label=\"Prometheus type\"\n                  options={prometheusFlavorSelectItems}\n                  value={prometheusFlavorSelectItems.find((o) => o.value === options.jsonData.prometheusType)}\n                  onChange={onChangeHandler('prometheusType', options, onOptionsChange)}\n                  width={40}\n                  data-testid={selectors.components.DataSource.Prometheus.configPage.prometheusType}\n                />\n              </InlineField>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            {options.jsonData.prometheusType && (\n              <div className=\"gf-form\">\n                <InlineField\n                  label={`${options.jsonData.prometheusType} version`}\n                  labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                  tooltip={\n                    <>\n                      Use this to set the version of your {options.jsonData.prometheusType} instance if it is not\n                      automatically configured. {docsTip()}\n                    </>\n                  }\n                  interactive={true}\n                  disabled={options.readOnly}\n                >\n                  <Select\n                    aria-label={`${options.jsonData.prometheusType} type`}\n                    options={PromFlavorVersions[options.jsonData.prometheusType]}\n                    value={PromFlavorVersions[options.jsonData.prometheusType]?.find(\n                      (o) => o.value === options.jsonData.prometheusVersion\n                    )}\n                    onChange={onChangeHandler('prometheusVersion', options, onOptionsChange)}\n                    width={40}\n                    data-testid={selectors.components.DataSource.Prometheus.configPage.prometheusVersion}\n                  />\n                </InlineField>\n              </div>\n            )}\n          </div>\n\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form max-width-30\">\n              <InlineField\n                label=\"Cache level\"\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={\n                  <>\n                    Sets the browser caching level for editor queries. Higher cache settings are recommended for high\n                    cardinality data sources.\n                  </>\n                }\n                interactive={true}\n                disabled={options.readOnly}\n              >\n                <Select\n                  width={40}\n                  onChange={onChangeHandler('cacheLevel', options, onOptionsChange)}\n                  options={cacheValueOptions}\n                  value={\n                    cacheValueOptions.find((o) => o.value === options.jsonData.cacheLevel) ?? PrometheusCacheLevel.Low\n                  }\n                  data-testid={selectors.components.DataSource.Prometheus.configPage.cacheLevel}\n                />\n              </InlineField>\n            </div>\n          </div>\n\n          {config.featureToggles.prometheusCodeModeMetricNamesSearch && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineField\n                  label=\"Metric names suggestion limit\"\n                  labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                  tooltip={\n                    <>\n                      The maximum number of metric names that may appear as autocomplete suggestions in the query\n                      editor&apos;s Code mode.\n                    </>\n                  }\n                  interactive={true}\n                  disabled={options.readOnly}\n                >\n                  <>\n                    <Input\n                      className=\"width-20\"\n                      value={options.jsonData.codeModeMetricNamesSuggestionLimit}\n                      onChange={onChangeHandler('codeModeMetricNamesSuggestionLimit', options, onOptionsChange)}\n                      spellCheck={false}\n                      placeholder={SUGGESTIONS_LIMIT.toString()}\n                      onBlur={(e) =>\n                        updateValidCount({\n                          ...validCount,\n                          codeModeMetricNamesSuggestionLimit: e.currentTarget.value,\n                        })\n                      }\n                      data-testid={\n                        selectors.components.DataSource.Prometheus.configPage.codeModeMetricNamesSuggestionLimit\n                      }\n                    />\n                    {validateInput(\n                      validCount.codeModeMetricNamesSuggestionLimit,\n                      NON_NEGATIVE_INTEGER_REGEX,\n                      countError\n                    )}\n                  </>\n                </InlineField>\n              </div>\n            </div>\n          )}\n\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form max-width-30\">\n              <InlineField\n                label=\"Incremental querying (beta)\"\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={\n                  <>\n                    This feature will change the default behavior of relative queries to always request fresh data from\n                    the prometheus instance, instead query results will be cached, and only new records are requested.\n                    Turn this on to decrease database and network load.\n                  </>\n                }\n                interactive={true}\n                className={styles.switchField}\n                disabled={options.readOnly}\n              >\n                <Switch\n                  value={options.jsonData.incrementalQuerying ?? false}\n                  onChange={onUpdateDatasourceJsonDataOptionChecked(props, 'incrementalQuerying')}\n                  id={selectors.components.DataSource.Prometheus.configPage.incrementalQuerying}\n                />\n              </InlineField>\n            </div>\n          </div>\n\n          <div className=\"gf-form-inline\">\n            {options.jsonData.incrementalQuerying && (\n              <InlineField\n                label=\"Query overlap window\"\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={\n                  <>\n                    Set a duration like 10m or 120s or 0s. Default of 10 minutes. This duration will be added to the\n                    duration of each incremental request.\n                  </>\n                }\n                interactive={true}\n                disabled={options.readOnly}\n              >\n                <>\n                  <Input\n                    onBlur={(e) =>\n                      updateValidDuration({\n                        ...validDuration,\n                        incrementalQueryOverlapWindow: e.currentTarget.value,\n                      })\n                    }\n                    className=\"width-20\"\n                    value={options.jsonData.incrementalQueryOverlapWindow ?? defaultPrometheusQueryOverlapWindow}\n                    onChange={onChangeHandler('incrementalQueryOverlapWindow', options, onOptionsChange)}\n                    spellCheck={false}\n                    data-testid={selectors.components.DataSource.Prometheus.configPage.queryOverlapWindow}\n                  />\n                  {validateInput(validDuration.incrementalQueryOverlapWindow, MULTIPLE_DURATION_REGEX, durationError)}\n                </>\n              </InlineField>\n            )}\n          </div>\n\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form max-width-30\">\n              <InlineField\n                label=\"Disable recording rules (beta)\"\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={<>This feature will disable recording rules Turn this on to improve dashboard performance</>}\n                interactive={true}\n                className={styles.switchField}\n                disabled={options.readOnly}\n              >\n                <Switch\n                  value={options.jsonData.disableRecordingRules ?? false}\n                  onChange={onUpdateDatasourceJsonDataOptionChecked(props, 'disableRecordingRules')}\n                  id={selectors.components.DataSource.Prometheus.configPage.disableRecordingRules}\n                />\n              </InlineField>\n            </div>\n          </div>\n        </div>\n      </ConfigSubSection>\n\n      <ConfigSubSection title=\"Other\" className={styles.container}>\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form max-width-30\">\n              <InlineField\n                label=\"Custom query parameters\"\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={\n                  <>\n                    Add custom parameters to the Prometheus query URL. For example timeout, partial_response, dedup, or\n                    max_source_resolution. Multiple parameters should be concatenated together with an ‘&’. {docsTip()}\n                  </>\n                }\n                interactive={true}\n                disabled={options.readOnly}\n              >\n                <Input\n                  className=\"width-20\"\n                  value={options.jsonData.customQueryParameters}\n                  onChange={onChangeHandler('customQueryParameters', options, onOptionsChange)}\n                  spellCheck={false}\n                  placeholder=\"Example: max_source_resolution=5m&timeout=10\"\n                  data-testid={selectors.components.DataSource.Prometheus.configPage.customQueryParameters}\n                />\n              </InlineField>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            {/* HTTP Method */}\n            <div className=\"gf-form\">\n              <InlineField\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={\n                  <>\n                    You can use either POST or GET HTTP method to query your Prometheus data source. POST is the\n                    recommended method as it allows bigger queries. Change this to GET if you have a Prometheus version\n                    older than 2.1 or if POST requests are restricted in your network. {docsTip()}\n                  </>\n                }\n                interactive={true}\n                label=\"HTTP method\"\n                disabled={options.readOnly}\n              >\n                <Select\n                  width={40}\n                  aria-label=\"Select HTTP method\"\n                  options={httpOptions}\n                  value={httpOptions.find((o) => o.value === options.jsonData.httpMethod)}\n                  onChange={onChangeHandler('httpMethod', options, onOptionsChange)}\n                  data-testid={selectors.components.DataSource.Prometheus.configPage.httpMethod}\n                />\n              </InlineField>\n            </div>\n          </div>\n        </div>\n      </ConfigSubSection>\n\n      <ExemplarsSettings\n        options={options.jsonData.exemplarTraceIdDestinations}\n        onChange={(exemplarOptions) =>\n          updateDatasourcePluginJsonDataOption(\n            { onOptionsChange, options },\n            'exemplarTraceIdDestinations',\n            exemplarOptions\n          )\n        }\n        disabled={options.readOnly}\n      />\n    </>\n  );\n};\n\nexport const getValueFromEventItem = (eventItem: SyntheticEvent<HTMLInputElement> | SelectableValue<string>) => {\n  if (!eventItem) {\n    return '';\n  }\n\n  if ('currentTarget' in eventItem) {\n    return eventItem.currentTarget.value;\n  }\n\n  return eventItem.value;\n};\n\nconst onChangeHandler =\n  (key: keyof PromOptions, options: Props['options'], onOptionsChange: Props['onOptionsChange']) =>\n  (eventItem: SyntheticEvent<HTMLInputElement> | SelectableValue<string>) => {\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        [key]: getValueFromEventItem(eventItem),\n      },\n    });\n  };\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/configuration/ConfigEditor.tsx\nimport { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps, GrafanaTheme2 } from '@grafana/data';\nimport { ConfigSection, DataSourceDescription, AdvancedHttpSettings } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Alert, FieldValidationMessage, useTheme2 } from '@grafana/ui';\n\nimport { PromOptions } from '../types';\n\nimport { AlertingSettingsOverhaul } from './AlertingSettingsOverhaul';\nimport { DataSourceHttpSettingsOverhaul } from './DataSourceHttpSettingsOverhaul';\nimport { PromSettings } from './PromSettings';\n\nexport const PROM_CONFIG_LABEL_WIDTH = 30;\n\nexport type PrometheusConfigProps = DataSourcePluginOptionsEditorProps<PromOptions>;\n\nexport const ConfigEditor = (props: PrometheusConfigProps) => {\n  const { options, onOptionsChange } = props;\n  const theme = useTheme2();\n  const styles = overhaulStyles(theme);\n\n  return (\n    <>\n      {options.access === 'direct' && (\n        <Alert title=\"Error\" severity=\"error\">\n          Browser access mode in the Prometheus data source is no longer available. Switch to server access mode.\n        </Alert>\n      )}\n      <DataSourceDescription\n        dataSourceName=\"Prometheus\"\n        docsLink=\"https://grafana.com/docs/grafana/latest/datasources/prometheus/configure-prometheus-data-source/\"\n      />\n      <hr className={`${styles.hrTopSpace} ${styles.hrBottomSpace}`} />\n      <DataSourceHttpSettingsOverhaul\n        options={options}\n        onOptionsChange={onOptionsChange}\n        secureSocksDSProxyEnabled={config.secureSocksDSProxyEnabled}\n      />\n      <hr />\n      <ConfigSection\n        className={styles.advancedSettings}\n        title=\"Advanced settings\"\n        description=\"Additional settings are optional settings that can be configured for more control over your data source.\"\n      >\n        <AdvancedHttpSettings\n          className={styles.advancedHTTPSettingsMargin}\n          config={options}\n          onChange={onOptionsChange}\n        />\n        <AlertingSettingsOverhaul<PromOptions> options={options} onOptionsChange={onOptionsChange} />\n        <PromSettings options={options} onOptionsChange={onOptionsChange} />\n      </ConfigSection>\n    </>\n  );\n};\n\n/**\n * Use this to return a url in a tooltip in a field. Don't forget to make the field interactive to be able to click on the tooltip\n * @param url\n * @returns\n */\nexport function docsTip(url?: string) {\n  const docsUrl = 'https://grafana.com/docs/grafana/latest/datasources/prometheus/#configure-the-data-source';\n\n  return (\n    <a href={url ? url : docsUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n      Visit docs for more details here.\n    </a>\n  );\n}\n\nexport const validateInput = (\n  input: string,\n  pattern: string | RegExp,\n  errorMessage?: string\n): boolean | JSX.Element => {\n  const defaultErrorMessage = 'Value is not valid';\n  if (input && !input.match(pattern)) {\n    return <FieldValidationMessage>{errorMessage ? errorMessage : defaultErrorMessage}</FieldValidationMessage>;\n  } else {\n    return true;\n  }\n};\n\nexport function overhaulStyles(theme: GrafanaTheme2) {\n  return {\n    additionalSettings: css({\n      marginBottom: '25px',\n    }),\n    secondaryGrey: css({\n      color: theme.colors.secondary.text,\n      opacity: '65%',\n    }),\n    inlineError: css({\n      margin: '0px 0px 4px 245px',\n    }),\n    switchField: css({\n      alignItems: 'center',\n    }),\n    sectionHeaderPadding: css({\n      paddingTop: '32px',\n    }),\n    sectionBottomPadding: css({\n      paddingBottom: '28px',\n    }),\n    subsectionText: css({\n      fontSize: '12px',\n    }),\n    hrBottomSpace: css({\n      marginBottom: '56px',\n    }),\n    hrTopSpace: css({\n      marginTop: '50px',\n    }),\n    textUnderline: css({\n      textDecoration: 'underline',\n    }),\n    versionMargin: css({\n      marginBottom: '12px',\n    }),\n    advancedHTTPSettingsMargin: css({\n      margin: '24px 0 8px 0',\n    }),\n    advancedSettings: css({\n      paddingTop: '32px',\n    }),\n    alertingTop: css({\n      marginTop: '40px !important',\n    }),\n    overhaulPageHeading: css({\n      fontWeight: 400,\n    }),\n    container: css({\n      maxwidth: 578,\n    }),\n  };\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/metrics-modal/ResultsTable.tsx\nimport { css } from '@emotion/css';\nimport React, { ReactElement } from 'react';\nimport Highlighter from 'react-highlight-words';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Icon, Tooltip, useTheme2 } from '@grafana/ui';\n\nimport { docsTip } from '../../../configuration/ConfigEditor';\nimport { PromVisualQuery } from '../../types';\n\nimport { tracking } from './state/helpers';\nimport { MetricsModalState } from './state/state';\nimport { MetricData, MetricsData } from './types';\n\ntype ResultsTableProps = {\n  metrics: MetricsData;\n  onChange: (query: PromVisualQuery) => void;\n  onClose: () => void;\n  query: PromVisualQuery;\n  state: MetricsModalState;\n  disableTextWrap: boolean;\n};\n\nexport function ResultsTable(props: ResultsTableProps) {\n  const { metrics, onChange, onClose, query, state, disableTextWrap } = props;\n\n  const theme = useTheme2();\n  const styles = getStyles(theme, disableTextWrap);\n\n  function selectMetric(metric: MetricData) {\n    if (metric.value) {\n      onChange({ ...query, metric: metric.value });\n      tracking('grafana_prom_metric_encycopedia_tracking', state, metric.value);\n      onClose();\n    }\n  }\n\n  function metaRows(metric: MetricData) {\n    if (state.fullMetaSearch && metric) {\n      return (\n        <>\n          <td>{displayType(metric.type ?? '')}</td>\n          <td>\n            <Highlighter\n              textToHighlight={metric.description ?? ''}\n              searchWords={state.metaHaystackMatches}\n              autoEscape\n              highlightClassName={styles.matchHighLight}\n            />\n          </td>\n        </>\n      );\n    } else {\n      return (\n        <>\n          <td>{displayType(metric.type ?? '')}</td>\n          <td>{metric.description ?? ''}</td>\n        </>\n      );\n    }\n  }\n\n  function addHelpIcon(fullType: string, descriptiveType: string, link: string) {\n    return (\n      <>\n        {fullType}\n        <span className={styles.tooltipSpace}>\n          <Tooltip\n            content={\n              <>\n                When creating a {descriptiveType}, Prometheus exposes multiple series with the type counter.{' '}\n                {docsTip(link)}\n              </>\n            }\n            placement=\"bottom-start\"\n            interactive={true}\n          >\n            <Icon name=\"info-circle\" size=\"xs\" />\n          </Tooltip>\n        </span>\n      </>\n    );\n  }\n\n  function displayType(type: string | null) {\n    if (!type) {\n      return '';\n    }\n\n    if (type.includes('(summary)')) {\n      return addHelpIcon(type, 'summary', 'https://prometheus.io/docs/concepts/metric_types/#summary');\n    }\n\n    if (type.includes('(histogram)')) {\n      return addHelpIcon(type, 'histogram', 'https://prometheus.io/docs/concepts/metric_types/#histogram');\n    }\n\n    return type;\n  }\n\n  function noMetricsMessages(): ReactElement {\n    let message;\n\n    if (!state.fuzzySearchQuery) {\n      message = 'There are no metrics found in the data source.';\n    }\n\n    if (query.labels.length > 0) {\n      message = 'There are no metrics found. Try to expand your label filters.';\n    }\n\n    if (state.fuzzySearchQuery || state.selectedTypes.length > 0) {\n      message = 'There are no metrics found. Try to expand your search and filters.';\n    }\n\n    return (\n      <tr className={styles.noResults}>\n        <td colSpan={3}>{message}</td>\n      </tr>\n    );\n  }\n\n  function textHighlight(state: MetricsModalState) {\n    if (state.useBackend) {\n      // highlight the input only for the backend search\n      // this highlight is equivalent to how the metric select highlights\n      // look into matching on regex input\n      return [state.fuzzySearchQuery];\n    } else if (state.fullMetaSearch) {\n      // highlight the matches in the ufuzzy metaHaystack\n      return state.metaHaystackMatches;\n    } else {\n      // highlight the ufuzzy name matches\n      return state.nameHaystackMatches;\n    }\n  }\n\n  return (\n    <table className={styles.table}>\n      <thead className={styles.stickyHeader}>\n        <tr>\n          <th className={`${styles.nameWidth} ${styles.tableHeaderPadding}`}>Name</th>\n          {state.hasMetadata && (\n            <>\n              <th className={`${styles.typeWidth} ${styles.tableHeaderPadding}`}>Type</th>\n              <th className={`${styles.descriptionWidth} ${styles.tableHeaderPadding}`}>Description</th>\n            </>\n          )}\n          <th className={styles.selectButtonWidth}> </th>\n        </tr>\n      </thead>\n      <tbody>\n        <>\n          {metrics.length > 0 &&\n            metrics.map((metric: MetricData, idx: number) => {\n              return (\n                <tr key={metric?.value ?? idx} className={styles.row}>\n                  <td className={styles.nameOverflow}>\n                    <Highlighter\n                      textToHighlight={metric?.value ?? ''}\n                      searchWords={textHighlight(state)}\n                      autoEscape\n                      highlightClassName={styles.matchHighLight}\n                    />\n                  </td>\n                  {state.hasMetadata && metaRows(metric)}\n                  <td>\n                    <Button\n                      size=\"md\"\n                      variant=\"secondary\"\n                      onClick={() => selectMetric(metric)}\n                      className={styles.centerButton}\n                    >\n                      Select\n                    </Button>\n                  </td>\n                </tr>\n              );\n            })}\n          {metrics.length === 0 && !state.isLoading && noMetricsMessages()}\n        </>\n      </tbody>\n    </table>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2, disableTextWrap: boolean) => {\n  return {\n    table: css({\n      tableLayout: disableTextWrap ? undefined : 'fixed',\n      borderRadius: theme.shape.radius.default,\n      width: '100%',\n      whiteSpace: disableTextWrap ? 'nowrap' : 'normal',\n      td: {\n        padding: theme.spacing(1),\n      },\n      'td,th': {\n        minWidth: theme.spacing(3),\n        borderBottom: `1px solid ${theme.colors.border.weak}`,\n      },\n    }),\n    row: css({\n      label: 'row',\n      borderBottom: `1px solid ${theme.colors.border.weak}`,\n      '&:last-child': {\n        borderBottom: 0,\n      },\n    }),\n    tableHeaderPadding: css({\n      padding: '8px',\n    }),\n    matchHighLight: css({\n      background: 'inherit',\n      color: theme.components.textHighlight.text,\n      backgroundColor: theme.components.textHighlight.background,\n    }),\n    nameWidth: css({\n      width: disableTextWrap ? undefined : '37.5%',\n    }),\n    nameOverflow: css({\n      overflowWrap: disableTextWrap ? undefined : 'anywhere',\n    }),\n    typeWidth: css({\n      width: disableTextWrap ? undefined : '15%',\n    }),\n    descriptionWidth: css({\n      width: disableTextWrap ? undefined : '35%',\n    }),\n    selectButtonWidth: css({\n      width: disableTextWrap ? undefined : '12.5%',\n    }),\n    stickyHeader: css({\n      position: 'sticky',\n      top: 0,\n      backgroundColor: theme.colors.background.primary,\n    }),\n    noResults: css({\n      textAlign: 'center',\n      color: theme.colors.text.secondary,\n    }),\n    tooltipSpace: css({\n      marginLeft: '4px',\n    }),\n    centerButton: css({\n      display: 'block',\n      margin: 'auto',\n      border: 'none',\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/metrics-modal/state/state.ts\nimport { SelectableValue } from '@grafana/data';\n\nimport { PromVisualQuery } from '../../../types';\nimport { HaystackDictionary, MetricsData } from '../types';\n\nexport const DEFAULT_RESULTS_PER_PAGE = 100;\nexport const MAXIMUM_RESULTS_PER_PAGE = 1000;\n\n/**\n * Initial state for the metrics explorer\n * @returns\n */\nexport function initialState(query?: PromVisualQuery): MetricsModalState {\n  return {\n    isLoading: true,\n    metrics: [],\n    hasMetadata: true,\n    metaHaystackDictionary: {},\n    metaHaystackMatches: [],\n    metaHaystackOrder: [],\n    nameHaystackDictionary: {},\n    nameHaystackOrder: [],\n    nameHaystackMatches: [],\n    totalMetricCount: 0,\n    filteredMetricCount: null,\n    resultsPerPage: DEFAULT_RESULTS_PER_PAGE,\n    pageNum: 1,\n    fuzzySearchQuery: '',\n    fullMetaSearch: query?.fullMetaSearch ?? false,\n    includeNullMetadata: query?.includeNullMetadata ?? true,\n    selectedTypes: [],\n    useBackend: query?.useBackend ?? false,\n    disableTextWrap: query?.disableTextWrap ?? false,\n    showAdditionalSettings: false,\n  };\n}\n\n/**\n * The metrics explorer state object\n */\nexport interface MetricsModalState {\n  /** Used for the loading spinner */\n  isLoading: boolean;\n  /**\n   * Initial collection of metrics.\n   * The frontend filters do not impact this, but\n   * it is reduced by the backend search.\n   */\n  metrics: MetricsData;\n  /** Field for disabling type select and switches that rely on metadata */\n  hasMetadata: boolean;\n  /** Used to display metrics and help with fuzzy order */\n  nameHaystackDictionary: HaystackDictionary;\n  /** Used to sort name fuzzy search by relevance */\n  nameHaystackOrder: string[];\n  /** Used to highlight text in fuzzy matches */\n  nameHaystackMatches: string[];\n  /** Used to display metrics and help with fuzzy order for search across all metadata */\n  metaHaystackDictionary: HaystackDictionary;\n  /** Used to sort meta fuzzy search by relevance */\n  metaHaystackOrder: string[];\n  /** Used to highlight text in fuzzy matches */\n  metaHaystackMatches: string[];\n  /** Total results computed on initialization */\n  totalMetricCount: number;\n  /** Set after filtering metrics */\n  filteredMetricCount: number | null;\n  /** Pagination field for showing results in table */\n  resultsPerPage: number;\n  /** Pagination field */\n  pageNum: number;\n  /** The text query used to match metrics */\n  fuzzySearchQuery: string;\n  /** Enables the fuzzy meatadata search */\n  fullMetaSearch: boolean;\n  /** Includes results that are missing type and description */\n  includeNullMetadata: boolean;\n  /** Filter by prometheus type */\n  selectedTypes: Array<SelectableValue<string>>;\n  /** Filter by the series match endpoint instead of the fuzzy search */\n  useBackend: boolean;\n  /** Disable text wrap for descriptions in the results table */\n  disableTextWrap: boolean;\n  /** Display toggle switches for settings */\n  showAdditionalSettings: boolean;\n}\n\n/**\n * Type for the useEffect get metadata function\n */\nexport type MetricsModalMetadata = {\n  isLoading: boolean;\n  metrics: MetricsData;\n  hasMetadata: boolean;\n  metaHaystackDictionary: HaystackDictionary;\n  nameHaystackDictionary: HaystackDictionary;\n  totalMetricCount: number;\n  filteredMetricCount: number | null;\n};\n\n// for updating the settings in the PromQuery model\nexport function getSettings(visQuery: PromVisualQuery): MetricsModalSettings {\n  return {\n    useBackend: visQuery?.useBackend ?? false,\n    disableTextWrap: visQuery?.disableTextWrap ?? false,\n    fullMetaSearch: visQuery?.fullMetaSearch ?? false,\n    includeNullMetadata: visQuery.includeNullMetadata ?? false,\n  };\n}\n\nexport type MetricsModalSettings = {\n  useBackend?: boolean;\n  disableTextWrap?: boolean;\n  fullMetaSearch?: boolean;\n  includeNullMetadata?: boolean;\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/metrics-modal/styles.ts\nimport { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getStyles = (theme: GrafanaTheme2, disableTextWrap: boolean) => {\n  return {\n    modal: css({\n      width: '85vw',\n      [theme.breakpoints.down('md')]: {\n        width: '100%',\n      },\n      [theme.breakpoints.up('xl')]: {\n        width: '60%',\n      },\n    }),\n    inputWrapper: css({\n      display: 'flex',\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n    }),\n    inputItemFirst: css({\n      flexBasis: '40%',\n      paddingRight: '16px',\n      [theme.breakpoints.down('md')]: {\n        paddingRight: '0px',\n        paddingBottom: '16px',\n      },\n    }),\n    inputItem: css({\n      flexGrow: 1,\n      flexBasis: '20%',\n      [theme.breakpoints.down('md')]: {\n        minWidth: '100%',\n      },\n    }),\n    selectWrapper: css({\n      marginBottom: theme.spacing(1),\n    }),\n    resultsAmount: css({\n      color: theme.colors.text.secondary,\n      fontSize: '0.85rem',\n      padding: '0 0 4px 0',\n    }),\n    resultsData: css({\n      margin: `4px 0 ${theme.spacing(2)} 0`,\n    }),\n    resultsDataCount: css({\n      margin: 0,\n    }),\n    resultsDataFiltered: css({\n      color: theme.colors.text.secondary,\n      textAlign: 'center',\n      border: 'solid 1px rgba(204, 204, 220, 0.25)',\n      padding: '7px',\n    }),\n    resultsDataFilteredText: css({\n      display: 'inline',\n      verticalAlign: 'text-top',\n    }),\n    results: css({\n      height: 'calc(80vh - 310px)',\n      overflowY: 'scroll',\n    }),\n    resultsFooter: css({\n      marginTop: '24px',\n      display: 'flex',\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      position: 'sticky',\n    }),\n    currentlySelected: css({\n      color: 'grey',\n      opacity: '75%',\n      fontSize: '0.75rem',\n    }),\n    loadingSpinner: css({\n      visibility: 'hidden',\n    }),\n    visible: css({\n      visibility: 'visible',\n    }),\n    settingsBtn: css({\n      float: 'right',\n    }),\n    noBorder: css({\n      border: 'none',\n    }),\n    resultsPerPageLabel: css({\n      color: theme.colors.text.secondary,\n      opacity: '75%',\n      paddingTop: '5px',\n      fontSize: '0.85rem',\n      marginRight: '8px',\n    }),\n    resultsPerPageWrapper: css({\n      display: 'flex',\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/metrics-modal/uFuzzy.ts\nimport uFuzzy from '@leeoniya/ufuzzy';\nimport { debounce as debounceLodash } from 'lodash';\n\nconst uf = new uFuzzy({\n  intraMode: 1,\n  intraIns: 1,\n  intraSub: 1,\n  intraTrn: 1,\n  intraDel: 1,\n});\n\nexport function fuzzySearch(haystack: string[], query: string, dispatcher: (data: string[][]) => void) {\n  const [idxs, info, order] = uf.search(haystack, query, 0, 1e5);\n\n  let haystackOrder: string[] = [];\n  let matchesSet: Set<string> = new Set();\n  if (idxs && order) {\n    /**\n     * get the fuzzy matches for hilighting\n     * @param part\n     * @param matched\n     */\n    const mark = (part: string, matched: boolean) => {\n      if (matched) {\n        matchesSet.add(part);\n      }\n    };\n\n    // Iterate to create the order of needles(queries) and the matches\n    for (let i = 0; i < order.length; i++) {\n      let infoIdx = order[i];\n\n      /** Evaluate the match, get the matches for highlighting */\n      uFuzzy.highlight(haystack[info.idx[infoIdx]], info.ranges[infoIdx], mark);\n      /** Get the order */\n      haystackOrder.push(haystack[info.idx[infoIdx]]);\n    }\n\n    dispatcher([haystackOrder, [...matchesSet]]);\n  } else if (!query) {\n    dispatcher([[], []]);\n  }\n}\n\nexport const debouncedFuzzySearch = debounceLodash(fuzzySearch, 300);\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/metrics-modal/MetricsModal.tsx\nimport { cx } from '@emotion/css';\nimport { PayloadAction, createSlice } from '@reduxjs/toolkit';\nimport debounce from 'debounce-promise';\nimport React, { useCallback, useEffect, useMemo, useReducer } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport {\n  Button,\n  ButtonGroup,\n  Icon,\n  Input,\n  Modal,\n  MultiSelect,\n  Pagination,\n  Spinner,\n  Toggletip,\n  useTheme2,\n} from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../../datasource';\nimport { PromVisualQuery } from '../../types';\n\nimport { AdditionalSettings } from './AdditionalSettings';\nimport { FeedbackLink } from './FeedbackLink';\nimport { ResultsTable } from './ResultsTable';\nimport {\n  calculatePageList,\n  calculateResultsPerPage,\n  displayedMetrics,\n  getBackendSearchMetrics,\n  placeholders,\n  promTypes,\n  setMetrics,\n  tracking,\n} from './state/helpers';\nimport {\n  DEFAULT_RESULTS_PER_PAGE,\n  initialState,\n  MAXIMUM_RESULTS_PER_PAGE,\n  MetricsModalMetadata,\n  // stateSlice,\n} from './state/state';\nimport { getStyles } from './styles';\nimport { MetricsData, PromFilterOption } from './types';\nimport { debouncedFuzzySearch } from './uFuzzy';\n\nexport type MetricsModalProps = {\n  datasource: PrometheusDatasource;\n  isOpen: boolean;\n  query: PromVisualQuery;\n  onClose: () => void;\n  onChange: (query: PromVisualQuery) => void;\n  initialMetrics: string[];\n};\n\nexport const MetricsModal = (props: MetricsModalProps) => {\n  const { datasource, isOpen, onClose, onChange, query, initialMetrics } = props;\n\n  const [state, dispatch] = useReducer(stateSlice.reducer, initialState(query));\n\n  const theme = useTheme2();\n  const styles = getStyles(theme, state.disableTextWrap);\n\n  /**\n   * loads metrics and metadata on opening modal and switching off useBackend\n   */\n  const updateMetricsMetadata = useCallback(async () => {\n    // *** Loading Gif\n    dispatch(setIsLoading(true));\n\n    const data: MetricsModalMetadata = await setMetrics(datasource, query, initialMetrics);\n    dispatch(\n      buildMetrics({\n        isLoading: false,\n        hasMetadata: data.hasMetadata,\n        metrics: data.metrics,\n        metaHaystackDictionary: data.metaHaystackDictionary,\n        nameHaystackDictionary: data.nameHaystackDictionary,\n        totalMetricCount: data.metrics.length,\n        filteredMetricCount: data.metrics.length,\n      })\n    );\n  }, [query, datasource, initialMetrics]);\n\n  useEffect(() => {\n    updateMetricsMetadata();\n  }, [updateMetricsMetadata]);\n\n  const typeOptions: SelectableValue[] = promTypes.map((t: PromFilterOption) => {\n    return {\n      value: t.value,\n      label: t.value,\n      description: t.description,\n    };\n  });\n\n  /**\n   * The backend debounced search\n   */\n  const debouncedBackendSearch = useMemo(\n    () =>\n      debounce(async (metricText: string) => {\n        dispatch(setIsLoading(true));\n\n        const metrics = await getBackendSearchMetrics(metricText, query.labels, datasource);\n\n        dispatch(\n          filterMetricsBackend({\n            metrics: metrics,\n            filteredMetricCount: metrics.length,\n            isLoading: false,\n          })\n        );\n      }, datasource.getDebounceTimeInMilliseconds()),\n    [datasource, query]\n  );\n\n  function fuzzyNameDispatch(haystackData: string[][]) {\n    dispatch(setNameHaystack(haystackData));\n  }\n\n  function fuzzyMetaDispatch(haystackData: string[][]) {\n    dispatch(setMetaHaystack(haystackData));\n  }\n\n  function searchCallback(query: string, fullMetaSearchVal: boolean) {\n    if (state.useBackend && query === '') {\n      // get all metrics data if a user erases everything in the input\n      updateMetricsMetadata();\n    } else if (state.useBackend) {\n      debouncedBackendSearch(query);\n    } else {\n      // search either the names or all metadata\n      // fuzzy search go!\n      if (fullMetaSearchVal) {\n        debouncedFuzzySearch(Object.keys(state.metaHaystackDictionary), query, fuzzyMetaDispatch);\n      } else {\n        debouncedFuzzySearch(Object.keys(state.nameHaystackDictionary), query, fuzzyNameDispatch);\n      }\n    }\n  }\n\n  /* Settings switches */\n  const additionalSettings = (\n    <AdditionalSettings\n      state={state}\n      onChangeFullMetaSearch={() => {\n        const newVal = !state.fullMetaSearch;\n        dispatch(setFullMetaSearch(newVal));\n        onChange({ ...query, fullMetaSearch: newVal });\n        searchCallback(state.fuzzySearchQuery, newVal);\n      }}\n      onChangeIncludeNullMetadata={() => {\n        dispatch(setIncludeNullMetadata(!state.includeNullMetadata));\n        onChange({ ...query, includeNullMetadata: !state.includeNullMetadata });\n      }}\n      onChangeDisableTextWrap={() => {\n        dispatch(setDisableTextWrap());\n        onChange({ ...query, disableTextWrap: !state.disableTextWrap });\n        tracking('grafana_prom_metric_encycopedia_disable_text_wrap_interaction', state, '');\n      }}\n      onChangeUseBackend={() => {\n        const newVal = !state.useBackend;\n        dispatch(setUseBackend(newVal));\n        onChange({ ...query, useBackend: newVal });\n        if (newVal === false) {\n          // rebuild the metrics metadata if we turn off useBackend\n          updateMetricsMetadata();\n        } else {\n          // check if there is text in the browse search and update\n          if (state.fuzzySearchQuery !== '') {\n            debouncedBackendSearch(state.fuzzySearchQuery);\n          }\n          // otherwise wait for user typing\n        }\n      }}\n    />\n  );\n\n  return (\n    <Modal\n      data-testid={metricsModaltestIds.metricModal}\n      isOpen={isOpen}\n      title=\"Metrics explorer\"\n      onDismiss={onClose}\n      aria-label=\"Browse metrics\"\n      className={styles.modal}\n    >\n      <FeedbackLink feedbackUrl=\"https://forms.gle/DEMAJHoAMpe3e54CA\" />\n      <div\n        className={styles.inputWrapper}\n        data-testid={selectors.components.DataSource.Prometheus.queryEditor.builder.metricsExplorer}\n      >\n        <div className={cx(styles.inputItem, styles.inputItemFirst)}>\n          <Input\n            autoFocus={true}\n            data-testid={metricsModaltestIds.searchMetric}\n            placeholder={placeholders.browse}\n            value={state.fuzzySearchQuery}\n            onInput={(e) => {\n              const value = e.currentTarget.value ?? '';\n              dispatch(setFuzzySearchQuery(value));\n              searchCallback(value, state.fullMetaSearch);\n            }}\n          />\n        </div>\n        {state.hasMetadata && (\n          <div className={styles.inputItem}>\n            <MultiSelect\n              data-testid={metricsModaltestIds.selectType}\n              inputId=\"my-select\"\n              options={typeOptions}\n              value={state.selectedTypes}\n              placeholder={placeholders.type}\n              onChange={(v) => dispatch(setSelectedTypes(v))}\n            />\n          </div>\n        )}\n        <div>\n          <Spinner className={`${styles.loadingSpinner} ${state.isLoading ? styles.visible : ''}`} />\n        </div>\n        <div className={styles.inputItem}>\n          <Toggletip\n            aria-label=\"Additional settings\"\n            content={additionalSettings}\n            placement=\"bottom-end\"\n            closeButton={false}\n          >\n            <ButtonGroup className={styles.settingsBtn}>\n              <Button\n                variant=\"secondary\"\n                size=\"md\"\n                onClick={() => dispatch(showAdditionalSettings())}\n                data-testid={metricsModaltestIds.showAdditionalSettings}\n                className={styles.noBorder}\n              >\n                Additional Settings\n              </Button>\n              <Button\n                className={styles.noBorder}\n                variant=\"secondary\"\n                icon={state.showAdditionalSettings ? 'angle-up' : 'angle-down'}\n              />\n            </ButtonGroup>\n          </Toggletip>\n        </div>\n      </div>\n      <div className={styles.resultsData}>\n        {query.metric && <i className={styles.currentlySelected}>Currently selected: {query.metric}</i>}\n        {query.labels.length > 0 && (\n          <div className={styles.resultsDataFiltered}>\n            <Icon name=\"info-circle\" size=\"sm\" />\n            <div className={styles.resultsDataFilteredText}>\n              &nbsp;These metrics have been pre-filtered by labels chosen in the label filters.\n            </div>\n          </div>\n        )}\n      </div>\n      <div className={styles.results}>\n        {state.metrics && (\n          <ResultsTable\n            metrics={displayedMetrics(state, dispatch)}\n            onChange={onChange}\n            onClose={onClose}\n            query={query}\n            state={state}\n            disableTextWrap={state.disableTextWrap}\n          />\n        )}\n      </div>\n      <div className={styles.resultsFooter}>\n        <div className={styles.resultsAmount}>\n          Showing {state.filteredMetricCount} of {state.totalMetricCount} results\n        </div>\n        <Pagination\n          currentPage={state.pageNum ?? 1}\n          numberOfPages={calculatePageList(state).length}\n          onNavigate={(val: number) => {\n            const page = val ?? 1;\n            dispatch(setPageNum(page));\n          }}\n        />\n        <div className={styles.resultsPerPageWrapper}>\n          <p className={styles.resultsPerPageLabel}># Results per page&nbsp;</p>\n          <Input\n            data-testid={metricsModaltestIds.resultsPerPage}\n            value={calculateResultsPerPage(state.resultsPerPage, DEFAULT_RESULTS_PER_PAGE, MAXIMUM_RESULTS_PER_PAGE)}\n            placeholder=\"results per page\"\n            width={10}\n            title={'The maximum results per page is ' + MAXIMUM_RESULTS_PER_PAGE}\n            type=\"number\"\n            onInput={(e) => {\n              const value = +e.currentTarget.value;\n\n              if (isNaN(value) || value >= MAXIMUM_RESULTS_PER_PAGE) {\n                return;\n              }\n\n              dispatch(setResultsPerPage(value));\n            }}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport const metricsModaltestIds = {\n  metricModal: 'metric-modal',\n  searchMetric: 'search-metric',\n  searchWithMetadata: 'search-with-metadata',\n  selectType: 'select-type',\n  metricCard: 'metric-card',\n  useMetric: 'use-metric',\n  searchPage: 'search-page',\n  resultsPerPage: 'results-per-page',\n  setUseBackend: 'set-use-backend',\n  showAdditionalSettings: 'show-additional-settings',\n};\n\nconst stateSlice = createSlice({\n  name: 'metrics-modal-state',\n  initialState: initialState(),\n  reducers: {\n    filterMetricsBackend: (\n      state,\n      action: PayloadAction<{\n        metrics: MetricsData;\n        filteredMetricCount: number;\n        isLoading: boolean;\n      }>\n    ) => {\n      state.metrics = action.payload.metrics;\n      state.filteredMetricCount = action.payload.filteredMetricCount;\n      state.isLoading = action.payload.isLoading;\n    },\n    buildMetrics: (state, action: PayloadAction<MetricsModalMetadata>) => {\n      state.isLoading = action.payload.isLoading;\n      state.metrics = action.payload.metrics;\n      state.hasMetadata = action.payload.hasMetadata;\n      state.metaHaystackDictionary = action.payload.metaHaystackDictionary;\n      state.nameHaystackDictionary = action.payload.nameHaystackDictionary;\n      state.totalMetricCount = action.payload.totalMetricCount;\n      state.filteredMetricCount = action.payload.filteredMetricCount;\n    },\n    setIsLoading: (state, action: PayloadAction<boolean>) => {\n      state.isLoading = action.payload;\n    },\n    setFilteredMetricCount: (state, action: PayloadAction<number>) => {\n      state.filteredMetricCount = action.payload;\n    },\n    setResultsPerPage: (state, action: PayloadAction<number>) => {\n      state.resultsPerPage = action.payload;\n    },\n    setPageNum: (state, action: PayloadAction<number>) => {\n      state.pageNum = action.payload;\n    },\n    setFuzzySearchQuery: (state, action: PayloadAction<string>) => {\n      state.fuzzySearchQuery = action.payload;\n      state.pageNum = 1;\n    },\n    setNameHaystack: (state, action: PayloadAction<string[][]>) => {\n      state.nameHaystackOrder = action.payload[0];\n      state.nameHaystackMatches = action.payload[1];\n    },\n    setMetaHaystack: (state, action: PayloadAction<string[][]>) => {\n      state.metaHaystackOrder = action.payload[0];\n      state.metaHaystackMatches = action.payload[1];\n    },\n    setFullMetaSearch: (state, action: PayloadAction<boolean>) => {\n      state.fullMetaSearch = action.payload;\n      state.pageNum = 1;\n    },\n    setIncludeNullMetadata: (state, action: PayloadAction<boolean>) => {\n      state.includeNullMetadata = action.payload;\n      state.pageNum = 1;\n    },\n    setSelectedTypes: (state, action: PayloadAction<Array<SelectableValue<string>>>) => {\n      state.selectedTypes = action.payload;\n      state.pageNum = 1;\n    },\n    setUseBackend: (state, action: PayloadAction<boolean>) => {\n      state.useBackend = action.payload;\n      state.fullMetaSearch = false;\n      state.pageNum = 1;\n    },\n    setDisableTextWrap: (state) => {\n      state.disableTextWrap = !state.disableTextWrap;\n    },\n    showAdditionalSettings: (state) => {\n      state.showAdditionalSettings = !state.showAdditionalSettings;\n    },\n  },\n});\n\n// actions to update the state\nexport const {\n  setIsLoading,\n  buildMetrics,\n  filterMetricsBackend,\n  setResultsPerPage,\n  setPageNum,\n  setFuzzySearchQuery,\n  setNameHaystack,\n  setMetaHaystack,\n  setFullMetaSearch,\n  setIncludeNullMetadata,\n  setSelectedTypes,\n  setUseBackend,\n  setDisableTextWrap,\n  showAdditionalSettings,\n  setFilteredMetricCount,\n} = stateSlice.actions;\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/MetricSelect.tsx\nimport { css } from '@emotion/css';\nimport debounce from 'debounce-promise';\nimport React, { RefCallback, useCallback, useState } from 'react';\nimport Highlighter from 'react-highlight-words';\n\nimport { GrafanaTheme2, SelectableValue, toOption } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorField, EditorFieldGroup } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport {\n  AsyncSelect,\n  Button,\n  CustomScrollbar,\n  FormatOptionLabelMeta,\n  getSelectStyles,\n  Icon,\n  InlineField,\n  InlineFieldRow,\n  useStyles2,\n  useTheme2,\n} from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { SelectMenuOptions } from '../../gcopypaste/packages/grafana-ui/src/components/Select/SelectBase';\nimport { truncateResult } from '../../language_utils';\nimport { regexifyLabelValuesQueryString } from '../parsingUtils';\nimport { QueryBuilderLabelFilter } from '../shared/types';\nimport { PromVisualQuery } from '../types';\n\nimport { MetricsModal } from './metrics-modal/MetricsModal';\nimport { tracking } from './metrics-modal/state/helpers';\n\n// We are matching words split with space\nconst splitSeparator = ' ';\n\nexport interface MetricSelectProps {\n  metricLookupDisabled: boolean;\n  query: PromVisualQuery;\n  onChange: (query: PromVisualQuery) => void;\n  onGetMetrics: () => Promise<SelectableValue[]>;\n  datasource: PrometheusDatasource;\n  labelsFilters: QueryBuilderLabelFilter[];\n  onBlur?: () => void;\n  variableEditor?: boolean;\n}\n\nexport const PROMETHEUS_QUERY_BUILDER_MAX_RESULTS = 1000;\n\nexport function MetricSelect({\n  datasource,\n  query,\n  onChange,\n  onGetMetrics,\n  labelsFilters,\n  metricLookupDisabled,\n  onBlur,\n  variableEditor,\n}: Readonly<MetricSelectProps>) {\n  const styles = useStyles2(getStyles);\n  const [state, setState] = useState<{\n    metrics?: SelectableValue[];\n    isLoading?: boolean;\n    metricsModalOpen?: boolean;\n    initialMetrics?: string[];\n    resultsTruncated?: boolean;\n  }>({});\n\n  const prometheusMetricEncyclopedia = config.featureToggles.prometheusMetricEncyclopedia;\n\n  const metricsModalOption: SelectableValue[] = [\n    {\n      value: 'BrowseMetrics',\n      label: 'Metrics explorer',\n      description: 'Browse and filter all metrics and metadata with a fuzzy search',\n    },\n  ];\n\n  const customFilterOption = useCallback(\n    (option: SelectableValue, searchQuery: string) => {\n      const label = option.label ?? option.value;\n      if (!label) {\n        return false;\n      }\n\n      // custom value is not a string label but a react node\n      if (!label.toLowerCase) {\n        return true;\n      }\n\n      const searchWords = searchQuery.split(splitSeparator);\n\n      return searchWords.reduce((acc, cur) => {\n        const matcheSearch = label.toLowerCase().includes(cur.toLowerCase());\n\n        let browseOption = false;\n        if (prometheusMetricEncyclopedia) {\n          browseOption = label === 'Metrics explorer';\n        }\n\n        return acc && (matcheSearch || browseOption);\n      }, true);\n    },\n    [prometheusMetricEncyclopedia]\n  );\n\n  const formatOptionLabel = useCallback(\n    (option: SelectableValue, meta: FormatOptionLabelMeta<any>) => {\n      // For newly created custom value we don't want to add highlight\n      if (option['__isNew__']) {\n        return option.label;\n      }\n      // only matches on input, does not match on regex\n      // look into matching for regex input\n      return (\n        <Highlighter\n          searchWords={meta.inputValue.split(splitSeparator)}\n          textToHighlight={option.label ?? ''}\n          highlightClassName={styles.highlight}\n        />\n      );\n    },\n    [styles.highlight]\n  );\n\n  /**\n   * Reformat the query string and label filters to return all valid results for current query editor state\n   */\n  const formatKeyValueStringsForLabelValuesQuery = (\n    query: string,\n    labelsFilters?: QueryBuilderLabelFilter[]\n  ): string => {\n    const queryString = regexifyLabelValuesQueryString(query);\n\n    return formatPrometheusLabelFiltersToString(queryString, labelsFilters);\n  };\n\n  /**\n   * Gets label_values response from prometheus API for current autocomplete query string and any existing labels filters\n   */\n  const getMetricLabels = (query: string) => {\n    // Since some customers can have millions of metrics, whenever the user changes the autocomplete text we want to call the backend and request all metrics that match the current query string\n    const results = datasource.metricFindQuery(formatKeyValueStringsForLabelValuesQuery(query, labelsFilters));\n    return results.then((results) => {\n      const resultsLength = results.length;\n      truncateResult(results);\n\n      if (resultsLength > results.length) {\n        setState({ ...state, resultsTruncated: true });\n      } else {\n        setState({ ...state, resultsTruncated: false });\n      }\n\n      const resultsOptions = results.map((result) => {\n        return {\n          label: result.text,\n          value: result.text,\n        };\n      });\n\n      if (prometheusMetricEncyclopedia) {\n        return [...metricsModalOption, ...resultsOptions];\n      } else {\n        return resultsOptions;\n      }\n    });\n  };\n\n  // When metric and label lookup is disabled we won't request labels\n  const metricLookupDisabledSearch = () => Promise.resolve([]);\n\n  const debouncedSearch = debounce(\n    (query: string) => getMetricLabels(query),\n    datasource.getDebounceTimeInMilliseconds()\n  );\n\n  // No type found for the common select props so typing as any\n  // https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Select/SelectBase.tsx/#L212-L263\n  // eslint-disable-next-line\n  const CustomOption = (props: any) => {\n    const option = props.data;\n\n    if (option.value === 'BrowseMetrics') {\n      const isFocused = props.isFocused ? styles.focus : '';\n\n      return (\n        // TODO: fix keyboard a11y\n        // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n        <div\n          {...props.innerProps}\n          ref={props.innerRef}\n          className={`${styles.customOptionWidth} metric-encyclopedia-open`}\n          data-testid={selectors.components.Select.option}\n          onKeyDown={(e) => {\n            // if there is no metric and the m.e. is enabled, open the modal\n            if (e.code === 'Enter') {\n              setState({ ...state, metricsModalOpen: true });\n            }\n          }}\n        >\n          {\n            <div className={`${styles.customOption} ${isFocused} metric-encyclopedia-open`}>\n              <div>\n                <div className=\"metric-encyclopedia-open\">{option.label}</div>\n                <div className={`${styles.customOptionDesc} metric-encyclopedia-open`}>{option.description}</div>\n              </div>\n              <Button\n                fill=\"text\"\n                size=\"sm\"\n                variant=\"secondary\"\n                onClick={() => setState({ ...state, metricsModalOpen: true })}\n                className=\"metric-encyclopedia-open\"\n              >\n                Open\n                <Icon name=\"arrow-right\" />\n              </Button>\n            </div>\n          }\n        </div>\n      );\n    }\n\n    return SelectMenuOptions(props);\n  };\n\n  interface SelectMenuProps {\n    maxHeight: number;\n    innerRef: RefCallback<HTMLDivElement>;\n    innerProps: {};\n  }\n\n  const CustomMenu = ({ children, maxHeight, innerRef, innerProps }: React.PropsWithChildren<SelectMenuProps>) => {\n    const theme = useTheme2();\n    const stylesMenu = getSelectStyles(theme);\n\n    // Show the results trucated warning only if the options are loaded and the results are truncated\n    // The children are a react node(options loading node) or an array(not a valid element)\n    const optionsLoaded = !React.isValidElement(children) && state.resultsTruncated;\n\n    return (\n      <div\n        {...innerProps}\n        className={`${stylesMenu.menu} ${styles.customMenuContainer}`}\n        style={{ maxHeight: Math.round(maxHeight * 0.9) }}\n        aria-label=\"Select options menu\"\n      >\n        <CustomScrollbar\n          scrollRefCallback={innerRef}\n          autoHide={false}\n          autoHeightMax=\"inherit\"\n          hideHorizontalTrack\n          showScrollIndicators\n        >\n          {children}\n        </CustomScrollbar>\n        {optionsLoaded && (\n          <div className={styles.customMenuFooter}>\n            <div>\n              Only the top 1000 metrics are displayed in the metric select. Use the metrics explorer to view all\n              metrics.\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const asyncSelect = () => {\n    return (\n      <AsyncSelect\n        data-testid={selectors.components.DataSource.Prometheus.queryEditor.builder.metricSelect}\n        isClearable={Boolean(variableEditor)}\n        inputId=\"prometheus-metric-select\"\n        className={styles.select}\n        value={query.metric ? toOption(query.metric) : undefined}\n        placeholder={'Select metric'}\n        allowCustomValue\n        formatOptionLabel={formatOptionLabel}\n        filterOption={customFilterOption}\n        minMenuHeight={250}\n        onOpenMenu={async () => {\n          if (metricLookupDisabled) {\n            return;\n          }\n          setState({ isLoading: true });\n          const metrics = await onGetMetrics();\n          const initialMetrics: string[] = metrics.map((m) => m.value);\n          const resultsLength = metrics.length;\n\n          if (metrics.length > PROMETHEUS_QUERY_BUILDER_MAX_RESULTS) {\n            truncateResult(metrics);\n          }\n\n          if (prometheusMetricEncyclopedia) {\n            setState({\n              // add the modal button option to the options\n              metrics: [...metricsModalOption, ...metrics],\n              isLoading: undefined,\n              // pass the initial metrics into the metrics explorer\n              initialMetrics: initialMetrics,\n              resultsTruncated: resultsLength > metrics.length,\n            });\n          } else {\n            setState({\n              metrics,\n              isLoading: undefined,\n              resultsTruncated: resultsLength > metrics.length,\n            });\n          }\n        }}\n        loadOptions={metricLookupDisabled ? metricLookupDisabledSearch : debouncedSearch}\n        isLoading={state.isLoading}\n        defaultOptions={state.metrics ?? Array.from(new Array(25), () => ({ value: '' }))} // We need empty values when `state.metrics` is falsy in order for the select to correctly determine top/bottom placement\n        onChange={(input) => {\n          const value = input?.value;\n          if (value) {\n            // if there is no metric and the m.e. is enabled, open the modal\n            if (prometheusMetricEncyclopedia && value === 'BrowseMetrics') {\n              tracking('grafana_prometheus_metric_encyclopedia_open', null, '', query);\n              setState({ ...state, metricsModalOpen: true });\n            } else {\n              onChange({ ...query, metric: value });\n            }\n          } else {\n            onChange({ ...query, metric: '' });\n          }\n        }}\n        components={\n          prometheusMetricEncyclopedia ? { Option: CustomOption, MenuList: CustomMenu } : { MenuList: CustomMenu }\n        }\n        onBlur={onBlur}\n      />\n    );\n  };\n\n  return (\n    <>\n      {prometheusMetricEncyclopedia && !datasource.lookupsDisabled && state.metricsModalOpen && (\n        <MetricsModal\n          datasource={datasource}\n          isOpen={state.metricsModalOpen}\n          onClose={() => setState({ ...state, metricsModalOpen: false })}\n          query={query}\n          onChange={onChange}\n          initialMetrics={state.initialMetrics ?? []}\n        />\n      )}\n      {/* format the ui for either the query editor or the variable editor */}\n      {variableEditor ? (\n        <InlineFieldRow>\n          <InlineField\n            label=\"Metric\"\n            labelWidth={20}\n            tooltip={<div>Optional: returns a list of label values for the label name in the specified metric.</div>}\n          >\n            {asyncSelect()}\n          </InlineField>\n        </InlineFieldRow>\n      ) : (\n        <EditorFieldGroup>\n          <EditorField label=\"Metric\">{asyncSelect()}</EditorField>\n        </EditorFieldGroup>\n      )}\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  select: css({\n    minWidth: '125px',\n  }),\n  highlight: css({\n    label: 'select__match-highlight',\n    background: 'inherit',\n    padding: 'inherit',\n    color: theme.colors.warning.contrastText,\n    backgroundColor: theme.colors.warning.main,\n  }),\n  customOption: css({\n    padding: '8px',\n    display: 'flex',\n    justifyContent: 'space-between',\n    cursor: 'pointer',\n    ':hover': {\n      backgroundColor: theme.colors.emphasize(theme.colors.background.primary, 0.1),\n    },\n  }),\n  customOptionlabel: css({\n    color: theme.colors.text.primary,\n  }),\n  customOptionDesc: css({\n    color: theme.colors.text.secondary,\n    fontSize: theme.typography.size.xs,\n    opacity: '50%',\n  }),\n  focus: css({\n    backgroundColor: theme.colors.emphasize(theme.colors.background.primary, 0.1),\n  }),\n  customOptionWidth: css({\n    minWidth: '400px',\n  }),\n  customMenuFooter: css({\n    flex: 0,\n    display: 'flex',\n    justifyContent: 'space-between',\n    padding: theme.spacing(1.5),\n    borderTop: `1px solid ${theme.colors.border.weak}`,\n    color: theme.colors.text.secondary,\n  }),\n  customMenuContainer: css({\n    display: 'flex',\n    flexDirection: 'column',\n    background: theme.colors.background.primary,\n    boxShadow: theme.shadows.z3,\n  }),\n});\n\nexport const formatPrometheusLabelFiltersToString = (\n  queryString: string,\n  labelsFilters: QueryBuilderLabelFilter[] | undefined\n): string => {\n  const filterArray = labelsFilters ? formatPrometheusLabelFilters(labelsFilters) : [];\n\n  return `label_values({__name__=~\".*${queryString}\"${filterArray ? filterArray.join('') : ''}},__name__)`;\n};\n\nexport const formatPrometheusLabelFilters = (labelsFilters: QueryBuilderLabelFilter[]): string[] => {\n  return labelsFilters.map((label) => {\n    return `,${label.label}=\"${label.value}\"`;\n  });\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/language_utils.ts\nimport { invert } from 'lodash';\nimport { Token } from 'prismjs';\n\nimport {\n  AbstractLabelMatcher,\n  AbstractLabelOperator,\n  AbstractQuery,\n  DataQuery,\n  dateMath,\n  DateTime,\n  incrRoundDn,\n  TimeRange,\n} from '@grafana/data';\n\nimport { addLabelToQuery } from './add_label_to_query';\nimport { SUGGESTIONS_LIMIT } from './language_provider';\nimport { PROMETHEUS_QUERY_BUILDER_MAX_RESULTS } from './querybuilder/components/MetricSelect';\nimport { PrometheusCacheLevel, PromMetricsMetadata, PromMetricsMetadataItem } from './types';\n\nexport const processHistogramMetrics = (metrics: string[]) => {\n  const resultSet: Set<string> = new Set();\n  const regexp = new RegExp('_bucket($|:)');\n  for (let index = 0; index < metrics.length; index++) {\n    const metric = metrics[index];\n    const isHistogramValue = regexp.test(metric);\n    if (isHistogramValue) {\n      resultSet.add(metric);\n    }\n  }\n  return [...resultSet];\n};\n\nexport function processLabels(labels: Array<{ [key: string]: string }>, withName = false) {\n  // For processing we are going to use sets as they have significantly better performance than arrays\n  // After we process labels, we will convert sets to arrays and return object with label values in arrays\n  const valueSet: { [key: string]: Set<string> } = {};\n  labels.forEach((label) => {\n    const { __name__, ...rest } = label;\n    if (withName) {\n      valueSet['__name__'] = valueSet['__name__'] || new Set();\n      if (!valueSet['__name__'].has(__name__)) {\n        valueSet['__name__'].add(__name__);\n      }\n    }\n\n    Object.keys(rest).forEach((key) => {\n      if (!valueSet[key]) {\n        valueSet[key] = new Set();\n      }\n      if (!valueSet[key].has(rest[key])) {\n        valueSet[key].add(rest[key]);\n      }\n    });\n  });\n\n  // valueArray that we are going to return in the object\n  const valueArray: { [key: string]: string[] } = {};\n  limitSuggestions(Object.keys(valueSet)).forEach((key) => {\n    valueArray[key] = limitSuggestions(Array.from(valueSet[key]));\n  });\n\n  return { values: valueArray, keys: Object.keys(valueArray) };\n}\n\n// const cleanSelectorRegexp = /\\{(\\w+=\"[^\"\\n]*?\")(,\\w+=\"[^\"\\n]*?\")*\\}/;\nexport const selectorRegexp = /\\{[^}]*?(\\}|$)/;\n\n// This will capture 4 groups. Example label filter => {instance=\"10.4.11.4:9003\"}\n// 1. label:    instance\n// 2. operator: =\n// 3. value:    \"10.4.11.4:9003\"\n// 4. comma:    if there is a comma it will give ,\n// 5. space:    if there is a space after comma it will give the whole space\n// comma and space is useful for addLabelsToExpression function\nexport const labelRegexp = /\\b(\\w+)(!?=~?)(\"[^\"\\n]*?\")(,)?(\\s*)?/g;\n\nexport function parseSelector(query: string, cursorOffset = 1): { labelKeys: string[]; selector: string } {\n  if (!query.match(selectorRegexp)) {\n    // Special matcher for metrics\n    if (query.match(/^[A-Za-z:][\\w:]*$/)) {\n      return {\n        selector: `{__name__=\"${query}\"}`,\n        labelKeys: ['__name__'],\n      };\n    }\n    throw new Error('Query must contain a selector: ' + query);\n  }\n\n  // Check if inside a selector\n  const prefix = query.slice(0, cursorOffset);\n  const prefixOpen = prefix.lastIndexOf('{');\n  const prefixClose = prefix.lastIndexOf('}');\n  if (prefixOpen === -1) {\n    throw new Error('Not inside selector, missing open brace: ' + prefix);\n  }\n  if (prefixClose > -1 && prefixClose > prefixOpen) {\n    throw new Error('Not inside selector, previous selector already closed: ' + prefix);\n  }\n  const suffix = query.slice(cursorOffset);\n  const suffixCloseIndex = suffix.indexOf('}');\n  const suffixClose = suffixCloseIndex + cursorOffset;\n  const suffixOpenIndex = suffix.indexOf('{');\n  const suffixOpen = suffixOpenIndex + cursorOffset;\n  if (suffixClose === -1) {\n    throw new Error('Not inside selector, missing closing brace in suffix: ' + suffix);\n  }\n  if (suffixOpenIndex > -1 && suffixOpen < suffixClose) {\n    throw new Error('Not inside selector, next selector opens before this one closed: ' + suffix);\n  }\n\n  // Extract clean labels to form clean selector, incomplete labels are dropped\n  const selector = query.slice(prefixOpen, suffixClose);\n  const labels: { [key: string]: { value: string; operator: string } } = {};\n  selector.replace(labelRegexp, (label, key, operator, value) => {\n    const labelOffset = query.indexOf(label);\n    const valueStart = labelOffset + key.length + operator.length + 1;\n    const valueEnd = labelOffset + key.length + operator.length + value.length - 1;\n    // Skip label if cursor is in value\n    if (cursorOffset < valueStart || cursorOffset > valueEnd) {\n      labels[key] = { value, operator };\n    }\n    return '';\n  });\n\n  // Add metric if there is one before the selector\n  const metricPrefix = query.slice(0, prefixOpen);\n  const metricMatch = metricPrefix.match(/[A-Za-z:][\\w:]*$/);\n  if (metricMatch) {\n    labels['__name__'] = { value: `\"${metricMatch[0]}\"`, operator: '=' };\n  }\n\n  // Build sorted selector\n  const labelKeys = Object.keys(labels).sort();\n  const cleanSelector = labelKeys.map((key) => `${key}${labels[key].operator}${labels[key].value}`).join(',');\n\n  const selectorString = ['{', cleanSelector, '}'].join('');\n\n  return { labelKeys, selector: selectorString };\n}\n\nexport function expandRecordingRules(query: string, mapping: { [name: string]: string }): string {\n  const getRuleRegex = (ruleName: string) => new RegExp(`(\\\\s|\\\\(|^)(${ruleName})(\\\\s|$|\\\\(|\\\\[|\\\\{)`, 'ig');\n\n  // For each mapping key we iterate over the query and split them in parts.\n  // recording:rule{label=~\"/label/value\"} * some:other:rule{other_label=\"value\"}\n  // We want to keep parts in here like this:\n  // recording:rule\n  // {label=~\"/label/value\"} *\n  // some:other:rule\n  // {other_label=\"value\"}\n  const tmpSplitParts = Object.keys(mapping).reduce<string[]>(\n    (prev, curr) => {\n      let parts: string[] = [];\n      let tmpParts: string[] = [];\n      let removeIdx: number[] = [];\n\n      // we iterate over prev because it might be like this after first loop\n      // recording:rule and {label=~\"/label/value\"} * some:other:rule{other_label=\"value\"}\n      // so we need to split the second part too\n      prev.filter(Boolean).forEach((p, i) => {\n        const doesMatch = p.match(getRuleRegex(curr));\n        if (doesMatch) {\n          parts = p.split(curr);\n          if (parts.length === 2) {\n            // this is the case when we have such result for this query\n            // max (metric{label=\"value\"})\n            // \"max(\", \"{label=\"value\"}\"\n            removeIdx.push(i);\n            tmpParts.push(...[parts[0], curr, parts[1]].filter(Boolean));\n          } else if (parts.length > 2) {\n            // this is the case when we have such query\n            // metric + metric\n            // when we split it we have such data\n            // \"\", \" + \", \"\"\n            removeIdx.push(i);\n            parts = parts.map((p) => (p === '' ? curr : p));\n            tmpParts.push(...parts);\n          }\n        }\n      });\n\n      // if we have idx to remove that means we split the value in that index.\n      // No need to keep it. Have the new split values instead.\n      removeIdx.forEach((ri) => (prev[ri] = ''));\n      prev = prev.filter(Boolean);\n      prev.push(...tmpParts);\n\n      return prev;\n    },\n    [query]\n  );\n\n  // we have the separate parts. we need to replace the metric and apply the labels if there is any\n  let labelFound = false;\n  const trulyExpandedQuery = tmpSplitParts.map((tsp, i) => {\n    // if we know this loop tsp is a label, not the metric we want to expand\n    if (labelFound) {\n      labelFound = false;\n      return '';\n    }\n\n    // check if the mapping is there\n    if (mapping[tsp]) {\n      const recordingRule = mapping[tsp];\n      // it is a recording rule. if the following is a label then apply it\n      if (i + 1 !== tmpSplitParts.length && tmpSplitParts[i + 1].match(labelRegexp)) {\n        // the next value in the loop is label. Let's apply labels to the metric\n        labelFound = true;\n        const labels = tmpSplitParts[i + 1];\n        const invalidLabelsRegex = /(\\)\\{|\\}\\{|\\]\\{)/;\n        return addLabelsToExpression(recordingRule + labels, invalidLabelsRegex);\n      } else {\n        // it is not a recording rule and might be a binary operation in between two recording rules\n        // So no need to do anything. just return it.\n        return recordingRule;\n      }\n    }\n\n    return tsp;\n  });\n\n  // Remove empty strings and merge them\n  return trulyExpandedQuery.filter(Boolean).join('');\n}\n\nfunction addLabelsToExpression(expr: string, invalidLabelsRegexp: RegExp) {\n  const match = expr.match(invalidLabelsRegexp);\n  if (!match) {\n    return expr;\n  }\n\n  // Split query into 2 parts - before the invalidLabelsRegex match and after.\n  const indexOfRegexMatch = match.index ?? 0;\n  const exprBeforeRegexMatch = expr.slice(0, indexOfRegexMatch + 1);\n  const exprAfterRegexMatch = expr.slice(indexOfRegexMatch + 1);\n\n  // Create arrayOfLabelObjects with label objects that have key, operator and value.\n  const arrayOfLabelObjects: Array<{\n    key: string;\n    operator: string;\n    value: string;\n    comma?: string;\n    space?: string;\n  }> = [];\n  exprAfterRegexMatch.replace(labelRegexp, (label, key, operator, value, comma, space) => {\n    arrayOfLabelObjects.push({ key, operator, value, comma, space });\n    return '';\n  });\n\n  // Loop through all label objects and add them to query.\n  // As a starting point we have valid query without the labels.\n  let result = exprBeforeRegexMatch;\n  arrayOfLabelObjects.filter(Boolean).forEach((obj) => {\n    // Remove extra set of quotes from obj.value\n    const value = obj.value.slice(1, -1);\n    result = addLabelToQuery(result, obj.key, value, obj.operator);\n  });\n\n  // reconstruct the labels\n  let existingLabel = arrayOfLabelObjects.reduce((prev, curr) => {\n    prev += `${curr.key}${curr.operator}${curr.value}${curr.comma ?? ''}${curr.space ?? ''}`;\n    return prev;\n  }, '');\n\n  // Check if there is anything besides labels\n  // Useful for this kind of metrics sum (recording_rule_metric{label1=\"value1\"}) by (env)\n  // if we don't check this part, ) by (env) part will be lost\n  existingLabel = '{' + existingLabel + '}';\n  const potentialLeftOver = exprAfterRegexMatch.replace(existingLabel, '');\n\n  return result + potentialLeftOver;\n}\n\n/**\n * Adds metadata for synthetic metrics for which the API does not provide metadata.\n * See https://github.com/grafana/grafana/issues/22337 for details.\n *\n * @param metadata HELP and TYPE metadata from /api/v1/metadata\n */\nexport function fixSummariesMetadata(metadata: { [metric: string]: PromMetricsMetadataItem[] }): PromMetricsMetadata {\n  if (!metadata) {\n    return metadata;\n  }\n  const baseMetadata: PromMetricsMetadata = {};\n  const summaryMetadata: PromMetricsMetadata = {};\n  for (const metric in metadata) {\n    // NOTE: based on prometheus-documentation, we can receive\n    // multiple metadata-entries for the given metric, it seems\n    // it happens when the same metric is on multiple targets\n    // and their help-text differs\n    // (https://prometheus.io/docs/prometheus/latest/querying/api/#querying-metric-metadata)\n    // for now we just use the first entry.\n    const item = metadata[metric][0];\n    baseMetadata[metric] = item;\n\n    if (item.type === 'histogram') {\n      summaryMetadata[`${metric}_bucket`] = {\n        type: 'counter',\n        help: `Cumulative counters for the observation buckets (${item.help})`,\n      };\n      summaryMetadata[`${metric}_count`] = {\n        type: 'counter',\n        help: `Count of events that have been observed for the histogram metric (${item.help})`,\n      };\n      summaryMetadata[`${metric}_sum`] = {\n        type: 'counter',\n        help: `Total sum of all observed values for the histogram metric (${item.help})`,\n      };\n    }\n    if (item.type === 'summary') {\n      summaryMetadata[`${metric}_count`] = {\n        type: 'counter',\n        help: `Count of events that have been observed for the base metric (${item.help})`,\n      };\n      summaryMetadata[`${metric}_sum`] = {\n        type: 'counter',\n        help: `Total sum of all observed values for the base metric (${item.help})`,\n      };\n    }\n  }\n  // Synthetic series\n  const syntheticMetadata: PromMetricsMetadata = {};\n  syntheticMetadata['ALERTS'] = {\n    type: 'counter',\n    help: 'Time series showing pending and firing alerts. The sample value is set to 1 as long as the alert is in the indicated active (pending or firing) state.',\n  };\n\n  return { ...baseMetadata, ...summaryMetadata, ...syntheticMetadata };\n}\n\nexport function roundMsToMin(milliseconds: number): number {\n  return roundSecToMin(milliseconds / 1000);\n}\n\nexport function roundSecToMin(seconds: number): number {\n  return Math.floor(seconds / 60);\n}\n\n// Returns number of minutes rounded up to the nearest nth minute\nexport function roundSecToNextMin(seconds: number, secondsToRound = 1): number {\n  return Math.ceil(seconds / 60) - (Math.ceil(seconds / 60) % secondsToRound);\n}\n\nexport function limitSuggestions(items: string[]) {\n  return items.slice(0, SUGGESTIONS_LIMIT);\n}\n\nexport function addLimitInfo(items: unknown[] | undefined): string {\n  return items && items.length >= SUGGESTIONS_LIMIT ? `, limited to the first ${SUGGESTIONS_LIMIT} received items` : '';\n}\n\n// NOTE: the following 2 exported functions are very similar to the prometheus*Escape\n// functions in datasource.ts, but they are not exactly the same algorithm, and we found\n// no way to reuse one in the another or vice versa.\n\n// Prometheus regular-expressions use the RE2 syntax (https://github.com/google/re2/wiki/Syntax),\n// so every character that matches something in that list has to be escaped.\n// the list of metacharacters is: *+?()|\\.[]{}^$\n// we make a javascript regular expression that matches those characters:\nconst RE2_METACHARACTERS = /[*+?()|\\\\.\\[\\]{}^$]/g;\n\nfunction escapePrometheusRegexp(value: string): string {\n  return value.replace(RE2_METACHARACTERS, '\\\\$&');\n}\n\n// based on the openmetrics-documentation, the 3 symbols we have to handle are:\n// - \\n ... the newline character\n// - \\  ... the backslash character\n// - \"  ... the double-quote character\nexport function escapeLabelValueInExactSelector(labelValue: string): string {\n  return labelValue.replace(/\\\\/g, '\\\\\\\\').replace(/\\n/g, '\\\\n').replace(/\"/g, '\\\\\"');\n}\n\nexport function escapeLabelValueInRegexSelector(labelValue: string): string {\n  return escapeLabelValueInExactSelector(escapePrometheusRegexp(labelValue));\n}\n\nconst FromPromLikeMap: Record<string, AbstractLabelOperator> = {\n  '=': AbstractLabelOperator.Equal,\n  '!=': AbstractLabelOperator.NotEqual,\n  '=~': AbstractLabelOperator.EqualRegEx,\n  '!~': AbstractLabelOperator.NotEqualRegEx,\n};\n\nconst ToPromLikeMap: Record<AbstractLabelOperator, string> = invert(FromPromLikeMap) as Record<\n  AbstractLabelOperator,\n  string\n>;\n\nexport function toPromLikeExpr(labelBasedQuery: AbstractQuery): string {\n  const expr = labelBasedQuery.labelMatchers\n    .map((selector: AbstractLabelMatcher) => {\n      const operator = ToPromLikeMap[selector.operator];\n      if (operator) {\n        return `${selector.name}${operator}\"${selector.value}\"`;\n      } else {\n        return '';\n      }\n    })\n    .filter((e: string) => e !== '')\n    .join(', ');\n\n  return expr ? `{${expr}}` : '';\n}\n\nexport function toPromLikeQuery(labelBasedQuery: AbstractQuery): PromLikeQuery {\n  return {\n    refId: labelBasedQuery.refId,\n    expr: toPromLikeExpr(labelBasedQuery),\n    range: true,\n  };\n}\n\nexport interface PromLikeQuery extends DataQuery {\n  expr: string;\n  range: boolean;\n}\n\nfunction getMaybeTokenStringContent(token: Token): string {\n  if (typeof token.content === 'string') {\n    return token.content;\n  }\n\n  return '';\n}\n\nexport function extractLabelMatchers(tokens: Array<string | Token>): AbstractLabelMatcher[] {\n  const labelMatchers: AbstractLabelMatcher[] = [];\n\n  for (const token of tokens) {\n    if (!(token instanceof Token)) {\n      continue;\n    }\n\n    if (token.type === 'context-labels') {\n      let labelKey = '';\n      let labelValue = '';\n      let labelOperator = '';\n\n      const contentTokens = Array.isArray(token.content) ? token.content : [token.content];\n\n      for (let currentToken of contentTokens) {\n        if (typeof currentToken === 'string') {\n          let currentStr: string;\n          currentStr = currentToken;\n          if (currentStr === '=' || currentStr === '!=' || currentStr === '=~' || currentStr === '!~') {\n            labelOperator = currentStr;\n          }\n        } else if (currentToken instanceof Token) {\n          switch (currentToken.type) {\n            case 'label-key':\n              labelKey = getMaybeTokenStringContent(currentToken);\n              break;\n            case 'label-value':\n              labelValue = getMaybeTokenStringContent(currentToken);\n              labelValue = labelValue.substring(1, labelValue.length - 1);\n              const labelComparator = FromPromLikeMap[labelOperator];\n              if (labelComparator) {\n                labelMatchers.push({ name: labelKey, operator: labelComparator, value: labelValue });\n              }\n              break;\n          }\n        }\n      }\n    }\n  }\n\n  return labelMatchers;\n}\n\n/**\n * Calculates new interval \"snapped\" to the closest Nth minute, depending on cache level datasource setting\n * @param cacheLevel\n * @param range\n */\nexport function getRangeSnapInterval(\n  cacheLevel: PrometheusCacheLevel,\n  range: TimeRange\n): { start: string; end: string } {\n  // Don't round the range if we're not caching\n  if (cacheLevel === PrometheusCacheLevel.None) {\n    return {\n      start: getPrometheusTime(range.from, false).toString(),\n      end: getPrometheusTime(range.to, true).toString(),\n    };\n  }\n  // Otherwise round down to the nearest nth minute for the start time\n  const startTime = getPrometheusTime(range.from, false);\n  // const startTimeQuantizedSeconds = roundSecToLastMin(startTime, getClientCacheDurationInMinutes(cacheLevel)) * 60;\n  const startTimeQuantizedSeconds = incrRoundDn(startTime, getClientCacheDurationInMinutes(cacheLevel) * 60);\n\n  // And round up to the nearest nth minute for the end time\n  const endTime = getPrometheusTime(range.to, true);\n  const endTimeQuantizedSeconds = roundSecToNextMin(endTime, getClientCacheDurationInMinutes(cacheLevel)) * 60;\n\n  // If the interval was too short, we could have rounded both start and end to the same time, if so let's add one step to the end\n  if (startTimeQuantizedSeconds === endTimeQuantizedSeconds) {\n    const endTimePlusOneStep = endTimeQuantizedSeconds + getClientCacheDurationInMinutes(cacheLevel) * 60;\n    return { start: startTimeQuantizedSeconds.toString(), end: endTimePlusOneStep.toString() };\n  }\n\n  const start = startTimeQuantizedSeconds.toString();\n  const end = endTimeQuantizedSeconds.toString();\n\n  return { start, end };\n}\n\nexport function getClientCacheDurationInMinutes(cacheLevel: PrometheusCacheLevel) {\n  switch (cacheLevel) {\n    case PrometheusCacheLevel.Medium:\n      return 10;\n    case PrometheusCacheLevel.High:\n      return 60;\n    default:\n      return 1;\n  }\n}\n\nexport function getPrometheusTime(date: string | DateTime, roundUp: boolean) {\n  if (typeof date === 'string') {\n    date = dateMath.parse(date, roundUp)!;\n  }\n\n  return Math.ceil(date.valueOf() / 1000);\n}\n\nexport function truncateResult<T>(array: T[], limit?: number): T[] {\n  if (limit === undefined) {\n    limit = PROMETHEUS_QUERY_BUILDER_MAX_RESULTS;\n  }\n  array.length = Math.min(array.length, limit);\n  return array;\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/language_provider.ts\nimport { once } from 'lodash';\nimport Prism from 'prismjs';\n\nimport {\n  AbstractLabelMatcher,\n  AbstractLabelOperator,\n  AbstractQuery,\n  getDefaultTimeRange,\n  LanguageProvider,\n  TimeRange,\n} from '@grafana/data';\nimport { BackendSrvRequest } from '@grafana/runtime';\n\nimport { Label } from './components/monaco-query-field/monaco-completion-provider/situation';\nimport { PrometheusDatasource } from './datasource';\nimport {\n  extractLabelMatchers,\n  fixSummariesMetadata,\n  processHistogramMetrics,\n  processLabels,\n  toPromLikeQuery,\n} from './language_utils';\nimport PromqlSyntax from './promql';\nimport { buildVisualQueryFromString } from './querybuilder/parsing';\nimport { PrometheusCacheLevel, PromMetricsMetadata, PromQuery } from './types';\n\nconst DEFAULT_KEYS = ['job', 'instance'];\nconst EMPTY_SELECTOR = '{}';\n// Max number of items (metrics, labels, values) that we display as suggestions. Prevents from running out of memory.\nexport const SUGGESTIONS_LIMIT = 10000;\n\nconst buildCacheHeaders = (durationInSeconds: number) => {\n  return {\n    headers: {\n      'X-Grafana-Cache': `private, max-age=${durationInSeconds}`,\n    },\n  };\n};\n\nexport function getMetadataString(metric: string, metadata: PromMetricsMetadata): string | undefined {\n  if (!metadata[metric]) {\n    return undefined;\n  }\n  const { type, help } = metadata[metric];\n  return `${type.toUpperCase()}: ${help}`;\n}\n\nexport function getMetadataHelp(metric: string, metadata: PromMetricsMetadata): string | undefined {\n  if (!metadata[metric]) {\n    return undefined;\n  }\n  return metadata[metric].help;\n}\n\nexport function getMetadataType(metric: string, metadata: PromMetricsMetadata): string | undefined {\n  if (!metadata[metric]) {\n    return undefined;\n  }\n  return metadata[metric].type;\n}\n\nconst PREFIX_DELIMITER_REGEX =\n  /(=\"|!=\"|=~\"|!~\"|\\{|\\[|\\(|\\+|-|\\/|\\*|%|\\^|\\band\\b|\\bor\\b|\\bunless\\b|==|>=|!=|<=|>|<|=|~|,)/;\n\nconst secondsInDay = 86400;\nexport default class PromQlLanguageProvider extends LanguageProvider {\n  histogramMetrics: string[];\n  timeRange: TimeRange;\n  metrics: string[];\n  metricsMetadata?: PromMetricsMetadata;\n  declare startTask: Promise<any>;\n  datasource: PrometheusDatasource;\n  labelKeys: string[] = [];\n  declare labelFetchTs: number;\n\n  constructor(datasource: PrometheusDatasource, initialValues?: Partial<PromQlLanguageProvider>) {\n    super();\n\n    this.datasource = datasource;\n    this.histogramMetrics = [];\n    this.timeRange = getDefaultTimeRange();\n    this.metrics = [];\n\n    Object.assign(this, initialValues);\n  }\n\n  getDefaultCacheHeaders() {\n    if (this.datasource.cacheLevel !== PrometheusCacheLevel.None) {\n      return buildCacheHeaders(this.datasource.getCacheDurationInMinutes() * 60);\n    }\n    return;\n  }\n\n  // Strip syntax chars so that typeahead suggestions can work on clean inputs\n  cleanText(s: string) {\n    const parts = s.split(PREFIX_DELIMITER_REGEX);\n    const last = parts.pop()!;\n    return last.trimLeft().replace(/\"$/, '').replace(/^\"/, '');\n  }\n\n  get syntax() {\n    return PromqlSyntax;\n  }\n\n  request = async (url: string, defaultValue: any, params = {}, options?: Partial<BackendSrvRequest>) => {\n    try {\n      const res = await this.datasource.metadataRequest(url, params, options);\n      return res.data.data;\n    } catch (error) {\n      if (!isCancelledError(error)) {\n        console.error(error);\n      }\n    }\n\n    return defaultValue;\n  };\n\n  start = async (timeRange?: TimeRange): Promise<any[]> => {\n    this.timeRange = timeRange ?? getDefaultTimeRange();\n\n    if (this.datasource.lookupsDisabled) {\n      return [];\n    }\n\n    this.metrics = (await this.fetchLabelValues('__name__')) || [];\n    this.histogramMetrics = processHistogramMetrics(this.metrics).sort();\n    return Promise.all([this.loadMetricsMetadata(), this.fetchLabels()]);\n  };\n\n  async loadMetricsMetadata() {\n    const headers = buildCacheHeaders(this.datasource.getDaysToCacheMetadata() * secondsInDay);\n    this.metricsMetadata = fixSummariesMetadata(\n      await this.request(\n        '/api/v1/metadata',\n        {},\n        {},\n        {\n          showErrorAlert: false,\n          ...headers,\n        }\n      )\n    );\n  }\n\n  getLabelKeys(): string[] {\n    return this.labelKeys;\n  }\n\n  importFromAbstractQuery(labelBasedQuery: AbstractQuery): PromQuery {\n    return toPromLikeQuery(labelBasedQuery);\n  }\n\n  exportToAbstractQuery(query: PromQuery): AbstractQuery {\n    const promQuery = query.expr;\n    if (!promQuery || promQuery.length === 0) {\n      return { refId: query.refId, labelMatchers: [] };\n    }\n    const tokens = Prism.tokenize(promQuery, PromqlSyntax);\n    const labelMatchers: AbstractLabelMatcher[] = extractLabelMatchers(tokens);\n    const nameLabelValue = getNameLabelValue(promQuery, tokens);\n    if (nameLabelValue && nameLabelValue.length > 0) {\n      labelMatchers.push({\n        name: '__name__',\n        operator: AbstractLabelOperator.Equal,\n        value: nameLabelValue,\n      });\n    }\n\n    return {\n      refId: query.refId,\n      labelMatchers,\n    };\n  }\n\n  async getSeries(selector: string, withName?: boolean): Promise<Record<string, string[]>> {\n    if (this.datasource.lookupsDisabled) {\n      return {};\n    }\n    try {\n      if (selector === EMPTY_SELECTOR) {\n        return await this.fetchDefaultSeries();\n      } else {\n        return await this.fetchSeriesLabels(selector, withName);\n      }\n    } catch (error) {\n      // TODO: better error handling\n      console.error(error);\n      return {};\n    }\n  }\n\n  /**\n   * @param key\n   */\n  fetchLabelValues = async (key: string): Promise<string[]> => {\n    const params = this.datasource.getAdjustedInterval(this.timeRange);\n    const interpolatedName = this.datasource.interpolateString(key);\n    const url = `/api/v1/label/${interpolatedName}/values`;\n    const value = await this.request(url, [], params, this.getDefaultCacheHeaders());\n    return value ?? [];\n  };\n\n  async getLabelValues(key: string): Promise<string[]> {\n    return await this.fetchLabelValues(key);\n  }\n\n  /**\n   * Fetches all label keys\n   */\n  fetchLabels = async (timeRange?: TimeRange, queries?: PromQuery[]): Promise<string[]> => {\n    if (timeRange) {\n      this.timeRange = timeRange;\n    }\n    let url = '/api/v1/labels';\n    const timeParams = this.datasource.getAdjustedInterval(this.timeRange);\n    this.labelFetchTs = Date.now().valueOf();\n\n    const searchParams = new URLSearchParams({ ...timeParams });\n    queries?.forEach((q) => {\n      const visualQuery = buildVisualQueryFromString(q.expr);\n      if (visualQuery.query.metric !== '') {\n        searchParams.append('match[]', visualQuery.query.metric);\n        if (visualQuery.query.binaryQueries) {\n          visualQuery.query.binaryQueries.forEach((bq) => {\n            searchParams.append('match[]', bq.query.metric);\n          });\n        }\n      }\n    });\n\n    if (this.datasource.httpMethod === 'GET') {\n      url += `?${searchParams.toString()}`;\n    }\n\n    const res = await this.request(url, [], searchParams, this.getDefaultCacheHeaders());\n    if (Array.isArray(res)) {\n      this.labelKeys = res.slice().sort();\n    }\n\n    return [];\n  };\n\n  /**\n   * Gets series values\n   * Function to replace old getSeries calls in a way that will provide faster endpoints for new prometheus instances,\n   * while maintaining backward compatability\n   * @param labelName\n   * @param selector\n   */\n  getSeriesValues = async (labelName: string, selector: string): Promise<string[]> => {\n    if (!this.datasource.hasLabelsMatchAPISupport()) {\n      const data = await this.getSeries(selector);\n      return data[labelName] ?? [];\n    }\n    return await this.fetchSeriesValuesWithMatch(labelName, selector);\n  };\n\n  /**\n   * Fetches all values for a label, with optional match[]\n   * @param name\n   * @param match\n   * @param timeRange\n   * @param requestId\n   */\n  fetchSeriesValuesWithMatch = async (\n    name: string,\n    match: string,\n    requestId?: string,\n    timeRange: TimeRange = this.timeRange\n  ): Promise<string[]> => {\n    const interpolatedName = name ? this.datasource.interpolateString(name) : null;\n    const interpolatedMatch = match ? this.datasource.interpolateString(match) : null;\n    const range = this.datasource.getAdjustedInterval(timeRange);\n    const urlParams = {\n      ...range,\n      ...(interpolatedMatch && { 'match[]': interpolatedMatch }),\n    };\n    let requestOptions: Partial<BackendSrvRequest> | undefined = {\n      ...this.getDefaultCacheHeaders(),\n      ...(requestId && { requestId }),\n    };\n\n    if (!Object.keys(requestOptions).length) {\n      requestOptions = undefined;\n    }\n\n    const value = await this.request(`/api/v1/label/${interpolatedName}/values`, [], urlParams, requestOptions);\n    return value ?? [];\n  };\n\n  /**\n   * Gets series labels\n   * Function to replace old getSeries calls in a way that will provide faster endpoints for new prometheus instances,\n   * while maintaining backward compatability. The old API call got the labels and the values in a single query,\n   * but with the new query we need two calls, one to get the labels, and another to get the values.\n   *\n   * @param selector\n   * @param otherLabels\n   */\n  getSeriesLabels = async (selector: string, otherLabels: Label[]): Promise<string[]> => {\n    let possibleLabelNames, data: Record<string, string[]>;\n\n    if (!this.datasource.hasLabelsMatchAPISupport()) {\n      data = await this.getSeries(selector);\n      possibleLabelNames = Object.keys(data); // all names from prometheus\n    } else {\n      // Exclude __name__ from output\n      otherLabels.push({ name: '__name__', value: '', op: '!=' });\n      data = await this.fetchSeriesLabelsMatch(selector);\n      possibleLabelNames = Object.keys(data);\n    }\n\n    const usedLabelNames = new Set(otherLabels.map((l) => l.name)); // names used in the query\n    return possibleLabelNames.filter((l) => !usedLabelNames.has(l));\n  };\n\n  /**\n   * Fetch labels using the best endpoint that datasource supports.\n   * This is cached by its args but also by the global timeRange currently selected as they can change over requested time.\n   * @param name\n   * @param withName\n   */\n  fetchLabelsWithMatch = async (name: string, withName?: boolean): Promise<Record<string, string[]>> => {\n    if (this.datasource.hasLabelsMatchAPISupport()) {\n      return this.fetchSeriesLabelsMatch(name, withName);\n    } else {\n      return this.fetchSeriesLabels(name, withName);\n    }\n  };\n\n  /**\n   * Fetch labels for a series using /series endpoint. This is cached by its args but also by the global timeRange currently selected as\n   * they can change over requested time.\n   * @param name\n   * @param withName\n   */\n  fetchSeriesLabels = async (name: string, withName?: boolean): Promise<Record<string, string[]>> => {\n    const interpolatedName = this.datasource.interpolateString(name);\n    const range = this.datasource.getAdjustedInterval(this.timeRange);\n    const urlParams = {\n      ...range,\n      'match[]': interpolatedName,\n    };\n    const url = `/api/v1/series`;\n\n    const data = await this.request(url, [], urlParams, this.getDefaultCacheHeaders());\n    const { values } = processLabels(data, withName);\n    return values;\n  };\n\n  /**\n   * Fetch labels for a series using /labels endpoint.  This is cached by its args but also by the global timeRange currently selected as\n   * they can change over requested time.\n   * @param name\n   * @param withName\n   */\n  fetchSeriesLabelsMatch = async (name: string, withName?: boolean): Promise<Record<string, string[]>> => {\n    const interpolatedName = this.datasource.interpolateString(name);\n    const range = this.datasource.getAdjustedInterval(this.timeRange);\n    const urlParams = {\n      ...range,\n      'match[]': interpolatedName,\n    };\n    const url = `/api/v1/labels`;\n\n    const data: string[] = await this.request(url, [], urlParams, this.getDefaultCacheHeaders());\n    // Convert string array to Record<string , []>\n    return data.reduce((ac, a) => ({ ...ac, [a]: '' }), {});\n  };\n\n  /**\n   * Fetch series for a selector. Use this for raw results. Use fetchSeriesLabels() to get labels.\n   * @param match\n   */\n  fetchSeries = async (match: string): Promise<Array<Record<string, string>>> => {\n    const url = '/api/v1/series';\n    const range = this.datasource.getTimeRangeParams(this.timeRange);\n    const params = { ...range, 'match[]': match };\n    return await this.request(url, {}, params, this.getDefaultCacheHeaders());\n  };\n\n  /**\n   * Fetch this only one as we assume this won't change over time. This is cached differently from fetchSeriesLabels\n   * because we can cache more aggressively here and also we do not want to invalidate this cache the same way as in\n   * fetchSeriesLabels.\n   */\n  fetchDefaultSeries = once(async () => {\n    const values = await Promise.all(DEFAULT_KEYS.map((key) => this.fetchLabelValues(key)));\n    return DEFAULT_KEYS.reduce((acc, key, i) => ({ ...acc, [key]: values[i] }), {});\n  });\n}\n\nfunction getNameLabelValue(promQuery: string, tokens: Array<string | Prism.Token>): string {\n  let nameLabelValue = '';\n\n  for (const token of tokens) {\n    if (typeof token === 'string') {\n      nameLabelValue = token;\n      break;\n    }\n  }\n  return nameLabelValue;\n}\n\nfunction isCancelledError(error: unknown): error is {\n  cancelled: boolean;\n} {\n  return typeof error === 'object' && error !== null && 'cancelled' in error && error.cancelled === true;\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/LabelFilterItem.tsx\nimport debounce from 'debounce-promise';\nimport React, { useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { AccessoryButton, InputGroup } from '@grafana/experimental';\nimport { AsyncSelect, Select } from '@grafana/ui';\n\nimport { truncateResult } from '../../language_utils';\nimport { QueryBuilderLabelFilter } from '../shared/types';\n\nexport interface LabelFilterItemProps {\n  defaultOp: string;\n  item: Partial<QueryBuilderLabelFilter>;\n  onChange: (value: QueryBuilderLabelFilter) => void;\n  onGetLabelNames: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  onGetLabelValues: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  onDelete: () => void;\n  invalidLabel?: boolean;\n  invalidValue?: boolean;\n  getLabelValuesAutofillSuggestions: (query: string, labelName?: string) => Promise<SelectableValue[]>;\n  debounceDuration: number;\n}\n\nexport function LabelFilterItem({\n  item,\n  defaultOp,\n  onChange,\n  onDelete,\n  onGetLabelNames,\n  onGetLabelValues,\n  invalidLabel,\n  invalidValue,\n  getLabelValuesAutofillSuggestions,\n  debounceDuration,\n}: LabelFilterItemProps) {\n  const [state, setState] = useState<{\n    labelNames?: SelectableValue[];\n    labelValues?: SelectableValue[];\n    isLoadingLabelNames?: boolean;\n    isLoadingLabelValues?: boolean;\n  }>({});\n  // there's a bug in react-select where the menu doesn't recalculate its position when the options are loaded asynchronously\n  // see https://github.com/grafana/grafana/issues/63558\n  // instead, we explicitly control the menu visibility and prevent showing it until the options have fully loaded\n  const [labelNamesMenuOpen, setLabelNamesMenuOpen] = useState(false);\n  const [labelValuesMenuOpen, setLabelValuesMenuOpen] = useState(false);\n\n  const isMultiSelect = (operator = item.op) => {\n    return operators.find((op) => op.label === operator)?.isMultiValue;\n  };\n\n  const getSelectOptionsFromString = (item?: string): string[] => {\n    if (item) {\n      const regExp = /\\(([^)]+)\\)/;\n      const matches = item?.match(regExp);\n\n      if (matches && matches[0].indexOf('|') > 0) {\n        return [item];\n      }\n\n      if (item.indexOf('|') > 0) {\n        return item.split('|');\n      }\n      return [item];\n    }\n    return [];\n  };\n\n  const labelValueSearch = debounce(\n    (query: string) => getLabelValuesAutofillSuggestions(query, item.label),\n    debounceDuration\n  );\n\n  const itemValue = item?.value ?? '';\n\n  return (\n    <div key={itemValue} data-testid=\"prometheus-dimensions-filter-item\">\n      <InputGroup>\n        {/* Label name select, loads all values at once */}\n        <Select\n          placeholder=\"Select label\"\n          data-testid={selectors.components.QueryBuilder.labelSelect}\n          inputId=\"prometheus-dimensions-filter-item-key\"\n          width=\"auto\"\n          value={item.label ? toOption(item.label) : null}\n          allowCustomValue\n          onOpenMenu={async () => {\n            setState({ isLoadingLabelNames: true });\n            const labelNames = await onGetLabelNames(item);\n            setLabelNamesMenuOpen(true);\n            setState({ labelNames, isLoadingLabelNames: undefined });\n          }}\n          onCloseMenu={() => {\n            setLabelNamesMenuOpen(false);\n          }}\n          isOpen={labelNamesMenuOpen}\n          isLoading={state.isLoadingLabelNames ?? false}\n          options={state.labelNames}\n          onChange={(change) => {\n            if (change.label) {\n              onChange({\n                ...item,\n                op: item.op ?? defaultOp,\n                label: change.label,\n                // eslint-ignore\n              } as QueryBuilderLabelFilter);\n            }\n          }}\n          invalid={invalidLabel}\n        />\n\n        {/* Operator select i.e.   = =~ != !~   */}\n        <Select\n          data-testid={selectors.components.QueryBuilder.matchOperatorSelect}\n          className=\"query-segment-operator\"\n          value={toOption(item.op ?? defaultOp)}\n          options={operators}\n          width=\"auto\"\n          onChange={(change) => {\n            if (change.value != null) {\n              onChange({\n                ...item,\n                op: change.value,\n                value: isMultiSelect(change.value) ? item.value : getSelectOptionsFromString(item?.value)[0],\n                // eslint-ignore\n              } as QueryBuilderLabelFilter);\n            }\n          }}\n        />\n\n        {/* Label value async select: autocomplete calls prometheus API */}\n        <AsyncSelect\n          placeholder=\"Select value\"\n          data-testid={selectors.components.QueryBuilder.valueSelect}\n          inputId=\"prometheus-dimensions-filter-item-value\"\n          width=\"auto\"\n          value={\n            isMultiSelect()\n              ? getSelectOptionsFromString(itemValue).map(toOption)\n              : getSelectOptionsFromString(itemValue).map(toOption)[0]\n          }\n          allowCustomValue\n          formatCreateLabel={(input) => input} // to avoid confusion, opt out of using the `defaultFormatCreateLabel`\n          createOptionPosition={item.op?.includes('~') ? 'first' : 'last'}\n          onOpenMenu={async () => {\n            setState({ isLoadingLabelValues: true });\n            const labelValues = await onGetLabelValues(item);\n            truncateResult(labelValues);\n            setLabelValuesMenuOpen(true);\n            setState({\n              ...state,\n              labelValues,\n              isLoadingLabelValues: undefined,\n            });\n          }}\n          onCloseMenu={() => {\n            setLabelValuesMenuOpen(false);\n          }}\n          isOpen={labelValuesMenuOpen}\n          defaultOptions={state.labelValues}\n          isMulti={isMultiSelect()}\n          isLoading={state.isLoadingLabelValues}\n          loadOptions={labelValueSearch}\n          onChange={(change) => {\n            if (change.value) {\n              onChange({\n                ...item,\n                value: change.value,\n                op: item.op ?? defaultOp,\n                // eslint-ignore\n              } as QueryBuilderLabelFilter);\n            } else {\n              const changes = change\n                .map((change: { label?: string }) => {\n                  return change.label;\n                })\n                .join('|');\n              // eslint-ignore\n              onChange({ ...item, value: changes, op: item.op ?? defaultOp } as QueryBuilderLabelFilter);\n            }\n          }}\n          invalid={invalidValue}\n        />\n        <AccessoryButton aria-label={`remove-${item.label}`} icon=\"times\" variant=\"secondary\" onClick={onDelete} />\n      </InputGroup>\n    </div>\n  );\n}\n\nconst operators = [\n  { label: '=', value: '=', isMultiValue: false },\n  { label: '!=', value: '!=', isMultiValue: false },\n  { label: '=~', value: '=~', isMultiValue: true },\n  { label: '!~', value: '!~', isMultiValue: true },\n];\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/LabelFilters.tsx\nimport { css, cx } from '@emotion/css';\nimport { isEqual } from 'lodash';\nimport React, { useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorFieldGroup, EditorList } from '@grafana/experimental';\nimport { InlineFieldRow, InlineLabel } from '@grafana/ui';\n\nimport { QueryBuilderLabelFilter } from '../shared/types';\n\nimport { LabelFilterItem } from './LabelFilterItem';\n\nexport const MISSING_LABEL_FILTER_ERROR_MESSAGE = 'Select at least 1 label filter (label and value)';\n\nexport interface LabelFiltersProps {\n  labelsFilters: QueryBuilderLabelFilter[];\n  onChange: (labelFilters: Array<Partial<QueryBuilderLabelFilter>>) => void;\n  onGetLabelNames: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  onGetLabelValues: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  /** If set to true, component will show error message until at least 1 filter is selected */\n  labelFilterRequired?: boolean;\n  getLabelValuesAutofillSuggestions: (query: string, labelName?: string) => Promise<SelectableValue[]>;\n  debounceDuration: number;\n  variableEditor?: boolean;\n}\n\nexport function LabelFilters({\n  labelsFilters,\n  onChange,\n  onGetLabelNames,\n  onGetLabelValues,\n  labelFilterRequired,\n  getLabelValuesAutofillSuggestions,\n  debounceDuration,\n  variableEditor,\n}: LabelFiltersProps) {\n  const defaultOp = '=';\n  const [items, setItems] = useState<Array<Partial<QueryBuilderLabelFilter>>>([{ op: defaultOp }]);\n\n  useEffect(() => {\n    if (labelsFilters.length > 0) {\n      setItems(labelsFilters);\n    } else {\n      setItems([{ op: defaultOp }]);\n    }\n  }, [labelsFilters]);\n\n  const onLabelsChange = (newItems: Array<Partial<QueryBuilderLabelFilter>>) => {\n    setItems(newItems);\n\n    // Extract full label filters with both label & value\n    const newLabels = newItems.filter((x) => x.label != null && x.value != null);\n    if (!isEqual(newLabels, labelsFilters)) {\n      onChange(newLabels);\n    }\n  };\n\n  const hasLabelFilter = items.some((item) => item.label && item.value);\n\n  const editorList = () => {\n    return (\n      <EditorList\n        items={items}\n        onChange={onLabelsChange}\n        renderItem={(item: Partial<QueryBuilderLabelFilter>, onChangeItem, onDelete) => (\n          <LabelFilterItem\n            debounceDuration={debounceDuration}\n            item={item}\n            defaultOp={defaultOp}\n            onChange={onChangeItem}\n            onDelete={onDelete}\n            onGetLabelNames={onGetLabelNames}\n            onGetLabelValues={onGetLabelValues}\n            invalidLabel={labelFilterRequired && !item.label}\n            invalidValue={labelFilterRequired && !item.value}\n            getLabelValuesAutofillSuggestions={getLabelValuesAutofillSuggestions}\n          />\n        )}\n      />\n    );\n  };\n\n  return (\n    <>\n      {variableEditor ? (\n        <InlineFieldRow>\n          <div\n            className={cx(\n              css({\n                display: 'flex',\n              })\n            )}\n          >\n            <InlineLabel\n              width={20}\n              tooltip={<div>Optional: used to filter the metric select for this query type.</div>}\n            >\n              Label filters\n            </InlineLabel>\n            {editorList()}\n          </div>\n        </InlineFieldRow>\n      ) : (\n        <EditorFieldGroup>\n          <EditorField\n            label=\"Label filters\"\n            error={MISSING_LABEL_FILTER_ERROR_MESSAGE}\n            invalid={labelFilterRequired && !hasLabelFilter}\n          >\n            {editorList()}\n          </EditorField>\n        </EditorFieldGroup>\n      )}\n    </>\n  );\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/MetricsLabelsSection.tsx\nimport React, { useCallback } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { getMetadataString } from '../../language_provider';\nimport { truncateResult } from '../../language_utils';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { regexifyLabelValuesQueryString } from '../parsingUtils';\nimport { QueryBuilderLabelFilter } from '../shared/types';\nimport { PromVisualQuery } from '../types';\n\nimport { LabelFilters } from './LabelFilters';\nimport { MetricSelect } from './MetricSelect';\n\nexport interface MetricsLabelsSectionProps {\n  query: PromVisualQuery;\n  datasource: PrometheusDatasource;\n  onChange: (update: PromVisualQuery) => void;\n  variableEditor?: boolean;\n  onBlur?: () => void;\n}\n\nexport function MetricsLabelsSection({\n  datasource,\n  query,\n  onChange,\n  onBlur,\n  variableEditor,\n}: MetricsLabelsSectionProps) {\n  // fixing the use of 'as' from refactoring\n  // @ts-ignore\n  const onChangeLabels = (labels) => {\n    onChange({ ...query, labels });\n  };\n  /**\n   * Map metric metadata to SelectableValue for Select component and also adds defined template variables to the list.\n   */\n  const withTemplateVariableOptions = useCallback(\n    async (optionsPromise: Promise<SelectableValue[]>): Promise<SelectableValue[]> => {\n      const variables = datasource.getVariables();\n      const options = await optionsPromise;\n      return [\n        ...variables.map((value: string) => ({ label: value, value })),\n        ...options.map((option: SelectableValue) => ({\n          label: option.value,\n          value: option.value,\n          title: option.description,\n        })),\n      ];\n    },\n    [datasource]\n  );\n\n  /**\n   * Function kicked off when user interacts with label in label filters.\n   * Formats a promQL expression and passes that off to helper functions depending on API support\n   * @param forLabel\n   */\n  const onGetLabelNames = async (forLabel: Partial<QueryBuilderLabelFilter>): Promise<SelectableValue[]> => {\n    // If no metric we need to use a different method\n    if (!query.metric) {\n      await datasource.languageProvider.fetchLabels();\n      return datasource.languageProvider.getLabelKeys().map((k) => ({ value: k }));\n    }\n\n    const labelsToConsider = query.labels.filter((x) => x !== forLabel);\n    labelsToConsider.push({ label: '__name__', op: '=', value: query.metric });\n    const expr = promQueryModeller.renderLabels(labelsToConsider);\n\n    let labelsIndex: Record<string, string[]> = await datasource.languageProvider.fetchLabelsWithMatch(expr);\n\n    // filter out already used labels\n    return Object.keys(labelsIndex)\n      .filter((labelName) => !labelsToConsider.find((filter) => filter.label === labelName))\n      .map((k) => ({ value: k }));\n  };\n\n  const getLabelValuesAutocompleteSuggestions = (\n    queryString?: string,\n    labelName?: string\n  ): Promise<SelectableValue[]> => {\n    const forLabel = {\n      label: labelName ?? '__name__',\n      op: '=~',\n      value: regexifyLabelValuesQueryString(`.*${queryString}`),\n    };\n    const labelsToConsider = query.labels.filter((x) => x.label !== forLabel.label);\n    labelsToConsider.push(forLabel);\n    if (query.metric) {\n      labelsToConsider.push({ label: '__name__', op: '=', value: query.metric });\n    }\n    const interpolatedLabelsToConsider = labelsToConsider.map((labelObject) => ({\n      ...labelObject,\n      label: datasource.interpolateString(labelObject.label),\n      value: datasource.interpolateString(labelObject.value),\n    }));\n    const expr = promQueryModeller.renderLabels(interpolatedLabelsToConsider);\n    let response: Promise<SelectableValue[]>;\n    if (datasource.hasLabelsMatchAPISupport()) {\n      response = getLabelValuesFromLabelValuesAPI(forLabel, expr);\n    } else {\n      response = getLabelValuesFromSeriesAPI(forLabel, expr);\n    }\n\n    return response.then((response: SelectableValue[]) => {\n      truncateResult(response);\n      return response;\n    });\n  };\n\n  /**\n   * Helper function to fetch and format label value results from legacy API\n   * @param forLabel\n   * @param promQLExpression\n   */\n  const getLabelValuesFromSeriesAPI = (\n    forLabel: Partial<QueryBuilderLabelFilter>,\n    promQLExpression: string\n  ): Promise<SelectableValue[]> => {\n    if (!forLabel.label) {\n      return Promise.resolve([]);\n    }\n    const result = datasource.languageProvider.fetchSeries(promQLExpression);\n    const forLabelInterpolated = datasource.interpolateString(forLabel.label);\n    return result.then((result) => {\n      // This query returns duplicate values, scrub them out\n      const set = new Set<string>();\n      result.forEach((labelValue) => {\n        const labelNameString = labelValue[forLabelInterpolated];\n        set.add(labelNameString);\n      });\n\n      return Array.from(set).map((labelValues: string) => ({ label: labelValues, value: labelValues }));\n    });\n  };\n\n  /**\n   * Helper function to fetch label values from a promql string expression and a label\n   * @param forLabel\n   * @param promQLExpression\n   */\n  const getLabelValuesFromLabelValuesAPI = (\n    forLabel: Partial<QueryBuilderLabelFilter>,\n    promQLExpression: string\n  ): Promise<SelectableValue[]> => {\n    if (!forLabel.label) {\n      return Promise.resolve([]);\n    }\n\n    const requestId = `[${datasource.uid}][${query.metric}][${forLabel.label}][${forLabel.op}]`;\n\n    return datasource.languageProvider\n      .fetchSeriesValuesWithMatch(forLabel.label, promQLExpression, requestId)\n      .then((response) => response.map((v) => ({ value: v, label: v })));\n  };\n\n  /**\n   * Function kicked off when users interact with the value of the label filters\n   * Formats a promQL expression and passes that into helper functions depending on API support\n   * @param forLabel\n   */\n  const onGetLabelValues = async (forLabel: Partial<QueryBuilderLabelFilter>): Promise<SelectableValue[]> => {\n    if (!forLabel.label) {\n      return [];\n    }\n    // If no metric is selected, we can get the raw list of labels\n    if (!query.metric) {\n      return (await datasource.languageProvider.getLabelValues(forLabel.label)).map((v) => ({ value: v }));\n    }\n\n    const labelsToConsider = query.labels.filter((x) => x !== forLabel);\n    labelsToConsider.push({ label: '__name__', op: '=', value: query.metric });\n\n    const interpolatedLabelsToConsider = labelsToConsider.map((labelObject) => ({\n      ...labelObject,\n      label: datasource.interpolateString(labelObject.label),\n      value: datasource.interpolateString(labelObject.value),\n    }));\n\n    const expr = promQueryModeller.renderLabels(interpolatedLabelsToConsider);\n\n    if (datasource.hasLabelsMatchAPISupport()) {\n      return getLabelValuesFromLabelValuesAPI(forLabel, expr);\n    } else {\n      return getLabelValuesFromSeriesAPI(forLabel, expr);\n    }\n  };\n\n  const onGetMetrics = useCallback(() => {\n    return withTemplateVariableOptions(getMetrics(datasource, query));\n  }, [datasource, query, withTemplateVariableOptions]);\n\n  return (\n    <>\n      <MetricSelect\n        query={query}\n        onChange={onChange}\n        onGetMetrics={onGetMetrics}\n        datasource={datasource}\n        labelsFilters={query.labels}\n        metricLookupDisabled={datasource.lookupsDisabled}\n        onBlur={onBlur ? onBlur : () => {}}\n        variableEditor={variableEditor}\n      />\n      <LabelFilters\n        debounceDuration={datasource.getDebounceTimeInMilliseconds()}\n        getLabelValuesAutofillSuggestions={getLabelValuesAutocompleteSuggestions}\n        labelsFilters={query.labels}\n        onChange={onChangeLabels}\n        onGetLabelNames={(forLabel) => withTemplateVariableOptions(onGetLabelNames(forLabel))}\n        onGetLabelValues={(forLabel) => withTemplateVariableOptions(onGetLabelValues(forLabel))}\n        variableEditor={variableEditor}\n      />\n    </>\n  );\n}\n\n/**\n * Returns list of metrics, either all or filtered by query param. It also adds description string to each metric if it\n * exists.\n * @param datasource\n * @param query\n */\nasync function getMetrics(\n  datasource: PrometheusDatasource,\n  query: PromVisualQuery\n): Promise<Array<{ value: string; description?: string }>> {\n  // Makes sure we loaded the metadata for metrics. Usually this is done in the start() method of the provider but we\n  // don't use it with the visual builder and there is no need to run all the start() setup anyway.\n  if (!datasource.languageProvider.metricsMetadata) {\n    await datasource.languageProvider.loadMetricsMetadata();\n  }\n\n  // Error handling for when metrics metadata returns as undefined\n  if (!datasource.languageProvider.metricsMetadata) {\n    datasource.languageProvider.metricsMetadata = {};\n  }\n\n  let metrics: string[];\n  if (query.labels.length > 0) {\n    const expr = promQueryModeller.renderLabels(query.labels);\n    metrics = (await datasource.languageProvider.getSeries(expr, true))['__name__'] ?? [];\n  } else {\n    metrics = (await datasource.languageProvider.getLabelValues('__name__')) ?? [];\n  }\n\n  return metrics.map((m) => ({\n    value: m,\n    description: getMetadataString(m, datasource.languageProvider.metricsMetadata!),\n  }));\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/NestedQuery.tsx\nimport { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, toOption } from '@grafana/data';\nimport { EditorRows, FlexItem } from '@grafana/experimental';\nimport { AutoSizeInput, IconButton, Select, useStyles2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { binaryScalarDefs } from '../binaryScalarOperations';\nimport { PromVisualQueryBinary } from '../types';\n\nimport { PromQueryBuilder } from './PromQueryBuilder';\n\nexport interface NestedQueryProps {\n  nestedQuery: PromVisualQueryBinary;\n  datasource: PrometheusDatasource;\n  index: number;\n  onChange: (index: number, update: PromVisualQueryBinary) => void;\n  onRemove: (index: number) => void;\n  onRunQuery: () => void;\n  showExplain: boolean;\n}\n\nexport const NestedQuery = React.memo<NestedQueryProps>((props) => {\n  const { nestedQuery, index, datasource, onChange, onRemove, onRunQuery, showExplain } = props;\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.card}>\n      <div className={styles.header}>\n        <div className={styles.name}>Operator</div>\n        <Select\n          width=\"auto\"\n          options={operators}\n          value={toOption(nestedQuery.operator)}\n          onChange={(value) => {\n            onChange(index, {\n              ...nestedQuery,\n              operator: value.value!,\n            });\n          }}\n        />\n        <div className={styles.name}>Vector matches</div>\n        <div className={styles.vectorMatchWrapper}>\n          <Select<PromVisualQueryBinary['vectorMatchesType']>\n            width=\"auto\"\n            value={nestedQuery.vectorMatchesType || 'on'}\n            allowCustomValue\n            options={[\n              { value: 'on', label: 'on' },\n              { value: 'ignoring', label: 'ignoring' },\n            ]}\n            onChange={(val) => {\n              onChange(index, {\n                ...nestedQuery,\n                vectorMatchesType: val.value,\n              });\n            }}\n          />\n          <AutoSizeInput\n            className={styles.vectorMatchInput}\n            minWidth={20}\n            defaultValue={nestedQuery.vectorMatches}\n            onCommitChange={(evt) => {\n              onChange(index, {\n                ...nestedQuery,\n                vectorMatches: evt.currentTarget.value,\n                vectorMatchesType: nestedQuery.vectorMatchesType || 'on',\n              });\n            }}\n          />\n        </div>\n        <FlexItem grow={1} />\n        <IconButton name=\"times\" size=\"sm\" onClick={() => onRemove(index)} tooltip=\"Remove match\" />\n      </div>\n      <div className={styles.body}>\n        <EditorRows>\n          <PromQueryBuilder\n            showExplain={showExplain}\n            query={nestedQuery.query}\n            datasource={datasource}\n            onRunQuery={onRunQuery}\n            onChange={(update) => {\n              onChange(index, { ...nestedQuery, query: update });\n            }}\n          />\n        </EditorRows>\n      </div>\n    </div>\n  );\n});\n\nconst operators = binaryScalarDefs.map((def) => ({ label: def.sign, value: def.sign }));\n\nNestedQuery.displayName = 'NestedQuery';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css({\n      label: 'card',\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(0.5),\n    }),\n    header: css({\n      label: 'header',\n      padding: theme.spacing(0.5, 0.5, 0.5, 1),\n      gap: theme.spacing(1),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    name: css({\n      label: 'name',\n      whiteSpace: 'nowrap',\n    }),\n    body: css({\n      label: 'body',\n      paddingLeft: theme.spacing(2),\n    }),\n    vectorMatchInput: css({\n      label: 'vectorMatchInput',\n      marginLeft: -1,\n    }),\n    vectorMatchWrapper: css({\n      label: 'vectorMatchWrapper',\n      display: 'flex',\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/NestedQueryList.tsx\nimport React from 'react';\n\nimport { Stack } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { PromVisualQuery, PromVisualQueryBinary } from '../types';\n\nimport { NestedQuery } from './NestedQuery';\n\nexport interface NestedQueryListProps {\n  query: PromVisualQuery;\n  datasource: PrometheusDatasource;\n  onChange: (query: PromVisualQuery) => void;\n  onRunQuery: () => void;\n  showExplain: boolean;\n}\n\nexport function NestedQueryList(props: NestedQueryListProps) {\n  const { query, datasource, onChange, onRunQuery, showExplain } = props;\n  const nestedQueries = query.binaryQueries ?? [];\n\n  const onNestedQueryUpdate = (index: number, update: PromVisualQueryBinary) => {\n    const updatedList = [...nestedQueries];\n    updatedList.splice(index, 1, update);\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  const onRemove = (index: number) => {\n    const updatedList = [...nestedQueries.slice(0, index), ...nestedQueries.slice(index + 1)];\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  return (\n    <Stack direction=\"column\" gap={1}>\n      {nestedQueries.map((nestedQuery, index) => (\n        <NestedQuery\n          key={index.toString()}\n          nestedQuery={nestedQuery}\n          index={index}\n          onChange={onNestedQueryUpdate}\n          datasource={datasource}\n          onRemove={onRemove}\n          onRunQuery={onRunQuery}\n          showExplain={showExplain}\n        />\n      ))}\n    </Stack>\n  );\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilderExplained.tsx\nimport React from 'react';\n\nimport { Stack } from '@grafana/ui';\n\nimport promqlGrammar from '../../promql';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { OperationExplainedBox } from '../shared/OperationExplainedBox';\nimport { OperationListExplained } from '../shared/OperationListExplained';\nimport { RawQuery } from '../shared/RawQuery';\nimport { PromVisualQuery } from '../types';\n\nexport const EXPLAIN_LABEL_FILTER_CONTENT = 'Fetch all series matching metric name and label filters.';\n\nexport interface PromQueryBuilderExplainedProps {\n  query: string;\n}\n\nexport const PromQueryBuilderExplained = React.memo<PromQueryBuilderExplainedProps>(({ query }) => {\n  const visQuery = buildVisualQueryFromString(query || '').query;\n  const lang = { grammar: promqlGrammar, name: 'promql' };\n\n  return (\n    <Stack gap={0.5} direction=\"column\">\n      <OperationExplainedBox\n        stepNumber={1}\n        title={<RawQuery query={`${visQuery.metric} ${promQueryModeller.renderLabels(visQuery.labels)}`} lang={lang} />}\n      >\n        {EXPLAIN_LABEL_FILTER_CONTENT}\n      </OperationExplainedBox>\n      <OperationListExplained<PromVisualQuery>\n        stepNumber={2}\n        queryModeller={promQueryModeller}\n        query={visQuery}\n        lang={lang}\n      />\n    </Stack>\n  );\n});\n\nPromQueryBuilderExplained.displayName = 'PromQueryBuilderExplained';\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/promQail/QuerySuggestionItem.tsx\nimport { cx } from '@emotion/css';\nimport React, { FormEvent, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, RadioButtonList, Spinner, TextArea, Toggletip, useTheme2 } from '@grafana/ui';\n\nimport { buildVisualQueryFromString } from '../../parsing';\nimport { PromVisualQuery } from '../../types';\n\nimport { getStyles } from './PromQail';\nimport { QuerySuggestion } from './types';\n\nexport type Props = {\n  querySuggestion: QuerySuggestion;\n  order: number;\n  queryExplain: (idx: number) => void;\n  historical: boolean;\n  onChange: (query: PromVisualQuery) => void;\n  closeDrawer: () => void;\n  last: boolean;\n  prompt: string;\n  allSuggestions: string | undefined;\n};\n\nconst suggestionOptions: SelectableValue[] = [\n  { label: 'Yes', value: 'yes' },\n  { label: 'No', value: 'no' },\n];\nconst explationOptions: SelectableValue[] = [\n  { label: 'Too vague', value: 'too vague' },\n  { label: 'Too technical', value: 'too technical' },\n  { label: 'Inaccurate', value: 'inaccurate' },\n  { label: 'Other', value: 'other' },\n];\n\nexport function QuerySuggestionItem(props: Props) {\n  const { querySuggestion, order, queryExplain, historical, onChange, closeDrawer, last, allSuggestions, prompt } =\n    props;\n  const [showExp, updShowExp] = useState<boolean>(false);\n\n  const [gaveExplanationFeedback, updateGaveExplanationFeedback] = useState<boolean>(false);\n  const [gaveSuggestionFeedback, updateGaveSuggestionFeedback] = useState<boolean>(false);\n\n  const [suggestionFeedback, setSuggestionFeedback] = useState({\n    radioInput: '',\n    text: '',\n  });\n\n  const [explanationFeedback, setExplanationFeedback] = useState({\n    radioInput: '',\n    text: '',\n  });\n\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  const { query, explanation } = querySuggestion;\n\n  const feedbackToggleTip = (type: string) => {\n    const updateRadioFeedback = (value: string) => {\n      if (type === 'explanation') {\n        setExplanationFeedback({\n          ...explanationFeedback,\n          radioInput: value,\n        });\n      } else {\n        setSuggestionFeedback({\n          ...suggestionFeedback,\n          radioInput: value,\n        });\n      }\n    };\n\n    const updateTextFeedback = (e: FormEvent<HTMLTextAreaElement>) => {\n      if (type === 'explanation') {\n        setExplanationFeedback({\n          ...explanationFeedback,\n          text: e.currentTarget.value,\n        });\n      } else {\n        setSuggestionFeedback({\n          ...suggestionFeedback,\n          text: e.currentTarget.value,\n        });\n      }\n    };\n\n    const disabledButton = () =>\n      type === 'explanation' ? !explanationFeedback.radioInput : !suggestionFeedback.radioInput;\n\n    const questionOne =\n      type === 'explanation' ? 'Why was the explanation not helpful?' : 'Were the query suggestions helpful?';\n\n    return (\n      <div className={styles.suggestionFeedback}>\n        <div>\n          <div className={styles.feedbackQuestion}>\n            <h6>{questionOne}</h6>\n            <i>(Required)</i>\n          </div>\n          <RadioButtonList\n            name=\"default\"\n            options={type === 'explanation' ? explationOptions : suggestionOptions}\n            value={type === 'explanation' ? explanationFeedback.radioInput : suggestionFeedback.radioInput}\n            onChange={updateRadioFeedback}\n          />\n        </div>\n        <div className={cx(type === 'explanation' && styles.explationTextInput)}>\n          {type !== 'explanation' && (\n            <div className={styles.feedbackQuestion}>\n              <h6>How can we improve the query suggestions?</h6>\n            </div>\n          )}\n          <TextArea\n            type=\"text\"\n            aria-label=\"Promqail suggestion text\"\n            placeholder=\"Enter your feedback\"\n            value={type === 'explanation' ? explanationFeedback.text : suggestionFeedback.text}\n            onChange={updateTextFeedback}\n            cols={100}\n          />\n        </div>\n\n        <div className={styles.submitFeedback}>\n          <Button\n            variant=\"primary\"\n            size=\"sm\"\n            disabled={disabledButton()}\n            onClick={() => {\n              // submit the rudderstack event\n              if (type === 'explanation') {\n                explanationFeedbackEvent(\n                  explanationFeedback.radioInput,\n                  explanationFeedback.text,\n                  querySuggestion,\n                  historical,\n                  prompt\n                );\n                updateGaveExplanationFeedback(true);\n              } else {\n                suggestionFeedbackEvent(\n                  suggestionFeedback.radioInput,\n                  suggestionFeedback.text,\n                  allSuggestions ?? '',\n                  historical,\n                  prompt\n                );\n                updateGaveSuggestionFeedback(true);\n              }\n            }}\n          >\n            Submit\n          </Button>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div className={styles.querySuggestion}>\n        <div title={query} className={cx(styles.codeText, styles.longCode)}>\n          {`${order}.  ${query}`}\n        </div>\n        <div className={styles.useButton}>\n          <Button\n            variant=\"primary\"\n            size=\"sm\"\n            onClick={() => {\n              reportInteraction('grafana_prometheus_promqail_use_query_button_clicked', {\n                query: querySuggestion.query,\n              });\n              const pvq = buildVisualQueryFromString(querySuggestion.query);\n              // check for errors!\n              onChange(pvq.query);\n              closeDrawer();\n            }}\n          >\n            Use\n          </Button>\n        </div>\n      </div>\n      <div>\n        <Button\n          fill=\"text\"\n          variant=\"secondary\"\n          icon={showExp ? 'angle-up' : 'angle-down'}\n          onClick={() => {\n            updShowExp(!showExp);\n            queryExplain(order - 1);\n          }}\n          className={cx(styles.bodySmall)}\n          size=\"sm\"\n        >\n          Explainer\n        </Button>\n        {!showExp && order !== 5 && <div className={styles.textPadding}></div>}\n\n        {showExp && !querySuggestion.explanation && (\n          <div className={styles.center}>\n            <Spinner />\n          </div>\n        )}\n        {showExp && querySuggestion.explanation && (\n          <>\n            <div className={cx(styles.bodySmall, styles.explainPadding)}>\n              <div className={styles.textPadding}>This query is trying to answer the question:</div>\n              <div className={styles.textPadding}>{explanation}</div>\n              <div className={styles.textPadding}>\n                Learn more with this{' '}\n                <a\n                  className={styles.doc}\n                  href={'https://prometheus.io/docs/prometheus/latest/querying/examples/#query-examples'}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Prometheus doc\n                </a>\n              </div>\n\n              <div className={cx(styles.rightButtons, styles.secondaryText)}>\n                Was this explanation helpful?\n                <div className={styles.floatRight}>\n                  {!gaveExplanationFeedback ? (\n                    <>\n                      <Button\n                        fill=\"outline\"\n                        variant=\"secondary\"\n                        size=\"sm\"\n                        className={styles.leftButton}\n                        onClick={() => {\n                          explanationFeedbackEvent('Yes', '', querySuggestion, historical, prompt);\n                          updateGaveExplanationFeedback(true);\n                        }}\n                      >\n                        Yes\n                      </Button>\n                      <Toggletip\n                        aria-label=\"Suggestion feedback\"\n                        content={feedbackToggleTip('explanation')}\n                        placement=\"bottom-end\"\n                        closeButton={true}\n                      >\n                        <Button fill=\"outline\" variant=\"secondary\" size=\"sm\">\n                          No\n                        </Button>\n                      </Toggletip>\n                    </>\n                  ) : (\n                    'Thank you for your feedback!'\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {!last && <hr />}\n          </>\n        )}\n        {last && (\n          <div className={cx(styles.feedbackStyle)}>\n            {!gaveSuggestionFeedback ? (\n              <Toggletip\n                aria-label=\"Suggestion feedback\"\n                content={feedbackToggleTip('suggestion')}\n                placement=\"bottom-end\"\n                closeButton={true}\n              >\n                <Button fill=\"outline\" variant=\"secondary\" size=\"sm\">\n                  Give feedback on suggestions\n                </Button>\n              </Toggletip>\n            ) : (\n              // do this weird thing because the toggle tip doesn't allow an extra close function\n              <Button fill=\"outline\" variant=\"secondary\" size=\"sm\" disabled={true}>\n                Thank you for your feedback!\n              </Button>\n            )}\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nfunction explanationFeedbackEvent(\n  radioInputFeedback: string,\n  textFeedback: string,\n  querySuggestion: QuerySuggestion,\n  historical: boolean,\n  prompt: string\n) {\n  const event = 'grafana_prometheus_promqail_explanation_feedback';\n\n  reportInteraction(event, {\n    helpful: radioInputFeedback,\n    textFeedback: textFeedback,\n    suggestionType: historical ? 'historical' : 'AI',\n    query: querySuggestion.query,\n    explanation: querySuggestion.explanation,\n    prompt: prompt,\n  });\n}\n\nfunction suggestionFeedbackEvent(\n  radioInputFeedback: string,\n  textFeedback: string,\n  allSuggestions: string,\n  historical: boolean,\n  prompt: string\n) {\n  const event = 'grafana_prometheus_promqail_suggestion_feedback';\n\n  reportInteraction(event, {\n    helpful: radioInputFeedback,\n    textFeedback: textFeedback,\n    suggestionType: historical ? 'historical' : 'AI',\n    allSuggestions: allSuggestions,\n    prompt: prompt,\n  });\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/promQail/types.ts\nexport type QuerySuggestion = {\n  query: string;\n  explanation: string;\n};\n\nexport enum SuggestionType {\n  Historical = 'historical',\n  AI = 'AI',\n}\n\nexport type Interaction = {\n  prompt: string;\n  suggestionType: SuggestionType;\n  suggestions: QuerySuggestion[];\n  isLoading: boolean;\n  explanationIsLoading: boolean;\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/promQail/QuerySuggestionContainer.tsx\nimport { cx } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { Button, useTheme2 } from '@grafana/ui';\n\nimport { PromVisualQuery } from '../../types';\n\nimport { getStyles, queryAssistanttestIds } from './PromQail';\nimport { QuerySuggestionItem } from './QuerySuggestionItem';\nimport { QuerySuggestion, SuggestionType } from './types';\n\nexport type Props = {\n  querySuggestions: QuerySuggestion[];\n  suggestionType: SuggestionType;\n  closeDrawer: () => void;\n  nextInteraction: () => void;\n  queryExplain: (idx: number) => void;\n  onChange: (query: PromVisualQuery) => void;\n  prompt: string;\n};\n\nexport function QuerySuggestionContainer(props: Props) {\n  const { suggestionType, querySuggestions, closeDrawer, nextInteraction, queryExplain, onChange, prompt } = props;\n\n  const [hasNextInteraction, updateHasNextInteraction] = useState<boolean>(false);\n\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  let text, secondaryText, refineText;\n\n  if (suggestionType === SuggestionType.Historical) {\n    text = `Here are ${querySuggestions.length} query suggestions:`;\n    refineText = 'I want to write a prompt';\n  } else if (suggestionType === SuggestionType.AI) {\n    text = text = 'Here is your query suggestion:';\n    secondaryText =\n      'This query is based off of natural language descriptions of the most commonly used PromQL queries.';\n    refineText = 'Refine prompt';\n  }\n\n  return (\n    <>\n      {suggestionType === SuggestionType.Historical ? (\n        <div className={styles.bottomMargin}>{text}</div>\n      ) : (\n        <>\n          <div className={styles.textPadding}>{text}</div>\n          <div className={cx(styles.secondaryText, styles.bottomMargin)}>{secondaryText}</div>\n        </>\n      )}\n\n      <div className={styles.infoContainerWrapper}>\n        <div className={styles.infoContainer}>\n          {querySuggestions.map((qs: QuerySuggestion, idx: number) => {\n            return (\n              <QuerySuggestionItem\n                historical={suggestionType === SuggestionType.Historical}\n                querySuggestion={qs}\n                key={idx}\n                order={idx + 1}\n                queryExplain={queryExplain}\n                onChange={onChange}\n                closeDrawer={closeDrawer}\n                last={idx === querySuggestions.length - 1}\n                // for feedback rudderstack events\n                allSuggestions={querySuggestions.reduce((acc: string, qs: QuerySuggestion) => {\n                  return acc + '$$' + qs.query;\n                }, '')}\n                prompt={prompt ?? ''}\n              />\n            );\n          })}\n        </div>\n      </div>\n      {!hasNextInteraction && (\n        <div className={styles.nextInteractionHeight}>\n          <div className={cx(styles.afterButtons, styles.textPadding)}>\n            <Button\n              onClick={() => {\n                updateHasNextInteraction(true);\n                nextInteraction();\n              }}\n              data-testid={queryAssistanttestIds.refinePrompt}\n              fill=\"outline\"\n              variant=\"secondary\"\n              size=\"md\"\n            >\n              {refineText}\n            </Button>\n          </div>\n          <div className={cx(styles.textPadding, styles.floatRight)}>\n            <Button fill=\"outline\" variant=\"secondary\" size=\"md\" onClick={closeDrawer}>\n              Cancel\n            </Button>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","var img = \"data:image/svg+xml,%3csvg width='26' height='27' viewBox='0 0 26 27' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M0 9.5C0 4.52944 4.02944 0.5 9 0.5H17C21.9706 0.5 26 4.52944 26 9.5V15.5C26 20.4706 21.9706 24.5 17 24.5H0V9.5Z' fill='url(%23paint0_linear_68_17626)'/%3e%3cpath d='M8.91193 18.7053C7.14915 18.7053 5.77876 17.7031 5.77876 15.88C5.77876 13.7731 7.57777 13.3143 9.33452 13.109C11.0007 12.9158 11.6768 12.9279 11.6768 12.2699V12.2276C11.6768 11.1772 11.0792 10.5675 9.91406 10.5675C8.70064 10.5675 8.0245 11.2013 7.75888 11.8594L6.0625 11.473C6.66619 9.78267 8.21165 9.10653 9.88992 9.10653C11.3629 9.10653 13.4879 9.64382 13.4879 12.3423V18.5H11.7251V17.2322H11.6527C11.3086 17.9265 10.4453 18.7053 8.91193 18.7053ZM9.30433 17.2564C10.8075 17.2564 11.6829 16.2543 11.6829 15.1555V13.9602C11.4233 14.2198 10.0348 14.3768 9.44922 14.4553C8.40483 14.5941 7.54759 14.9382 7.54759 15.9041C7.54759 16.7976 8.28409 17.2564 9.30433 17.2564ZM15.8921 18.5V9.22727H17.6972V18.5H15.8921ZM16.8037 7.79652C16.1759 7.79652 15.6627 7.31357 15.6627 6.72195C15.6627 6.13033 16.1759 5.64133 16.8037 5.64133C17.4255 5.64133 17.9447 6.13033 17.9447 6.72195C17.9447 7.31357 17.4255 7.79652 16.8037 7.79652Z' fill='white'/%3e%3cpath d='M0 24.5H3L0 26.5V24.5Z' fill='%235B5CC2'/%3e%3cdefs%3e%3clinearGradient id='paint0_linear_68_17626' x1='4.76666' y1='-5.1' x2='24.472' y2='5.4613' gradientUnits='userSpaceOnUse'%3e%3cstop offset='0.0333246' stop-color='%23965AFB'/%3e%3cstop offset='1' stop-color='%23096174'/%3e%3c/linearGradient%3e%3c/defs%3e%3c/svg%3e\";\n  export default img;","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/promQail/prompts.ts\nexport const ExplainSystemPrompt = `You are an expert in Prometheus, the event monitoring and alerting application.\n\nYou are given relevant PromQL documentation, a type and description for a Prometheus metric, and a PromQL query on that metric. Using the provided information for reference, please explain what the output of a given query is in 1 sentences. Do not walk through what the functions do separately, make your answer concise. \n\nInput will be in the form:\n\n\nPromQL Documentation:\n<PromQL documentation>\n\nPromQL Metrics Metadata:\n<metric_name>(<metric type of the metric queried>): <description of what the metric means>\n\nPromQL Expression: \n<PromQL query>\n\nExamples of input and output\n----------\nPromQL Documentation:\nA counter is a cumulative metric that represents a single monotonically increasing counter whose value can only increase or be reset to zero on restart. For example, you can use a counter to represent the number of requests served, tasks completed, or errors.\ntopk (largest k elements by sample value)\nsum (calculate sum over dimensions)\nrate(v range-vector) calculates the per-second average rate of increase of the time series in the range vector. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for. \n\nPromQL Metrics Metadata:\ntraces_exporter_sent_spans(counter): Number of spans successfully sent to destination.\n\nPromQL Expression:\ntopk(3, sum by(cluster) (rate(traces_exporter_sent_spans{exporter=\"otlp\"}[5m])))\n\nThis query is trying to answer the question:\nWhat is the top 3 clusters that have successfully sent the most number of spans to the destination?\n`;\n\nexport type ExplainUserPromptParams = {\n  documentation: string;\n  metricName: string;\n  metricType: string;\n  metricMetadata: string;\n  query: string;\n};\n\nexport function GetExplainUserPrompt({\n  documentation,\n  metricName,\n  metricType,\n  metricMetadata,\n  query,\n}: ExplainUserPromptParams): string {\n  if (documentation === '') {\n    documentation = 'No documentation provided.';\n  }\n  if (metricMetadata === '') {\n    metricMetadata = 'No description provided.';\n  }\n  return `\n        PromQL Documentation: \n        ${documentation}\n\n        PromQL Metrics Metadata:\n        ${metricName}(${metricType}): ${metricMetadata}\n\n        PromQL Expression: \n        ${query}\n\n        This query is trying to answer the question:\n    `;\n}\n\nexport const SuggestSystemPrompt = `You are a Prometheus Query Language (PromQL) expert assistant inside Grafana.\nWhen the user asks a question, respond with a valid PromQL query and only the query.\n\nTo help you answer the question, you will receive:\n- List of potentially relevant PromQL templates with descriptions, ranked by semantic search score\n- Prometheus metric\n- Metric type\n- Available Prometheus metric labels\n- User question\n\nPolicy:\n- Do not invent labels names, you can only use the available labels\n- For rate queries, use the $__rate_interval variable`;\n\n// rewrite with a type\nexport type SuggestUserPromptParams = {\n  promql: string;\n  question: string;\n  metricType: string;\n  labels: string;\n  templates: string;\n};\n\nexport function GetSuggestUserPrompt({\n  promql,\n  question,\n  metricType,\n  labels,\n  templates,\n}: SuggestUserPromptParams): string {\n  if (templates === '') {\n    templates = 'No templates provided.';\n  } else {\n    templates = templates.replace(/\\n/g, '\\n  ');\n  }\n  return `Relevant PromQL templates:\n  ${templates}\n  \n  Prometheus metric: ${promql}\n  Metric type: ${metricType}\n  Available Prometheus metric labels: ${labels}\n  User question: ${question}\n  \n  \\`\\`\\`promql`;\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/promQail/state/state.ts\nimport { PromVisualQuery } from '../../../types';\nimport { Interaction, SuggestionType } from '../types';\n\n/**\n * Initial state for PromQAIL\n * @param query the prometheus query with metric and possible labels\n */\nexport function initialState(query?: PromVisualQuery, showStartingMessage?: boolean): PromQailState {\n  return {\n    query: query ?? {\n      metric: '',\n      labels: [],\n      operations: [],\n    },\n    showExplainer: false,\n    showStartingMessage: showStartingMessage ?? true,\n    indicateCheckbox: false,\n    askForQueryHelp: false,\n    interactions: [],\n  };\n}\n\n/**\n * The PromQAIL state object\n */\nexport interface PromQailState {\n  query: PromVisualQuery;\n  showExplainer: boolean;\n  showStartingMessage: boolean;\n  indicateCheckbox: boolean;\n  askForQueryHelp: boolean;\n  interactions: Interaction[];\n}\n\nexport function createInteraction(suggestionType: SuggestionType, isLoading?: boolean): Interaction {\n  return {\n    suggestionType: suggestionType,\n    prompt: '',\n    suggestions: [],\n    isLoading: isLoading ?? false,\n    explanationIsLoading: false,\n  };\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/promQail/state/templates.ts\nimport { QuerySuggestion } from '../types';\n\ninterface TemplateData {\n  template: string;\n  description: string;\n}\n\nexport const generalTemplates: TemplateData[] = [\n  {\n    template: 'metric_a{}',\n    description: 'Get the data for \"metric_a\"',\n  },\n  {\n    template: 'avg by(c) (metric_a{})',\n    description: 'Average of all series in \"metric_a\" grouped by the label \"c\"',\n  },\n  {\n    template: 'count by(d) (metric_a{})',\n    description: 'Number of series in the metric \"metric_a\" grouped by the label \"d\"',\n  },\n  {\n    template: 'sum by(g) (sum_over_time(metric_a{}[1h]))',\n    description:\n      'For each series in the metric \"metric_a\", sum all values over 1 hour, then group those series by label \"g\" and sum.',\n  },\n  {\n    template: 'count(metric_a{})',\n    description: 'Count of series in the metric \"metric_a\"',\n  },\n  {\n    template: '(metric_a{})',\n    description: 'Get the data for \"metric_a\"',\n  },\n  {\n    template: 'count_over_time(metric_a{}[1h])',\n    description: 'Number of series of metric_a in a 1 hour interval',\n  },\n  {\n    template: 'changes(metric_a{}[1m])',\n    description: 'Number of times the values of each series in metric_a have changed in 1 minute periods',\n  },\n  {\n    template: 'count(count by(g) (metric_a{}))',\n    description: 'Total number of series in metric_a',\n  },\n  {\n    template: 'last_over_time(metric_a{}[1h])',\n    description: 'For each series in metric_a, get the last value in the 1 hour period.',\n  },\n  {\n    template: 'sum by(g) (count_over_time(metric_a{}[1h]))',\n    description: 'Grouped sum over the label \"g\" of the number of series of metric_a in a 1 hour period',\n  },\n  {\n    template: 'count(metric_a{} == 99)',\n    description: 'Number of series of metric_a that have value 99',\n  },\n  {\n    template: 'min(metric_a{})',\n    description: 'At each timestamp, find the minimum of all series of the metric \"metric_a\"',\n  },\n  {\n    template: 'metric_a{} != 99',\n    description: 'Series of metric_a which do not have the value 99',\n  },\n  {\n    template: 'metric_a{} - 99',\n    description: 'metric_a minus 99',\n  },\n  {\n    template: 'quantile_over_time(0.99,metric_a{}[1h])',\n    description: 'The 99th quantile of values of metric_a in 1 hour',\n  },\n  {\n    template: 'count_values(\"aaaa\",metric_a{})',\n    description: 'Count number of label values for a label named \"aaaa\"',\n  },\n];\n\nexport const counterTemplates: TemplateData[] = [\n  {\n    template: 'sum by(d) (rate(metric_a{}[1h]))',\n    description:\n      'Sum of the rate of increase or decrease of the metric \"metric_a\" per 1 hour period, grouped by the label \"d\"',\n  },\n  {\n    template: 'rate(metric_a{}[1m])',\n    description: 'Rate of change of the metric \"metric_a\" over 1 minute',\n  },\n  {\n    template: 'sum by(a) (increase(metric_a{}[5m]))',\n    description:\n      'Taking the metric \"metric_a\" find the increase in 5 minute periods of each series and aggregate sum over the label \"a\"',\n  },\n  {\n    template: 'sum(rate(metric_a{}[1m]))',\n    description: 'Total rate of change of all series of metric \"metric_a\" in 1 minute intervals',\n  },\n  {\n    template: 'sum(increase(metric_a{}[10m]))',\n    description: 'Total increase for each series of metric \"metric_a\" in 10 minute intervals',\n  },\n  {\n    template: 'increase(metric_a{}[1h])',\n    description: 'Increase in all series of \"metric_a\" in 1 hour period',\n  },\n  {\n    template: 'sum by(d) (irate(metric_a{}[1h]))',\n    description: 'Sum of detailed rate of change of the metric \"metric_a\" over 1 hour grouped by label \"d\"',\n  },\n  {\n    template: 'irate(metric_a{}[1h])',\n    description: 'Detailed rate of change of the metric \"metric_a\" over 1 hour',\n  },\n  {\n    template: 'avg by(d) (rate(metric_a{}[1h]))',\n    description:\n      'Taking the rate of change of the metric \"metric_a\" in a 1 hour period, group by the label \"d\" and find the average of each group',\n  },\n  {\n    template: 'topk(5,sum by(g) (rate(metric_a{}[1h])))',\n    description: 'Top 5 of the summed groups \"g\" of the rate of change of metric_a',\n  },\n  {\n    template: 'sum(rate(metric_a{}[1h])) / sum(rate(metric_a{}[1h]))',\n    description: 'Relative sums of metric_a with different labels',\n  },\n  {\n    template: 'histogram_quantile(99,rate(metric_a{}[1h]))',\n    description: '99th percentile of the rate of change of metric_a in 1 hour periods',\n  },\n  {\n    template: 'avg(rate(metric_a{}[1m]))',\n    description: 'Average of the rate of all series of metric_a in 1 minute periods',\n  },\n  {\n    template: 'rate(metric_a{}[5m]) > 99',\n    description: 'Show series of metric_a only if their rate over 5 minutes is greater than 99',\n  },\n  {\n    template: 'count by(g) (rate(metric_a{}[1h]))',\n    description: 'Count of series of metric_a over all labels \"g\"',\n  },\n];\n\nexport const histogramTemplates: TemplateData[] = [\n  {\n    template: 'histogram_quantile(99,sum by(le) (rate(metric_a{}[1h])))',\n    description:\n      'Calculate the rate at which the metric \"metric_a\" is increasing or decreasing, summed over each bucket label \"le\", and then calculates the 99th percentile of those rates.',\n  },\n  {\n    template: 'histogram_quantile(99,sum by(g) (metric_a{}))',\n    description: '99th percentile of the sum of metric_a grouped by label \"g\"',\n  },\n  {\n    template: 'histogram_quantile(99,sum by(g) (irate(metric_a{}[1h])))',\n    description: '99th percentile of the grouped by \"g\" sum of the rate of each series in metric_a in an hour',\n  },\n  {\n    template: 'histogram_quantile(99,metric_a{})',\n    description: '99th percentile of metric_a',\n  },\n];\n\nexport const gaugeTemplates: TemplateData[] = [\n  {\n    template: 'sum by(c) (metric_a{})',\n    description: 'Sum the metric \"metric_a\" by each value in label \"c\"',\n  },\n  {\n    template: 'sum(metric_a{})',\n    description: 'Total sum of all the series of the metric named \"metric_a\"',\n  },\n  {\n    template: 'max by(dd) (metric_a{})',\n    description: 'Grouping the series the metric \"metric_a\" by the label \"dd\", get the maximum value of each group',\n  },\n  {\n    template: 'max(metric_a{})',\n    description: 'Maximum value of all series of the metric \"metric_a\" ',\n  },\n  {\n    template: 'avg(metric_a{})',\n    description: 'Average value of all the series of metric \"metric_a\"',\n  },\n  {\n    template: 'metric_a{} > 99',\n    description: 'Show only the series of metric \"metric_a\" which currently have value greater than 99',\n  },\n  {\n    template: 'metric_a{} / 99',\n    description: 'Values for \"metric_a\" all divided by 99',\n  },\n  {\n    template: 'metric_a{} == 99',\n    description: 'Show series of metric_a that have value 99',\n  },\n  {\n    template: 'sum_over_time(metric_a{}[1h])',\n    description: 'Sum each series of metric_a over 1 hour',\n  },\n  {\n    template: 'avg_over_time(metric_a{}[1h])',\n    description: 'Average of each series of metric_a in a 1 hour period',\n  },\n  {\n    template: 'sum(sum_over_time(metric_a{}[1h]))',\n    description: 'Sum of all values in all series in a 1 hour period',\n  },\n  {\n    template: 'delta(metric_a{}[1m])',\n    description: 'Span or delta (maximum - minimum) of values of the metric \"metric_a\" in a 1 minute period. ',\n  },\n  {\n    template: 'avg by(g) (avg_over_time(metric_a{}[1h]))',\n    description:\n      'For 1 hour, take each series and find the average, then group by label \"g\" and find the average of each group',\n  },\n  {\n    template: 'max_over_time(metric_a{}[1h])',\n    description: 'Maximum values of each series in metric \"metric_a\" in a 1 hour period',\n  },\n  {\n    template: 'metric_a{} * 99',\n    description: 'Values of metric_a multiplied by 99',\n  },\n  {\n    template: 'metric_a{} < 99',\n    description: 'Series of metric_a that have values less than 99',\n  },\n  {\n    template: 'max by() (max_over_time(metric_a{}[1h]))',\n    description: 'Find maximum value of all series in 1 hour periods',\n  },\n  {\n    template: 'topk(99,metric_a{})',\n    description: 'First 5 series of metric_a that have the highest values',\n  },\n  {\n    template: 'min by(g) (metric_a{})',\n    description: 'Minimum values of the series of metric_a grouped by label \"g\"',\n  },\n  {\n    template: 'topk(10,sum by(g) (metric_a{}))',\n    description: \"Top 10 of the series of metric_a grouped and summed by the label 'g'\",\n  },\n  {\n    template: 'avg(avg_over_time(metric_a{}[1h]))',\n    description: 'Average of all values inside a 1 hour period',\n  },\n  {\n    template: 'quantile by(h) (0.95,metric_a{})',\n    description: 'Calculate 95th percentile of metric_a when aggregated by the label \"h\"',\n  },\n  {\n    template: 'avg by(g) (metric_a{} > 99)',\n    description:\n      'Taking all series of metric_a with value greater than 99, group by label \"g\" and find the average of each group',\n  },\n  {\n    template: 'sum(metric_a{}) / 99',\n    description: 'Sum of all series of metric_a divided by 99',\n  },\n  {\n    template: 'count(sum by(g) (metric_a{}))',\n    description: 'Number of series of metric_a grouped by the label \"g\"',\n  },\n  {\n    template: 'max(max_over_time(metric_a{}[1h]))',\n    description: 'Find the max value of all series of metric_a in a 1 hour period',\n  },\n];\n\nfunction processTemplate(templateData: TemplateData, metric: string, labels: string): QuerySuggestion {\n  return {\n    query: templateData.template.replace('metric_a', metric).replace('{}', labels),\n    explanation: templateData.description.replace('metric_a', metric),\n  };\n}\n\nexport function getTemplateSuggestions(metricName: string, metricType: string, labels: string): QuerySuggestion[] {\n  let templateSuggestions: QuerySuggestion[] = [];\n  switch (metricType) {\n    case 'counter':\n      templateSuggestions = templateSuggestions.concat(\n        counterTemplates\n          .map((t) => processTemplate(t, metricName, labels))\n          .sort(() => Math.random() - 0.5)\n          .slice(0, 2)\n      );\n      templateSuggestions = templateSuggestions.concat(\n        generalTemplates\n          .map((t) => processTemplate(t, metricName, labels))\n          .sort(() => Math.random() - 0.5)\n          .slice(0, 3)\n      );\n      break;\n    case 'gauge':\n      templateSuggestions = templateSuggestions.concat(\n        gaugeTemplates\n          .map((t) => processTemplate(t, metricName, labels))\n          .sort(() => Math.random() - 0.5)\n          .slice(0, 2)\n      );\n      templateSuggestions = templateSuggestions.concat(\n        generalTemplates\n          .map((t) => processTemplate(t, metricName, labels))\n          .sort(() => Math.random() - 0.5)\n          .slice(0, 3)\n      );\n      break;\n    case 'histogram':\n      templateSuggestions = templateSuggestions.concat(\n        histogramTemplates\n          .map((t) => processTemplate(t, metricName, labels))\n          .sort(() => Math.random() - 0.5)\n          .slice(0, 2)\n      );\n      templateSuggestions = templateSuggestions.concat(\n        generalTemplates\n          .map((t) => processTemplate(t, metricName, labels))\n          .sort(() => Math.random() - 0.5)\n          .slice(0, 3)\n      );\n      break;\n    default:\n      templateSuggestions = templateSuggestions.concat(\n        generalTemplates\n          .map((t) => processTemplate(t, metricName, labels))\n          .sort(() => Math.random() - 0.5)\n          .slice(0, 5)\n      );\n      break;\n  }\n  return templateSuggestions;\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/promQail/state/helpers.ts\nimport { AnyAction } from 'redux';\n\nimport { llms } from '@grafana/experimental';\nimport { reportInteraction } from '@grafana/runtime';\n\nimport { PrometheusDatasource } from '../../../../datasource';\nimport { getMetadataHelp, getMetadataType } from '../../../../language_provider';\nimport { promQueryModeller } from '../../../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../../../parsing';\nimport { PromVisualQuery } from '../../../types';\nimport { updateInteraction } from '../PromQail';\nimport {\n  ExplainSystemPrompt,\n  GetExplainUserPrompt,\n  SuggestSystemPrompt,\n  GetSuggestUserPrompt,\n  SuggestUserPromptParams,\n} from '../prompts';\nimport { Interaction, QuerySuggestion, SuggestionType } from '../types';\n\nimport { createInteraction } from './state';\nimport { getTemplateSuggestions } from './templates';\n\nconst OPENAI_MODEL_NAME = 'gpt-3.5-turbo-1106';\nconst promQLTemplatesCollection = 'grafana.promql.templates';\n\ninterface TemplateSearchResult {\n  description: string | null;\n  metric_type: string | null;\n  promql: string | null;\n}\n\nexport function getExplainMessage(\n  query: string,\n  metric: string,\n  datasource: PrometheusDatasource\n): llms.openai.Message[] {\n  let metricMetadata = '';\n  let metricType = '';\n\n  const pvq = buildVisualQueryFromString(query);\n\n  if (datasource.languageProvider.metricsMetadata) {\n    metricType = getMetadataType(metric, datasource.languageProvider.metricsMetadata) ?? '';\n    metricMetadata = getMetadataHelp(metric, datasource.languageProvider.metricsMetadata) ?? '';\n  }\n\n  const documentationBody = pvq.query.operations\n    .map((op) => {\n      const def = promQueryModeller.getOperationDef(op.id);\n      if (!def) {\n        return '';\n      }\n      const title = def.renderer(op, def, '<expr>');\n      const body = def.explainHandler ? def.explainHandler(op, def) : def.documentation;\n\n      if (!body) {\n        return '';\n      }\n      return `### ${title}:\\n${body}`;\n    })\n    .filter((item) => item !== '')\n    .join('\\n');\n\n  return [\n    { role: 'system', content: ExplainSystemPrompt },\n    {\n      role: 'user',\n      content: GetExplainUserPrompt({\n        documentation: documentationBody,\n        metricName: metric,\n        metricType: metricType,\n        metricMetadata: metricMetadata,\n        query: query,\n      }),\n    },\n  ];\n}\n\nfunction getSuggestMessages({\n  promql,\n  question,\n  metricType,\n  labels,\n  templates,\n}: SuggestUserPromptParams): llms.openai.Message[] {\n  return [\n    { role: 'system', content: SuggestSystemPrompt },\n    { role: 'user', content: GetSuggestUserPrompt({ promql, question, metricType, labels, templates }) },\n  ];\n}\n\n/**\n * Calls the API and adds suggestions to the interaction\n *\n * @param dispatch\n * @param idx\n * @param interaction\n * @returns\n */\nexport async function promQailExplain(\n  dispatch: React.Dispatch<AnyAction>,\n  idx: number,\n  query: PromVisualQuery,\n  interaction: Interaction,\n  suggIdx: number,\n  datasource: PrometheusDatasource\n) {\n  const suggestedQuery = interaction.suggestions[suggIdx].query;\n\n  const promptMessages = getExplainMessage(suggestedQuery, query.metric, datasource);\n  const interactionToUpdate = interaction;\n\n  return llms.openai\n    .streamChatCompletions({\n      model: OPENAI_MODEL_NAME,\n      messages: promptMessages,\n      temperature: 0,\n    })\n    .pipe(llms.openai.accumulateContent())\n    .subscribe((response) => {\n      const updatedSuggestions = interactionToUpdate.suggestions.map((sg: QuerySuggestion, sidx: number) => {\n        if (suggIdx === sidx) {\n          return {\n            query: interactionToUpdate.suggestions[suggIdx].query,\n            explanation: response,\n          };\n        }\n\n        return sg;\n      });\n\n      const payload = {\n        idx,\n        interaction: {\n          ...interactionToUpdate,\n          suggestions: updatedSuggestions,\n          explanationIsLoading: false,\n        },\n      };\n      dispatch(updateInteraction(payload));\n    });\n}\n\n/**\n * Check if sublist is fully contained in the superlist\n *\n * @param sublist\n * @param superlist\n * @returns true if fully contained, else false\n */\nfunction isContainedIn(sublist: string[], superlist: string[]): boolean {\n  for (const item of sublist) {\n    if (!superlist.includes(item)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Guess the type of a metric, based on its name and its relation to other metrics available\n *\n * @param metric     - name of metric whose type to guess\n * @param allMetrics - list of all available metrics\n * @returns          - the guess of the type (string): counter,gauge,summary,histogram,'histogram,summary'\n */\nexport function guessMetricType(metric: string, allMetrics: string[]): string {\n  const synthetic_metrics = new Set<string>([\n    'up',\n    'scrape_duration_seconds',\n    'scrape_samples_post_metric_relabeling',\n    'scrape_series_added',\n    'scrape_samples_scraped',\n    'ALERTS',\n    'ALERTS_FOR_STATE',\n  ]);\n\n  if (synthetic_metrics.has(metric)) {\n    // these are all known to be counters\n    return 'counter';\n  }\n  if (metric.startsWith(':')) {\n    // probably recording rule\n    return 'gauge';\n  }\n  if (metric.endsWith('_info')) {\n    // typically series of 1s only, the labels are the useful part. TODO: add 'info' type\n    return 'counter';\n  }\n\n  if (metric.endsWith('_created') || metric.endsWith('_total')) {\n    // prometheus naming style recommends counters to have these suffixes.\n    return 'counter';\n  }\n\n  const underscoreIndex = metric.lastIndexOf('_');\n  if (underscoreIndex < 0) {\n    // No underscores in the name at all, very little info to go on. Guess\n    return 'gauge';\n  }\n\n  // See if the suffix is histogram-y or summary-y\n  const [root, suffix] = [metric.slice(0, underscoreIndex), metric.slice(underscoreIndex + 1)];\n\n  if (['bucket', 'count', 'sum'].includes(suffix)) {\n    // Might be histogram + summary\n    let familyMetrics = [`${root}_bucket`, `${root}_count`, `${root}_sum`, root];\n    if (isContainedIn(familyMetrics, allMetrics)) {\n      return 'histogram,summary';\n    }\n\n    // Might be a histogram, if so all these metrics should exist too:\n    familyMetrics = [`${root}_bucket`, `${root}_count`, `${root}_sum`];\n    if (isContainedIn(familyMetrics, allMetrics)) {\n      return 'histogram';\n    }\n\n    // Or might be a summary\n    familyMetrics = [`${root}_sum`, `${root}_count`, root];\n    if (isContainedIn(familyMetrics, allMetrics)) {\n      return 'summary';\n    }\n\n    // Otherwise it's probably just a counter!\n    return 'counter';\n  }\n\n  // One case above doesn't catch: summary or histogram,summary where the non-suffixed metric is chosen\n  const familyMetrics = [`${metric}_sum`, `${metric}_count`, metric];\n  if (isContainedIn(familyMetrics, allMetrics)) {\n    if (allMetrics.includes(`${metric}_bucket`)) {\n      return 'histogram,summary';\n    } else {\n      return 'summary';\n    }\n  }\n\n  // All else fails, guess gauge\n  return 'gauge';\n}\n\n/**\n * Generate a suitable filter structure for the VectorDB call\n * @param types: list of metric types to include in the result\n * @returns the structure to pass to the vectorDB call.\n */\nfunction generateMetricTypeFilters(types: string[]) {\n  return types.map((type) => ({\n    metric_type: {\n      $eq: type,\n    },\n  }));\n}\n\n/**\n * Taking in a metric name, try to guess its corresponding metric _family_ name\n * @param metric name\n * @returns metric family name\n */\nfunction guessMetricFamily(metric: string): string {\n  if (metric.endsWith('_bucket') || metric.endsWith('_count') || metric.endsWith('_sum')) {\n    return metric.slice(0, metric.lastIndexOf('_'));\n  }\n  return metric;\n}\n\n/**\n * Check if the LLM plugin is enabled.\n * Used in the PromQueryBuilder to enable/disable the button based on openai and vector db checks\n * @returns true if the LLM plugin is enabled.\n */\nexport async function isLLMPluginEnabled(): Promise<boolean> {\n  // Check if the LLM plugin is enabled.\n  // If not, we won't be able to make requests, so return early.\n  const openaiEnabled = llms.openai.health().then((response) => response.ok);\n  const vectorEnabled = llms.vector.health().then((response) => response.ok);\n  // combine 2 promises\n  return Promise.all([openaiEnabled, vectorEnabled]).then((results) => {\n    return results.every((result) => result);\n  });\n}\n\n/**\n * Calls the API and adds suggestions to the interaction\n *\n * @param dispatch\n * @param idx\n * @param interaction\n * @returns\n */\nexport async function promQailSuggest(\n  dispatch: React.Dispatch<AnyAction>,\n  idx: number,\n  query: PromVisualQuery,\n  labelNames: string[],\n  datasource: PrometheusDatasource,\n  interaction?: Interaction\n) {\n  const interactionToUpdate = interaction ? interaction : createInteraction(SuggestionType.Historical);\n\n  // Decide metric type\n  let metricType = '';\n  // Makes sure we loaded the metadata for metrics. Usually this is done in the start() method of the\n  // provider but we only need the metadata here.\n  if (!datasource.languageProvider.metricsMetadata) {\n    await datasource.languageProvider.loadMetricsMetadata();\n  }\n  if (datasource.languageProvider.metricsMetadata) {\n    // `datasource.languageProvider.metricsMetadata` is a list of metric family names (with desired type)\n    // from the datasource metadata endoint, but unfortunately the expanded _sum, _count, _bucket raw\n    // metric names are also generated and populating this list (all of type counter). We want the metric\n    // family type, so need to guess the metric family name from the chosen metric name, and test if that\n    // metric family has a type specified.\n    const metricFamilyGuess = guessMetricFamily(query.metric);\n    metricType = getMetadataType(metricFamilyGuess, datasource.languageProvider.metricsMetadata) ?? '';\n  }\n  if (metricType === '') {\n    // fallback to heuristic guess\n    metricType = guessMetricType(query.metric, datasource.languageProvider.metrics);\n  }\n\n  if (interactionToUpdate.suggestionType === SuggestionType.Historical) {\n    return new Promise<void>((resolve) => {\n      return setTimeout(() => {\n        const suggestions = getTemplateSuggestions(\n          query.metric,\n          metricType,\n          promQueryModeller.renderLabels(query.labels)\n        );\n\n        const payload = {\n          idx,\n          interaction: { ...interactionToUpdate, suggestions: suggestions, isLoading: false },\n        };\n        dispatch(updateInteraction(payload));\n        resolve();\n      }, 1000);\n    });\n  } else {\n    type SuggestionBody = {\n      metric: string;\n      labels: string;\n      prompt?: string;\n    };\n\n    // get all available labels\n    const metricLabels = await datasource.languageProvider.fetchLabelsWithMatch(query.metric);\n\n    let feedTheAI: SuggestionBody = {\n      metric: query.metric,\n      // drop __name__ label because it's not useful\n      labels: Object.keys(metricLabels)\n        .filter((label) => label !== '__name__')\n        .join(','),\n    };\n\n    // @ts-ignore llms types issue\n    let results: Array<llms.vector.SearchResult<TemplateSearchResult>> = [];\n    if (interaction?.suggestionType === SuggestionType.AI) {\n      feedTheAI = { ...feedTheAI, prompt: interaction.prompt };\n\n      // @ts-ignore llms types issue\n      results = await llms.vector.search<TemplateSearchResult>({\n        query: interaction.prompt,\n        collection: promQLTemplatesCollection,\n        topK: 5,\n        filter: {\n          $or: generateMetricTypeFilters(metricType.split(',').concat(['*'])),\n        },\n      });\n      reportInteraction('grafana_prometheus_promqail_vector_results', {\n        metric: query.metric,\n        prompt: interaction.prompt,\n        results: results,\n      });\n      // TODO: handle errors from vector search\n    }\n\n    const resultsString = results\n      .map((r) => {\n        return `${r.payload.promql} | ${r.payload.description} (score=${(r.score * 100).toFixed(1)})`;\n      })\n      .join('\\n');\n\n    const promptMessages = getSuggestMessages({\n      promql: query.metric,\n      question: interaction ? interaction.prompt : '',\n      metricType: metricType,\n      labels: labelNames.join(', '),\n      templates: resultsString,\n    });\n\n    return llms.openai\n      .streamChatCompletions({\n        model: OPENAI_MODEL_NAME,\n        messages: promptMessages,\n        temperature: 0.5,\n      })\n      .pipe(llms.openai.accumulateContent())\n      .subscribe((response) => {\n        const payload = {\n          idx,\n          interaction: {\n            ...interactionToUpdate,\n            suggestions: [\n              {\n                query: response,\n                explanation: '',\n              },\n            ],\n            isLoading: false,\n          },\n        };\n        dispatch(updateInteraction(payload));\n      });\n  }\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/promQail/PromQail.tsx\nimport { css, cx } from '@emotion/css';\nimport { PayloadAction, createSlice } from '@reduxjs/toolkit';\nimport React, { useEffect, useReducer, useRef, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Alert, Button, Checkbox, Input, Spinner, useTheme2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../../datasource';\nimport store from '../../../gcopypaste/app/core/store';\nimport { PromVisualQuery } from '../../types';\n\nimport { QuerySuggestionContainer } from './QuerySuggestionContainer';\n// @ts-ignore until we can get these added for icons\nimport AI_Logo_color from './resources/AI_Logo_color.svg';\nimport { promQailExplain, promQailSuggest } from './state/helpers';\nimport { createInteraction, initialState } from './state/state';\nimport { Interaction, SuggestionType } from './types';\n\nexport type PromQailProps = {\n  query: PromVisualQuery;\n  closeDrawer: () => void;\n  onChange: (query: PromVisualQuery) => void;\n  datasource: PrometheusDatasource;\n};\n\nconst SKIP_STARTING_MESSAGE = 'SKIP_STARTING_MESSAGE';\n\nexport const PromQail = (props: PromQailProps) => {\n  const { query, closeDrawer, onChange, datasource } = props;\n  const skipStartingMessage = store.getBool(SKIP_STARTING_MESSAGE, false);\n\n  const [state, dispatch] = useReducer(stateSlice.reducer, initialState(query, !skipStartingMessage));\n\n  const [labelNames, setLabelNames] = useState<string[]>([]);\n\n  const suggestions = state.interactions.reduce((acc, int) => acc + int.suggestions.length, 0);\n\n  const responsesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    if (responsesEndRef) {\n      // @ts-ignore for React.MutableRefObject\n      responsesEndRef?.current?.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  useEffect(() => {\n    // only scroll when an interaction has been added or the suggestions have been updated\n    scrollToBottom();\n  }, [state.interactions.length, suggestions]);\n\n  useEffect(() => {\n    const fetchLabels = async () => {\n      let labelsIndex: Record<string, string[]> = await datasource.languageProvider.fetchLabelsWithMatch(query.metric);\n      setLabelNames(Object.keys(labelsIndex));\n    };\n    fetchLabels();\n  }, [query, datasource]);\n\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  return (\n    <div className={styles.containerPadding}>\n      {/* Query Advisor */}\n      {/* header */}\n      <div className={styles.header}>\n        <h3>Query advisor</h3>\n        <Button icon=\"times\" fill=\"text\" variant=\"secondary\" onClick={closeDrawer} />\n      </div>\n      {/* Starting message */}\n      <div>\n        <div className={styles.iconSection}>\n          <img src={AI_Logo_color} alt=\"AI logo color\" /> Assistant\n        </div>\n        {state.showStartingMessage ? (\n          <>\n            <div className={styles.dataList}>\n              <ol>\n                <li className={styles.textPadding}>\n                  Query Advisor suggests queries based on a metric and requests you type in.\n                </li>\n                <li className={styles.textPadding}>\n                  Query Advisor sends Prometheus metrics, labels and metadata to the LLM provider you&#39;ve configured.\n                  Be sure to align its usage with your company&#39;s internal policies.\n                </li>\n                <li className={styles.textPadding}>\n                  An AI-suggested query may not fully answer your question. Always take a moment to understand a query\n                  before you use it.\n                </li>\n              </ol>\n            </div>\n            <Alert\n              title={''}\n              severity={'info'}\n              key={'promqail-llm-app'}\n              className={cx(styles.textPadding, styles.noMargin)}\n            >\n              Query Advisor is currently in Private Preview. Feedback is appreciated and can be provided on explanations\n              and suggestions.\n            </Alert>\n\n            {/* don't show this message again, store in localstorage */}\n            <div className={styles.textPadding}>\n              <Checkbox\n                checked={state.indicateCheckbox}\n                value={state.indicateCheckbox}\n                onChange={() => {\n                  const val = store.getBool(SKIP_STARTING_MESSAGE, false);\n                  store.set(SKIP_STARTING_MESSAGE, !val);\n                  dispatch(indicateCheckbox(!val));\n                }}\n                label=\"Don't show this message again\"\n              />\n            </div>\n            <div className={styles.rightButtonsWrapper}>\n              <div className={styles.rightButtons}>\n                <Button className={styles.leftButton} fill=\"outline\" variant=\"secondary\" onClick={closeDrawer}>\n                  Cancel\n                </Button>\n                <Button\n                  fill=\"solid\"\n                  variant=\"primary\"\n                  onClick={() => dispatch(showStartingMessage(false))}\n                  data-testid={queryAssistanttestIds.securityInfoButton}\n                >\n                  Continue\n                </Button>\n              </div>\n            </div>\n          </>\n        ) : (\n          <div className={styles.bodySmall}>\n            {/* MAKE THIS TABLE RESPONSIVE */}\n            {/* FIT SUPER LONG METRICS AND LABELS IN HERE */}\n            <div className={styles.textPadding}>Here is the metric you have selected:</div>\n            <div className={styles.infoContainerWrapper}>\n              <div className={styles.infoContainer}>\n                <table className={styles.metricTable}>\n                  <tbody>\n                    <tr>\n                      <td className={styles.metricTableName}>metric</td>\n                      <td className={styles.metricTableValue}>{state.query.metric}</td>\n                      <td>\n                        <Button\n                          fill=\"outline\"\n                          variant=\"secondary\"\n                          onClick={closeDrawer}\n                          className={styles.metricTableButton}\n                          size={'sm'}\n                        >\n                          Choose new metric\n                        </Button>\n                      </td>\n                    </tr>\n                    {state.query.labels.map((label, idx) => {\n                      const text = idx === 0 ? 'labels' : '';\n                      return (\n                        <tr key={`${label.label}-${idx}`}>\n                          <td>{text}</td>\n                          <td className={styles.metricTableValue}>{`${label.label}${label.op}${label.value}`}</td>\n                          <td> </td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n\n            {/* Ask if you know what you want to query? */}\n            {!state.askForQueryHelp && state.interactions.length === 0 && (\n              <>\n                <div className={styles.queryQuestion}>Do you know what you want to query?</div>\n                <div className={styles.rightButtonsWrapper}>\n                  <div className={styles.rightButtons}>\n                    <Button\n                      className={styles.leftButton}\n                      fill=\"solid\"\n                      variant=\"secondary\"\n                      data-testid={queryAssistanttestIds.clickForHistorical}\n                      onClick={() => {\n                        const isLoading = true;\n                        const suggestionType = SuggestionType.Historical;\n                        dispatch(addInteraction({ suggestionType, isLoading }));\n                        reportInteraction('grafana_prometheus_promqail_know_what_you_want_to_query', {\n                          promVisualQuery: query,\n                          doYouKnow: 'no',\n                        });\n                        promQailSuggest(dispatch, 0, query, labelNames, datasource);\n                      }}\n                    >\n                      No\n                    </Button>\n                    <Button\n                      fill=\"solid\"\n                      variant=\"primary\"\n                      data-testid={queryAssistanttestIds.clickForAi}\n                      onClick={() => {\n                        reportInteraction('grafana_prometheus_promqail_know_what_you_want_to_query', {\n                          promVisualQuery: query,\n                          doYouKnow: 'yes',\n                        });\n                        const isLoading = false;\n                        const suggestionType = SuggestionType.AI;\n                        dispatch(addInteraction({ suggestionType, isLoading }));\n                      }}\n                    >\n                      Yes\n                    </Button>\n                  </div>\n                </div>\n              </>\n            )}\n\n            {state.interactions.map((interaction: Interaction, idx: number) => {\n              return (\n                <div key={idx}>\n                  {interaction.suggestionType === SuggestionType.AI ? (\n                    <>\n                      <div className={styles.textPadding}>What kind of data do you want to see with your metric?</div>\n                      <div className={cx(styles.secondaryText, styles.bottomMargin)}>\n                        <div>You do not need to enter in a metric or a label again in the prompt.</div>\n                        <div>Example: I want to monitor request latency, not errors.</div>\n                      </div>\n                      <div className={styles.inputPadding}>\n                        <Input\n                          value={interaction.prompt}\n                          spellCheck={false}\n                          placeholder=\"Enter prompt\"\n                          disabled={interaction.suggestions.length > 0}\n                          onChange={(e) => {\n                            const prompt = e.currentTarget.value;\n\n                            const payload = {\n                              idx: idx,\n                              interaction: { ...interaction, prompt },\n                            };\n\n                            dispatch(updateInteraction(payload));\n                          }}\n                        />\n                      </div>\n                      {interaction.suggestions.length === 0 ? (\n                        interaction.isLoading ? (\n                          <>\n                            <div className={styles.loadingMessageContainer}>\n                              Waiting for OpenAI <Spinner className={styles.floatRight} />\n                            </div>\n                          </>\n                        ) : (\n                          <>\n                            <div className={styles.rightButtonsWrapper}>\n                              <div className={styles.rightButtons}>\n                                <Button\n                                  className={styles.leftButton}\n                                  fill=\"outline\"\n                                  variant=\"secondary\"\n                                  onClick={closeDrawer}\n                                >\n                                  Cancel\n                                </Button>\n                                <Button\n                                  className={styles.leftButton}\n                                  fill=\"outline\"\n                                  variant=\"secondary\"\n                                  onClick={() => {\n                                    // JUST SUGGEST QUERIES AND SHOW THE LIST\n                                    const newInteraction: Interaction = {\n                                      ...interaction,\n                                      suggestionType: SuggestionType.Historical,\n                                      isLoading: true,\n                                    };\n\n                                    const payload = {\n                                      idx: idx,\n                                      interaction: newInteraction,\n                                    };\n\n                                    reportInteraction('grafana_prometheus_promqail_suggest_query_instead', {\n                                      promVisualQuery: query,\n                                    });\n\n                                    dispatch(updateInteraction(payload));\n                                    promQailSuggest(dispatch, idx, query, labelNames, datasource, newInteraction);\n                                  }}\n                                >\n                                  Suggest queries instead\n                                </Button>\n                                <Button\n                                  fill=\"solid\"\n                                  variant=\"primary\"\n                                  data-testid={queryAssistanttestIds.submitPrompt + idx}\n                                  onClick={() => {\n                                    const newInteraction: Interaction = {\n                                      ...interaction,\n                                      isLoading: true,\n                                    };\n\n                                    const payload = {\n                                      idx: idx,\n                                      interaction: newInteraction,\n                                    };\n\n                                    reportInteraction('grafana_prometheus_promqail_prompt_submitted', {\n                                      promVisualQuery: query,\n                                      prompt: interaction.prompt,\n                                    });\n\n                                    dispatch(updateInteraction(payload));\n                                    // add the suggestions in the API call\n                                    promQailSuggest(dispatch, idx, query, labelNames, datasource, interaction);\n                                  }}\n                                >\n                                  Submit\n                                </Button>\n                              </div>\n                            </div>\n                          </>\n                        )\n                      ) : (\n                        // LIST OF SUGGESTED QUERIES FROM AI\n                        <QuerySuggestionContainer\n                          suggestionType={SuggestionType.AI}\n                          querySuggestions={interaction.suggestions}\n                          closeDrawer={closeDrawer}\n                          nextInteraction={() => {\n                            const isLoading = false;\n                            const suggestionType = SuggestionType.AI;\n                            dispatch(addInteraction({ suggestionType, isLoading }));\n                          }}\n                          queryExplain={(suggIdx: number) =>\n                            interaction.suggestions[suggIdx].explanation === ''\n                              ? promQailExplain(dispatch, idx, query, interaction, suggIdx, datasource)\n                              : interaction.suggestions[suggIdx].explanation\n                          }\n                          onChange={onChange}\n                          prompt={interaction.prompt ?? ''}\n                        />\n                      )}\n                    </>\n                  ) : // HISTORICAL SUGGESTIONS\n                  interaction.isLoading ? (\n                    <>\n                      <div className={styles.loadingMessageContainer}>\n                        Waiting for OpenAI <Spinner className={styles.floatRight} />\n                      </div>\n                    </>\n                  ) : (\n                    // LIST OF SUGGESTED QUERIES FROM HISTORICAL DATA\n                    <QuerySuggestionContainer\n                      suggestionType={SuggestionType.Historical}\n                      querySuggestions={interaction.suggestions}\n                      closeDrawer={closeDrawer}\n                      nextInteraction={() => {\n                        const isLoading = false;\n                        const suggestionType = SuggestionType.AI;\n                        dispatch(addInteraction({ suggestionType, isLoading }));\n                      }}\n                      queryExplain={(suggIdx: number) =>\n                        interaction.suggestions[suggIdx].explanation === ''\n                          ? promQailExplain(dispatch, idx, query, interaction, suggIdx, datasource)\n                          : interaction.suggestions[suggIdx].explanation\n                      }\n                      onChange={onChange}\n                      prompt={interaction.prompt ?? ''}\n                    />\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n      <div ref={responsesEndRef} />\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    sectionPadding: css({\n      padding: '20px',\n    }),\n    header: css({\n      display: 'flex',\n\n      button: {\n        marginLeft: 'auto',\n      },\n    }),\n    iconSection: css({\n      padding: '0 0 10px 0',\n      color: `${theme.colors.text.secondary}`,\n\n      img: {\n        paddingRight: '4px',\n      },\n    }),\n    rightButtonsWrapper: css({\n      display: 'flex',\n    }),\n    rightButtons: css({\n      marginLeft: 'auto',\n    }),\n    leftButton: css({\n      marginRight: '10px',\n    }),\n    dataList: css({\n      padding: '0px 28px 0px 28px',\n    }),\n    textPadding: css({\n      paddingBottom: '12px',\n    }),\n    containerPadding: css({\n      padding: '28px',\n    }),\n    infoContainer: css({\n      border: `${theme.colors.border.strong}`,\n      padding: '16px',\n      backgroundColor: `${theme.colors.background.secondary}`,\n      borderRadius: `8px`,\n      borderBottomLeftRadius: 0,\n    }),\n    infoContainerWrapper: css({\n      paddingBottom: '24px',\n    }),\n    metricTable: css({\n      width: '100%',\n    }),\n    metricTableName: css({\n      width: '15%',\n    }),\n    metricTableValue: css({\n      fontFamily: `${theme.typography.fontFamilyMonospace}`,\n      fontSize: `${theme.typography.bodySmall.fontSize}`,\n      overflow: 'scroll',\n      textWrap: 'nowrap',\n      maxWidth: '150px',\n      width: '60%',\n      maskImage: `linear-gradient(to right, rgba(0, 0, 0, 1) 90%, rgba(0, 0, 0, 0))`,\n    }),\n    metricTableButton: css({\n      float: 'right',\n    }),\n    queryQuestion: css({\n      textAlign: 'end',\n      padding: '8px 0',\n    }),\n    secondaryText: css({\n      color: `${theme.colors.text.secondary}`,\n    }),\n    loadingMessageContainer: css({\n      border: `${theme.colors.border.strong}`,\n      padding: `16px`,\n      backgroundColor: `${theme.colors.background.secondary}`,\n      marginBottom: `20px`,\n      borderRadius: `8px`,\n      color: `${theme.colors.text.secondary}`,\n      fontStyle: 'italic',\n    }),\n    floatRight: css({\n      float: 'right',\n    }),\n    codeText: css({\n      fontFamily: `${theme.typography.fontFamilyMonospace}`,\n      fontSize: `${theme.typography.bodySmall.fontSize}`,\n    }),\n    bodySmall: css({\n      fontSize: `${theme.typography.bodySmall.fontSize}`,\n    }),\n    explainPadding: css({\n      paddingLeft: '26px',\n    }),\n    bottomMargin: css({\n      marginBottom: '20px',\n    }),\n    topPadding: css({\n      paddingTop: '22px',\n    }),\n    doc: css({\n      textDecoration: 'underline',\n    }),\n    afterButtons: css({\n      display: 'flex',\n      justifyContent: 'flex-end',\n    }),\n    feedbackStyle: css({\n      margin: 0,\n      textAlign: 'right',\n      paddingTop: '22px',\n      paddingBottom: '22px',\n    }),\n    nextInteractionHeight: css({\n      height: '88px',\n    }),\n    center: css({\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    }),\n    inputPadding: css({\n      paddingBottom: '24px',\n    }),\n    querySuggestion: css({\n      display: 'flex',\n      flexWrap: 'nowrap',\n    }),\n    longCode: css({\n      width: '90%',\n      textWrap: 'nowrap',\n      overflow: 'scroll',\n      maskImage: `linear-gradient(to right, rgba(0, 0, 0, 1) 90%, rgba(0, 0, 0, 0))`,\n\n      div: {\n        display: 'inline-block',\n      },\n    }),\n    useButton: css({\n      marginLeft: 'auto',\n    }),\n    suggestionFeedback: css({\n      textAlign: 'left',\n    }),\n    feedbackQuestion: css({\n      display: 'flex',\n      padding: '8px 0px',\n      h6: { marginBottom: 0 },\n      i: {\n        marginTop: '1px',\n      },\n    }),\n    explationTextInput: css({\n      paddingLeft: '24px',\n    }),\n    submitFeedback: css({\n      padding: '16px 0',\n    }),\n    noMargin: css({\n      margin: 0,\n    }),\n    enableButtonTooltip: css({\n      padding: 8,\n    }),\n    enableButtonTooltipText: css({\n      color: `${theme.colors.text.secondary}`,\n      ul: {\n        marginLeft: 16,\n      },\n    }),\n    link: css({\n      color: `${theme.colors.text.link} !important`,\n    }),\n  };\n};\n\nexport const queryAssistanttestIds = {\n  promQail: 'prom-qail',\n  securityInfoButton: 'security-info-button',\n  clickForHistorical: 'click-for-historical',\n  clickForAi: 'click-for-ai',\n  submitPrompt: 'submit-prompt',\n  refinePrompt: 'refine-prompt',\n};\n\nconst stateSlice = createSlice({\n  name: 'metrics-modal-state',\n  initialState: initialState(),\n  reducers: {\n    showExplainer: (state, action: PayloadAction<boolean>) => {\n      state.showExplainer = action.payload;\n    },\n    showStartingMessage: (state, action: PayloadAction<boolean>) => {\n      state.showStartingMessage = action.payload;\n    },\n    indicateCheckbox: (state, action: PayloadAction<boolean>) => {\n      state.indicateCheckbox = action.payload;\n    },\n    askForQueryHelp: (state, action: PayloadAction<boolean>) => {\n      state.askForQueryHelp = action.payload;\n    },\n    /*\n     * start working on a collection of interactions\n     * {\n     *  askForhelp y n\n     *  prompt question\n     *  queries querySuggestions\n     * }\n     *\n     */\n    addInteraction: (state, action: PayloadAction<{ suggestionType: SuggestionType; isLoading: boolean }>) => {\n      // AI or Historical?\n      const interaction = createInteraction(action.payload.suggestionType, action.payload.isLoading);\n      const interactions = state.interactions;\n      state.interactions = interactions.concat([interaction]);\n    },\n    updateInteraction: (state, action: PayloadAction<{ idx: number; interaction: Interaction }>) => {\n      // update the interaction by index\n      // will most likely be the last interaction but we might update previous by giving them cues of helpful or not\n      const index = action.payload.idx;\n      const updInteraction = action.payload.interaction;\n\n      state.interactions = state.interactions.map((interaction: Interaction, idx: number) => {\n        if (idx === index) {\n          return updInteraction;\n        }\n\n        return interaction;\n      });\n    },\n  },\n});\n\n// actions to update the state\nexport const { showStartingMessage, indicateCheckbox, addInteraction, updateInteraction } = stateSlice.actions;\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/promQail/QueryAssistantButton.tsx\nimport React from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, Tooltip, useTheme2 } from '@grafana/ui';\n\nimport { getStyles } from './PromQail';\nimport AI_Logo_color from './resources/AI_Logo_color.svg';\n\nexport type Props = {\n  llmAppEnabled: boolean;\n  metric: string;\n  setShowDrawer: (show: boolean) => void;\n};\n\nexport function QueryAssistantButton(props: Props) {\n  const { llmAppEnabled, metric, setShowDrawer } = props;\n\n  const llmAppDisabled = !llmAppEnabled;\n  const noMetricSelected = !metric;\n\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  const button = () => {\n    return (\n      <Button\n        variant={'secondary'}\n        onClick={() => {\n          reportInteraction('grafana_prometheus_promqail_ai_button_clicked', {\n            metric: metric,\n          });\n          setShowDrawer(true);\n        }}\n        disabled={!metric || !llmAppEnabled}\n        data-testid={selectors.components.DataSource.Prometheus.queryEditor.builder.queryAdvisor}\n      >\n        <img height={16} src={AI_Logo_color} alt=\"AI logo black and white\" />\n        {'\\u00A0'}Get query suggestions\n      </Button>\n    );\n  };\n\n  const selectMetricMessage = (\n    <Tooltip content={'First, select a metric.'} placement={'bottom-end'}>\n      {button()}\n    </Tooltip>\n  );\n\n  const llmAppMessage = (\n    <Tooltip\n      interactive={true}\n      placement={'auto-end'}\n      content={\n        <div className={styles.enableButtonTooltip}>\n          <h6>Query Advisor is disabled</h6>\n          <div className={styles.enableButtonTooltipText}>To enable Query Advisor you must:</div>\n          <div className={styles.enableButtonTooltipText}>\n            <ul>\n              <li>\n                <a\n                  href={'https://grafana.com/docs/grafana-cloud/alerting-and-irm/machine-learning/llm-plugin/'}\n                  target=\"_blank\"\n                  rel=\"noreferrer noopener\"\n                  className={styles.link}\n                >\n                  Install and enable the LLM plugin\n                </a>\n              </li>\n              <li>Select a metric</li>\n            </ul>\n          </div>\n        </div>\n      }\n    >\n      {button()}\n    </Tooltip>\n  );\n\n  if (llmAppDisabled) {\n    return llmAppMessage;\n  } else if (noMetricSelected) {\n    return selectMetricMessage;\n  } else {\n    return button();\n  }\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilder.tsx\nimport { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { DataSourceApi, PanelData } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorRow } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Drawer } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport promqlGrammar from '../../promql';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { OperationExplainedBox } from '../shared/OperationExplainedBox';\nimport { OperationList } from '../shared/OperationList';\nimport { OperationListExplained } from '../shared/OperationListExplained';\nimport { OperationsEditorRow } from '../shared/OperationsEditorRow';\nimport { QueryBuilderHints } from '../shared/QueryBuilderHints';\nimport { RawQuery } from '../shared/RawQuery';\nimport { QueryBuilderOperation } from '../shared/types';\nimport { PromVisualQuery } from '../types';\n\nimport { MetricsLabelsSection } from './MetricsLabelsSection';\nimport { NestedQueryList } from './NestedQueryList';\nimport { EXPLAIN_LABEL_FILTER_CONTENT } from './PromQueryBuilderExplained';\nimport { PromQail } from './promQail/PromQail';\nimport { QueryAssistantButton } from './promQail/QueryAssistantButton';\nimport { isLLMPluginEnabled } from './promQail/state/helpers';\n\nexport interface PromQueryBuilderProps {\n  query: PromVisualQuery;\n  datasource: PrometheusDatasource;\n  onChange: (update: PromVisualQuery) => void;\n  onRunQuery: () => void;\n  data?: PanelData;\n  showExplain: boolean;\n}\n\nexport const PromQueryBuilder = React.memo<PromQueryBuilderProps>((props) => {\n  const { datasource, query, onChange, onRunQuery, data, showExplain } = props;\n  const [highlightedOp, setHighlightedOp] = useState<QueryBuilderOperation | undefined>();\n  const [showDrawer, setShowDrawer] = useState<boolean>(false);\n  const [llmAppEnabled, updateLlmAppEnabled] = useState<boolean>(false);\n  const { prometheusPromQAIL } = config.featureToggles; // AI/ML + Prometheus\n\n  const lang = { grammar: promqlGrammar, name: 'promql' };\n\n  const initHints = datasource.getInitHints();\n\n  useEffect(() => {\n    async function checkLlms() {\n      const check = await isLLMPluginEnabled();\n      updateLlmAppEnabled(check);\n    }\n\n    if (prometheusPromQAIL) {\n      checkLlms();\n    }\n  }, [prometheusPromQAIL]);\n\n  return (\n    <>\n      {prometheusPromQAIL && showDrawer && (\n        <Drawer closeOnMaskClick={false} onClose={() => setShowDrawer(false)}>\n          <PromQail\n            query={query}\n            closeDrawer={() => setShowDrawer(false)}\n            onChange={onChange}\n            datasource={datasource}\n          />\n        </Drawer>\n      )}\n      <EditorRow>\n        <MetricsLabelsSection query={query} onChange={onChange} datasource={datasource} />\n      </EditorRow>\n      {initHints.length ? (\n        <div className=\"query-row-break\">\n          <div className=\"prom-query-field-info text-warning\">\n            {initHints[0].label}{' '}\n            {initHints[0].fix ? (\n              <button type=\"button\" className={'text-warning'}>\n                {initHints[0].fix.label}\n              </button>\n            ) : null}\n          </div>\n        </div>\n      ) : null}\n      {showExplain && (\n        <OperationExplainedBox\n          stepNumber={1}\n          title={<RawQuery query={`${query.metric} ${promQueryModeller.renderLabels(query.labels)}`} lang={lang} />}\n        >\n          {EXPLAIN_LABEL_FILTER_CONTENT}\n        </OperationExplainedBox>\n      )}\n      <OperationsEditorRow>\n        <OperationList<PromVisualQuery>\n          queryModeller={promQueryModeller}\n          // eslint-ignore\n          datasource={datasource as DataSourceApi}\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          highlightedOp={highlightedOp}\n        />\n        {prometheusPromQAIL && (\n          <div\n            className={css({\n              padding: '0 0 0 6px',\n            })}\n          >\n            <QueryAssistantButton llmAppEnabled={llmAppEnabled} metric={query.metric} setShowDrawer={setShowDrawer} />\n          </div>\n        )}\n        <div data-testid={selectors.components.DataSource.Prometheus.queryEditor.builder.hints}>\n          <QueryBuilderHints<PromVisualQuery>\n            datasource={datasource}\n            query={query}\n            onChange={onChange}\n            data={data}\n            queryModeller={promQueryModeller}\n            buildVisualQueryFromString={buildVisualQueryFromString}\n          />\n        </div>\n      </OperationsEditorRow>\n      {showExplain && (\n        <OperationListExplained<PromVisualQuery>\n          lang={lang}\n          query={query}\n          stepNumber={2}\n          queryModeller={promQueryModeller}\n          onMouseEnter={(op) => setHighlightedOp(op)}\n          onMouseLeave={() => setHighlightedOp(undefined)}\n        />\n      )}\n      {query.binaryQueries && query.binaryQueries.length > 0 && (\n        <NestedQueryList\n          query={query}\n          datasource={datasource}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          showExplain={showExplain}\n        />\n      )}\n    </>\n  );\n});\n\nPromQueryBuilder.displayName = 'PromQueryBuilder';\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/QueryPreview.tsx\nimport React from 'react';\n\nimport { EditorFieldGroup, EditorRow } from '@grafana/experimental';\n\nimport promqlGrammar from '../../promql';\nimport { RawQuery } from '../shared/RawQuery';\n\nexport interface QueryPreviewProps {\n  query: string;\n}\n\nexport function QueryPreview({ query }: QueryPreviewProps) {\n  if (!query) {\n    return null;\n  }\n\n  return (\n    <EditorRow>\n      <EditorFieldGroup>\n        <RawQuery query={query} lang={{ grammar: promqlGrammar, name: 'promql' }} />\n      </EditorFieldGroup>\n    </EditorRow>\n  );\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilderContainer.tsx\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport React, { useEffect, useReducer } from 'react';\n\nimport { PanelData } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { PromQuery } from '../../types';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { PromVisualQuery } from '../types';\n\nimport { PromQueryBuilder } from './PromQueryBuilder';\nimport { QueryPreview } from './QueryPreview';\nimport { getSettings, MetricsModalSettings } from './metrics-modal/state/state';\n\nexport interface PromQueryBuilderContainerProps {\n  query: PromQuery;\n  datasource: PrometheusDatasource;\n  onChange: (update: PromQuery) => void;\n  onRunQuery: () => void;\n  data?: PanelData;\n  showExplain: boolean;\n}\n\nexport interface State {\n  visQuery?: PromVisualQuery;\n  expr: string;\n}\n\nconst prometheusMetricEncyclopedia = config.featureToggles.prometheusMetricEncyclopedia;\n\n/**\n * This component is here just to contain the translation logic between string query and the visual query builder model.\n */\nexport function PromQueryBuilderContainer(props: PromQueryBuilderContainerProps) {\n  const { query, onChange, onRunQuery, datasource, data, showExplain } = props;\n  const [state, dispatch] = useReducer(stateSlice.reducer, { expr: query.expr });\n  // Only rebuild visual query if expr changes from outside\n  useEffect(() => {\n    dispatch(exprChanged(query.expr));\n\n    if (prometheusMetricEncyclopedia) {\n      dispatch(\n        setMetricsModalSettings({\n          useBackend: query.useBackend ?? false,\n          disableTextWrap: query.disableTextWrap ?? false,\n          fullMetaSearch: query.fullMetaSearch ?? false,\n          includeNullMetadata: query.includeNullMetadata ?? true,\n        })\n      );\n    }\n  }, [query]);\n\n  useEffect(() => {\n    datasource.languageProvider.start(data?.timeRange);\n  }, [data?.timeRange, datasource.languageProvider]);\n\n  const onVisQueryChange = (visQuery: PromVisualQuery) => {\n    const expr = promQueryModeller.renderQuery(visQuery);\n    dispatch(visualQueryChange({ visQuery, expr }));\n\n    if (prometheusMetricEncyclopedia) {\n      const metricsModalSettings = getSettings(visQuery);\n      onChange({ ...props.query, expr: expr, ...metricsModalSettings });\n    } else {\n      onChange({ ...props.query, expr: expr });\n    }\n  };\n\n  if (!state.visQuery) {\n    return null;\n  }\n\n  return (\n    <>\n      <PromQueryBuilder\n        query={state.visQuery}\n        datasource={datasource}\n        onChange={onVisQueryChange}\n        onRunQuery={onRunQuery}\n        data={data}\n        showExplain={showExplain}\n      />\n      {<QueryPreview query={query.expr} />}\n    </>\n  );\n}\n\nconst initialState: State = {\n  expr: '',\n};\n\nconst stateSlice = createSlice({\n  name: 'prom-builder-container',\n  initialState,\n  reducers: {\n    visualQueryChange: (state, action: PayloadAction<{ visQuery: PromVisualQuery; expr: string }>) => {\n      state.expr = action.payload.expr;\n      state.visQuery = action.payload.visQuery;\n    },\n    exprChanged: (state, action: PayloadAction<string>) => {\n      if (!state.visQuery || state.expr !== action.payload) {\n        state.expr = action.payload;\n        const parseResult = buildVisualQueryFromString(action.payload ?? '');\n\n        state.visQuery = parseResult.query;\n      }\n    },\n    setMetricsModalSettings: (state, action: PayloadAction<MetricsModalSettings>) => {\n      if (state.visQuery && prometheusMetricEncyclopedia) {\n        state.visQuery.useBackend = action.payload.useBackend;\n        state.visQuery.disableTextWrap = action.payload.disableTextWrap;\n        state.visQuery.fullMetaSearch = action.payload.fullMetaSearch;\n        state.visQuery.includeNullMetadata = action.payload.includeNullMetadata;\n      }\n    },\n  },\n});\n\nconst { visualQueryChange, exprChanged, setMetricsModalSettings } = stateSlice.actions;\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/PromExemplarField.tsx\nimport { css, cx } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconButton, InlineLabel, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { PromQuery } from '../types';\n\ninterface Props {\n  onChange: (exemplar: boolean) => void;\n  datasource: PrometheusDatasource;\n  query: PromQuery;\n  'data-testid'?: string;\n}\n\nexport function PromExemplarField({ datasource, onChange, query, ...rest }: Props) {\n  const [error, setError] = useState<string | null>(null);\n  const styles = useStyles2(getStyles);\n  const prevError = usePrevious(error);\n\n  useEffect(() => {\n    if (!datasource.exemplarsAvailable) {\n      setError('Exemplars for this query are not available');\n      onChange(false);\n    } else if (query.instant && !query.range) {\n      setError('Exemplars are not available for instant queries');\n      onChange(false);\n    } else {\n      setError(null);\n      // If error is cleared, we want to change exemplar to true\n      if (prevError && !error) {\n        onChange(true);\n      }\n    }\n  }, [datasource.exemplarsAvailable, query.instant, query.range, onChange, prevError, error]);\n\n  const iconButtonStyles = cx(\n    {\n      [styles.activeIcon]: !!query.exemplar,\n    },\n    styles.eyeIcon\n  );\n\n  return (\n    <InlineLabel width=\"auto\" data-testid={rest['data-testid']}>\n      <Tooltip content={error ?? ''}>\n        <div className={styles.iconWrapper}>\n          Exemplars\n          <IconButton\n            name=\"eye\"\n            tooltip={!!query.exemplar ? 'Disable query with exemplars' : 'Enable query with exemplars'}\n            disabled={!!error}\n            className={iconButtonStyles}\n            onClick={() => {\n              onChange(!query.exemplar);\n            }}\n          />\n        </div>\n      </Tooltip>\n    </InlineLabel>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    eyeIcon: css({\n      marginLeft: theme.spacing(2),\n    }),\n    activeIcon: css({\n      color: theme.colors.primary.main,\n    }),\n    iconWrapper: css({\n      display: 'flex',\n      alignItems: 'center',\n    }),\n  };\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/PromExploreExtraField.tsx\nimport { css, cx } from '@emotion/css';\nimport { isEqual } from 'lodash';\nimport React, { memo, useCallback } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { InlineFormLabel, RadioButtonGroup } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { PromQuery } from '../types';\n\nimport { PromExemplarField } from './PromExemplarField';\n\nexport interface PromExploreExtraFieldProps {\n  query: PromQuery;\n  onChange: (value: PromQuery) => void;\n  onRunQuery: () => void;\n  datasource: PrometheusDatasource;\n}\n\nexport const PromExploreExtraField = memo(({ query, datasource, onChange, onRunQuery }: PromExploreExtraFieldProps) => {\n  const rangeOptions = getQueryTypeOptions(true);\n  const prevQuery = usePrevious(query);\n\n  const onExemplarChange = useCallback(\n    (exemplar: boolean) => {\n      if (!isEqual(query, prevQuery) || exemplar !== query.exemplar) {\n        onChange({ ...query, exemplar });\n      }\n    },\n    [prevQuery, query, onChange]\n  );\n\n  function onChangeQueryStep(interval: string) {\n    onChange({ ...query, interval });\n  }\n\n  function onStepChange(e: React.SyntheticEvent<HTMLInputElement>) {\n    if (e.currentTarget.value !== query.interval) {\n      onChangeQueryStep(e.currentTarget.value);\n    }\n  }\n\n  function onReturnKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {\n    if (e.key === 'Enter' && e.shiftKey) {\n      onRunQuery();\n    }\n  }\n\n  const onQueryTypeChange = getQueryTypeChangeHandler(query, onChange);\n\n  return (\n    <div\n      aria-label=\"Prometheus extra field\"\n      className=\"gf-form-inline\"\n      data-testid={promExploreExtraFieldTestIds.extraFieldEditor}\n    >\n      {/*Query type field*/}\n      <div\n        data-testid={promExploreExtraFieldTestIds.queryTypeField}\n        className={cx(\n          'gf-form explore-input-margin',\n          css({\n            flexWrap: 'nowrap',\n          })\n        )}\n        aria-label=\"Query type field\"\n      >\n        <InlineFormLabel width=\"auto\">Query type</InlineFormLabel>\n\n        <RadioButtonGroup\n          options={rangeOptions}\n          value={query.range && query.instant ? 'both' : query.instant ? 'instant' : 'range'}\n          onChange={onQueryTypeChange}\n        />\n      </div>\n      {/*Step field*/}\n      <div\n        data-testid={promExploreExtraFieldTestIds.stepField}\n        className={cx(\n          'gf-form',\n          css({\n            flexWrap: 'nowrap',\n          })\n        )}\n        aria-label=\"Step field\"\n      >\n        <InlineFormLabel\n          width={6}\n          tooltip={\n            'Time units and built-in variables can be used here, for example: $__interval, $__rate_interval, 5s, 1m, 3h, 1d, 1y (Default if no unit is specified: s)'\n          }\n        >\n          Min step\n        </InlineFormLabel>\n        <input\n          type={'text'}\n          className=\"gf-form-input width-4\"\n          placeholder={'auto'}\n          onChange={onStepChange}\n          onKeyDown={onReturnKeyDown}\n          value={query.interval ?? ''}\n        />\n      </div>\n\n      <PromExemplarField onChange={onExemplarChange} datasource={datasource} query={query} />\n    </div>\n  );\n});\n\nPromExploreExtraField.displayName = 'PromExploreExtraField';\n\nexport function getQueryTypeOptions(includeBoth: boolean) {\n  const rangeOptions = [\n    { value: 'range', label: 'Range', description: 'Run query over a range of time' },\n    {\n      value: 'instant',\n      label: 'Instant',\n      description: 'Run query against a single point in time. For this query, the \"To\" time is used',\n    },\n  ];\n\n  if (includeBoth) {\n    rangeOptions.push({ value: 'both', label: 'Both', description: 'Run an Instant query and a Range query' });\n  }\n\n  return rangeOptions;\n}\n\nexport function getQueryTypeChangeHandler(query: PromQuery, onChange: (update: PromQuery) => void) {\n  return (queryType: string) => {\n    if (queryType === 'instant') {\n      onChange({ ...query, instant: true, range: false, exemplar: false });\n    } else if (queryType === 'range') {\n      onChange({ ...query, instant: false, range: true });\n    } else {\n      onChange({ ...query, instant: true, range: true });\n    }\n  };\n}\n\nexport const promExploreExtraFieldTestIds = {\n  extraFieldEditor: 'prom-editor-extra-field',\n  stepField: 'prom-editor-extra-field-step',\n  queryTypeField: 'prom-editor-extra-field-query-type',\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/QueryOptionGroup.tsx\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Collapse, useStyles2, Stack } from '@grafana/ui';\n\nexport interface Props {\n  title: string;\n  collapsedInfo: string[];\n  children: React.ReactNode;\n}\n\nexport function QueryOptionGroup({ title, children, collapsedInfo }: Props) {\n  const [isOpen, toggleOpen] = useToggle(false);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      <Collapse\n        className={styles.collapse}\n        collapsible\n        isOpen={isOpen}\n        onToggle={toggleOpen}\n        label={\n          <Stack gap={0}>\n            <h6 className={styles.title}>{title}</h6>\n            {!isOpen && (\n              <div className={styles.description}>\n                {collapsedInfo.map((x, i) => (\n                  <span key={i}>{x}</span>\n                ))}\n              </div>\n            )}\n          </Stack>\n        }\n      >\n        <div className={styles.body}>{children}</div>\n      </Collapse>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    collapse: css({\n      backgroundColor: 'unset',\n      border: 'unset',\n      marginBottom: 0,\n\n      ['> button']: {\n        padding: theme.spacing(0, 1),\n      },\n    }),\n    wrapper: css({\n      width: '100%',\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'baseline',\n    }),\n    title: css({\n      flexGrow: 1,\n      overflow: 'hidden',\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.fontWeightMedium,\n      margin: 0,\n    }),\n    description: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.bodySmall.fontWeight,\n      paddingLeft: theme.spacing(2),\n      gap: theme.spacing(2),\n      display: 'flex',\n    }),\n    body: css({\n      display: 'flex',\n      gap: theme.spacing(2),\n      flexWrap: 'wrap',\n    }),\n    tooltip: css({\n      marginRight: theme.spacing(0.25),\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryLegendEditor.tsx\nimport React, { useRef } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorField } from '@grafana/experimental';\nimport { AutoSizeInput, Select } from '@grafana/ui';\n\nimport { LegendFormatMode } from '../../types';\n\nexport interface PromQueryLegendEditorProps {\n  legendFormat: string | undefined;\n  onChange: (legendFormat: string) => void;\n  onRunQuery: () => void;\n}\n\nconst legendModeOptions = [\n  {\n    label: 'Auto',\n    value: LegendFormatMode.Auto,\n    description: 'Only includes unique labels',\n  },\n  { label: 'Verbose', value: LegendFormatMode.Verbose, description: 'All label names and values' },\n  { label: 'Custom', value: LegendFormatMode.Custom, description: 'Provide a naming template' },\n];\n\n/**\n * Tests for this component are on the parent level (PromQueryBuilderOptions).\n */\nexport const PromQueryLegendEditor = React.memo<PromQueryLegendEditorProps>(\n  ({ legendFormat, onChange, onRunQuery }) => {\n    const mode = getLegendMode(legendFormat);\n    const inputRef = useRef<HTMLInputElement | null>(null);\n\n    const onLegendFormatChanged = (evt: React.FormEvent<HTMLInputElement>) => {\n      let newFormat = evt.currentTarget.value;\n      if (newFormat.length === 0) {\n        newFormat = LegendFormatMode.Auto;\n      }\n\n      if (newFormat !== legendFormat) {\n        onChange(newFormat);\n        onRunQuery();\n      }\n    };\n\n    const onLegendModeChanged = (value: SelectableValue<LegendFormatMode>) => {\n      switch (value.value!) {\n        case LegendFormatMode.Auto:\n          onChange(LegendFormatMode.Auto);\n          break;\n        case LegendFormatMode.Custom:\n          onChange('{{label_name}}');\n          setTimeout(() => {\n            inputRef.current?.focus();\n            inputRef.current?.setSelectionRange(2, 12, 'forward');\n          }, 10);\n          break;\n        case LegendFormatMode.Verbose:\n          onChange('');\n          break;\n      }\n      onRunQuery();\n    };\n\n    return (\n      <EditorField\n        label=\"Legend\"\n        tooltip=\"Series name override or template. Ex. {{hostname}} will be replaced with label value for hostname.\"\n        data-testid={selectors.components.DataSource.Prometheus.queryEditor.legend}\n      >\n        <>\n          {mode === LegendFormatMode.Custom && (\n            <AutoSizeInput\n              id=\"legendFormat\"\n              minWidth={22}\n              placeholder=\"auto\"\n              defaultValue={legendFormat}\n              onCommitChange={onLegendFormatChanged}\n              ref={inputRef}\n            />\n          )}\n          {mode !== LegendFormatMode.Custom && (\n            <Select\n              inputId=\"legend.mode\"\n              isSearchable={false}\n              placeholder=\"Select legend mode\"\n              options={legendModeOptions}\n              width={22}\n              onChange={onLegendModeChanged}\n              value={legendModeOptions.find((x) => x.value === mode)}\n            />\n          )}\n        </>\n      </EditorField>\n    );\n  }\n);\n\nPromQueryLegendEditor.displayName = 'PromQueryLegendEditor';\n\nfunction getLegendMode(legendFormat: string | undefined) {\n  // This special value means the new smart minimal series naming\n  if (legendFormat === LegendFormatMode.Auto) {\n    return LegendFormatMode.Auto;\n  }\n\n  // Missing or empty legend format is the old verbose behavior\n  if (legendFormat == null || legendFormat === '') {\n    return LegendFormatMode.Verbose;\n  }\n\n  return LegendFormatMode.Custom;\n}\n\nexport function getLegendModeLabel(legendFormat: string | undefined) {\n  const mode = getLegendMode(legendFormat);\n  if (mode !== LegendFormatMode.Custom) {\n    return legendModeOptions.find((x) => x.value === mode)?.label;\n  }\n  return legendFormat;\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilderOptions.tsx\nimport React, { SyntheticEvent } from 'react';\n\nimport { CoreApp, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorField, EditorRow, EditorSwitch } from '@grafana/experimental';\nimport { AutoSizeInput, RadioButtonGroup, Select } from '@grafana/ui';\n\nimport { getQueryTypeChangeHandler, getQueryTypeOptions } from '../../components/PromExploreExtraField';\nimport { PromQueryFormat } from '../../dataquery';\nimport { PromQuery } from '../../types';\nimport { QueryOptionGroup } from '../shared/QueryOptionGroup';\n\nimport { FORMAT_OPTIONS, INTERVAL_FACTOR_OPTIONS } from './PromQueryEditorSelector';\nimport { getLegendModeLabel, PromQueryLegendEditor } from './PromQueryLegendEditor';\n\nexport interface UIOptions {\n  exemplars: boolean;\n  type: boolean;\n  format: boolean;\n  minStep: boolean;\n  legend: boolean;\n  resolution: boolean;\n}\n\nexport interface PromQueryBuilderOptionsProps {\n  query: PromQuery;\n  app?: CoreApp;\n  onChange: (update: PromQuery) => void;\n  onRunQuery: () => void;\n}\n\nexport const PromQueryBuilderOptions = React.memo<PromQueryBuilderOptionsProps>(\n  ({ query, app, onChange, onRunQuery }) => {\n    const onChangeFormat = (value: SelectableValue<PromQueryFormat>) => {\n      onChange({ ...query, format: value.value });\n      onRunQuery();\n    };\n\n    const onChangeStep = (evt: React.FormEvent<HTMLInputElement>) => {\n      onChange({ ...query, interval: evt.currentTarget.value.trim() });\n      onRunQuery();\n    };\n\n    const queryTypeOptions = getQueryTypeOptions(\n      app === CoreApp.Explore || app === CoreApp.Correlations || app === CoreApp.PanelEditor\n    );\n\n    const onQueryTypeChange = getQueryTypeChangeHandler(query, onChange);\n\n    const onExemplarChange = (event: SyntheticEvent<HTMLInputElement>) => {\n      const isEnabled = event.currentTarget.checked;\n      onChange({ ...query, exemplar: isEnabled });\n      onRunQuery();\n    };\n\n    const onIntervalFactorChange = (value: SelectableValue<number>) => {\n      onChange({ ...query, intervalFactor: value.value });\n      onRunQuery();\n    };\n\n    const formatOption = FORMAT_OPTIONS.find((option) => option.value === query.format) || FORMAT_OPTIONS[0];\n    const queryTypeValue = getQueryTypeValue(query);\n    const queryTypeLabel = queryTypeOptions.find((x) => x.value === queryTypeValue)!.label;\n\n    return (\n      <EditorRow>\n        <div data-testid={selectors.components.DataSource.Prometheus.queryEditor.options}>\n          <QueryOptionGroup\n            title=\"Options\"\n            collapsedInfo={getCollapsedInfo(query, formatOption.label!, queryTypeLabel, app)}\n          >\n            <PromQueryLegendEditor\n              legendFormat={query.legendFormat}\n              onChange={(legendFormat) => onChange({ ...query, legendFormat })}\n              onRunQuery={onRunQuery}\n            />\n            <EditorField\n              label=\"Min step\"\n              tooltip={\n                <>\n                  An additional lower limit for the step parameter of the Prometheus query and for the{' '}\n                  <code>$__interval</code> and <code>$__rate_interval</code> variables.\n                </>\n              }\n            >\n              <AutoSizeInput\n                type=\"text\"\n                aria-label=\"Set lower limit for the step parameter\"\n                placeholder={'auto'}\n                minWidth={10}\n                onCommitChange={onChangeStep}\n                defaultValue={query.interval}\n                id={selectors.components.DataSource.Prometheus.queryEditor.step}\n              />\n            </EditorField>\n            <EditorField label=\"Format\">\n              <Select\n                data-testid={selectors.components.DataSource.Prometheus.queryEditor.format}\n                value={formatOption}\n                allowCustomValue\n                onChange={onChangeFormat}\n                options={FORMAT_OPTIONS}\n              />\n            </EditorField>\n            <EditorField label=\"Type\" data-testid={selectors.components.DataSource.Prometheus.queryEditor.type}>\n              <RadioButtonGroup options={queryTypeOptions} value={queryTypeValue} onChange={onQueryTypeChange} />\n            </EditorField>\n            {shouldShowExemplarSwitch(query, app) && (\n              <EditorField label=\"Exemplars\">\n                <EditorSwitch\n                  value={query.exemplar || false}\n                  onChange={onExemplarChange}\n                  id={selectors.components.DataSource.Prometheus.queryEditor.exemplars}\n                />\n              </EditorField>\n            )}\n            {query.intervalFactor && query.intervalFactor > 1 && (\n              <EditorField label=\"Resolution\">\n                <Select\n                  aria-label=\"Select resolution\"\n                  isSearchable={false}\n                  options={INTERVAL_FACTOR_OPTIONS}\n                  onChange={onIntervalFactorChange}\n                  value={INTERVAL_FACTOR_OPTIONS.find((option) => option.value === query.intervalFactor)}\n                />\n              </EditorField>\n            )}\n          </QueryOptionGroup>\n        </div>\n      </EditorRow>\n    );\n  }\n);\n\nfunction shouldShowExemplarSwitch(query: PromQuery, app?: CoreApp) {\n  if (app === CoreApp.UnifiedAlerting || !query.range) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getQueryTypeValue(query: PromQuery) {\n  return query.range && query.instant ? 'both' : query.instant ? 'instant' : 'range';\n}\n\nfunction getCollapsedInfo(query: PromQuery, formatOption: string, queryType: string, app?: CoreApp): string[] {\n  const items: string[] = [];\n\n  items.push(`Legend: ${getLegendModeLabel(query.legendFormat)}`);\n  items.push(`Format: ${formatOption}`);\n  items.push(`Step: ${query.interval ?? 'auto'}`);\n  items.push(`Type: ${queryType}`);\n\n  if (shouldShowExemplarSwitch(query, app)) {\n    if (query.exemplar) {\n      items.push(`Exemplars: true`);\n    } else {\n      items.push(`Exemplars: false`);\n    }\n  }\n  return items;\n}\n\nPromQueryBuilderOptions.displayName = 'PromQueryBuilderOptions';\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/core/components/LocalStorageValueProvider/LocalStorageValueProvider.tsx\nimport React, { useEffect, useState } from 'react';\n\nimport store from '../../store';\n\nexport interface Props<T> {\n  storageKey: string;\n  defaultValue: T;\n  children: (value: T, onSaveToStore: (value: T) => void, onDeleteFromStore: () => void) => React.ReactNode;\n}\n\nexport const LocalStorageValueProvider = <T,>(props: Props<T>) => {\n  const { children, storageKey, defaultValue } = props;\n\n  const [state, setState] = useState({ value: store.getObject(props.storageKey, props.defaultValue) });\n\n  useEffect(() => {\n    const onStorageUpdate = (v: StorageEvent) => {\n      if (v.key === storageKey) {\n        setState({ value: store.getObject(props.storageKey, props.defaultValue) });\n      }\n    };\n\n    window.addEventListener('storage', onStorageUpdate);\n\n    return () => {\n      window.removeEventListener('storage', onStorageUpdate);\n    };\n  });\n\n  const onSaveToStore = (value: T) => {\n    try {\n      store.setObject(storageKey, value);\n    } catch (error) {\n      console.error(error);\n    }\n    setState({ value });\n  };\n\n  const onDeleteFromStore = () => {\n    try {\n      store.delete(storageKey);\n    } catch (error) {\n      console.log(error);\n    }\n    setState({ value: defaultValue });\n  };\n\n  return <>{children(state.value, onSaveToStore, onDeleteFromStore)}</>;\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/core/utils/CancelablePromise.ts\n// https://github.com/facebook/react/issues/5465\n\nexport interface CancelablePromise<T> {\n  promise: Promise<T>;\n  cancel: () => void;\n}\n\nexport interface CancelablePromiseRejection {\n  isCanceled: boolean;\n}\n\nexport function isCancelablePromiseRejection(promise: unknown): promise is CancelablePromiseRejection {\n  return typeof promise === 'object' && promise !== null && 'isCanceled' in promise;\n}\n\nexport const makePromiseCancelable = <T>(promise: Promise<T>): CancelablePromise<T> => {\n  let hasCanceled_ = false;\n\n  const wrappedPromise = new Promise<T>((resolve, reject) => {\n    const canceledPromiseRejection: CancelablePromiseRejection = { isCanceled: true };\n    promise.then((val) => (hasCanceled_ ? reject(canceledPromiseRejection) : resolve(val)));\n    promise.catch((error) => (hasCanceled_ ? reject(canceledPromiseRejection) : reject(error)));\n  });\n\n  return {\n    promise: wrappedPromise,\n    cancel() {\n      hasCanceled_ = true;\n    },\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/PrometheusMetricsBrowser.tsx\nimport { css, cx } from '@emotion/css';\nimport React, { ChangeEvent } from 'react';\nimport { FixedSizeList } from 'react-window';\n\nimport { GrafanaTheme2, TimeRange } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport {\n  BrowserLabel as PromLabel,\n  Button,\n  HorizontalGroup,\n  Input,\n  Label,\n  LoadingPlaceholder,\n  stylesFactory,\n  withTheme2,\n} from '@grafana/ui';\n\nimport PromQlLanguageProvider from '../language_provider';\nimport { escapeLabelValueInExactSelector, escapeLabelValueInRegexSelector } from '../language_utils';\n\n// Hard limit on labels to render\nconst EMPTY_SELECTOR = '{}';\nconst METRIC_LABEL = '__name__';\nconst LIST_ITEM_SIZE = 25;\n\nexport interface BrowserProps {\n  languageProvider: PromQlLanguageProvider;\n  onChange: (selector: string) => void;\n  theme: GrafanaTheme2;\n  autoSelect?: number;\n  hide?: () => void;\n  lastUsedLabels: string[];\n  storeLastUsedLabels: (labels: string[]) => void;\n  deleteLastUsedLabels: () => void;\n  timeRange?: TimeRange;\n}\n\ninterface BrowserState {\n  labels: SelectableLabel[];\n  labelSearchTerm: string;\n  metricSearchTerm: string;\n  status: string;\n  error: string;\n  validationStatus: string;\n  valueSearchTerm: string;\n}\n\ninterface FacettableValue {\n  name: string;\n  selected?: boolean;\n  details?: string;\n}\n\nexport interface SelectableLabel {\n  name: string;\n  selected?: boolean;\n  loading?: boolean;\n  values?: FacettableValue[];\n  hidden?: boolean;\n  facets?: number;\n}\n\nexport function buildSelector(labels: SelectableLabel[]): string {\n  let singleMetric = '';\n  const selectedLabels = [];\n  for (const label of labels) {\n    if ((label.name === METRIC_LABEL || label.selected) && label.values && label.values.length > 0) {\n      const selectedValues = label.values.filter((value) => value.selected).map((value) => value.name);\n      if (selectedValues.length > 1) {\n        selectedLabels.push(`${label.name}=~\"${selectedValues.map(escapeLabelValueInRegexSelector).join('|')}\"`);\n      } else if (selectedValues.length === 1) {\n        if (label.name === METRIC_LABEL) {\n          singleMetric = selectedValues[0];\n        } else {\n          selectedLabels.push(`${label.name}=\"${escapeLabelValueInExactSelector(selectedValues[0])}\"`);\n        }\n      }\n    }\n  }\n  return [singleMetric, '{', selectedLabels.join(','), '}'].join('');\n}\n\nexport function facetLabels(\n  labels: SelectableLabel[],\n  possibleLabels: Record<string, string[]>,\n  lastFacetted?: string\n): SelectableLabel[] {\n  return labels.map((label) => {\n    const possibleValues = possibleLabels[label.name];\n    if (possibleValues) {\n      let existingValues: FacettableValue[];\n      if (label.name === lastFacetted && label.values) {\n        // Facetting this label, show all values\n        existingValues = label.values;\n      } else {\n        // Keep selection in other facets\n        const selectedValues: Set<string> = new Set(\n          label.values?.filter((value) => value.selected).map((value) => value.name) || []\n        );\n        // Values for this label have not been requested yet, let's use the facetted ones as the initial values\n        existingValues = possibleValues.map((value) => ({ name: value, selected: selectedValues.has(value) }));\n      }\n      return {\n        ...label,\n        loading: false,\n        values: existingValues,\n        hidden: !possibleValues,\n        facets: existingValues.length,\n      };\n    }\n\n    // Label is facetted out, hide all values\n    return { ...label, loading: false, hidden: !possibleValues, values: undefined, facets: 0 };\n  });\n}\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2) => ({\n  wrapper: css({\n    backgroundColor: theme.colors.background.secondary,\n    padding: theme.spacing(1),\n    width: '100%',\n  }),\n  list: css({\n    marginTop: theme.spacing(1),\n    display: 'flex',\n    flexWrap: 'wrap',\n    maxHeight: '200px',\n    overflow: 'auto',\n    alignContent: 'flex-start',\n  }),\n  section: css({\n    '& + &': {\n      margin: `${theme.spacing(2)} 0`,\n    },\n    position: 'relative',\n  }),\n  selector: css({\n    fontFamily: theme.typography.fontFamilyMonospace,\n    marginBottom: theme.spacing(1),\n  }),\n  status: css({\n    padding: theme.spacing(0.5),\n    color: theme.colors.text.secondary,\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    /* using absolute positioning because flex interferes with ellipsis */\n    position: 'absolute',\n    width: '50%',\n    right: 0,\n    textAlign: 'right',\n    opacity: 0,\n    [theme.transitions.handleMotion('no-preference', 'reduce')]: {\n      transition: 'opacity 100ms linear',\n    },\n  }),\n  statusShowing: css({\n    opacity: 1,\n  }),\n  error: css({\n    color: theme.colors.error.main,\n  }),\n  valueList: css({\n    marginRight: theme.spacing(1),\n    resize: 'horizontal',\n  }),\n  valueListWrapper: css({\n    borderLeft: `1px solid ${theme.colors.border.medium}`,\n    margin: `${theme.spacing(1)} 0`,\n    padding: `${theme.spacing(1)} 0 ${theme.spacing(1)} ${theme.spacing(1)}`,\n  }),\n  valueListArea: css({\n    display: 'flex',\n    flexWrap: 'wrap',\n    marginTop: theme.spacing(1),\n  }),\n  valueTitle: css({\n    marginLeft: `-${theme.spacing(0.5)}`,\n    marginBottom: theme.spacing(1),\n  }),\n  validationStatus: css({\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n    color: theme.colors.text.maxContrast,\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  }),\n}));\n\n/**\n * TODO #33976: Remove duplicated code. The component is very similar to LokiLabelBrowser.tsx. Check if it's possible\n *              to create a single, generic component.\n */\nexport class UnthemedPrometheusMetricsBrowser extends React.Component<BrowserProps, BrowserState> {\n  valueListsRef = React.createRef<HTMLDivElement>();\n  state: BrowserState = {\n    labels: [],\n    labelSearchTerm: '',\n    metricSearchTerm: '',\n    status: 'Ready',\n    error: '',\n    validationStatus: '',\n    valueSearchTerm: '',\n  };\n\n  onChangeLabelSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ labelSearchTerm: event.target.value });\n  };\n\n  onChangeMetricSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ metricSearchTerm: event.target.value });\n  };\n\n  onChangeValueSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ valueSearchTerm: event.target.value });\n  };\n\n  onClickRunQuery = () => {\n    const selector = buildSelector(this.state.labels);\n    this.props.onChange(selector);\n  };\n\n  onClickRunRateQuery = () => {\n    const selector = buildSelector(this.state.labels);\n    const query = `rate(${selector}[$__rate_interval])`;\n    this.props.onChange(query);\n  };\n\n  onClickClear = () => {\n    this.setState((state) => {\n      const labels: SelectableLabel[] = state.labels.map((label) => ({\n        ...label,\n        values: undefined,\n        selected: false,\n        loading: false,\n        hidden: false,\n        facets: undefined,\n      }));\n      return {\n        labels,\n        labelSearchTerm: '',\n        metricSearchTerm: '',\n        status: '',\n        error: '',\n        validationStatus: '',\n        valueSearchTerm: '',\n      };\n    });\n    this.props.deleteLastUsedLabels();\n    // Get metrics\n    this.fetchValues(METRIC_LABEL, EMPTY_SELECTOR);\n  };\n\n  onClickLabel = (name: string, value: string | undefined, event: React.MouseEvent<HTMLElement>) => {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label) {\n      return;\n    }\n    // Toggle selected state\n    const selected = !label.selected;\n    let nextValue: Partial<SelectableLabel> = { selected };\n    if (label.values && !selected) {\n      // Deselect all values if label was deselected\n      const values = label.values.map((value) => ({ ...value, selected: false }));\n      nextValue = { ...nextValue, facets: 0, values };\n    }\n    // Resetting search to prevent empty results\n    this.setState({ labelSearchTerm: '' });\n    this.updateLabelState(name, nextValue, '', () => this.doFacettingForLabel(name));\n  };\n\n  onClickValue = (name: string, value: string | undefined, event: React.MouseEvent<HTMLElement>) => {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label || !label.values) {\n      return;\n    }\n    // Resetting search to prevent empty results\n    this.setState({ labelSearchTerm: '' });\n    // Toggling value for selected label, leaving other values intact\n    const values = label.values.map((v) => ({ ...v, selected: v.name === value ? !v.selected : v.selected }));\n    this.updateLabelState(name, { values }, '', () => this.doFacetting(name));\n  };\n\n  onClickMetric = (name: string, value: string | undefined, event: React.MouseEvent<HTMLElement>) => {\n    // Finding special metric label\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label || !label.values) {\n      return;\n    }\n    // Resetting search to prevent empty results\n    this.setState({ metricSearchTerm: '' });\n    // Toggling value for selected label, leaving other values intact\n    const values = label.values.map((v) => ({\n      ...v,\n      selected: v.name === value || v.selected ? !v.selected : v.selected,\n    }));\n    // Toggle selected state of special metrics label\n    const selected = values.some((v) => v.selected);\n    this.updateLabelState(name, { selected, values }, '', () => this.doFacetting(name));\n  };\n\n  onClickValidate = () => {\n    const selector = buildSelector(this.state.labels);\n    this.validateSelector(selector);\n  };\n\n  updateLabelState(name: string, updatedFields: Partial<SelectableLabel>, status = '', cb?: () => void) {\n    this.setState((state) => {\n      const labels: SelectableLabel[] = state.labels.map((label) => {\n        if (label.name === name) {\n          return { ...label, ...updatedFields };\n        }\n        return label;\n      });\n      // New status overrides errors\n      const error = status ? '' : state.error;\n      return { labels, status, error, validationStatus: '' };\n    }, cb);\n  }\n\n  componentDidMount() {\n    const { languageProvider, lastUsedLabels } = this.props;\n    if (languageProvider) {\n      const selectedLabels: string[] = lastUsedLabels;\n      languageProvider.start(this.props.timeRange).then(() => {\n        let rawLabels: string[] = languageProvider.getLabelKeys();\n        // Get metrics\n        this.fetchValues(METRIC_LABEL, EMPTY_SELECTOR);\n        // Auto-select previously selected labels\n        const labels: SelectableLabel[] = rawLabels.map((label, i, arr) => ({\n          name: label,\n          selected: selectedLabels.includes(label),\n          loading: false,\n        }));\n        // Pre-fetch values for selected labels\n        this.setState({ labels }, () => {\n          this.state.labels.forEach((label) => {\n            if (label.selected) {\n              this.fetchValues(label.name, EMPTY_SELECTOR);\n            }\n          });\n        });\n      });\n    }\n  }\n\n  doFacettingForLabel(name: string) {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label) {\n      return;\n    }\n    const selectedLabels = this.state.labels.filter((label) => label.selected).map((label) => label.name);\n    this.props.storeLastUsedLabels(selectedLabels);\n    if (label.selected) {\n      // Refetch values for newly selected label...\n      if (!label.values) {\n        this.fetchValues(name, buildSelector(this.state.labels));\n      }\n    } else {\n      // Only need to facet when deselecting labels\n      this.doFacetting();\n    }\n  }\n\n  doFacetting = (lastFacetted?: string) => {\n    const selector = buildSelector(this.state.labels);\n    if (selector === EMPTY_SELECTOR) {\n      // Clear up facetting\n      const labels: SelectableLabel[] = this.state.labels.map((label) => {\n        return { ...label, facets: 0, values: undefined, hidden: false };\n      });\n      this.setState({ labels }, () => {\n        // Get fresh set of values\n        this.state.labels.forEach(\n          (label) => (label.selected || label.name === METRIC_LABEL) && this.fetchValues(label.name, selector)\n        );\n      });\n    } else {\n      // Do facetting\n      this.fetchSeries(selector, lastFacetted);\n    }\n  };\n\n  async fetchValues(name: string, selector: string) {\n    const { languageProvider } = this.props;\n    this.updateLabelState(name, { loading: true }, `Fetching values for ${name}`);\n    try {\n      let rawValues = await languageProvider.getLabelValues(name);\n      // If selector changed, clear loading state and discard result by returning early\n      if (selector !== buildSelector(this.state.labels)) {\n        this.updateLabelState(name, { loading: false });\n        return;\n      }\n      const values: FacettableValue[] = [];\n      const { metricsMetadata } = languageProvider;\n      for (const labelValue of rawValues) {\n        const value: FacettableValue = { name: labelValue };\n        // Adding type/help text to metrics\n        if (name === METRIC_LABEL && metricsMetadata) {\n          const meta = metricsMetadata[labelValue];\n          if (meta) {\n            value.details = `(${meta.type}) ${meta.help}`;\n          }\n        }\n        values.push(value);\n      }\n      this.updateLabelState(name, { values, loading: false });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchSeries(selector: string, lastFacetted?: string) {\n    const { languageProvider } = this.props;\n    if (lastFacetted) {\n      this.updateLabelState(lastFacetted, { loading: true }, `Facetting labels for ${selector}`);\n    }\n    try {\n      const possibleLabels = await languageProvider.fetchSeriesLabels(selector, true);\n      // If selector changed, clear loading state and discard result by returning early\n      if (selector !== buildSelector(this.state.labels)) {\n        if (lastFacetted) {\n          this.updateLabelState(lastFacetted, { loading: false });\n        }\n        return;\n      }\n      if (Object.keys(possibleLabels).length === 0) {\n        this.setState({ error: `Empty results, no matching label for ${selector}` });\n        return;\n      }\n      const labels: SelectableLabel[] = facetLabels(this.state.labels, possibleLabels, lastFacetted);\n      this.setState({ labels, error: '' });\n      if (lastFacetted) {\n        this.updateLabelState(lastFacetted, { loading: false });\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async validateSelector(selector: string) {\n    const { languageProvider } = this.props;\n    this.setState({ validationStatus: `Validating selector ${selector}`, error: '' });\n    const streams = await languageProvider.fetchSeries(selector);\n    this.setState({ validationStatus: `Selector is valid (${streams.length} series found)` });\n  }\n\n  render() {\n    const { theme } = this.props;\n    const { labels, labelSearchTerm, metricSearchTerm, status, error, validationStatus, valueSearchTerm } = this.state;\n    const styles = getStyles(theme);\n    if (labels.length === 0) {\n      return (\n        <div className={styles.wrapper}>\n          <LoadingPlaceholder text=\"Loading labels...\" />\n        </div>\n      );\n    }\n\n    // Filter metrics\n    let metrics = labels.find((label) => label.name === METRIC_LABEL);\n    if (metrics && metricSearchTerm) {\n      metrics = {\n        ...metrics,\n        values: metrics.values?.filter((value) => value.selected || value.name.includes(metricSearchTerm)),\n      };\n    }\n\n    // Filter labels\n    let nonMetricLabels = labels.filter((label) => !label.hidden && label.name !== METRIC_LABEL);\n    if (labelSearchTerm) {\n      nonMetricLabels = nonMetricLabels.filter((label) => label.selected || label.name.includes(labelSearchTerm));\n    }\n\n    // Filter non-metric label values\n    let selectedLabels = nonMetricLabels.filter((label) => label.selected && label.values);\n    if (valueSearchTerm) {\n      selectedLabels = selectedLabels.map((label) => ({\n        ...label,\n        values: label.values?.filter((value) => value.selected || value.name.includes(valueSearchTerm)),\n      }));\n    }\n    const selector = buildSelector(this.state.labels);\n    const empty = selector === EMPTY_SELECTOR;\n    const metricCount = metrics?.values?.length || 0;\n\n    return (\n      <div className={styles.wrapper}>\n        <HorizontalGroup align=\"flex-start\" spacing=\"lg\">\n          <div>\n            <div className={styles.section}>\n              <Label description=\"Once a metric is selected only possible labels are shown.\">1. Select a metric</Label>\n              <div>\n                <Input\n                  onChange={this.onChangeMetricSearch}\n                  aria-label=\"Filter expression for metric\"\n                  value={metricSearchTerm}\n                  data-testid={selectors.components.DataSource.Prometheus.queryEditor.code.metricsBrowser.selectMetric}\n                />\n              </div>\n              <div\n                role=\"list\"\n                className={styles.valueListWrapper}\n                data-testid={selectors.components.DataSource.Prometheus.queryEditor.code.metricsBrowser.metricList}\n              >\n                <FixedSizeList\n                  height={Math.min(450, metricCount * LIST_ITEM_SIZE)}\n                  itemCount={metricCount}\n                  itemSize={LIST_ITEM_SIZE}\n                  itemKey={(i) => metrics!.values![i].name}\n                  width={300}\n                  className={styles.valueList}\n                >\n                  {({ index, style }) => {\n                    const value = metrics?.values?.[index];\n                    if (!value) {\n                      return null;\n                    }\n                    return (\n                      <div style={style}>\n                        <PromLabel\n                          name={metrics!.name}\n                          value={value?.name}\n                          title={value.details}\n                          active={value?.selected}\n                          onClick={this.onClickMetric}\n                          searchTerm={metricSearchTerm}\n                        />\n                      </div>\n                    );\n                  }}\n                </FixedSizeList>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <div className={styles.section}>\n              <Label description=\"Once label values are selected, only possible label combinations are shown.\">\n                2. Select labels to search in\n              </Label>\n              <div>\n                <Input\n                  onChange={this.onChangeLabelSearch}\n                  aria-label=\"Filter expression for label\"\n                  value={labelSearchTerm}\n                  data-testid={\n                    selectors.components.DataSource.Prometheus.queryEditor.code.metricsBrowser.labelNamesFilter\n                  }\n                />\n              </div>\n              {/* Using fixed height here to prevent jumpy layout */}\n              <div className={styles.list} style={{ height: 120 }}>\n                {nonMetricLabels.map((label) => (\n                  <PromLabel\n                    key={label.name}\n                    name={label.name}\n                    loading={label.loading}\n                    active={label.selected}\n                    hidden={label.hidden}\n                    facets={label.facets}\n                    onClick={this.onClickLabel}\n                    searchTerm={labelSearchTerm}\n                  />\n                ))}\n              </div>\n            </div>\n            <div className={styles.section}>\n              <Label description=\"Use the search field to find values across selected labels.\">\n                3. Select (multiple) values for your labels\n              </Label>\n              <div>\n                <Input\n                  onChange={this.onChangeValueSearch}\n                  aria-label=\"Filter expression for label values\"\n                  value={valueSearchTerm}\n                  data-testid={\n                    selectors.components.DataSource.Prometheus.queryEditor.code.metricsBrowser.labelValuesFilter\n                  }\n                />\n              </div>\n              <div className={styles.valueListArea} ref={this.valueListsRef}>\n                {selectedLabels.map((label) => (\n                  <div\n                    role=\"list\"\n                    key={label.name}\n                    aria-label={`Values for ${label.name}`}\n                    className={styles.valueListWrapper}\n                  >\n                    <div className={styles.valueTitle}>\n                      <PromLabel\n                        name={label.name}\n                        loading={label.loading}\n                        active={label.selected}\n                        hidden={label.hidden}\n                        //If no facets, we want to show number of all label values\n                        facets={label.facets || label.values?.length}\n                        onClick={this.onClickLabel}\n                      />\n                    </div>\n                    <FixedSizeList\n                      height={Math.min(200, LIST_ITEM_SIZE * (label.values?.length || 0))}\n                      itemCount={label.values?.length || 0}\n                      itemSize={28}\n                      itemKey={(i) => label.values![i].name}\n                      width={200}\n                      className={styles.valueList}\n                    >\n                      {({ index, style }) => {\n                        const value = label.values?.[index];\n                        if (!value) {\n                          return null;\n                        }\n                        return (\n                          <div style={style}>\n                            <PromLabel\n                              name={label.name}\n                              value={value?.name}\n                              active={value?.selected}\n                              onClick={this.onClickValue}\n                              searchTerm={valueSearchTerm}\n                            />\n                          </div>\n                        );\n                      }}\n                    </FixedSizeList>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </HorizontalGroup>\n\n        <div className={styles.section}>\n          <Label>4. Resulting selector</Label>\n          <div aria-label=\"selector\" className={styles.selector}>\n            {selector}\n          </div>\n          {validationStatus && <div className={styles.validationStatus}>{validationStatus}</div>}\n          <HorizontalGroup>\n            <Button\n              data-testid={selectors.components.DataSource.Prometheus.queryEditor.code.metricsBrowser.useQuery}\n              aria-label=\"Use selector for query button\"\n              disabled={empty}\n              onClick={this.onClickRunQuery}\n            >\n              Use query\n            </Button>\n            <Button\n              data-testid={selectors.components.DataSource.Prometheus.queryEditor.code.metricsBrowser.useAsRateQuery}\n              aria-label=\"Use selector as metrics button\"\n              variant=\"secondary\"\n              disabled={empty}\n              onClick={this.onClickRunRateQuery}\n            >\n              Use as rate query\n            </Button>\n            <Button\n              data-testid={selectors.components.DataSource.Prometheus.queryEditor.code.metricsBrowser.validateSelector}\n              aria-label=\"Validate submit button\"\n              variant=\"secondary\"\n              disabled={empty}\n              onClick={this.onClickValidate}\n            >\n              Validate selector\n            </Button>\n            <Button\n              data-testid={selectors.components.DataSource.Prometheus.queryEditor.code.metricsBrowser.clear}\n              aria-label=\"Selector clear button\"\n              variant=\"secondary\"\n              onClick={this.onClickClear}\n            >\n              Clear\n            </Button>\n            <div className={cx(styles.status, (status || error) && styles.statusShowing)}>\n              <span className={error ? styles.error : ''}>{error || status}</span>\n            </div>\n          </HorizontalGroup>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const PrometheusMetricsBrowser = withTheme2(UnthemedPrometheusMetricsBrowser);\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/monaco-query-field/getOverrideServices.ts\nimport { monacoTypes } from '@grafana/ui';\n\n// this thing here is a workaround in a way.\n// what we want to achieve, is that when the autocomplete-window\n// opens, the \"second, extra popup\" with the extra help,\n// also opens automatically.\n// but there is no API to achieve it.\n// the way to do it is to implement the `storageService`\n// interface, and provide our custom implementation,\n// which will default to `true` for the correct string-key.\n// unfortunately, while the typescript-interface exists,\n// it is not exported from monaco-editor,\n// so we cannot rely on typescript to make sure\n// we do it right. all we can do is to manually\n// lookup the interface, and make sure we code our code right.\n// our code is a \"best effort\" approach,\n// i am not 100% how the `scope` and `target` things work,\n// but so far it seems to work ok.\n// i would use an another approach, if there was one available.\n\nfunction makeStorageService() {\n  // we need to return an object that fulfills this interface:\n  // https://github.com/microsoft/vscode/blob/ff1e16eebb93af79fd6d7af1356c4003a120c563/src/vs/platform/storage/common/storage.ts#L37\n  // unfortunately it is not export from monaco-editor\n\n  const strings = new Map<string, string>();\n\n  // we want this to be true by default\n  strings.set('expandSuggestionDocs', true.toString());\n\n  return {\n    // we do not implement the on* handlers\n    onDidChangeValue: (data: unknown): void => undefined,\n    onDidChangeTarget: (data: unknown): void => undefined,\n    onWillSaveState: (data: unknown): void => undefined,\n\n    get: (key: string, scope: unknown, fallbackValue?: string): string | undefined => {\n      return strings.get(key) ?? fallbackValue;\n    },\n\n    getBoolean: (key: string, scope: unknown, fallbackValue?: boolean): boolean | undefined => {\n      const val = strings.get(key);\n      if (val !== undefined) {\n        // the interface-docs say the value will be converted\n        // to a boolean but do not specify how, so we improvise\n        return val === 'true';\n      } else {\n        return fallbackValue;\n      }\n    },\n\n    getNumber: (key: string, scope: unknown, fallbackValue?: number): number | undefined => {\n      const val = strings.get(key);\n      if (val !== undefined) {\n        return parseInt(val, 10);\n      } else {\n        return fallbackValue;\n      }\n    },\n\n    store: (\n      key: string,\n      value: string | boolean | number | undefined | null,\n      scope: unknown,\n      target: unknown\n    ): void => {\n      // the interface-docs say if the value is nullish, it should act as delete\n      if (value === null || value === undefined) {\n        strings.delete(key);\n      } else {\n        strings.set(key, value.toString());\n      }\n    },\n\n    remove: (key: string, scope: unknown): void => {\n      strings.delete(key);\n    },\n\n    keys: (scope: unknown, target: unknown): string[] => {\n      return Array.from(strings.keys());\n    },\n\n    logStorage: (): void => {\n      console.log('logStorage: not implemented');\n    },\n\n    migrate: (): Promise<void> => {\n      // we do not implement this\n      return Promise.resolve(undefined);\n    },\n\n    isNew: (scope: unknown): boolean => {\n      // we create a new storage for every session, we do not persist it,\n      // so we return `true`.\n      return true;\n    },\n\n    flush: (reason?: unknown): Promise<void> => {\n      // we do not implement this\n      return Promise.resolve(undefined);\n    },\n  };\n}\n\nlet overrideServices: monacoTypes.editor.IEditorOverrideServices | null = null;\n\nexport function getOverrideServices(): monacoTypes.editor.IEditorOverrideServices {\n  // only have one instance of this for every query editor\n  if (overrideServices === null) {\n    overrideServices = {\n      storageService: makeStorageService(),\n    };\n  }\n\n  return overrideServices;\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/monaco-query-field/monaco-completion-provider/util.ts\n\n// this helper class is used to make typescript warn you when you forget\n// a case-block in a switch statement.\n// example code that triggers the typescript-error:\n//\n// const x:'A'|'B'|'C' = 'A';\n//\n// switch(x) {\n//   case 'A':\n//     // something\n//   case 'B':\n//     // something\n//   default:\n//     throw new NeverCaseError(x);\n// }\n//\n//\n// typescript will show an error in this case,\n// when you add the missing `case 'C'` code,\n// the problem will be fixed.\n\nexport class NeverCaseError extends Error {\n  constructor(value: never) {\n    super('should never happen');\n  }\n}\n","// Core grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/monaco-query-field/monaco-completion-provider/completions.ts\nimport UFuzzy from '@leeoniya/ufuzzy';\n\nimport { config } from '@grafana/runtime';\n\nimport { escapeLabelValueInExactSelector } from '../../../language_utils';\nimport { FUNCTIONS } from '../../../promql';\n\nimport { DataProvider } from './data_provider';\nimport type { Label, Situation } from './situation';\nimport { NeverCaseError } from './util';\n// FIXME: we should not load this from the \"outside\", but we cannot do that while we have the \"old\" query-field too\n\nexport type CompletionType = 'HISTORY' | 'FUNCTION' | 'METRIC_NAME' | 'DURATION' | 'LABEL_NAME' | 'LABEL_VALUE';\n\ntype Completion = {\n  type: CompletionType;\n  label: string;\n  insertText: string;\n  detail?: string;\n  documentation?: string;\n  triggerOnInsert?: boolean;\n};\n\nconst metricNamesSearchClient = new UFuzzy({ intraMode: 1 });\n\n// we order items like: history, functions, metrics\nfunction getAllMetricNamesCompletions(dataProvider: DataProvider): Completion[] {\n  let metricNames = dataProvider.getAllMetricNames();\n\n  if (\n    config.featureToggles.prometheusCodeModeMetricNamesSearch &&\n    metricNames.length > dataProvider.metricNamesSuggestionLimit\n  ) {\n    const { monacoSettings } = dataProvider;\n    monacoSettings.enableAutocompleteSuggestionsUpdate();\n\n    if (monacoSettings.inputInRange) {\n      metricNames =\n        metricNamesSearchClient\n          .filter(metricNames, monacoSettings.inputInRange)\n          ?.slice(0, dataProvider.metricNamesSuggestionLimit)\n          .map((idx) => metricNames[idx]) ?? [];\n    } else {\n      metricNames = metricNames.slice(0, dataProvider.metricNamesSuggestionLimit);\n    }\n  }\n\n  return dataProvider.metricNamesToMetrics(metricNames).map((metric) => ({\n    type: 'METRIC_NAME',\n    label: metric.name,\n    insertText: metric.name,\n    detail: `${metric.name} : ${metric.type}`,\n    documentation: metric.help,\n  }));\n}\n\nconst FUNCTION_COMPLETIONS: Completion[] = FUNCTIONS.map((f) => ({\n  type: 'FUNCTION',\n  label: f.label,\n  insertText: f.insertText ?? '', // i don't know what to do when this is nullish. it should not be.\n  detail: f.detail,\n  documentation: f.documentation,\n}));\n\nasync function getAllFunctionsAndMetricNamesCompletions(dataProvider: DataProvider): Promise<Completion[]> {\n  const metricNames = getAllMetricNamesCompletions(dataProvider);\n\n  return [...FUNCTION_COMPLETIONS, ...metricNames];\n}\n\nconst DURATION_COMPLETIONS: Completion[] = [\n  '$__interval',\n  '$__range',\n  '$__rate_interval',\n  '1m',\n  '5m',\n  '10m',\n  '30m',\n  '1h',\n  '1d',\n].map((text) => ({\n  type: 'DURATION',\n  label: text,\n  insertText: text,\n}));\n\nfunction getAllHistoryCompletions(dataProvider: DataProvider): Completion[] {\n  // function getAllHistoryCompletions(queryHistory: PromHistoryItem[]): Completion[] {\n  // NOTE: the typescript types are wrong. historyItem.query.expr can be undefined\n  const allHistory = dataProvider.getHistory();\n  // FIXME: find a better history-limit\n  return allHistory.slice(0, 10).map((expr) => ({\n    type: 'HISTORY',\n    label: expr,\n    insertText: expr,\n  }));\n}\n\nfunction makeSelector(metricName: string | undefined, labels: Label[]): string {\n  const allLabels = [...labels];\n\n  // we transform the metricName to a label, if it exists\n  if (metricName !== undefined) {\n    allLabels.push({ name: '__name__', value: metricName, op: '=' });\n  }\n\n  const allLabelTexts = allLabels.map(\n    (label) => `${label.name}${label.op}\"${escapeLabelValueInExactSelector(label.value)}\"`\n  );\n\n  return `{${allLabelTexts.join(',')}}`;\n}\n\nasync function getLabelNames(\n  metric: string | undefined,\n  otherLabels: Label[],\n  dataProvider: DataProvider\n): Promise<string[]> {\n  if (metric === undefined && otherLabels.length === 0) {\n    // if there is no filtering, we have to use a special endpoint\n    return Promise.resolve(dataProvider.getAllLabelNames());\n  } else {\n    const selector = makeSelector(metric, otherLabels);\n    return await dataProvider.getSeriesLabels(selector, otherLabels);\n  }\n}\n\nasync function getLabelNamesForCompletions(\n  metric: string | undefined,\n  suffix: string,\n  triggerOnInsert: boolean,\n  otherLabels: Label[],\n  dataProvider: DataProvider\n): Promise<Completion[]> {\n  const labelNames = await getLabelNames(metric, otherLabels, dataProvider);\n  return labelNames.map((text) => ({\n    type: 'LABEL_NAME',\n    label: text,\n    insertText: `${text}${suffix}`,\n    triggerOnInsert,\n  }));\n}\n\nasync function getLabelNamesForSelectorCompletions(\n  metric: string | undefined,\n  otherLabels: Label[],\n  dataProvider: DataProvider\n): Promise<Completion[]> {\n  return getLabelNamesForCompletions(metric, '=', true, otherLabels, dataProvider);\n}\n\nasync function getLabelNamesForByCompletions(\n  metric: string | undefined,\n  otherLabels: Label[],\n  dataProvider: DataProvider\n): Promise<Completion[]> {\n  return getLabelNamesForCompletions(metric, '', false, otherLabels, dataProvider);\n}\n\nasync function getLabelValues(\n  metric: string | undefined,\n  labelName: string,\n  otherLabels: Label[],\n  dataProvider: DataProvider\n): Promise<string[]> {\n  if (metric === undefined && otherLabels.length === 0) {\n    // if there is no filtering, we have to use a special endpoint\n    return dataProvider.getLabelValues(labelName);\n  } else {\n    const selector = makeSelector(metric, otherLabels);\n    return await dataProvider.getSeriesValues(labelName, selector);\n  }\n}\n\nasync function getLabelValuesForMetricCompletions(\n  metric: string | undefined,\n  labelName: string,\n  betweenQuotes: boolean,\n  otherLabels: Label[],\n  dataProvider: DataProvider\n): Promise<Completion[]> {\n  const values = await getLabelValues(metric, labelName, otherLabels, dataProvider);\n  return values.map((text) => ({\n    type: 'LABEL_VALUE',\n    label: text,\n    insertText: betweenQuotes ? text : `\"${text}\"`, // FIXME: escaping strange characters?\n  }));\n}\n\nexport function getCompletions(situation: Situation, dataProvider: DataProvider): Promise<Completion[]> {\n  switch (situation.type) {\n    case 'IN_DURATION':\n      return Promise.resolve(DURATION_COMPLETIONS);\n    case 'IN_FUNCTION':\n      return getAllFunctionsAndMetricNamesCompletions(dataProvider);\n    case 'AT_ROOT': {\n      return getAllFunctionsAndMetricNamesCompletions(dataProvider);\n    }\n    case 'EMPTY': {\n      const metricNames = getAllMetricNamesCompletions(dataProvider);\n      const historyCompletions = getAllHistoryCompletions(dataProvider);\n      return Promise.resolve([...historyCompletions, ...FUNCTION_COMPLETIONS, ...metricNames]);\n    }\n    case 'IN_LABEL_SELECTOR_NO_LABEL_NAME':\n      return getLabelNamesForSelectorCompletions(situation.metricName, situation.otherLabels, dataProvider);\n    case 'IN_GROUPING':\n      return getLabelNamesForByCompletions(situation.metricName, situation.otherLabels, dataProvider);\n    case 'IN_LABEL_SELECTOR_WITH_LABEL_NAME':\n      return getLabelValuesForMetricCompletions(\n        situation.metricName,\n        situation.labelName,\n        situation.betweenQuotes,\n        situation.otherLabels,\n        dataProvider\n      );\n    default:\n      throw new NeverCaseError(situation);\n  }\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/monaco-query-field/monaco-completion-provider/situation.ts\nimport type { SyntaxNode, Tree } from '@lezer/common';\nimport {\n  AggregateExpr,\n  AggregateModifier,\n  BinaryExpr,\n  EqlRegex,\n  EqlSingle,\n  FunctionCallBody,\n  GroupingLabels,\n  Identifier,\n  LabelMatcher,\n  LabelMatchers,\n  LabelName,\n  MatchOp,\n  MatrixSelector,\n  Neq,\n  NeqRegex,\n  parser,\n  PromQL,\n  StringLiteral,\n  VectorSelector,\n} from '@prometheus-io/lezer-promql';\n\nimport { NeverCaseError } from './util';\n\ntype Direction = 'parent' | 'firstChild' | 'lastChild' | 'nextSibling';\n\ntype NodeTypeId =\n  | 0 // this is used as error-id\n  | typeof AggregateExpr\n  | typeof AggregateModifier\n  | typeof FunctionCallBody\n  | typeof GroupingLabels\n  | typeof Identifier\n  | typeof LabelMatcher\n  | typeof LabelMatchers\n  | typeof LabelName\n  | typeof PromQL\n  | typeof StringLiteral\n  | typeof VectorSelector\n  | typeof MatrixSelector\n  | typeof MatchOp\n  | typeof EqlSingle\n  | typeof Neq\n  | typeof EqlRegex\n  | typeof NeqRegex;\n\ntype Path = Array<[Direction, NodeTypeId]>;\n\nfunction move(node: SyntaxNode, direction: Direction): SyntaxNode | null {\n  switch (direction) {\n    case 'parent':\n      return node.parent;\n    case 'firstChild':\n      return node.firstChild;\n    case 'lastChild':\n      return node.lastChild;\n    case 'nextSibling':\n      return node.nextSibling;\n    default:\n      throw new NeverCaseError(direction);\n  }\n}\n\nfunction walk(node: SyntaxNode, path: Path): SyntaxNode | null {\n  let current: SyntaxNode | null = node;\n  for (const [direction, expectedType] of path) {\n    current = move(current, direction);\n    if (current === null) {\n      // we could not move in the direction, we stop\n      return null;\n    }\n    if (current.type.id !== expectedType) {\n      // the reached node has wrong type, we stop\n      return null;\n    }\n  }\n  return current;\n}\n\nfunction getNodeText(node: SyntaxNode, text: string): string {\n  return text.slice(node.from, node.to);\n}\n\nfunction parsePromQLStringLiteral(text: string): string {\n  // if it is a string-literal, it is inside quotes of some kind\n  const inside = text.slice(1, text.length - 1);\n\n  // FIXME: support https://prometheus.io/docs/prometheus/latest/querying/basics/#string-literals\n  // FIXME: maybe check other promql code, if all is supported or not\n\n  // for now we do only some very simple un-escaping\n\n  // we start with double-quotes\n  if (text.startsWith('\"') && text.endsWith('\"')) {\n    // NOTE: this is not 100% perfect, we only unescape the double-quote,\n    // there might be other characters too\n    return inside.replace(/\\\\\"/, '\"');\n  }\n\n  // then single-quote\n  if (text.startsWith(\"'\") && text.endsWith(\"'\")) {\n    // NOTE: this is not 100% perfect, we only unescape the single-quote,\n    // there might be other characters too\n    return inside.replace(/\\\\'/, \"'\");\n  }\n\n  // then backticks\n  if (text.startsWith('`') && text.endsWith('`')) {\n    return inside;\n  }\n\n  throw new Error('FIXME: invalid string literal');\n}\n\ntype LabelOperator = '=' | '!=' | '=~' | '!~';\n\nexport type Label = {\n  name: string;\n  value: string;\n  op: LabelOperator;\n};\n\nexport type Situation =\n  | {\n      type: 'IN_FUNCTION';\n    }\n  | {\n      type: 'AT_ROOT';\n    }\n  | {\n      type: 'EMPTY';\n    }\n  | {\n      type: 'IN_DURATION';\n    }\n  | {\n      type: 'IN_LABEL_SELECTOR_NO_LABEL_NAME';\n      metricName?: string;\n      otherLabels: Label[];\n    }\n  | {\n      type: 'IN_GROUPING';\n      metricName: string;\n      otherLabels: Label[];\n    }\n  | {\n      type: 'IN_LABEL_SELECTOR_WITH_LABEL_NAME';\n      metricName?: string;\n      labelName: string;\n      betweenQuotes: boolean;\n      otherLabels: Label[];\n    };\n\ntype Resolver = {\n  path: NodeTypeId[];\n  fun: (node: SyntaxNode, text: string, pos: number) => Situation | null;\n};\n\nfunction isPathMatch(resolverPath: NodeTypeId[], cursorPath: number[]): boolean {\n  return resolverPath.every((item, index) => item === cursorPath[index]);\n}\n\nconst ERROR_NODE_NAME: NodeTypeId = 0; // this is used as error-id\n\nconst RESOLVERS: Resolver[] = [\n  {\n    path: [LabelMatchers, VectorSelector],\n    fun: resolveLabelKeysWithEquals,\n  },\n  {\n    path: [PromQL],\n    fun: resolveTopLevel,\n  },\n  {\n    path: [FunctionCallBody],\n    fun: resolveInFunction,\n  },\n  {\n    path: [StringLiteral, LabelMatcher],\n    fun: resolveLabelMatcher,\n  },\n  {\n    path: [ERROR_NODE_NAME, BinaryExpr, PromQL],\n    fun: resolveTopLevel,\n  },\n  {\n    path: [ERROR_NODE_NAME, LabelMatcher],\n    fun: resolveLabelMatcher,\n  },\n  {\n    path: [ERROR_NODE_NAME, MatrixSelector],\n    fun: resolveDurations,\n  },\n  {\n    path: [GroupingLabels],\n    fun: resolveLabelsForGrouping,\n  },\n];\n\nconst LABEL_OP_MAP = new Map<number, LabelOperator>([\n  [EqlSingle, '='],\n  [EqlRegex, '=~'],\n  [Neq, '!='],\n  [NeqRegex, '!~'],\n]);\n\nfunction getLabelOp(opNode: SyntaxNode): LabelOperator | null {\n  const opChild = opNode.firstChild;\n  if (opChild === null) {\n    return null;\n  }\n\n  return LABEL_OP_MAP.get(opChild.type.id) ?? null;\n}\n\nfunction getLabel(labelMatcherNode: SyntaxNode, text: string): Label | null {\n  if (labelMatcherNode.type.id !== LabelMatcher) {\n    return null;\n  }\n\n  const nameNode = walk(labelMatcherNode, [['firstChild', LabelName]]);\n\n  if (nameNode === null) {\n    return null;\n  }\n\n  const opNode = walk(nameNode, [['nextSibling', MatchOp]]);\n  if (opNode === null) {\n    return null;\n  }\n\n  const op = getLabelOp(opNode);\n  if (op === null) {\n    return null;\n  }\n\n  const valueNode = walk(labelMatcherNode, [['lastChild', StringLiteral]]);\n\n  if (valueNode === null) {\n    return null;\n  }\n\n  const name = getNodeText(nameNode, text);\n  const value = parsePromQLStringLiteral(getNodeText(valueNode, text));\n\n  return { name, value, op };\n}\n\nfunction getLabels(labelMatchersNode: SyntaxNode, text: string): Label[] {\n  if (labelMatchersNode.type.id !== LabelMatchers) {\n    return [];\n  }\n\n  const labelNodes = labelMatchersNode.getChildren(LabelMatcher);\n  return labelNodes.map((ln) => getLabel(ln, text)).filter(notEmpty);\n}\n\nfunction getNodeChildren(node: SyntaxNode): SyntaxNode[] {\n  let child: SyntaxNode | null = node.firstChild;\n  const children: SyntaxNode[] = [];\n  while (child !== null) {\n    children.push(child);\n    child = child.nextSibling;\n  }\n  return children;\n}\n\nfunction getNodeInSubtree(node: SyntaxNode, typeId: NodeTypeId): SyntaxNode | null {\n  // first we try the current node\n  if (node.type.id === typeId) {\n    return node;\n  }\n\n  // then we try the children\n  const children = getNodeChildren(node);\n  for (const child of children) {\n    const n = getNodeInSubtree(child, typeId);\n    if (n !== null) {\n      return n;\n    }\n  }\n\n  return null;\n}\n\nfunction resolveLabelsForGrouping(node: SyntaxNode, text: string, pos: number): Situation | null {\n  const aggrExpNode = walk(node, [\n    ['parent', AggregateModifier],\n    ['parent', AggregateExpr],\n  ]);\n  if (aggrExpNode === null) {\n    return null;\n  }\n  const bodyNode = aggrExpNode.getChild(FunctionCallBody);\n  if (bodyNode === null) {\n    return null;\n  }\n\n  const metricIdNode = getNodeInSubtree(bodyNode, Identifier);\n  if (metricIdNode === null) {\n    return null;\n  }\n\n  const metricName = getNodeText(metricIdNode, text);\n  return {\n    type: 'IN_GROUPING',\n    metricName,\n    otherLabels: [],\n  };\n}\n\nfunction resolveLabelMatcher(node: SyntaxNode, text: string, pos: number): Situation | null {\n  // we can arrive here in two situation. `node` is either:\n  // - a StringNode (like in `{job=\"^\"}`)\n  // - or an error node (like in `{job=^}`)\n  const inStringNode = !node.type.isError;\n\n  const parent = walk(node, [['parent', LabelMatcher]]);\n  if (parent === null) {\n    return null;\n  }\n\n  const labelNameNode = walk(parent, [['firstChild', LabelName]]);\n  if (labelNameNode === null) {\n    return null;\n  }\n\n  const labelName = getNodeText(labelNameNode, text);\n\n  const labelMatchersNode = walk(parent, [['parent', LabelMatchers]]);\n  if (labelMatchersNode === null) {\n    return null;\n  }\n\n  // now we need to find the other names\n  const allLabels = getLabels(labelMatchersNode, text);\n\n  // we need to remove \"our\" label from all-labels, if it is in there\n  const otherLabels = allLabels.filter((label) => label.name !== labelName);\n\n  const metricNameNode = walk(labelMatchersNode, [\n    ['parent', VectorSelector],\n    ['firstChild', Identifier],\n  ]);\n\n  if (metricNameNode === null) {\n    // we are probably in a situation without a metric name\n    return {\n      type: 'IN_LABEL_SELECTOR_WITH_LABEL_NAME',\n      labelName,\n      betweenQuotes: inStringNode,\n      otherLabels,\n    };\n  }\n\n  const metricName = getNodeText(metricNameNode, text);\n\n  return {\n    type: 'IN_LABEL_SELECTOR_WITH_LABEL_NAME',\n    metricName,\n    labelName,\n    betweenQuotes: inStringNode,\n    otherLabels,\n  };\n}\n\nfunction resolveTopLevel(node: SyntaxNode, text: string, pos: number): Situation {\n  return {\n    type: 'AT_ROOT',\n  };\n}\n\nfunction resolveInFunction(node: SyntaxNode, text: string, pos: number): Situation {\n  return {\n    type: 'IN_FUNCTION',\n  };\n}\n\nfunction resolveDurations(node: SyntaxNode, text: string, pos: number): Situation {\n  return {\n    type: 'IN_DURATION',\n  };\n}\n\nfunction resolveLabelKeysWithEquals(node: SyntaxNode, text: string, pos: number): Situation | null {\n  // next false positive:\n  // `something{a=\"1\"^}`\n  const child = walk(node, [['firstChild', LabelMatcher]]);\n  if (child !== null) {\n    // means the label-matching part contains at least one label already.\n    //\n    // in this case, we will need to have a `,` character at the end,\n    // to be able to suggest adding the next label.\n    // the area between the end-of-the-child-node and the cursor-pos\n    // must contain a `,` in this case.\n    const textToCheck = text.slice(child.to, pos);\n\n    if (!textToCheck.includes(',')) {\n      return null;\n    }\n  }\n\n  const metricNameNode = walk(node, [\n    ['parent', VectorSelector],\n    ['firstChild', Identifier],\n  ]);\n\n  const otherLabels = getLabels(node, text);\n\n  if (metricNameNode === null) {\n    // we are probably in a situation without a metric name.\n    return {\n      type: 'IN_LABEL_SELECTOR_NO_LABEL_NAME',\n      otherLabels,\n    };\n  }\n\n  const metricName = getNodeText(metricNameNode, text);\n\n  return {\n    type: 'IN_LABEL_SELECTOR_NO_LABEL_NAME',\n    metricName,\n    otherLabels,\n  };\n}\n\n// we find the first error-node in the tree that is at the cursor-position.\n// NOTE: this might be too slow, might need to optimize it\n// (ideas: we do not need to go into every subtree, based on from/to)\n// also, only go to places that are in the sub-tree of the node found\n// by default by lezer. problem is, `next()` will go upward too,\n// and we do not want to go higher than our node\nfunction getErrorNode(tree: Tree, pos: number): SyntaxNode | null {\n  const cur = tree.cursorAt(pos);\n  while (true) {\n    if (cur.from === pos && cur.to === pos) {\n      const { node } = cur;\n      if (node.type.isError) {\n        return node;\n      }\n    }\n\n    if (!cur.next()) {\n      break;\n    }\n  }\n  return null;\n}\n\nexport function getSituation(text: string, pos: number): Situation | null {\n  // there is a special-case when we are at the start of writing text,\n  // so we handle that case first\n\n  if (text === '') {\n    return {\n      type: 'EMPTY',\n    };\n  }\n\n  /**\n   PromQL\n   Expr\n   VectorSelector\n   LabelMatchers\n   */\n  const tree = parser.parse(text);\n\n  // if the tree contains error, it is very probable that\n  // our node is one of those error-nodes.\n  // also, if there are errors, the node lezer finds us,\n  // might not be the best node.\n  // so first we check if there is an error-node at the cursor-position\n  const maybeErrorNode = getErrorNode(tree, pos);\n\n  const cur = maybeErrorNode != null ? maybeErrorNode.cursor() : tree.cursorAt(pos);\n  const currentNode = cur.node;\n\n  const ids = [cur.type.id];\n  while (cur.parent()) {\n    ids.push(cur.type.id);\n  }\n\n  for (let resolver of RESOLVERS) {\n    // i do not use a foreach because i want to stop as soon\n    // as i find something\n    if (isPathMatch(resolver.path, ids)) {\n      return resolver.fun(currentNode, text, pos);\n    }\n  }\n\n  return null;\n}\n\nfunction notEmpty<TValue>(value: TValue | null | undefined): value is TValue {\n  return value !== null && value !== undefined;\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/monaco-query-field/monaco-completion-provider/index.ts\nimport type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { CompletionType, getCompletions } from './completions';\nimport { DataProvider } from './data_provider';\nimport { getSituation } from './situation';\nimport { NeverCaseError } from './util';\n\nexport function getSuggestOptions(): monacoTypes.editor.ISuggestOptions {\n  return {\n    // monaco-editor sometimes provides suggestions automatically, i am not\n    // sure based on what, seems to be by analyzing the words already\n    // written.\n    // to try it out:\n    // - enter `go_goroutines{job~`\n    // - have the cursor at the end of the string\n    // - press ctrl-enter\n    // - you will get two suggestions\n    // those were not provided by grafana, they are offered automatically.\n    // i want to remove those. the only way i found is:\n    // - every suggestion-item has a `kind` attribute,\n    //   that controls the icon to the left of the suggestion.\n    // - items auto-generated by monaco have `kind` set to `text`.\n    // - we make sure grafana-provided suggestions do not have `kind` set to `text`.\n    // - and then we tell monaco not to show suggestions of kind `text`\n    showWords: false,\n  };\n}\n\nfunction getMonacoCompletionItemKind(type: CompletionType, monaco: Monaco): monacoTypes.languages.CompletionItemKind {\n  switch (type) {\n    case 'DURATION':\n      return monaco.languages.CompletionItemKind.Unit;\n    case 'FUNCTION':\n      return monaco.languages.CompletionItemKind.Variable;\n    case 'HISTORY':\n      return monaco.languages.CompletionItemKind.Snippet;\n    case 'LABEL_NAME':\n      return monaco.languages.CompletionItemKind.Enum;\n    case 'LABEL_VALUE':\n      return monaco.languages.CompletionItemKind.EnumMember;\n    case 'METRIC_NAME':\n      return monaco.languages.CompletionItemKind.Constructor;\n    default:\n      throw new NeverCaseError(type);\n  }\n}\n\nexport function getCompletionProvider(\n  monaco: Monaco,\n  dataProvider: DataProvider\n): monacoTypes.languages.CompletionItemProvider {\n  const provideCompletionItems = (\n    model: monacoTypes.editor.ITextModel,\n    position: monacoTypes.Position\n  ): monacoTypes.languages.ProviderResult<monacoTypes.languages.CompletionList> => {\n    const word = model.getWordAtPosition(position);\n    const range =\n      word != null\n        ? monaco.Range.lift({\n            startLineNumber: position.lineNumber,\n            endLineNumber: position.lineNumber,\n            startColumn: word.startColumn,\n            endColumn: word.endColumn,\n          })\n        : monaco.Range.fromPositions(position);\n    // documentation says `position` will be \"adjusted\" in `getOffsetAt`\n    // i don't know what that means, to be sure i clone it\n\n    const positionClone = {\n      column: position.column,\n      lineNumber: position.lineNumber,\n    };\n    dataProvider.monacoSettings.setInputInRange(model.getValueInRange(range));\n\n    // Check to see if the browser supports window.getSelection()\n    if (window.getSelection) {\n      const selectedText = window.getSelection()?.toString();\n      // If the user has selected text, adjust the cursor position to be at the start of the selection, instead of the end\n      if (selectedText && selectedText.length > 0) {\n        positionClone.column = positionClone.column - selectedText.length;\n      }\n    }\n\n    const offset = model.getOffsetAt(positionClone);\n    const situation = getSituation(model.getValue(), offset);\n    const completionsPromise = situation != null ? getCompletions(situation, dataProvider) : Promise.resolve([]);\n\n    return completionsPromise.then((items) => {\n      // monaco by-default alphabetically orders the items.\n      // to stop it, we use a number-as-string sortkey,\n      // so that monaco keeps the order we use\n      const maxIndexDigits = items.length.toString().length;\n      const suggestions: monacoTypes.languages.CompletionItem[] = items.map((item, index) => ({\n        kind: getMonacoCompletionItemKind(item.type, monaco),\n        label: item.label,\n        insertText: item.insertText,\n        detail: item.detail,\n        documentation: item.documentation,\n        sortText: index.toString().padStart(maxIndexDigits, '0'), // to force the order we have\n        range,\n        command: item.triggerOnInsert\n          ? {\n              id: 'editor.action.triggerSuggest',\n              title: '',\n            }\n          : undefined,\n      }));\n      return { suggestions, incomplete: dataProvider.monacoSettings.suggestionsIncomplete };\n    });\n  };\n\n  return {\n    triggerCharacters: ['{', ',', '[', '(', '=', '~', ' ', '\"'],\n    provideCompletionItems,\n  };\n}\n","import { HistoryItem } from '@grafana/data';\nimport type { Monaco } from '@grafana/ui'; // used in TSDoc `@link` below\n\nimport PromQlLanguageProvider from '../../../language_provider';\nimport { PromQuery } from '../../../types';\n\nexport const CODE_MODE_SUGGESTIONS_INCOMPLETE_EVENT = 'codeModeSuggestionsIncomplete';\n\nexport type SuggestionsIncompleteEvent = CustomEvent<{\n  limit: number;\n  datasourceUid: string;\n}>;\n\nexport function isSuggestionsIncompleteEvent(e: Event): e is SuggestionsIncompleteEvent {\n  return (\n    e.type === CODE_MODE_SUGGESTIONS_INCOMPLETE_EVENT &&\n    'detail' in e &&\n    typeof e.detail === 'object' &&\n    e.detail !== null &&\n    'limit' in e.detail &&\n    'datasourceUid' in e.detail\n  );\n}\n\ninterface Metric {\n  name: string;\n  help: string;\n  type: string;\n}\n\nexport interface DataProviderParams {\n  languageProvider: PromQlLanguageProvider;\n  historyProvider: Array<HistoryItem<PromQuery>>;\n}\n\nexport class DataProvider {\n  readonly languageProvider: PromQlLanguageProvider;\n  readonly historyProvider: Array<HistoryItem<PromQuery>>;\n  readonly getSeriesLabels: typeof this.languageProvider.getSeriesLabels;\n  readonly getSeriesValues: typeof this.languageProvider.getSeriesValues;\n  readonly getAllLabelNames: typeof this.languageProvider.getLabelKeys;\n  readonly getLabelValues: typeof this.languageProvider.getLabelValues;\n  readonly metricNamesSuggestionLimit: number;\n  /**\n   * The text that's been typed so far within the current {@link Monaco.Range | Range}.\n   *\n   * @remarks\n   * This is useful with fuzzy searching items to provide as Monaco autocomplete suggestions.\n   */\n  private inputInRange: string;\n  private suggestionsIncomplete: boolean;\n\n  constructor(params: DataProviderParams) {\n    this.languageProvider = params.languageProvider;\n    this.historyProvider = params.historyProvider;\n    this.inputInRange = '';\n    this.metricNamesSuggestionLimit = this.languageProvider.datasource.metricNamesAutocompleteSuggestionLimit;\n    this.suggestionsIncomplete = false;\n    this.getSeriesLabels = this.languageProvider.getSeriesLabels.bind(this.languageProvider);\n    this.getSeriesValues = this.languageProvider.getSeriesValues.bind(this.languageProvider);\n    this.getAllLabelNames = this.languageProvider.getLabelKeys.bind(this.languageProvider);\n    this.getLabelValues = this.languageProvider.getLabelValues.bind(this.languageProvider);\n  }\n\n  getHistory(): string[] {\n    return this.historyProvider.map((h) => h.query.expr).filter(Boolean);\n  }\n\n  getAllMetricNames(): string[] {\n    return this.languageProvider.metrics;\n  }\n\n  metricNamesToMetrics(metricNames: string[]): Metric[] {\n    const { metricsMetadata } = this.languageProvider;\n    const result: Metric[] = metricNames.map((m) => {\n      const metaItem = metricsMetadata?.[m];\n      return {\n        name: m,\n        help: metaItem?.help ?? '',\n        type: metaItem?.type ?? '',\n      };\n    });\n\n    return result;\n  }\n\n  private enableAutocompleteSuggestionsUpdate(): void {\n    this.suggestionsIncomplete = true;\n    dispatchEvent(\n      new CustomEvent(CODE_MODE_SUGGESTIONS_INCOMPLETE_EVENT, {\n        detail: { limit: this.metricNamesSuggestionLimit, datasourceUid: this.languageProvider.datasource.uid },\n      })\n    );\n  }\n\n  private setInputInRange(textInput: string): void {\n    this.inputInRange = textInput;\n  }\n\n  get monacoSettings() {\n    return {\n      /**\n       * Enable autocomplete suggestions update on every input change.\n       *\n       * @remarks\n       * If fuzzy search is used in `getCompletions` to trim down results to improve performance,\n       * we need to instruct Monaco to update the completions on every input change, so that the\n       * completions reflect the current input.\n       */\n      enableAutocompleteSuggestionsUpdate: this.enableAutocompleteSuggestionsUpdate.bind(this),\n      inputInRange: this.inputInRange,\n      setInputInRange: this.setInputInRange.bind(this),\n      suggestionsIncomplete: this.suggestionsIncomplete,\n    };\n  }\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/loki/components/monaco-query-field/monaco-completion-provider/validation.ts\nimport { SyntaxNode } from '@lezer/common';\nimport { LRParser } from '@lezer/lr';\n\n// Although 0 isn't explicitly provided in the @grafana/lezer-logql library as the error node ID, it does appear to be the ID of error nodes within lezer.\nexport const ErrorId = 0;\n\ninterface ParserErrorBoundary {\n  startLineNumber: number;\n  startColumn: number;\n  endLineNumber: number;\n  endColumn: number;\n  error: string;\n}\n\ninterface ParseError {\n  text: string;\n  node: SyntaxNode;\n}\n\n/**\n * Conceived to work in combination with the MonacoQueryField component.\n * Given an original query, and it's interpolated version, it will return an array of ParserErrorBoundary\n * objects containing nodes which are actual errors. The interpolated version (even with placeholder variables)\n * is required because variables look like errors for Lezer.\n * @internal\n */\nexport function validateQuery(\n  query: string,\n  interpolatedQuery: string,\n  queryLines: string[],\n  parser: LRParser\n): ParserErrorBoundary[] | false {\n  if (!query) {\n    return false;\n  }\n\n  /**\n   * To provide support to variable interpolation in query validation, we run the parser in the interpolated\n   * query. If there are errors there, we trace them back to the original unparsed query, so we can more\n   * accurately highlight the error in the query, since it's likely that the variable name and variable value\n   * have different lengths. With this, we also exclude irrelevant parser errors that are produced by\n   * lezer not understanding $variables and $__variables, which usually generate 2 or 3 error SyntaxNode.\n   */\n  const interpolatedErrors: ParseError[] = parseQuery(interpolatedQuery, parser);\n  if (!interpolatedErrors.length) {\n    return false;\n  }\n\n  let parseErrors: ParseError[] = interpolatedErrors;\n  if (query !== interpolatedQuery) {\n    const queryErrors: ParseError[] = parseQuery(query, parser);\n    parseErrors = interpolatedErrors.flatMap(\n      (interpolatedError) =>\n        queryErrors.filter((queryError) => interpolatedError.text === queryError.text) || interpolatedError\n    );\n  }\n\n  return parseErrors.map((parseError) => findErrorBoundary(query, queryLines, parseError)).filter(isErrorBoundary);\n}\n\nfunction parseQuery(query: string, parser: LRParser) {\n  const parseErrors: ParseError[] = [];\n  const tree = parser.parse(query);\n  tree.iterate({\n    enter: (nodeRef): false | void => {\n      if (nodeRef.type.id === ErrorId) {\n        const node = nodeRef.node;\n        parseErrors.push({\n          node: node,\n          text: query.substring(node.from, node.to),\n        });\n      }\n    },\n  });\n  return parseErrors;\n}\n\nfunction findErrorBoundary(query: string, queryLines: string[], parseError: ParseError): ParserErrorBoundary | null {\n  if (queryLines.length === 1) {\n    const isEmptyString = parseError.node.from === parseError.node.to;\n    const errorNode = isEmptyString && parseError.node.parent ? parseError.node.parent : parseError.node;\n    const error = isEmptyString ? query.substring(errorNode.from, errorNode.to) : parseError.text;\n    return {\n      startLineNumber: 1,\n      startColumn: errorNode.from + 1,\n      endLineNumber: 1,\n      endColumn: errorNode.to + 1,\n      error,\n    };\n  }\n\n  let startPos = 0,\n    endPos = 0;\n  for (let line = 0; line < queryLines.length; line++) {\n    endPos = startPos + queryLines[line].length;\n\n    if (parseError.node.from > endPos) {\n      startPos += queryLines[line].length + 1;\n      continue;\n    }\n\n    return {\n      startLineNumber: line + 1,\n      startColumn: parseError.node.from - startPos + 1,\n      endLineNumber: line + 1,\n      endColumn: parseError.node.to - startPos + 1,\n      error: parseError.text,\n    };\n  }\n\n  return null;\n}\n\nfunction isErrorBoundary(boundary: ParserErrorBoundary | null): boundary is ParserErrorBoundary {\n  return boundary !== null;\n}\n\nexport const placeHolderScopedVars = {\n  __interval: { text: '1s', value: '1s' },\n  __rate_interval: { text: '1s', value: '1s' },\n  __auto: { text: '1s', value: '1s' },\n  __interval_ms: { text: '1000', value: 1000 },\n  __range_ms: { text: '1000', value: 1000 },\n  __range_s: { text: '1', value: 1 },\n  __range: { text: '1s', value: '1s' },\n};\n","// The MIT License (MIT)\n//\n// Copyright (c) Celian Garcia and Augustin Husson @ Amadeus IT Group\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n'use strict';\n// import { languages } from \"monaco-editor\";\n// noinspection JSUnusedGlobalSymbols\nexport const languageConfiguration = {\n  // the default separators except `@$`\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^`~!#%^&*()\\-=+\\[{\\]}\\\\|;:'\",.<>\\/?\\s]+)/g,\n  // Not possible to make comments in PromQL syntax\n  comments: {\n    lineComment: '#',\n  },\n  brackets: [\n    ['{', '}'],\n    ['[', ']'],\n    ['(', ')'],\n  ],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n    { open: '<', close: '>' },\n  ],\n  folding: {},\n};\n// PromQL Aggregation Operators\n// (https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators)\nconst aggregations = [\n  'sum',\n  'min',\n  'max',\n  'avg',\n  'group',\n  'stddev',\n  'stdvar',\n  'count',\n  'count_values',\n  'bottomk',\n  'topk',\n  'quantile',\n];\n// PromQL functions\n// (https://prometheus.io/docs/prometheus/latest/querying/functions/)\nconst functions = [\n  'abs',\n  'absent',\n  'ceil',\n  'changes',\n  'clamp_max',\n  'clamp_min',\n  'day_of_month',\n  'day_of_week',\n  'days_in_month',\n  'delta',\n  'deriv',\n  'exp',\n  'floor',\n  'histogram_quantile',\n  'histogram_avg',\n  'histogram_count',\n  'histogram_sum',\n  'histogram_fraction',\n  'histogram_stddev',\n  'histogram_stdvar',\n  'holt_winters',\n  'hour',\n  'idelta',\n  'increase',\n  'irate',\n  'label_join',\n  'label_replace',\n  'ln',\n  'log2',\n  'log10',\n  'minute',\n  'month',\n  'predict_linear',\n  'rate',\n  'resets',\n  'round',\n  'scalar',\n  'sort',\n  'sort_desc',\n  'sqrt',\n  'time',\n  'timestamp',\n  'vector',\n  'year',\n];\n// PromQL specific functions: Aggregations over time\n// (https://prometheus.io/docs/prometheus/latest/querying/functions/#aggregation_over_time)\nconst aggregationsOverTime = [];\nfor (let _i = 0, aggregations_1 = aggregations; _i < aggregations_1.length; _i++) {\n  let agg = aggregations_1[_i];\n  aggregationsOverTime.push(agg + '_over_time');\n}\n// PromQL vector matching + the by and without clauses\n// (https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching)\nconst vectorMatching = ['on', 'ignoring', 'group_right', 'group_left', 'by', 'without'];\n// Produce a regex matching elements : (elt1|elt2|...)\nconst vectorMatchingRegex =\n  '(' +\n  vectorMatching.reduce(function (prev, curr) {\n    return prev + '|' + curr;\n  }) +\n  ')';\n// PromQL Operators\n// (https://prometheus.io/docs/prometheus/latest/querying/operators/)\nconst operators = ['+', '-', '*', '/', '%', '^', '==', '!=', '>', '<', '>=', '<=', 'and', 'or', 'unless'];\n// PromQL offset modifier\n// (https://prometheus.io/docs/prometheus/latest/querying/basics/#offset-modifier)\nconst offsetModifier = ['offset'];\n// Merging all the keywords in one list\nconst keywords = aggregations\n  .concat(functions)\n  .concat(aggregationsOverTime)\n  .concat(vectorMatching)\n  .concat(offsetModifier);\n// noinspection JSUnusedGlobalSymbols\nexport const language = {\n  ignoreCase: false,\n  defaultToken: '',\n  tokenPostfix: '.promql',\n  keywords: keywords,\n  operators: operators,\n  vectorMatching: vectorMatchingRegex,\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  digits: /\\d+(_+\\d+)*/,\n  octaldigits: /[0-7]+(_+[0-7]+)*/,\n  binarydigits: /[0-1]+(_+[0-1]+)*/,\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n  integersuffix: /(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,\n  floatsuffix: /[fFlL]?/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n      // 'by', 'without' and vector matching\n      [/@vectorMatching\\s*(?=\\()/, 'type', '@clauses'],\n      // labels\n      [/[a-z_]\\w*(?=\\s*(=|!=|=~|!~))/, 'tag'],\n      // comments\n      [/(^#.*$)/, 'comment'],\n      // all keywords have the same color\n      [\n        /[a-zA-Z_]\\w*/,\n        {\n          cases: {\n            '@keywords': 'type',\n            '@default': 'identifier',\n          },\n        },\n      ],\n      // strings\n      [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n      [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\n      [/\"/, 'string', '@string_double'],\n      [/'/, 'string', '@string_single'],\n      [/`/, 'string', '@string_backtick'],\n      // whitespace\n      { include: '@whitespace' },\n      // delimiters and operators\n      [/[{}()\\[\\]]/, '@brackets'],\n      [/[<>](?!@symbols)/, '@brackets'],\n      [\n        /@symbols/,\n        {\n          cases: {\n            '@operators': 'delimiter',\n            '@default': '',\n          },\n        },\n      ],\n      // numbers\n      [/\\d+[smhdwy]/, 'number'],\n      [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n      [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'],\n      [/0[0-7']*[0-7](@integersuffix)/, 'number.octal'],\n      [/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'],\n      [/\\d[\\d']*\\d(@integersuffix)/, 'number'],\n      [/\\d(@integersuffix)/, 'number'],\n    ],\n    string_double: [\n      [/[^\\\\\"]+/, 'string'],\n      [/@escapes/, 'string.escape'],\n      [/\\\\./, 'string.escape.invalid'],\n      [/\"/, 'string', '@pop'],\n    ],\n    string_single: [\n      [/[^\\\\']+/, 'string'],\n      [/@escapes/, 'string.escape'],\n      [/\\\\./, 'string.escape.invalid'],\n      [/'/, 'string', '@pop'],\n    ],\n    string_backtick: [\n      [/[^\\\\`$]+/, 'string'],\n      [/@escapes/, 'string.escape'],\n      [/\\\\./, 'string.escape.invalid'],\n      [/`/, 'string', '@pop'],\n    ],\n    clauses: [\n      [/[^(,)]/, 'tag'],\n      [/\\)/, 'identifier', '@pop'],\n    ],\n    whitespace: [[/[ \\t\\r\\n]+/, 'white']],\n  },\n};\n// noinspection JSUnusedGlobalSymbols\n// export const completionItemProvider = {\n//     provideCompletionItems: function () {\n//         // To simplify, we made the choice to never create automatically the parenthesis behind keywords\n//         // It is because in PromQL, some keywords need parenthesis behind, some don't, some can have but it's optional.\n//         const suggestions = keywords.map(function (value) {\n//             return {\n//                 label: value,\n//                 kind: languages.CompletionItemKind.Keyword,\n//                 insertText: value,\n//                 insertTextRules: languages.CompletionItemInsertTextRule.InsertAsSnippet\n//             };\n//         });\n//         return { suggestions: suggestions };\n//     }\n// };\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/monaco-query-field/MonacoQueryField.tsx\nimport { css } from '@emotion/css';\nimport { parser } from '@prometheus-io/lezer-promql';\nimport { debounce } from 'lodash';\nimport { promLanguageDefinition } from 'monaco-promql';\nimport React, { useEffect, useRef } from 'react';\nimport { useLatest } from 'react-use';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Monaco, monacoTypes, ReactMonacoEditor, useTheme2 } from '@grafana/ui';\n\nimport { Props } from './MonacoQueryFieldProps';\nimport { getOverrideServices } from './getOverrideServices';\nimport { getCompletionProvider, getSuggestOptions } from './monaco-completion-provider';\nimport { DataProvider } from './monaco-completion-provider/data_provider';\nimport { placeHolderScopedVars, validateQuery } from './monaco-completion-provider/validation';\nimport { language, languageConfiguration } from './promql';\n\nconst options: monacoTypes.editor.IStandaloneEditorConstructionOptions = {\n  codeLens: false,\n  contextmenu: false,\n  // we need `fixedOverflowWidgets` because otherwise in grafana-dashboards\n  // the popup is clipped by the panel-visualizations.\n  fixedOverflowWidgets: true,\n  folding: false,\n  fontSize: 14,\n  lineDecorationsWidth: 8, // used as \"padding-left\"\n  lineNumbers: 'off',\n  minimap: { enabled: false },\n  overviewRulerBorder: false,\n  overviewRulerLanes: 0,\n  padding: {\n    // these numbers were picked so that visually this matches the previous version\n    // of the query-editor the best\n    top: 4,\n    bottom: 5,\n  },\n  renderLineHighlight: 'none',\n  scrollbar: {\n    vertical: 'hidden',\n    verticalScrollbarSize: 8, // used as \"padding-right\"\n    horizontal: 'hidden',\n    horizontalScrollbarSize: 0,\n    alwaysConsumeMouseWheel: false,\n  },\n  scrollBeyondLastLine: false,\n  suggest: getSuggestOptions(),\n  suggestFontSize: 12,\n  wordWrap: 'on',\n};\n\n// this number was chosen by testing various values. it might be necessary\n// because of the width of the border, not sure.\n//it needs to do 2 things:\n// 1. when the editor is single-line, it should make the editor height be visually correct\n// 2. when the editor is multi-line, the editor should not be \"scrollable\" (meaning,\n//    you do a scroll-movement in the editor, and it will scroll the content by a couple pixels\n//    up & down. this we want to avoid)\nconst EDITOR_HEIGHT_OFFSET = 2;\n\nconst PROMQL_LANG_ID = promLanguageDefinition.id;\n\n// we must only run the promql-setup code once\nlet PROMQL_SETUP_STARTED = false;\n\nfunction ensurePromQL(monaco: Monaco) {\n  if (PROMQL_SETUP_STARTED === false) {\n    PROMQL_SETUP_STARTED = true;\n    const { aliases, extensions, mimetypes } = promLanguageDefinition;\n    monaco.languages.register({ id: PROMQL_LANG_ID, aliases, extensions, mimetypes });\n\n    // @ts-ignore\n    monaco.languages.setMonarchTokensProvider(PROMQL_LANG_ID, language);\n    // @ts-ignore\n    monaco.languages.setLanguageConfiguration(PROMQL_LANG_ID, languageConfiguration);\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2, placeholder: string) => {\n  return {\n    container: css({\n      borderRadius: theme.shape.radius.default,\n      border: `1px solid ${theme.components.input.borderColor}`,\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'start',\n      alignItems: 'center',\n      height: '100%',\n    }),\n    placeholder: css({\n      '::after': {\n        content: `'${placeholder}'`,\n        fontFamily: theme.typography.fontFamilyMonospace,\n        opacity: 0.6,\n      },\n    }),\n  };\n};\n\nconst MonacoQueryField = (props: Props) => {\n  const id = uuidv4();\n\n  // we need only one instance of `overrideServices` during the lifetime of the react component\n  const overrideServicesRef = useRef(getOverrideServices());\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { languageProvider, history, onBlur, onRunQuery, initialValue, placeholder, onChange, datasource } = props;\n\n  const lpRef = useLatest(languageProvider);\n  const historyRef = useLatest(history);\n  const onRunQueryRef = useLatest(onRunQuery);\n  const onBlurRef = useLatest(onBlur);\n  const onChangeRef = useLatest(onChange);\n\n  const autocompleteDisposeFun = useRef<(() => void) | null>(null);\n\n  const theme = useTheme2();\n  const styles = getStyles(theme, placeholder);\n\n  useEffect(() => {\n    // when we unmount, we unregister the autocomplete-function, if it was registered\n    return () => {\n      autocompleteDisposeFun.current?.();\n    };\n  }, []);\n\n  return (\n    <div\n      data-testid={selectors.components.QueryField.container}\n      className={styles.container}\n      // NOTE: we will be setting inline-style-width/height on this element\n      ref={containerRef}\n    >\n      <ReactMonacoEditor\n        overrideServices={overrideServicesRef.current}\n        options={options}\n        language=\"promql\"\n        value={initialValue}\n        beforeMount={(monaco) => {\n          ensurePromQL(monaco);\n        }}\n        onMount={(editor, monaco) => {\n          const isEditorFocused = editor.createContextKey<boolean>('isEditorFocused' + id, false);\n          // we setup on-blur\n          editor.onDidBlurEditorWidget(() => {\n            isEditorFocused.set(false);\n            onBlurRef.current(editor.getValue());\n          });\n          editor.onDidFocusEditorText(() => {\n            isEditorFocused.set(true);\n          });\n          const dataProvider = new DataProvider({\n            historyProvider: historyRef.current,\n            languageProvider: lpRef.current,\n          });\n          const completionProvider = getCompletionProvider(monaco, dataProvider);\n\n          // completion-providers in monaco are not registered directly to editor-instances,\n          // they are registered to languages. this makes it hard for us to have\n          // separate completion-providers for every query-field-instance\n          // (but we need that, because they might connect to different datasources).\n          // the trick we do is, we wrap the callback in a \"proxy\",\n          // and in the proxy, the first thing is, we check if we are called from\n          // \"our editor instance\", and if not, we just return nothing. if yes,\n          // we call the completion-provider.\n          const filteringCompletionProvider: monacoTypes.languages.CompletionItemProvider = {\n            ...completionProvider,\n            provideCompletionItems: (model, position, context, token) => {\n              // if the model-id does not match, then this call is from a different editor-instance,\n              // not \"our instance\", so return nothing\n              if (editor.getModel()?.id !== model.id) {\n                return { suggestions: [] };\n              }\n              return completionProvider.provideCompletionItems(model, position, context, token);\n            },\n          };\n\n          const { dispose } = monaco.languages.registerCompletionItemProvider(\n            PROMQL_LANG_ID,\n            filteringCompletionProvider\n          );\n\n          autocompleteDisposeFun.current = dispose;\n          // this code makes the editor resize itself so that the content fits\n          // (it will grow taller when necessary)\n          // FIXME: maybe move this functionality into CodeEditor, like:\n          // <CodeEditor resizingMode=\"single-line\"/>\n          const updateElementHeight = () => {\n            const containerDiv = containerRef.current;\n            if (containerDiv !== null) {\n              const pixelHeight = editor.getContentHeight();\n              containerDiv.style.height = `${pixelHeight + EDITOR_HEIGHT_OFFSET}px`;\n              containerDiv.style.width = '100%';\n              const pixelWidth = containerDiv.clientWidth;\n              editor.layout({ width: pixelWidth, height: pixelHeight });\n            }\n          };\n\n          editor.onDidContentSizeChange(updateElementHeight);\n          updateElementHeight();\n\n          // Whenever the editor changes, lets save the last value so the next query for this editor will be up-to-date.\n          // This change is being introduced to fix a bug where you can submit a query via shift+enter:\n          // If you clicked into another field and haven't un-blurred the active field,\n          // then the query that is run will be stale, as the reference is only updated\n          // with the value of the last blurred input.\n          // This can run quite slowly, so we're debouncing this which should accomplish two things\n          // 1. Should prevent this function from blocking the current call stack by pushing into the web API callback queue\n          // 2. Should prevent a bunch of duplicates of this function being called as the user is typing\n          const updateCurrentEditorValue = debounce(() => {\n            const editorValue = editor.getValue();\n            onChangeRef.current(editorValue);\n          }, lpRef.current.datasource.getDebounceTimeInMilliseconds());\n\n          editor.getModel()?.onDidChangeContent(() => {\n            updateCurrentEditorValue();\n          });\n\n          // handle: shift + enter\n          // FIXME: maybe move this functionality into CodeEditor?\n          editor.addCommand(\n            monaco.KeyMod.Shift | monaco.KeyCode.Enter,\n            () => {\n              onRunQueryRef.current(editor.getValue());\n            },\n            'isEditorFocused' + id\n          );\n\n          // Fixes Monaco capturing the search key binding and displaying a useless search box within the Editor.\n          // See https://github.com/grafana/grafana/issues/85850\n          monaco.editor.addKeybindingRule({\n            keybinding: monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyF,\n            command: null,\n          });\n\n          /* Something in this configuration of monaco doesn't bubble up [mod]+K, which the\n                    command palette uses. Pass the event out of monaco manually\n                    */\n          editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyK, function () {\n            global.dispatchEvent(new KeyboardEvent('keydown', { key: 'k', metaKey: true }));\n          });\n\n          if (placeholder) {\n            const placeholderDecorators = [\n              {\n                range: new monaco.Range(1, 1, 1, 1),\n                options: {\n                  className: styles.placeholder,\n                  isWholeLine: true,\n                },\n              },\n            ];\n\n            let decorators: string[] = [];\n\n            const checkDecorators: () => void = () => {\n              const model = editor.getModel();\n\n              if (!model) {\n                return;\n              }\n\n              const newDecorators = model.getValueLength() === 0 ? placeholderDecorators : [];\n              decorators = model.deltaDecorations(decorators, newDecorators);\n            };\n\n            checkDecorators();\n            editor.onDidChangeModelContent(checkDecorators);\n\n            editor.onDidChangeModelContent((e) => {\n              const model = editor.getModel();\n              if (!model) {\n                return;\n              }\n              const query = model.getValue();\n              const errors =\n                validateQuery(\n                  query,\n                  datasource.interpolateString(query, placeHolderScopedVars),\n                  model.getLinesContent(),\n                  parser\n                ) || [];\n\n              const markers = errors.map(({ error, ...boundary }) => ({\n                message: `${\n                  error ? `Error parsing \"${error}\"` : 'Parse error'\n                }. The query appears to be incorrect and could fail to be executed.`,\n                severity: monaco.MarkerSeverity.Error,\n                ...boundary,\n              }));\n\n              monaco.editor.setModelMarkers(model, 'owner', markers);\n            });\n          }\n        }}\n      />\n    </div>\n  );\n};\n\n// we will lazy-load this module using React.lazy,\n// and that only supports default-exports,\n// so we have to default-export this, even if\n// it is against the style-guidelines.\n\nexport default MonacoQueryField;\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/monaco-query-field/MonacoQueryFieldLazy.tsx\nimport React, { Suspense } from 'react';\n\nimport MonacoQueryField from './MonacoQueryField';\nimport { Props } from './MonacoQueryFieldProps';\n\n// const Field = React.lazy(() => import('./MonacoQueryField'));\n\nexport const MonacoQueryFieldLazy = (props: Props) => {\n  return (\n    <Suspense fallback={null}>\n      <MonacoQueryField {...props} />\n    </Suspense>\n  );\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/monaco-query-field/MonacoQueryFieldWrapper.tsx\nimport React, { useRef } from 'react';\n\nimport { MonacoQueryFieldLazy } from './MonacoQueryFieldLazy';\nimport { Props as MonacoProps } from './MonacoQueryFieldProps';\n\ntype Props = Omit<MonacoProps, 'onRunQuery' | 'onBlur'> & {\n  onChange: (query: string) => void;\n  onRunQuery: () => void;\n};\n\nexport const MonacoQueryFieldWrapper = (props: Props) => {\n  const lastRunValueRef = useRef<string | null>(null);\n  const { onRunQuery, onChange, ...rest } = props;\n\n  const handleRunQuery = (value: string) => {\n    lastRunValueRef.current = value;\n    onChange(value);\n    onRunQuery();\n  };\n\n  const handleBlur = (value: string) => {\n    onChange(value);\n  };\n\n  /**\n   * Handles changes without running any queries\n   * @param value\n   */\n  const handleChange = (value: string) => {\n    onChange(value);\n  };\n\n  return <MonacoQueryFieldLazy onChange={handleChange} onRunQuery={handleRunQuery} onBlur={handleBlur} {...rest} />;\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/PromQueryField.tsx\nimport { cx } from '@emotion/css';\nimport React, { ReactNode } from 'react';\n\nimport { isDataFrame, QueryEditorProps, QueryHint, TimeRange, toLegacyResponseData } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { reportInteraction } from '@grafana/runtime';\nimport { clearButtonStyles, Icon, Themeable2, withTheme2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { LocalStorageValueProvider } from '../gcopypaste/app/core/components/LocalStorageValueProvider';\nimport {\n  CancelablePromise,\n  isCancelablePromiseRejection,\n  makePromiseCancelable,\n} from '../gcopypaste/app/core/utils/CancelablePromise';\nimport { roundMsToMin } from '../language_utils';\nimport { PromOptions, PromQuery } from '../types';\n\nimport { PrometheusMetricsBrowser } from './PrometheusMetricsBrowser';\nimport { MonacoQueryFieldWrapper } from './monaco-query-field/MonacoQueryFieldWrapper';\n\nconst LAST_USED_LABELS_KEY = 'grafana.datasources.prometheus.browser.labels';\n\nfunction getChooserText(metricsLookupDisabled: boolean, hasSyntax: boolean, hasMetrics: boolean) {\n  if (metricsLookupDisabled) {\n    return '(Disabled)';\n  }\n\n  if (!hasSyntax) {\n    return 'Loading metrics...';\n  }\n\n  if (!hasMetrics) {\n    return '(No metrics found)';\n  }\n\n  return 'Metrics browser';\n}\n\ninterface PromQueryFieldProps extends QueryEditorProps<PrometheusDatasource, PromQuery, PromOptions>, Themeable2 {\n  ExtraFieldElement?: ReactNode;\n  'data-testid'?: string;\n}\n\ninterface PromQueryFieldState {\n  labelBrowserVisible: boolean;\n  syntaxLoaded: boolean;\n  hint: QueryHint | null;\n}\n\nclass PromQueryFieldClass extends React.PureComponent<PromQueryFieldProps, PromQueryFieldState> {\n  declare languageProviderInitializationPromise: CancelablePromise<any>;\n\n  constructor(props: PromQueryFieldProps) {\n    super(props);\n\n    this.state = {\n      labelBrowserVisible: false,\n      syntaxLoaded: false,\n      hint: null,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.datasource.languageProvider) {\n      this.refreshMetrics();\n    }\n    this.refreshHint();\n  }\n\n  componentWillUnmount() {\n    if (this.languageProviderInitializationPromise) {\n      this.languageProviderInitializationPromise.cancel();\n    }\n  }\n\n  componentDidUpdate(prevProps: PromQueryFieldProps) {\n    const {\n      data,\n      datasource: { languageProvider },\n      range,\n    } = this.props;\n\n    if (languageProvider !== prevProps.datasource.languageProvider) {\n      // We reset this only on DS change so we do not flesh loading state on every rangeChange which happens on every\n      // query run if using relative range.\n      this.setState({\n        syntaxLoaded: false,\n      });\n    }\n\n    const changedRangeToRefresh = this.rangeChangedToRefresh(range, prevProps.range);\n    // We want to refresh metrics when language provider changes and/or when range changes (we round up intervals to a minute)\n    if (languageProvider !== prevProps.datasource.languageProvider || changedRangeToRefresh) {\n      this.refreshMetrics();\n    }\n\n    if (data && prevProps.data && prevProps.data.series !== data.series) {\n      this.refreshHint();\n    }\n  }\n\n  refreshHint = () => {\n    const { datasource, query, data } = this.props;\n    const initHints = datasource.getInitHints();\n    const initHint = initHints.length > 0 ? initHints[0] : null;\n\n    if (!data || data.series.length === 0) {\n      this.setState({\n        hint: initHint,\n      });\n      return;\n    }\n\n    const result = isDataFrame(data.series[0]) ? data.series.map(toLegacyResponseData) : data.series;\n    const queryHints = datasource.getQueryHints(query, result);\n    let queryHint = queryHints.length > 0 ? queryHints[0] : null;\n\n    this.setState({ hint: queryHint ?? initHint });\n  };\n\n  refreshMetrics = async () => {\n    const {\n      range,\n      datasource: { languageProvider },\n    } = this.props;\n\n    this.languageProviderInitializationPromise = makePromiseCancelable(languageProvider.start(range));\n\n    try {\n      const remainingTasks = await this.languageProviderInitializationPromise.promise;\n      await Promise.all(remainingTasks);\n      this.onUpdateLanguage();\n    } catch (err) {\n      if (isCancelablePromiseRejection(err) && err.isCanceled) {\n        // do nothing, promise was canceled\n      } else {\n        throw err;\n      }\n    }\n  };\n\n  rangeChangedToRefresh(range?: TimeRange, prevRange?: TimeRange): boolean {\n    if (range && prevRange) {\n      const sameMinuteFrom = roundMsToMin(range.from.valueOf()) === roundMsToMin(prevRange.from.valueOf());\n      const sameMinuteTo = roundMsToMin(range.to.valueOf()) === roundMsToMin(prevRange.to.valueOf());\n      // If both are same, don't need to refresh.\n      return !(sameMinuteFrom && sameMinuteTo);\n    }\n    return false;\n  }\n\n  /**\n   * TODO #33976: Remove this, add histogram group (query = `histogram_quantile(0.95, sum(rate(${metric}[5m])) by (le))`;)\n   */\n  onChangeLabelBrowser = (selector: string) => {\n    this.onChangeQuery(selector, true);\n    this.setState({ labelBrowserVisible: false });\n  };\n\n  onChangeQuery = (value: string, override?: boolean) => {\n    // Send text change to parent\n    const { query, onChange, onRunQuery } = this.props;\n    if (onChange) {\n      const nextQuery: PromQuery = { ...query, expr: value };\n      onChange(nextQuery);\n\n      if (override && onRunQuery) {\n        onRunQuery();\n      }\n    }\n  };\n\n  onClickChooserButton = () => {\n    this.setState((state) => ({ labelBrowserVisible: !state.labelBrowserVisible }));\n\n    reportInteraction('user_grafana_prometheus_metrics_browser_clicked', {\n      editorMode: this.state.labelBrowserVisible ? 'metricViewClosed' : 'metricViewOpen',\n      app: this.props?.app ?? '',\n    });\n  };\n\n  onClickHintFix = () => {\n    const { datasource, query, onChange, onRunQuery } = this.props;\n    const { hint } = this.state;\n    if (hint?.fix?.action) {\n      onChange(datasource.modifyQuery(query, hint.fix.action));\n    }\n    onRunQuery();\n  };\n\n  onUpdateLanguage = () => {\n    const {\n      datasource: { languageProvider },\n    } = this.props;\n    const { metrics } = languageProvider;\n\n    if (!metrics) {\n      return;\n    }\n\n    this.setState({ syntaxLoaded: true });\n  };\n\n  render() {\n    const {\n      datasource,\n      datasource: { languageProvider },\n      query,\n      ExtraFieldElement,\n      history = [],\n      theme,\n    } = this.props;\n\n    const { labelBrowserVisible, syntaxLoaded, hint } = this.state;\n    const hasMetrics = languageProvider.metrics.length > 0;\n    const chooserText = getChooserText(datasource.lookupsDisabled, syntaxLoaded, hasMetrics);\n    const buttonDisabled = !(syntaxLoaded && hasMetrics);\n\n    return (\n      <LocalStorageValueProvider<string[]> storageKey={LAST_USED_LABELS_KEY} defaultValue={[]}>\n        {(lastUsedLabels, onLastUsedLabelsSave, onLastUsedLabelsDelete) => {\n          return (\n            <>\n              <div\n                className=\"gf-form-inline gf-form-inline--xs-view-flex-column flex-grow-1\"\n                data-testid={this.props['data-testid']}\n              >\n                <button\n                  className=\"gf-form-label query-keyword pointer\"\n                  onClick={this.onClickChooserButton}\n                  disabled={buttonDisabled}\n                  type=\"button\"\n                  data-testid={selectors.components.DataSource.Prometheus.queryEditor.code.metricsBrowser.openButton}\n                >\n                  {chooserText}\n                  <Icon name={labelBrowserVisible ? 'angle-down' : 'angle-right'} />\n                </button>\n\n                <div className=\"flex-grow-1 min-width-15\">\n                  <MonacoQueryFieldWrapper\n                    languageProvider={languageProvider}\n                    history={history}\n                    onChange={this.onChangeQuery}\n                    onRunQuery={this.props.onRunQuery}\n                    initialValue={query.expr ?? ''}\n                    placeholder=\"Enter a PromQL query…\"\n                    datasource={datasource}\n                  />\n                </div>\n              </div>\n              {labelBrowserVisible && (\n                <div className=\"gf-form\">\n                  <PrometheusMetricsBrowser\n                    languageProvider={languageProvider}\n                    onChange={this.onChangeLabelBrowser}\n                    lastUsedLabels={lastUsedLabels || []}\n                    storeLastUsedLabels={onLastUsedLabelsSave}\n                    deleteLastUsedLabels={onLastUsedLabelsDelete}\n                    timeRange={this.props.range}\n                  />\n                </div>\n              )}\n\n              {ExtraFieldElement}\n              {hint ? (\n                <div className=\"query-row-break\">\n                  <div className=\"prom-query-field-info text-warning\">\n                    {hint.label}{' '}\n                    {hint.fix ? (\n                      <button\n                        type=\"button\"\n                        className={cx(clearButtonStyles(theme), 'text-link', 'muted')}\n                        onClick={this.onClickHintFix}\n                      >\n                        {hint.fix.label}\n                      </button>\n                    ) : null}\n                  </div>\n                </div>\n              ) : null}\n            </>\n          );\n        }}\n      </LocalStorageValueProvider>\n    );\n  }\n}\n\nexport const PromQueryField = withTheme2(PromQueryFieldClass);\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryCodeEditor.tsx\nimport { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { PromQueryField } from '../../components/PromQueryField';\nimport { PromQueryEditorProps } from '../../components/types';\n\nimport { PromQueryBuilderExplained } from './PromQueryBuilderExplained';\n\ntype PromQueryCodeEditorProps = PromQueryEditorProps & {\n  showExplain: boolean;\n};\n\nexport function PromQueryCodeEditor(props: PromQueryCodeEditorProps) {\n  const { query, datasource, range, onRunQuery, onChange, data, app, showExplain } = props;\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div\n      data-testid={selectors.components.DataSource.Prometheus.queryEditor.code.queryField}\n      className={styles.wrapper}\n    >\n      <PromQueryField\n        datasource={datasource}\n        query={query}\n        range={range}\n        onRunQuery={onRunQuery}\n        onChange={onChange}\n        history={[]}\n        data={data}\n        app={app}\n      />\n\n      {showExplain && <PromQueryBuilderExplained query={query.expr} />}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    // This wrapper styling can be removed after the old PromQueryEditor is removed.\n    // This is removing margin bottom on the old legacy inline form styles\n    wrapper: css({\n      '.gf-form': {\n        marginBottom: 0,\n      },\n    }),\n  };\n};\n","import React, { useState, useEffect, useCallback } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport { IconButton, Text, Stack } from '@grafana/ui';\n\nimport {\n  CODE_MODE_SUGGESTIONS_INCOMPLETE_EVENT,\n  isSuggestionsIncompleteEvent,\n} from '../../components/monaco-query-field/monaco-completion-provider/data_provider';\nimport { PromQueryEditorProps } from '../../components/types';\nimport { QueryEditorMode } from '../shared/types';\n\ninterface Props {\n  datasourceUid: PromQueryEditorProps['datasource']['uid'];\n  editorMode: QueryEditorMode;\n}\n\nexport function PromQueryCodeEditorAutocompleteInfo(props: Readonly<Props>) {\n  const [autocompleteLimit, setAutocompleteLimit] = useState('n');\n  const [autocompleteLimitExceeded, setAutocompleteLimitExceeded] = useState(false);\n  const handleSuggestionsIncompleteEvent = useCallback(\n    (e: Event) => {\n      if (!isSuggestionsIncompleteEvent(e)) {\n        return;\n      }\n\n      if (e.detail.datasourceUid === props.datasourceUid) {\n        setAutocompleteLimitExceeded(true);\n        setAutocompleteLimit(e.detail.limit.toString());\n      }\n    },\n    [props.datasourceUid]\n  );\n\n  useEffect(() => {\n    addEventListener(CODE_MODE_SUGGESTIONS_INCOMPLETE_EVENT, handleSuggestionsIncompleteEvent);\n\n    return () => {\n      removeEventListener(CODE_MODE_SUGGESTIONS_INCOMPLETE_EVENT, handleSuggestionsIncompleteEvent);\n    };\n  }, [handleSuggestionsIncompleteEvent]);\n\n  const showCodeModeAutocompleteDisclaimer = (): boolean => {\n    return (\n      Boolean(config.featureToggles.prometheusCodeModeMetricNamesSearch) &&\n      props.editorMode === QueryEditorMode.Code &&\n      autocompleteLimitExceeded\n    );\n  };\n\n  if (!showCodeModeAutocompleteDisclaimer()) {\n    return null;\n  }\n\n  return (\n    <div data-testid={selectors.components.DataSource.Prometheus.queryEditor.code.metricsCountInfo}>\n      <Stack direction=\"row\" gap={1}>\n        <Text color=\"secondary\" element=\"p\" italic={true}>\n          Autocomplete suggestions limited\n        </Text>\n        <IconButton\n          name=\"info-circle\"\n          tooltip={`The number of metric names exceeds the autocomplete limit. Only the ${autocompleteLimit}-most relevant metrics are displayed. You can adjust the threshold in the data source settings.`}\n        />\n      </Stack>\n    </div>\n  );\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryEditorSelector.tsx\nimport { isEqual, map } from 'lodash';\nimport React, { SyntheticEvent, useCallback, useEffect, useState } from 'react';\n\nimport { CoreApp, LoadingState, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorHeader, EditorRows, FlexItem } from '@grafana/experimental';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, ConfirmModal, Space } from '@grafana/ui';\n\nimport { PromQueryEditorProps } from '../../components/types';\nimport { PromQueryFormat } from '../../dataquery';\nimport { PromQuery } from '../../types';\nimport { QueryPatternsModal } from '../QueryPatternsModal';\nimport { promQueryEditorExplainKey, useFlag } from '../hooks/useFlag';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { QueryEditorModeToggle } from '../shared/QueryEditorModeToggle';\nimport { QueryHeaderSwitch } from '../shared/QueryHeaderSwitch';\nimport { QueryEditorMode } from '../shared/types';\nimport { changeEditorMode, getQueryWithDefaults } from '../state';\n\nimport { PromQueryBuilderContainer } from './PromQueryBuilderContainer';\nimport { PromQueryBuilderOptions } from './PromQueryBuilderOptions';\nimport { PromQueryCodeEditor } from './PromQueryCodeEditor';\nimport { PromQueryCodeEditorAutocompleteInfo } from './PromQueryCodeEditorAutocompleteInfo';\n\nexport const FORMAT_OPTIONS: Array<SelectableValue<PromQueryFormat>> = [\n  { label: 'Time series', value: 'time_series' },\n  { label: 'Table', value: 'table' },\n  { label: 'Heatmap', value: 'heatmap' },\n];\n\nexport const INTERVAL_FACTOR_OPTIONS: Array<SelectableValue<number>> = map([1, 2, 3, 4, 5, 10], (value: number) => ({\n  value,\n  label: '1/' + value,\n}));\n\ntype Props = PromQueryEditorProps;\n\nexport const PromQueryEditorSelector = React.memo<Props>((props) => {\n  const {\n    onChange,\n    onRunQuery,\n    data,\n    app,\n    onAddQuery,\n    datasource: { defaultEditor },\n    queries,\n  } = props;\n\n  const [parseModalOpen, setParseModalOpen] = useState(false);\n  const [queryPatternsModalOpen, setQueryPatternsModalOpen] = useState(false);\n  const [dataIsStale, setDataIsStale] = useState(false);\n  const { flag: explain, setFlag: setExplain } = useFlag(promQueryEditorExplainKey);\n\n  const query = getQueryWithDefaults(props.query, app, defaultEditor);\n  // This should be filled in from the defaults by now.\n  const editorMode = query.editorMode!;\n\n  const onEditorModeChange = useCallback(\n    (newMetricEditorMode: QueryEditorMode) => {\n      reportInteraction('user_grafana_prometheus_editor_mode_clicked', {\n        newEditor: newMetricEditorMode,\n        previousEditor: query.editorMode ?? '',\n        newQuery: !query.expr,\n        app: app ?? '',\n      });\n\n      if (newMetricEditorMode === QueryEditorMode.Builder) {\n        const result = buildVisualQueryFromString(query.expr || '');\n        // If there are errors, give user a chance to decide if they want to go to builder as that can lose some data.\n        if (result.errors.length) {\n          setParseModalOpen(true);\n          return;\n        }\n      }\n      changeEditorMode(query, newMetricEditorMode, onChange);\n    },\n    [onChange, query, app]\n  );\n\n  useEffect(() => {\n    setDataIsStale(false);\n  }, [data]);\n\n  const onChangeInternal = (query: PromQuery) => {\n    if (!isEqual(query, props.query)) {\n      setDataIsStale(true);\n    }\n    onChange(query);\n  };\n\n  const onShowExplainChange = (e: SyntheticEvent<HTMLInputElement>) => {\n    setExplain(e.currentTarget.checked);\n  };\n\n  return (\n    <>\n      <ConfirmModal\n        isOpen={parseModalOpen}\n        title=\"Parsing error: Switch to the builder mode?\"\n        body=\"There is a syntax error, or the query structure cannot be visualized when switching to the builder mode. Parts of the query may be lost. \"\n        confirmText=\"Continue\"\n        onConfirm={() => {\n          changeEditorMode(query, QueryEditorMode.Builder, onChange);\n          setParseModalOpen(false);\n        }}\n        onDismiss={() => setParseModalOpen(false)}\n      />\n      <QueryPatternsModal\n        isOpen={queryPatternsModalOpen}\n        onClose={() => setQueryPatternsModalOpen(false)}\n        query={query}\n        queries={queries}\n        app={app}\n        onChange={onChange}\n        onAddQuery={onAddQuery}\n      />\n      <EditorHeader>\n        <Button\n          data-testid={selectors.components.QueryBuilder.queryPatterns}\n          variant=\"secondary\"\n          size=\"sm\"\n          onClick={() => setQueryPatternsModalOpen((prevValue) => !prevValue)}\n        >\n          Kick start your query\n        </Button>\n        <div data-testid={selectors.components.DataSource.Prometheus.queryEditor.explain}>\n          <QueryHeaderSwitch label=\"Explain\" value={explain} onChange={onShowExplainChange} />\n        </div>\n        <FlexItem grow={1} />\n        {app !== CoreApp.Explore && app !== CoreApp.Correlations && (\n          <Button\n            variant={dataIsStale ? 'primary' : 'secondary'}\n            size=\"sm\"\n            onClick={onRunQuery}\n            icon={data?.state === LoadingState.Loading ? 'spinner' : undefined}\n            disabled={data?.state === LoadingState.Loading}\n          >\n            Run queries\n          </Button>\n        )}\n        <PromQueryCodeEditorAutocompleteInfo datasourceUid={props.datasource.uid} editorMode={editorMode} />\n        <div data-testid={selectors.components.DataSource.Prometheus.queryEditor.editorToggle}>\n          <QueryEditorModeToggle mode={editorMode} onChange={onEditorModeChange} />\n        </div>\n      </EditorHeader>\n      <Space v={0.5} />\n      <EditorRows>\n        {editorMode === QueryEditorMode.Code && (\n          <PromQueryCodeEditor {...props} query={query} showExplain={explain} onChange={onChangeInternal} />\n        )}\n        {editorMode === QueryEditorMode.Builder && (\n          <PromQueryBuilderContainer\n            query={query}\n            datasource={props.datasource}\n            onChange={onChangeInternal}\n            onRunQuery={props.onRunQuery}\n            data={data}\n            showExplain={explain}\n          />\n        )}\n        <PromQueryBuilderOptions query={query} app={props.app} onChange={onChange} onRunQuery={onRunQuery} />\n      </EditorRows>\n    </>\n  );\n});\n\nPromQueryEditorSelector.displayName = 'PromQueryEditorSelector';\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/PromQueryEditorForAlerting.tsx\nimport React from 'react';\n\nimport { PromQueryField } from './PromQueryField';\nimport { PromQueryEditorProps } from './types';\n\nexport function PromQueryEditorForAlerting(props: PromQueryEditorProps) {\n  const { datasource, query, range, data, onChange, onRunQuery } = props;\n\n  return (\n    <PromQueryField\n      datasource={datasource}\n      query={query}\n      onRunQuery={onRunQuery}\n      onChange={onChange}\n      history={[]}\n      range={range}\n      data={data}\n      data-testid={alertingTestIds.editor}\n    />\n  );\n}\n\nexport const alertingTestIds = {\n  editor: 'prom-editor-cloud-alerting',\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/PromQueryEditorByApp.tsx\nimport React, { memo } from 'react';\n\nimport { CoreApp } from '@grafana/data';\n\nimport { PromQueryEditorSelector } from '../querybuilder/components/PromQueryEditorSelector';\n\nimport { PromQueryEditorForAlerting } from './PromQueryEditorForAlerting';\nimport { PromQueryEditorProps } from './types';\n\nfunction PromQueryEditorByAppBase(props: PromQueryEditorProps) {\n  const { app } = props;\n\n  switch (app) {\n    case CoreApp.CloudAlerting:\n      return <PromQueryEditorForAlerting {...props} />;\n    default:\n      return <PromQueryEditorSelector {...props} />;\n  }\n}\n\nexport const PromQueryEditorByApp = memo(PromQueryEditorByAppBase);\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/AnnotationQueryEditor.tsx\nimport React from 'react';\n\nimport { AnnotationQuery } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorField, EditorRow, EditorRows, EditorSwitch } from '@grafana/experimental';\nimport { AutoSizeInput, Input, Space } from '@grafana/ui';\n\nimport { PromQueryCodeEditor } from '../querybuilder/components/PromQueryCodeEditor';\nimport { PromQuery } from '../types';\n\nimport { PromQueryEditorProps } from './types';\n\ntype Props = PromQueryEditorProps & {\n  annotation?: AnnotationQuery<PromQuery>;\n  onAnnotationChange?: (annotation: AnnotationQuery<PromQuery>) => void;\n};\n\nexport function AnnotationQueryEditor(props: Props) {\n  // This is because of problematic typing. See AnnotationQueryEditorProps in grafana-data/annotations.ts.\n  const annotation = props.annotation!;\n  const onAnnotationChange = props.onAnnotationChange!;\n  const query = { expr: annotation.expr, refId: annotation.name, interval: annotation.step };\n\n  return (\n    <>\n      <EditorRows>\n        <PromQueryCodeEditor\n          {...props}\n          query={query}\n          showExplain={false}\n          onChange={(query) => {\n            onAnnotationChange({\n              ...annotation,\n              expr: query.expr,\n            });\n          }}\n        />\n        <EditorRow>\n          <EditorField\n            label=\"Min step\"\n            tooltip={\n              <>\n                An additional lower limit for the step parameter of the Prometheus query and for the{' '}\n                <code>$__interval</code> and <code>$__rate_interval</code> variables.\n              </>\n            }\n          >\n            <AutoSizeInput\n              type=\"text\"\n              aria-label=\"Set lower limit for the step parameter\"\n              placeholder={'auto'}\n              minWidth={10}\n              onCommitChange={(ev) => {\n                onAnnotationChange({\n                  ...annotation,\n                  step: ev.currentTarget.value,\n                });\n              }}\n              defaultValue={query.interval}\n              id={selectors.components.DataSource.Prometheus.annotations.minStep}\n            />\n          </EditorField>\n        </EditorRow>\n      </EditorRows>\n      <Space v={0.5} />\n      <EditorRow>\n        <EditorField\n          label=\"Title\"\n          tooltip={\n            'Use either the name or a pattern. For example, {{instance}} is replaced with label value for the label instance.'\n          }\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"{{alertname}}\"\n            value={annotation.titleFormat}\n            onChange={(event) => {\n              onAnnotationChange({\n                ...annotation,\n                titleFormat: event.currentTarget.value,\n              });\n            }}\n            data-testid={selectors.components.DataSource.Prometheus.annotations.title}\n          />\n        </EditorField>\n        <EditorField label=\"Tags\">\n          <Input\n            type=\"text\"\n            placeholder=\"label1,label2\"\n            value={annotation.tagKeys}\n            onChange={(event) => {\n              onAnnotationChange({\n                ...annotation,\n                tagKeys: event.currentTarget.value,\n              });\n            }}\n            data-testid={selectors.components.DataSource.Prometheus.annotations.tags}\n          />\n        </EditorField>\n        <EditorField\n          label=\"Text\"\n          tooltip={\n            'Use either the name or a pattern. For example, {{instance}} is replaced with label value for the label instance.'\n          }\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"{{instance}}\"\n            value={annotation.textFormat}\n            onChange={(event) => {\n              onAnnotationChange({\n                ...annotation,\n                textFormat: event.currentTarget.value,\n              });\n            }}\n            data-testid={selectors.components.DataSource.Prometheus.annotations.text}\n          />\n        </EditorField>\n        <EditorField\n          label=\"Series value as timestamp\"\n          tooltip={\n            'The unit of timestamp is milliseconds. If the unit of the series value is seconds, multiply its range vector by 1000.'\n          }\n        >\n          <EditorSwitch\n            value={annotation.useValueForTime}\n            onChange={(event) => {\n              onAnnotationChange({\n                ...annotation,\n                useValueForTime: event.currentTarget.value,\n              });\n            }}\n            data-testid={selectors.components.DataSource.Prometheus.annotations.seriesValueAsTimestamp}\n          />\n        </EditorField>\n      </EditorRow>\n    </>\n  );\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/PromCheatSheet.tsx\nimport React from 'react';\n\nimport { QueryEditorHelpProps } from '@grafana/data';\n\nimport { PromQuery } from '../types';\n\nconst CHEAT_SHEET_ITEMS = [\n  {\n    title: 'Request Rate',\n    expression: 'rate(http_request_total[5m])',\n    label:\n      'Given an HTTP request counter, this query calculates the per-second average request rate over the last 5 minutes.',\n  },\n  {\n    title: '95th Percentile of Request Latencies',\n    expression: 'histogram_quantile(0.95, sum(rate(prometheus_http_request_duration_seconds_bucket[5m])) by (le))',\n    label: 'Calculates the 95th percentile of HTTP request rate over 5 minute windows.',\n  },\n  {\n    title: 'Alerts Firing',\n    expression: 'sort_desc(sum(sum_over_time(ALERTS{alertstate=\"firing\"}[24h])) by (alertname))',\n    label: 'Sums up the alerts that have been firing over the last 24 hours.',\n  },\n  {\n    title: 'Step',\n    label:\n      'Defines the graph resolution using a duration format (15s, 1m, 3h, ...). Small steps create high-resolution graphs but can be slow over larger time ranges. Using a longer step lowers the resolution and smooths the graph by producing fewer datapoints. If no step is given the resolution is calculated automatically.',\n  },\n];\n\nexport const PromCheatSheet = (props: QueryEditorHelpProps<PromQuery>) => (\n  <div>\n    <h2>PromQL Cheat Sheet</h2>\n    {CHEAT_SHEET_ITEMS.map((item, index) => (\n      <div className=\"cheat-sheet-item\" key={index}>\n        <div className=\"cheat-sheet-item__title\">{item.title}</div>\n        {item.expression ? (\n          <button\n            type=\"button\"\n            className=\"cheat-sheet-item__example\"\n            onClick={(e) => props.onClickExample({ refId: 'A', expr: item.expression })}\n          >\n            <code>{item.expression}</code>\n          </button>\n        ) : null}\n        <div className=\"cheat-sheet-item__label\">{item.label}</div>\n      </div>\n    ))}\n  </div>\n);\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/migrations/variableMigration.ts\nimport { promQueryModeller } from '../querybuilder/PromQueryModeller';\nimport { buildVisualQueryFromString } from '../querybuilder/parsing';\nimport { PromVariableQuery, PromVariableQueryType as QueryType } from '../types';\n\nexport const PrometheusLabelNamesRegex = /^label_names\\(\\)\\s*$/;\n// Note that this regex is different from the one in metric_find_query.ts because this is used pre-interpolation\nexport const PrometheusLabelValuesRegex = /^label_values\\((?:(.+),\\s*)?([a-zA-Z_$][a-zA-Z0-9_]*)\\)\\s*$/;\nexport const PrometheusMetricNamesRegex = /^metrics\\((.+)\\)\\s*$/;\nexport const PrometheusQueryResultRegex = /^query_result\\((.+)\\)\\s*$/;\nexport const PrometheusLabelNamesRegexWithMatch = /^label_names\\((.+)\\)\\s*$/;\n\nexport function migrateVariableQueryToEditor(rawQuery: string | PromVariableQuery): PromVariableQuery {\n  // If not string, we assume PromVariableQuery\n  if (typeof rawQuery !== 'string') {\n    return rawQuery;\n  }\n\n  const queryBase = {\n    refId: 'PrometheusDatasource-VariableQuery',\n    qryType: QueryType.LabelNames,\n  };\n\n  const labelNamesMatchQuery = rawQuery.match(PrometheusLabelNamesRegexWithMatch);\n\n  if (labelNamesMatchQuery) {\n    return {\n      ...queryBase,\n      qryType: QueryType.LabelNames,\n      match: labelNamesMatchQuery[1],\n    };\n  }\n\n  const labelNames = rawQuery.match(PrometheusLabelNamesRegex);\n  if (labelNames) {\n    return {\n      ...queryBase,\n      qryType: QueryType.LabelNames,\n    };\n  }\n\n  const labelValuesCheck = rawQuery.match(/^label_values\\(/);\n  if (labelValuesCheck) {\n    const labelValues = rawQuery.match(PrometheusLabelValuesRegex);\n    const label = labelValues ? labelValues[2] : '';\n    const metric = labelValues ? labelValues[1] : '';\n\n    if (metric) {\n      const visQuery = buildVisualQueryFromString(metric);\n      return {\n        ...queryBase,\n        qryType: QueryType.LabelValues,\n        label,\n        metric: visQuery.query.metric,\n        labelFilters: visQuery.query.labels,\n      };\n    } else {\n      return {\n        ...queryBase,\n        qryType: QueryType.LabelValues,\n        label,\n      };\n    }\n  }\n\n  const metricNamesCheck = rawQuery.match(/^metrics\\(/);\n  if (metricNamesCheck) {\n    const metricNames = rawQuery.match(PrometheusMetricNamesRegex);\n    const metric = metricNames ? metricNames[1] : '';\n    return {\n      ...queryBase,\n      qryType: QueryType.MetricNames,\n      metric,\n    };\n  }\n\n  const queryResultCheck = rawQuery.match(/^query_result\\(/);\n  if (queryResultCheck) {\n    const queryResult = rawQuery.match(PrometheusQueryResultRegex);\n    const varQuery = queryResult ? queryResult[1] : '';\n    return {\n      ...queryBase,\n      qryType: QueryType.VarQueryResult,\n      varQuery,\n    };\n  }\n\n  // seriesQuery does not have a function and no regex above\n  if (!labelNames && !labelValuesCheck && !metricNamesCheck && !queryResultCheck) {\n    return {\n      ...queryBase,\n      qryType: QueryType.SeriesQuery,\n      seriesQuery: rawQuery,\n    };\n  }\n\n  return queryBase;\n}\n\n// migrate it back to a string with the correct varialbes in place\nexport function migrateVariableEditorBackToVariableSupport(QueryVariable: PromVariableQuery): string {\n  switch (QueryVariable.qryType) {\n    case QueryType.LabelNames:\n      if (QueryVariable.match) {\n        return `label_names(${QueryVariable.match})`;\n      }\n      return 'label_names()';\n    case QueryType.LabelValues:\n      if (QueryVariable.metric || (QueryVariable.labelFilters && QueryVariable.labelFilters.length !== 0)) {\n        const visualQueryQuery = {\n          metric: QueryVariable.metric,\n          labels: QueryVariable.labelFilters ?? [],\n          operations: [],\n        };\n\n        const metric = promQueryModeller.renderQuery(visualQueryQuery);\n        return `label_values(${metric},${QueryVariable.label})`;\n      } else {\n        return `label_values(${QueryVariable.label})`;\n      }\n    case QueryType.MetricNames:\n      return `metrics(${QueryVariable.metric})`;\n    case QueryType.VarQueryResult:\n      const varQuery = removeLineBreaks(QueryVariable.varQuery);\n      return `query_result(${varQuery})`;\n    case QueryType.SeriesQuery:\n      return QueryVariable.seriesQuery ?? '';\n    case QueryType.ClassicQuery:\n      return QueryVariable.classicQuery ?? '';\n  }\n\n  return '';\n}\n\n// allow line breaks in query result textarea\nfunction removeLineBreaks(input?: string) {\n  return input ? input.replace(/[\\r\\n]+/gm, '') : '';\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/VariableQueryEditor.tsx\nimport React, { FormEvent, useCallback, useEffect, useState } from 'react';\n\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { InlineField, InlineFieldRow, Input, Select, TextArea } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../datasource';\nimport {\n  migrateVariableEditorBackToVariableSupport,\n  migrateVariableQueryToEditor,\n} from '../migrations/variableMigration';\nimport { promQueryModeller } from '../querybuilder/PromQueryModeller';\nimport { MetricsLabelsSection } from '../querybuilder/components/MetricsLabelsSection';\nimport { QueryBuilderLabelFilter } from '../querybuilder/shared/types';\nimport { PromVisualQuery } from '../querybuilder/types';\nimport {\n  PromOptions,\n  PromQuery,\n  PromVariableQuery,\n  PromVariableQueryType as QueryType,\n  StandardPromVariableQuery,\n} from '../types';\n\nexport const variableOptions = [\n  { label: 'Label names', value: QueryType.LabelNames },\n  { label: 'Label values', value: QueryType.LabelValues },\n  { label: 'Metrics', value: QueryType.MetricNames },\n  { label: 'Query result', value: QueryType.VarQueryResult },\n  { label: 'Series query', value: QueryType.SeriesQuery },\n  { label: 'Classic query', value: QueryType.ClassicQuery },\n];\n\nexport type Props = QueryEditorProps<PrometheusDatasource, PromQuery, PromOptions, PromVariableQuery>;\n\nconst refId = 'PrometheusVariableQueryEditor-VariableQuery';\n\nexport const PromVariableQueryEditor = ({ onChange, query, datasource, range }: Props) => {\n  // to select the query type, i.e. label_names, label_values, etc.\n  const [qryType, setQryType] = useState<number | undefined>(undefined);\n  // list of variables for each function\n  const [label, setLabel] = useState('');\n\n  const [labelNamesMatch, setLabelNamesMatch] = useState('');\n\n  // metric is used for both label_values() and metric()\n  // label_values() metric requires a whole/complete metric\n  // metric() is expected to be a part of a metric string\n  const [metric, setMetric] = useState('');\n  // varQuery is a whole query, can include math/rates/etc\n  const [varQuery, setVarQuery] = useState('');\n  // seriesQuery is only a whole\n  const [seriesQuery, setSeriesQuery] = useState('');\n\n  // the original variable query implementation, e.g. label_value(metric, label_name)\n  const [classicQuery, setClassicQuery] = useState('');\n\n  // list of label names for label_values(), /api/v1/labels, contains the same results as label_names() function\n  const [labelOptions, setLabelOptions] = useState<Array<SelectableValue<string>>>([]);\n\n  // label filters have been added as a filter for metrics in label values query type\n  const [labelFilters, setLabelFilters] = useState<QueryBuilderLabelFilter[]>([]);\n\n  useEffect(() => {\n    datasource.languageProvider.start(range);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n\n    if (query.qryType === QueryType.ClassicQuery) {\n      setQryType(query.qryType);\n      setClassicQuery(query.query ?? '');\n    } else {\n      // 1. Changing from standard to custom variable editor changes the string attr from expr to query\n      // 2. jsonnet grafana as code passes a variable as a string\n      const variableQuery = variableMigration(query);\n\n      setLabelNamesMatch(variableQuery.match ?? '');\n      setQryType(variableQuery.qryType);\n      setLabel(variableQuery.label ?? '');\n      setMetric(variableQuery.metric ?? '');\n      setLabelFilters(variableQuery.labelFilters ?? []);\n      setVarQuery(variableQuery.varQuery ?? '');\n      setSeriesQuery(variableQuery.seriesQuery ?? '');\n      setClassicQuery(variableQuery.classicQuery ?? '');\n    }\n  }, [query]);\n\n  // set the label names options for the label values var query\n  useEffect(() => {\n    if (qryType !== QueryType.LabelValues) {\n      return;\n    }\n    const variables = datasource.getVariables().map((variable: string) => ({ label: variable, value: variable }));\n    if (!metric) {\n      // get all the labels\n      datasource.getTagKeys({ filters: [] }).then((labelNames: Array<{ text: string }>) => {\n        const names = labelNames.map(({ text }) => ({ label: text, value: text }));\n        setLabelOptions([...variables, ...names]);\n      });\n    } else {\n      // fetch the labels filtered by the metric\n      const labelToConsider = [{ label: '__name__', op: '=', value: metric }];\n      const expr = promQueryModeller.renderLabels(labelToConsider);\n\n      datasource.languageProvider.fetchLabelsWithMatch(expr).then((labelsIndex: Record<string, string[]>) => {\n        const labelNames = Object.keys(labelsIndex);\n        const names = labelNames.map((value) => ({ label: value, value: value }));\n        setLabelOptions([...variables, ...names]);\n      });\n    }\n  }, [datasource, qryType, metric]);\n\n  const onChangeWithVariableString = (\n    updateVar: { [key: string]: QueryType | string },\n    updLabelFilters?: QueryBuilderLabelFilter[]\n  ) => {\n    const queryVar = {\n      qryType,\n      label,\n      metric,\n      match: labelNamesMatch,\n      varQuery,\n      seriesQuery,\n      classicQuery,\n      refId: 'PrometheusVariableQueryEditor-VariableQuery',\n    };\n\n    let updateLabelFilters = updLabelFilters ? { labelFilters: updLabelFilters } : { labelFilters: labelFilters };\n\n    const updatedVar = { ...queryVar, ...updateVar, ...updateLabelFilters };\n\n    const queryString = migrateVariableEditorBackToVariableSupport(updatedVar);\n\n    // setting query.query property allows for update of variable definition\n    onChange({\n      query: queryString,\n      qryType: updatedVar.qryType,\n      refId,\n    });\n  };\n\n  /** Call onchange for label names query type change */\n  const onQueryTypeChange = (newType: SelectableValue<QueryType>) => {\n    setQryType(newType.value);\n    if (newType.value !== QueryType.SeriesQuery) {\n      onChangeWithVariableString({ qryType: newType.value ?? 0 });\n    }\n  };\n\n  /** Call onchange for label select when query type is label values */\n  const onLabelChange = (newLabel: SelectableValue<string>) => {\n    const newLabelvalue = newLabel && newLabel.value ? newLabel.value : '';\n    setLabel(newLabelvalue);\n    if (qryType === QueryType.LabelValues && newLabelvalue) {\n      onChangeWithVariableString({ label: newLabelvalue });\n    }\n  };\n\n  /**\n   * Call onChange for MetricsLabels component change for label values query type\n   * if there is a label (required) and\n   * if the labels or metric are updated.\n   */\n  const metricsLabelsChange = (update: PromVisualQuery) => {\n    setMetric(update.metric);\n    setLabelFilters(update.labels);\n\n    const updMetric = update.metric;\n    const updLabelFilters = update.labels ?? [];\n\n    if (qryType === QueryType.LabelValues && label && (updMetric || updLabelFilters)) {\n      onChangeWithVariableString({ qryType, metric: updMetric }, updLabelFilters);\n    }\n  };\n\n  const onLabelNamesMatchChange = (regex: string) => {\n    if (qryType === QueryType.LabelNames) {\n      onChangeWithVariableString({ qryType, match: regex });\n    }\n  };\n\n  /**\n   * Call onchange for metric change if metrics names (regex) query type\n   * Debounce this because to not call the API for every keystroke.\n   */\n  const onMetricChange = (value: string) => {\n    if (qryType === QueryType.MetricNames && value) {\n      onChangeWithVariableString({ metric: value });\n    }\n  };\n\n  /**\n   *  Do not call onchange for variable query result when query type is var query result\n   *  because the query may not be finished typing and an error is returned\n   *  for incorrectly formatted series. Call onchange for blur instead.\n   */\n  const onVarQueryChange = (e: FormEvent<HTMLTextAreaElement>) => {\n    setVarQuery(e.currentTarget.value);\n  };\n\n  /**\n   *  Do not call onchange for seriesQuery when query type is series query\n   *  because the series may not be finished typing and an error is returned\n   *  for incorrectly formatted series. Call onchange for blur instead.\n   */\n  const onSeriesQueryChange = (e: FormEvent<HTMLInputElement>) => {\n    setSeriesQuery(e.currentTarget.value);\n  };\n\n  const onClassicQueryChange = (e: FormEvent<HTMLInputElement>) => {\n    setClassicQuery(e.currentTarget.value);\n  };\n\n  const promVisualQuery = useCallback(() => {\n    return { metric: metric, labels: labelFilters, operations: [] };\n  }, [metric, labelFilters]);\n\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField\n          label=\"Query type\"\n          labelWidth={20}\n          tooltip={\n            <div>The Prometheus data source plugin provides the following query types for template variables.</div>\n          }\n        >\n          <Select\n            placeholder=\"Select query type\"\n            aria-label=\"Query type\"\n            onChange={onQueryTypeChange}\n            value={qryType}\n            options={variableOptions}\n            width={25}\n            data-testid={selectors.components.DataSource.Prometheus.variableQueryEditor.queryType}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      {qryType === QueryType.LabelValues && (\n        <>\n          <InlineFieldRow>\n            <InlineField\n              label=\"Label\"\n              labelWidth={20}\n              required\n              aria-labelledby=\"label-select\"\n              tooltip={\n                <div>\n                  Returns a list of label values for the label name in all metrics unless the metric is specified.\n                </div>\n              }\n            >\n              <Select\n                aria-label=\"label-select\"\n                onChange={onLabelChange}\n                value={label}\n                options={labelOptions}\n                width={25}\n                allowCustomValue\n                isClearable={true}\n                data-testid={selectors.components.DataSource.Prometheus.variableQueryEditor.labelValues.labelSelect}\n              />\n            </InlineField>\n          </InlineFieldRow>\n          {/* Used to select an optional metric with optional label filters */}\n          <MetricsLabelsSection\n            query={promVisualQuery()}\n            datasource={datasource}\n            onChange={metricsLabelsChange}\n            variableEditor={true}\n          />\n        </>\n      )}\n\n      {qryType === QueryType.LabelNames && (\n        <InlineFieldRow>\n          <InlineField\n            label=\"Metric regex\"\n            labelWidth={20}\n            aria-labelledby=\"Metric regex\"\n            tooltip={<div>Returns a list of label names, optionally filtering by specified metric regex.</div>}\n          >\n            <Input\n              type=\"text\"\n              aria-label=\"Metric regex\"\n              placeholder=\"Metric regex\"\n              value={labelNamesMatch}\n              onBlur={(event) => {\n                setLabelNamesMatch(event.currentTarget.value);\n                onLabelNamesMatchChange(event.currentTarget.value);\n              }}\n              onChange={(e) => {\n                setLabelNamesMatch(e.currentTarget.value);\n              }}\n              width={25}\n              data-testid={selectors.components.DataSource.Prometheus.variableQueryEditor.labelnames.metricRegex}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n\n      {qryType === QueryType.MetricNames && (\n        <InlineFieldRow>\n          <InlineField\n            label=\"Metric regex\"\n            labelWidth={20}\n            aria-labelledby=\"Metric selector\"\n            tooltip={<div>Returns a list of metrics matching the specified metric regex.</div>}\n          >\n            <Input\n              type=\"text\"\n              aria-label=\"Metric selector\"\n              placeholder=\"Metric regex\"\n              value={metric}\n              onChange={(e) => {\n                setMetric(e.currentTarget.value);\n              }}\n              onBlur={(e) => {\n                setMetric(e.currentTarget.value);\n                onMetricChange(e.currentTarget.value);\n              }}\n              width={25}\n              data-testid={selectors.components.DataSource.Prometheus.variableQueryEditor.metricNames.metricRegex}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n\n      {qryType === QueryType.VarQueryResult && (\n        <InlineFieldRow>\n          <InlineField\n            label=\"Query\"\n            labelWidth={20}\n            tooltip={\n              <div>\n                Returns a list of Prometheus query results for the query. This can include Prometheus functions, i.e.\n                sum(go_goroutines).\n              </div>\n            }\n          >\n            <TextArea\n              type=\"text\"\n              aria-label=\"Prometheus Query\"\n              placeholder=\"Prometheus Query\"\n              value={varQuery}\n              onChange={onVarQueryChange}\n              onBlur={() => {\n                if (qryType === QueryType.VarQueryResult && varQuery) {\n                  onChangeWithVariableString({ qryType });\n                }\n              }}\n              cols={100}\n              data-testid={selectors.components.DataSource.Prometheus.variableQueryEditor.varQueryResult}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n\n      {qryType === QueryType.SeriesQuery && (\n        <InlineFieldRow>\n          <InlineField\n            label=\"Series Query\"\n            labelWidth={20}\n            tooltip={\n              <div>\n                Enter a metric with labels, only a metric or only labels, i.e.\n                go_goroutines&#123;instance=&quot;localhost:9090&quot;&#125;, go_goroutines, or\n                &#123;instance=&quot;localhost:9090&quot;&#125;. Returns a list of time series associated with the\n                entered data.\n              </div>\n            }\n          >\n            <Input\n              type=\"text\"\n              aria-label=\"Series Query\"\n              placeholder=\"Series Query\"\n              value={seriesQuery}\n              onChange={onSeriesQueryChange}\n              onBlur={() => {\n                if (qryType === QueryType.SeriesQuery && seriesQuery) {\n                  onChangeWithVariableString({ qryType });\n                }\n              }}\n              width={100}\n              data-testid={selectors.components.DataSource.Prometheus.variableQueryEditor.seriesQuery}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n\n      {qryType === QueryType.ClassicQuery && (\n        <InlineFieldRow>\n          <InlineField\n            label=\"Classic Query\"\n            labelWidth={20}\n            tooltip={\n              <div>\n                The original implemetation of the Prometheus variable query editor. Enter a string with the correct\n                query type and parameters as described in these docs. For example, label_values(label, metric).\n              </div>\n            }\n          >\n            <Input\n              type=\"text\"\n              aria-label=\"Classic Query\"\n              placeholder=\"Classic Query\"\n              value={classicQuery}\n              onChange={onClassicQueryChange}\n              onBlur={() => {\n                if (qryType === QueryType.ClassicQuery && classicQuery) {\n                  onChangeWithVariableString({ qryType });\n                }\n              }}\n              width={100}\n              data-testid={selectors.components.DataSource.Prometheus.variableQueryEditor.classicQuery}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n    </>\n  );\n};\n\nexport function variableMigration(query: string | PromVariableQuery | StandardPromVariableQuery): PromVariableQuery {\n  if (typeof query === 'string') {\n    return migrateVariableQueryToEditor(query);\n  } else if (query.query) {\n    return migrateVariableQueryToEditor(query.query);\n  } else {\n    return query;\n  }\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/metric_find_query.ts\nimport { chain, map as _map, uniq } from 'lodash';\n\nimport { getDefaultTimeRange, MetricFindValue, TimeRange } from '@grafana/data';\n\nimport { PrometheusDatasource } from './datasource';\nimport { getPrometheusTime } from './language_utils';\nimport {\n  PrometheusLabelNamesRegex,\n  PrometheusLabelNamesRegexWithMatch,\n  PrometheusMetricNamesRegex,\n  PrometheusQueryResultRegex,\n} from './migrations/variableMigration';\n\nexport class PrometheusMetricFindQuery {\n  range: TimeRange;\n\n  constructor(\n    private datasource: PrometheusDatasource,\n    private query: string\n  ) {\n    this.datasource = datasource;\n    this.query = query;\n    this.range = getDefaultTimeRange();\n  }\n\n  process(timeRange: TimeRange): Promise<MetricFindValue[]> {\n    this.range = timeRange;\n    const labelNamesRegex = PrometheusLabelNamesRegex;\n    const labelNamesRegexWithMatch = PrometheusLabelNamesRegexWithMatch;\n    const labelValuesRegex = /^label_values\\((?:(.+),\\s*)?([a-zA-Z_][a-zA-Z0-9_]*)\\)\\s*$/;\n    const metricNamesRegex = PrometheusMetricNamesRegex;\n    const queryResultRegex = PrometheusQueryResultRegex;\n    const labelNamesQuery = this.query.match(labelNamesRegex);\n    const labelNamesMatchQuery = this.query.match(labelNamesRegexWithMatch);\n\n    if (labelNamesMatchQuery) {\n      const selector = `{__name__=~\".*${labelNamesMatchQuery[1]}.*\"}`;\n      return this.datasource.languageProvider.getSeriesLabels(selector, []).then((results) =>\n        results.map((result) => ({\n          text: result,\n        }))\n      );\n    }\n\n    if (labelNamesQuery) {\n      return this.datasource.getTagKeys({ filters: [], timeRange });\n    }\n\n    const labelValuesQuery = this.query.match(labelValuesRegex);\n    if (labelValuesQuery) {\n      const filter = labelValuesQuery[1];\n      const label = labelValuesQuery[2];\n      if (isFilterDefined(filter)) {\n        return this.labelValuesQuery(label, filter);\n      } else {\n        // Exclude the filter part of the expression because it is blank or empty\n        return this.labelValuesQuery(label);\n      }\n    }\n\n    const metricNamesQuery = this.query.match(metricNamesRegex);\n    if (metricNamesQuery) {\n      return this.metricNameQuery(metricNamesQuery[1]);\n    }\n\n    const queryResultQuery = this.query.match(queryResultRegex);\n    if (queryResultQuery) {\n      return this.queryResultQuery(queryResultQuery[1]);\n    }\n\n    // if query contains full metric name, return metric name and label list\n    const expressions = ['label_values()', 'metrics()', 'query_result()'];\n    if (!expressions.includes(this.query)) {\n      return this.metricNameAndLabelsQuery(this.query);\n    }\n\n    return Promise.resolve([]);\n  }\n\n  labelValuesQuery(label: string, metric?: string) {\n    const start = getPrometheusTime(this.range.from, false);\n    const end = getPrometheusTime(this.range.to, true);\n    const params = { ...(metric && { 'match[]': metric }), start: start.toString(), end: end.toString() };\n\n    if (!metric || this.datasource.hasLabelsMatchAPISupport()) {\n      const url = `/api/v1/label/${label}/values`;\n\n      return this.datasource.metadataRequest(url, params).then((result) => {\n        return _map(result.data.data, (value) => {\n          return { text: value };\n        });\n      });\n    } else {\n      const url = `/api/v1/series`;\n\n      return this.datasource.metadataRequest(url, params).then((result) => {\n        const _labels = _map(result.data.data, (metric) => {\n          return metric[label] || '';\n        }).filter((label) => {\n          return label !== '';\n        });\n\n        return uniq(_labels).map((metric) => {\n          return {\n            text: metric,\n            expandable: true,\n          };\n        });\n      });\n    }\n  }\n\n  metricNameQuery(metricFilterPattern: string) {\n    const start = getPrometheusTime(this.range.from, false);\n    const end = getPrometheusTime(this.range.to, true);\n    const params = {\n      start: start.toString(),\n      end: end.toString(),\n    };\n    const url = `/api/v1/label/__name__/values`;\n\n    return this.datasource.metadataRequest(url, params).then((result) => {\n      return chain(result.data.data)\n        .filter((metricName) => {\n          const r = new RegExp(metricFilterPattern);\n          return r.test(metricName);\n        })\n        .map((matchedMetricName) => {\n          return {\n            text: matchedMetricName,\n            expandable: true,\n          };\n        })\n        .value();\n    });\n  }\n\n  queryResultQuery(query: string) {\n    const url = '/api/v1/query';\n    const params = {\n      query,\n      time: getPrometheusTime(this.range.to, true).toString(),\n    };\n    return this.datasource.metadataRequest(url, params).then((result) => {\n      switch (result.data.data.resultType) {\n        case 'scalar': // [ <unix_time>, \"<scalar_value>\" ]\n        case 'string': // [ <unix_time>, \"<string_value>\" ]\n          return [\n            {\n              text: result.data.data.result[1] || '',\n              expandable: false,\n            },\n          ];\n        case 'vector':\n          return _map(result.data.data.result, (metricData) => {\n            let text = metricData.metric.__name__ || '';\n            delete metricData.metric.__name__;\n            text +=\n              '{' +\n              _map(metricData.metric, (v, k) => {\n                return k + '=\"' + v + '\"';\n              }).join(',') +\n              '}';\n            text += ' ' + metricData.value[1] + ' ' + metricData.value[0] * 1000;\n\n            return {\n              text: text,\n              expandable: true,\n            };\n          });\n        default:\n          throw Error(`Unknown/Unhandled result type: [${result.data.data.resultType}]`);\n      }\n    });\n  }\n\n  metricNameAndLabelsQuery(query: string): Promise<MetricFindValue[]> {\n    const start = getPrometheusTime(this.range.from, false);\n    const end = getPrometheusTime(this.range.to, true);\n    const params = {\n      'match[]': query,\n      start: start.toString(),\n      end: end.toString(),\n    };\n\n    const url = `/api/v1/series`;\n    const self = this;\n\n    return this.datasource.metadataRequest(url, params).then((result) => {\n      return _map(result.data.data, (metric: { [key: string]: string }) => {\n        return {\n          text: self.datasource.getOriginalMetricName(metric),\n          expandable: true,\n        };\n      });\n    });\n  }\n}\n\nfunction isFilterDefined(filter: string) {\n  // We consider blank strings or the empty filter {} as an undefined filter\n  return filter && filter.split(' ').join('') !== '{}';\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/query_hints.ts\nimport { size } from 'lodash';\n\nimport { QueryFix, QueryHint } from '@grafana/data';\n\nimport { PrometheusDatasource } from './datasource';\nimport { PromMetricsMetadata } from './types';\n\n/**\n * Number of time series results needed before starting to suggest sum aggregation hints\n */\nexport const SUM_HINT_THRESHOLD_COUNT = 20;\n\nexport function getQueryHints(query: string, series?: unknown[], datasource?: PrometheusDatasource): QueryHint[] {\n  const hints = [];\n\n  const metricsMetadata = datasource?.languageProvider?.metricsMetadata;\n\n  // ..._bucket metric needs a histogram_quantile()\n  // this regex also prevents hints from being shown when a query already has a function\n  const oldHistogramMetric = query.trim().match(/^\\w+_bucket$|^\\w+_bucket{.*}$/);\n  if (oldHistogramMetric) {\n    const label = 'Selected metric has buckets.';\n    hints.push({\n      type: 'HISTOGRAM_QUANTILE',\n      label,\n      fix: {\n        label: 'Consider calculating aggregated quantile by adding histogram_quantile().',\n        action: {\n          type: 'ADD_HISTOGRAM_QUANTILE',\n          query,\n        },\n      },\n    });\n  } else if (metricsMetadata && simpleQueryCheck(query)) {\n    // having migrated to native histograms\n    // there will be no more old histograms (no buckets)\n    // and we can identify a native histogram by the following\n    // type === 'histogram'\n    // metric name does not include '_bucket'\n    const queryTokens = getQueryTokens(query);\n\n    // Determine whether any of the query identifier tokens refers to a native histogram metric\n    const { nameMetric } = checkMetricType(queryTokens, 'histogram', metricsMetadata, false);\n\n    const nativeHistogramNameMetric = nameMetric;\n\n    if (nativeHistogramNameMetric) {\n      // add hints:\n      // histogram_avg, histogram_count, histogram_sum, histogram_fraction, histogram_stddev, histogram_stdvar\n      const label = 'Selected metric is a native histogram.';\n      hints.push(\n        {\n          type: 'HISTOGRAM_AVG',\n          label,\n          fix: {\n            label: 'Consider calculating the arithmetic average of observed values by adding histogram_avg().',\n            action: {\n              type: 'ADD_HISTOGRAM_AVG',\n              query,\n            },\n          },\n        },\n        {\n          type: 'HISTOGRAM_COUNT',\n          label,\n          fix: {\n            label: 'Consider calculating the count of observations by adding histogram_count().',\n            action: {\n              type: 'ADD_HISTOGRAM_COUNT',\n              query,\n            },\n          },\n        },\n        {\n          type: 'HISTOGRAM_SUM',\n          label,\n          fix: {\n            label: 'Consider calculating the sum of observations by adding histogram_sum().',\n            action: {\n              type: 'ADD_HISTOGRAM_SUM',\n              query,\n            },\n          },\n        },\n        {\n          type: 'HISTOGRAM_FRACTION',\n          label,\n          fix: {\n            label:\n              'Consider calculating the estimated fraction of observations between the provided lower and upper values by adding histogram_fraction().',\n            action: {\n              type: 'ADD_HISTOGRAM_FRACTION',\n              query,\n            },\n          },\n        },\n        {\n          type: 'HISTOGRAM_STDDEV',\n          label,\n          fix: {\n            label:\n              'Consider calculating the estimated standard deviation of observations by adding histogram_stddev().',\n            action: {\n              type: 'ADD_HISTOGRAM_STDDEV',\n              query,\n            },\n          },\n        },\n        {\n          type: 'HISTOGRAM_STDVAR',\n          label,\n          fix: {\n            label: 'Consider calculating the estimated standard variance of observations by adding histogram_stdvar().',\n            action: {\n              type: 'ADD_HISTOGRAM_STDVAR',\n              query,\n            },\n          },\n        }\n      );\n    }\n  }\n\n  // Check for need of rate()\n  if (query.indexOf('rate(') === -1 && query.indexOf('increase(') === -1) {\n    // Use metric metadata for exact types\n    const nameMatch = query.match(/\\b((?<!:)\\w+_(total|sum|count)(?!:))\\b/);\n    let counterNameMetric = nameMatch ? nameMatch[1] : '';\n    let certain = false;\n\n    if (metricsMetadata) {\n      // Tokenize the query into its identifiers (see https://prometheus.io/docs/concepts/data_model/#metric-names-and-labels)\n      const queryTokens = getQueryTokens(query);\n      // Determine whether any of the query identifier tokens refers to a counter metric\n      const metricTypeChecked = checkMetricType(queryTokens, 'counter', metricsMetadata, certain);\n\n      counterNameMetric = metricTypeChecked.nameMetric;\n      certain = metricTypeChecked.certain;\n    }\n\n    if (counterNameMetric) {\n      // FixableQuery consists of metric name and optionally label-value pairs. We are not offering fix for complex queries yet.\n      const fixableQuery = simpleQueryCheck(query);\n      const verb = certain ? 'is' : 'looks like';\n      let label = `Selected metric ${verb} a counter.`;\n      let fix: QueryFix | undefined;\n\n      if (fixableQuery) {\n        fix = {\n          label: 'Consider calculating rate of counter by adding rate().',\n          action: {\n            type: 'ADD_RATE',\n            query,\n          },\n        };\n      } else {\n        label = `${label} Consider calculating rate of counter by adding rate().`;\n      }\n\n      hints.push({\n        type: 'APPLY_RATE',\n        label,\n        fix,\n      });\n    }\n  }\n\n  // Check for recording rules expansion\n  if (datasource && datasource.ruleMappings) {\n    const mapping = datasource.ruleMappings;\n    const mappingForQuery = Object.keys(mapping).reduce((acc, ruleName) => {\n      if (query.search(ruleName) > -1) {\n        return {\n          ...acc,\n          [ruleName]: mapping[ruleName],\n        };\n      }\n      return acc;\n    }, {});\n    if (size(mappingForQuery) > 0) {\n      const label = 'Query contains recording rules.';\n      hints.push({\n        type: 'EXPAND_RULES',\n        label,\n        fix: {\n          label: 'Expand rules',\n          action: {\n            type: 'EXPAND_RULES',\n            query,\n            options: mappingForQuery,\n          },\n        },\n      });\n    }\n  }\n\n  if (series && series.length >= SUM_HINT_THRESHOLD_COUNT) {\n    const simpleMetric = query.trim().match(/^\\w+$/);\n    if (simpleMetric) {\n      hints.push({\n        type: 'ADD_SUM',\n        label: 'Many time series results returned.',\n        fix: {\n          label: 'Consider aggregating with sum().',\n          action: {\n            type: 'ADD_SUM',\n            query: query,\n            preventSubmit: true,\n          },\n        },\n      });\n    }\n  }\n\n  return hints;\n}\n\nexport function getInitHints(datasource: PrometheusDatasource): QueryHint[] {\n  const hints = [];\n\n  // Hint for big disabled lookups\n  if (datasource.lookupsDisabled) {\n    hints.push({\n      label: `Labels and metrics lookup was disabled in data source settings.`,\n      type: 'INFO',\n    });\n  }\n\n  return hints;\n}\n\nfunction getQueryTokens(query: string) {\n  return (\n    Array.from(query.matchAll(/\\$?[a-zA-Z_:][a-zA-Z0-9_:]*/g))\n      .map(([match]) => match)\n      // Exclude variable identifiers\n      .filter((token) => !token.startsWith('$'))\n      // Split composite keys to match the tokens returned by the language provider\n      .flatMap((token) => token.split(':'))\n  );\n}\n\nfunction checkMetricType(\n  queryTokens: string[],\n  metricType: string,\n  metricsMetadata: PromMetricsMetadata,\n  certain: boolean\n) {\n  // update certain to change language for counters\n  const nameMetric =\n    queryTokens.find((metricName) => {\n      // Only considering first type information, could be non-deterministic\n      const metadata = metricsMetadata[metricName];\n      if (metadata && metadata.type.toLowerCase() === metricType) {\n        certain = true;\n        return true;\n      } else {\n        return false;\n      }\n    }) ?? '';\n\n  return { nameMetric, certain };\n}\n\n/**\n * This regex check looks for only metric name and label filters.\n * This prevents hints from being shown when a query already has a functions or is complex.\n * */\nfunction simpleQueryCheck(query: string) {\n  return query.trim().match(/^\\w+$|^\\w+{.*}$/);\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/result_transformer.ts\nimport { flatten, forOwn, groupBy, partition } from 'lodash';\n\nimport {\n  CoreApp,\n  DataFrame,\n  DataFrameType,\n  DataLink,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataTopic,\n  Field,\n  FieldType,\n  getDisplayProcessor,\n  getFieldDisplayName,\n  Labels,\n  TIME_SERIES_TIME_FIELD_NAME,\n  TIME_SERIES_VALUE_FIELD_NAME,\n} from '@grafana/data';\nimport { config, getDataSourceSrv } from '@grafana/runtime';\n\nimport { ExemplarTraceIdDestination, PromMetric, PromQuery, PromValue } from './types';\n\n// handles case-insensitive Inf, +Inf, -Inf (with optional \"inity\" suffix)\nconst INFINITY_SAMPLE_REGEX = /^[+-]?inf(?:inity)?$/i;\n\nconst isTableResult = (dataFrame: DataFrame, options: DataQueryRequest<PromQuery>): boolean => {\n  // We want to process vector and scalar results in Explore as table\n  if (\n    options.app === CoreApp.Explore &&\n    (dataFrame.meta?.custom?.resultType === 'vector' || dataFrame.meta?.custom?.resultType === 'scalar')\n  ) {\n    return true;\n  }\n\n  // We want to process all dataFrames with target.format === 'table' as table\n  const target = options.targets.find((target) => target.refId === dataFrame.refId);\n  return target?.format === 'table';\n};\n\nconst isCumulativeHeatmapResult = (dataFrame: DataFrame, options: DataQueryRequest<PromQuery>): boolean => {\n  if (dataFrame.meta?.type === DataFrameType.HeatmapCells) {\n    return false;\n  }\n\n  const target = options.targets.find((target) => target.refId === dataFrame.refId);\n  return target?.format === 'heatmap';\n};\n\n// V2 result transformer used to transform query results from queries that were run through prometheus backend\nexport function transformV2(\n  response: DataQueryResponse,\n  request: DataQueryRequest<PromQuery>,\n  options: { exemplarTraceIdDestinations?: ExemplarTraceIdDestination[] }\n) {\n  // migration for dataplane field name issue\n  if (config.featureToggles.prometheusDataplane) {\n    // update displayNameFromDS in the field config\n    response.data.forEach((f: DataFrame) => {\n      const target = request.targets.find((t) => t.refId === f.refId);\n      // check that the legend is selected as auto\n      if (target && target.legendFormat === '__auto') {\n        f.fields.forEach((field) => {\n          if (field.labels?.__name__ && field.labels?.__name__ === field.name) {\n            const fieldCopy = { ...field, name: TIME_SERIES_VALUE_FIELD_NAME };\n            field.config.displayNameFromDS = getFieldDisplayName(fieldCopy, f, response.data);\n          }\n        });\n      }\n    });\n  }\n\n  const [tableFrames, framesWithoutTable] = partition<DataFrame>(response.data, (df) => isTableResult(df, request));\n  const processedTableFrames = transformDFToTable(tableFrames);\n\n  const [exemplarFrames, framesWithoutTableAndExemplars] = partition<DataFrame>(\n    framesWithoutTable,\n    (df) => df.meta?.custom?.resultType === 'exemplar'\n  );\n\n  // EXEMPLAR FRAMES: We enrich exemplar frames with data links and add dataTopic meta info\n  const { exemplarTraceIdDestinations: destinations } = options;\n  const processedExemplarFrames = exemplarFrames.map((dataFrame) => {\n    if (destinations?.length) {\n      for (const exemplarTraceIdDestination of destinations) {\n        const traceIDField = dataFrame.fields.find((field) => field.name === exemplarTraceIdDestination.name);\n        if (traceIDField) {\n          const links = getDataLinks(exemplarTraceIdDestination);\n          traceIDField.config.links = traceIDField.config.links?.length\n            ? [...traceIDField.config.links, ...links]\n            : links;\n        }\n      }\n    }\n\n    return { ...dataFrame, meta: { ...dataFrame.meta, dataTopic: DataTopic.Annotations } };\n  });\n\n  const [heatmapResults, framesWithoutTableHeatmapsAndExemplars] = partition<DataFrame>(\n    framesWithoutTableAndExemplars,\n    (df) => isCumulativeHeatmapResult(df, request)\n  );\n\n  // this works around the fact that we only get back frame.name with le buckets when legendFormat == {{le}}...which is not the default\n  heatmapResults.forEach((df) => {\n    if (df.name == null) {\n      let f = df.fields.find((f) => f.type === FieldType.number);\n\n      if (f) {\n        let le = f.labels?.le;\n\n        if (le) {\n          // this is used for sorting the frames by numeric ascending le labels for de-accum\n          df.name = le;\n          // this is used for renaming the Value fields to le label\n          f.config.displayNameFromDS = le;\n        }\n      }\n    }\n  });\n\n  // Group heatmaps by query\n  const heatmapResultsGroupedByQuery = groupBy<DataFrame>(heatmapResults, (h) => h.refId);\n\n  // Initialize empty array to push grouped histogram frames to\n  let processedHeatmapResultsGroupedByQuery: DataFrame[][] = [];\n\n  // Iterate through every query in this heatmap\n  for (const query in heatmapResultsGroupedByQuery) {\n    // Get reference to dataFrames for heatmap\n    const heatmapResultsGroup = heatmapResultsGroupedByQuery[query];\n\n    // Create a new grouping by iterating through the data frames...\n    const heatmapResultsGroupedByValues = groupBy<DataFrame>(heatmapResultsGroup, (dataFrame) => {\n      // Each data frame has `Time` and `Value` properties, we want to get the values\n      const values = dataFrame.fields.find((field) => field.type === FieldType.number);\n      // Specific functionality for special \"le\" quantile heatmap value, we know if this value exists, that we do not want to calculate the heatmap density across data frames from the same quartile\n      if (values?.labels && HISTOGRAM_QUANTILE_LABEL_NAME in values.labels) {\n        const { le, ...notLE } = values?.labels;\n        return Object.values(notLE).join();\n      }\n\n      // Return a string made from the concatenation of this frame's values to represent a grouping in the query\n      return Object.values(values?.labels ?? []).join();\n    });\n\n    // Then iterate through the resultant object\n    forOwn(heatmapResultsGroupedByValues, (dataFrames, key) => {\n      // Sort frames within each grouping\n      const sortedHeatmap = dataFrames.sort(sortSeriesByLabel);\n      // And push the sorted grouping with the rest\n      processedHeatmapResultsGroupedByQuery.push(mergeHeatmapFrames(transformToHistogramOverTime(sortedHeatmap)));\n    });\n  }\n\n  // Everything else is processed as time_series result and graph preferredVisualisationType\n  const otherFrames = framesWithoutTableHeatmapsAndExemplars.map((dataFrame) => {\n    const df: DataFrame = {\n      ...dataFrame,\n      meta: {\n        ...dataFrame.meta,\n        preferredVisualisationType: 'graph',\n      },\n    };\n    return df;\n  });\n\n  const flattenedProcessedHeatmapFrames = flatten(processedHeatmapResultsGroupedByQuery);\n\n  return {\n    ...response,\n    data: [...otherFrames, ...processedTableFrames, ...flattenedProcessedHeatmapFrames, ...processedExemplarFrames],\n  };\n}\n\nconst HISTOGRAM_QUANTILE_LABEL_NAME = 'le';\n\nexport function transformDFToTable(dfs: DataFrame[]): DataFrame[] {\n  // If no dataFrames or if 1 dataFrames with no values, return original dataFrame\n  if (dfs.length === 0 || (dfs.length === 1 && dfs[0].length === 0)) {\n    return dfs;\n  }\n\n  // Group results by refId and process dataFrames with the same refId as 1 dataFrame\n  const dataFramesByRefId = groupBy(dfs, 'refId');\n  const refIds = Object.keys(dataFramesByRefId);\n\n  const frames = refIds.map((refId) => {\n    // Create timeField, valueField and labelFields\n    const valueText = getValueText(refIds.length, refId);\n    const valueField = getValueField({ data: [], valueName: valueText });\n    const timeField = getTimeField([]);\n    const labelFields: Field[] = [];\n\n    // Fill labelsFields with labels from dataFrames\n    dataFramesByRefId[refId].forEach((df) => {\n      const frameValueField = df.fields[1];\n      const promLabels = frameValueField?.labels ?? {};\n\n      Object.keys(promLabels)\n        .sort()\n        .forEach((label) => {\n          // If we don't have label in labelFields, add it\n          if (!labelFields.some((l) => l.name === label)) {\n            const numberField = label === HISTOGRAM_QUANTILE_LABEL_NAME;\n            labelFields.push({\n              name: label,\n              config: { filterable: true },\n              type: numberField ? FieldType.number : FieldType.string,\n              values: [],\n            });\n          }\n        });\n    });\n\n    // Fill valueField, timeField and labelFields with values\n    dataFramesByRefId[refId].forEach((df) => {\n      const timeFields = df.fields[0]?.values ?? [];\n      const dataFields = df.fields[1]?.values ?? [];\n      timeFields.forEach((value) => timeField.values.push(value));\n      dataFields.forEach((value) => {\n        valueField.values.push(parseSampleValue(value));\n        const labelsForField = df.fields[1].labels ?? {};\n        labelFields.forEach((field) => field.values.push(getLabelValue(labelsForField, field.name)));\n      });\n    });\n\n    const fields = [timeField, ...labelFields, valueField];\n    return {\n      refId,\n      fields,\n      // Prometheus specific UI for instant queries\n      meta: {\n        ...dataFramesByRefId[refId][0].meta,\n        preferredVisualisationType: 'rawPrometheus' as const,\n      },\n      length: timeField.values.length,\n    };\n  });\n  return frames;\n}\n\nfunction getValueText(responseLength: number, refId = '') {\n  return responseLength > 1 ? `Value #${refId}` : 'Value';\n}\n\nfunction getDataLinks(options: ExemplarTraceIdDestination): DataLink[] {\n  const dataLinks: DataLink[] = [];\n\n  if (options.datasourceUid) {\n    const dataSourceSrv = getDataSourceSrv();\n    const dsSettings = dataSourceSrv.getInstanceSettings(options.datasourceUid);\n\n    // dsSettings is undefined because of the reasons below:\n    // - permissions issues (probably most likely)\n    // - deleted datasource\n    // - misconfiguration\n    if (dsSettings) {\n      dataLinks.push({\n        title: options.urlDisplayLabel || `Query with ${dsSettings?.name}`,\n        url: '',\n        internal: {\n          query: { query: '${__value.raw}', queryType: 'traceql' },\n          datasourceUid: options.datasourceUid,\n          datasourceName: dsSettings?.name ?? 'Data source not found',\n        },\n      });\n    }\n  }\n\n  if (options.url) {\n    dataLinks.push({\n      title: options.urlDisplayLabel || `Go to ${options.url}`,\n      url: options.url,\n      targetBlank: true,\n    });\n  }\n  return dataLinks;\n}\n\nfunction getLabelValue(metric: PromMetric, label: string): string | number {\n  if (metric.hasOwnProperty(label)) {\n    if (label === HISTOGRAM_QUANTILE_LABEL_NAME) {\n      return parseSampleValue(metric[label]);\n    }\n    return metric[label];\n  }\n  return '';\n}\n\nfunction getTimeField(data: PromValue[], isMs = false): Field<number> {\n  return {\n    name: TIME_SERIES_TIME_FIELD_NAME,\n    type: FieldType.time,\n    config: {},\n    values: data.map((val) => (isMs ? val[0] : val[0] * 1000)),\n  };\n}\n\ntype ValueFieldOptions = {\n  data: PromValue[];\n  valueName?: string;\n  parseValue?: boolean;\n  labels?: Labels;\n  displayNameFromDS?: string;\n};\n\nfunction getValueField({\n  data,\n  valueName = TIME_SERIES_VALUE_FIELD_NAME,\n  parseValue = true,\n  labels,\n  displayNameFromDS,\n}: ValueFieldOptions): Field {\n  return {\n    name: valueName,\n    type: FieldType.number,\n    display: getDisplayProcessor(),\n    config: {\n      displayNameFromDS,\n    },\n    labels,\n    values: data.map((val) => (parseValue ? parseSampleValue(val[1]) : val[1])),\n  };\n}\n\nexport function getOriginalMetricName(labelData: { [key: string]: string }) {\n  const metricName = labelData.__name__ || '';\n  delete labelData.__name__;\n  const labelPart = Object.entries(labelData)\n    .map((label) => `${label[0]}=\"${label[1]}\"`)\n    .join(',');\n  return `${metricName}{${labelPart}}`;\n}\n\nfunction mergeHeatmapFrames(frames: DataFrame[]): DataFrame[] {\n  if (frames.length === 0 || (frames.length === 1 && frames[0].length === 0)) {\n    return [];\n  }\n\n  const timeField = frames[0].fields.find((field) => field.type === FieldType.time)!;\n  const countFields = frames.map((frame) => {\n    let field = frame.fields.find((field) => field.type === FieldType.number)!;\n\n    return {\n      ...field,\n      name: field.config.displayNameFromDS!,\n    };\n  });\n\n  return [\n    {\n      ...frames[0],\n      meta: {\n        ...frames[0].meta,\n        type: DataFrameType.HeatmapRows,\n      },\n      fields: [timeField!, ...countFields],\n    },\n  ];\n}\n\n/** @internal */\nexport function transformToHistogramOverTime(seriesList: DataFrame[]): DataFrame[] {\n  /*      t1 = timestamp1, t2 = timestamp2 etc.\n            t1  t2  t3          t1  t2  t3\n    le10    10  10  0     =>    10  10  0\n    le20    20  10  30    =>    10  0   30\n    le30    30  10  35    =>    10  0   5\n    */\n\n  for (let i = seriesList.length - 1; i > 0; i--) {\n    const topSeries = seriesList[i].fields.find((s) => s.type === FieldType.number);\n    const bottomSeries = seriesList[i - 1].fields.find((s) => s.type === FieldType.number);\n    if (!topSeries || !bottomSeries) {\n      throw new Error('Prometheus heatmap transform error: data should be a time series');\n    }\n\n    for (let j = 0; j < topSeries.values.length; j++) {\n      const bottomPoint = bottomSeries.values[j] || [0];\n      topSeries.values[j] -= bottomPoint;\n\n      if (topSeries.values[j] < 1e-9) {\n        topSeries.values[j] = 0;\n      }\n    }\n  }\n\n  return seriesList;\n}\n\nexport function sortSeriesByLabel(s1: DataFrame, s2: DataFrame): number {\n  let le1, le2;\n\n  try {\n    // the state.displayName conditions are here because we also use this sorting util fn\n    // in panels where isHeatmapResult was false but we still want to sort numerically-named\n    // fields after the full unique displayName is cached in field state\n    le1 = parseSampleValue(s1.fields[1].state?.displayName ?? s1.name ?? s1.fields[1].name);\n    le2 = parseSampleValue(s2.fields[1].state?.displayName ?? s2.name ?? s2.fields[1].name);\n  } catch (err) {\n    // fail if not integer. might happen with bad queries\n    console.error(err);\n    return 0;\n  }\n\n  if (le1 > le2) {\n    return 1;\n  }\n\n  if (le1 < le2) {\n    return -1;\n  }\n\n  return 0;\n}\n\n/** @internal */\nexport function parseSampleValue(value: string): number {\n  if (INFINITY_SAMPLE_REGEX.test(value)) {\n    return value[0] === '-' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\n  }\n  return parseFloat(value);\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/tracking.ts\nimport { CoreApp, DataQueryRequest, DataQueryResponse } from '@grafana/data';\nimport { config, reportInteraction } from '@grafana/runtime';\n\nimport { PromQuery } from './types';\n\nexport function trackQuery(\n  response: DataQueryResponse,\n  request: DataQueryRequest<PromQuery> & { targets: PromQuery[] },\n  startTime: Date\n): void {\n  const { app, targets: queries } = request;\n  // We only track queries run in Explore.\n  // We do not want to track queries from the dashboard, viewing a panel,\n  // cloud-alerting, unified-alerting, scenes and unknown\n  if (app !== CoreApp.Explore) {\n    return;\n  }\n\n  for (const query of queries) {\n    reportInteraction('grafana_prometheus_query_executed', {\n      app,\n      grafana_version: config.buildInfo.version,\n      has_data: response.data.some((frame) => frame.length > 0),\n      has_error: response.error !== undefined,\n      expr: query.expr,\n      format: query.format,\n      instant: query.instant,\n      range: query.range,\n      exemplar: query.exemplar,\n      hinting: query.hinting,\n      interval: query.interval,\n      intervalFactor: query.intervalFactor,\n      utcOffsetSec: query.utcOffsetSec,\n      legend: query.legendFormat,\n      valueWithRefId: query.valueWithRefId,\n      requestId: request.requestId,\n      showingGraph: query.showingGraph,\n      showingTable: query.showingTable,\n      editor_mode: query.editorMode,\n      simultaneously_sent_query_count: queries.length,\n      time_range_from: request?.range?.from?.toISOString(),\n      time_range_to: request?.range?.to?.toISOString(),\n      time_taken: Date.now() - startTime.getTime(),\n    });\n  }\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/variables.ts\nimport { from, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CustomVariableSupport, DataQueryRequest, DataQueryResponse, rangeUtil } from '@grafana/data';\nimport { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\n\nimport { PromVariableQueryEditor } from './components/VariableQueryEditor';\nimport { PrometheusDatasource } from './datasource';\nimport { PrometheusMetricFindQuery } from './metric_find_query';\nimport { PromVariableQuery } from './types';\n\nexport class PrometheusVariableSupport extends CustomVariableSupport<PrometheusDatasource> {\n  constructor(\n    private readonly datasource: PrometheusDatasource,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super();\n  }\n\n  editor = PromVariableQueryEditor;\n\n  query(request: DataQueryRequest<PromVariableQuery>): Observable<DataQueryResponse> {\n    // Handling grafana as code from jsonnet variable queries which are strings and not objects\n    // Previously, when using StandardVariableSupport\n    // the variable query string was changed to be on the expr attribute\n    // Now, using CustomVariableSupport,\n    // the variable query is changed to the query attribute.\n    // So, without standard variable support changing the query string to the expr attribute,\n    // the variable query string is coming in as it is written in jsonnet,\n    // where it is just a string. Here is where we handle that.\n    let query: string | undefined;\n    if (typeof request.targets[0] === 'string') {\n      query = request.targets[0];\n    } else {\n      query = request.targets[0].query;\n    }\n\n    if (!query) {\n      return of({ data: [] });\n    }\n\n    const scopedVars = {\n      ...request.scopedVars,\n      __interval: { text: this.datasource.interval, value: this.datasource.interval },\n      __interval_ms: {\n        text: rangeUtil.intervalToMs(this.datasource.interval),\n        value: rangeUtil.intervalToMs(this.datasource.interval),\n      },\n      ...this.datasource.getRangeScopedVars(request.range),\n    };\n\n    const interpolated = this.templateSrv.replace(query, scopedVars, this.datasource.interpolateQueryExpr);\n    const metricFindQuery = new PrometheusMetricFindQuery(this.datasource, interpolated);\n    const metricFindStream = from(metricFindQuery.process(request.range));\n\n    return metricFindStream.pipe(map((results) => ({ data: results })));\n  }\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/datasource.ts\nimport { defaults } from 'lodash';\nimport { lastValueFrom, Observable, throwError } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport semver from 'semver/preload';\n\nimport {\n  AbstractQuery,\n  AdHocVariableFilter,\n  AnnotationEvent,\n  AnnotationQueryRequest,\n  CoreApp,\n  CustomVariableModel,\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceGetTagKeysOptions,\n  DataSourceGetTagValuesOptions,\n  DataSourceInstanceSettings,\n  DataSourceWithQueryExportSupport,\n  DataSourceWithQueryImportSupport,\n  dateTime,\n  getDefaultTimeRange,\n  LegacyMetricFindQueryOptions,\n  MetricFindValue,\n  QueryFixAction,\n  QueryVariableModel,\n  rangeUtil,\n  renderLegendFormat,\n  ScopedVars,\n  scopeFilterOperatorMap,\n  ScopeSpecFilter,\n  TimeRange,\n} from '@grafana/data';\nimport {\n  BackendDataSourceResponse,\n  BackendSrvRequest,\n  config,\n  DataSourceWithBackend,\n  FetchResponse,\n  getBackendSrv,\n  getTemplateSrv,\n  isFetchError,\n  TemplateSrv,\n  toDataQueryResponse,\n} from '@grafana/runtime';\n\nimport { addLabelToQuery } from './add_label_to_query';\nimport { AnnotationQueryEditor } from './components/AnnotationQueryEditor';\nimport PrometheusLanguageProvider, { SUGGESTIONS_LIMIT } from './language_provider';\nimport {\n  expandRecordingRules,\n  getClientCacheDurationInMinutes,\n  getPrometheusTime,\n  getRangeSnapInterval,\n} from './language_utils';\nimport { PrometheusMetricFindQuery } from './metric_find_query';\nimport { getInitHints, getQueryHints } from './query_hints';\nimport { promQueryModeller } from './querybuilder/PromQueryModeller';\nimport { QueryBuilderLabelFilter, QueryEditorMode } from './querybuilder/shared/types';\nimport { CacheRequestInfo, defaultPrometheusQueryOverlapWindow, QueryCache } from './querycache/QueryCache';\nimport { getOriginalMetricName, transformV2 } from './result_transformer';\nimport { trackQuery } from './tracking';\nimport {\n  ExemplarTraceIdDestination,\n  PromApplication,\n  PrometheusCacheLevel,\n  PromOptions,\n  PromQuery,\n  PromQueryRequest,\n} from './types';\nimport { PrometheusVariableSupport } from './variables';\n\nconst ANNOTATION_QUERY_STEP_DEFAULT = '60s';\nconst GET_AND_POST_METADATA_ENDPOINTS = ['api/v1/query', 'api/v1/query_range', 'api/v1/series', 'api/v1/labels'];\n\nexport const InstantQueryRefIdIndex = '-Instant';\n\nexport class PrometheusDatasource\n  extends DataSourceWithBackend<PromQuery, PromOptions>\n  implements DataSourceWithQueryImportSupport<PromQuery>, DataSourceWithQueryExportSupport<PromQuery>\n{\n  type: string;\n  ruleMappings: { [index: string]: string };\n  hasIncrementalQuery: boolean;\n  url: string;\n  id: number;\n  access: 'direct' | 'proxy';\n  basicAuth: any;\n  withCredentials: boolean;\n  interval: string;\n  httpMethod: string;\n  languageProvider: PrometheusLanguageProvider;\n  exemplarTraceIdDestinations: ExemplarTraceIdDestination[] | undefined;\n  lookupsDisabled: boolean;\n  customQueryParameters: URLSearchParams;\n  datasourceConfigurationPrometheusFlavor?: PromApplication;\n  datasourceConfigurationPrometheusVersion?: string;\n  disableRecordingRules: boolean;\n  defaultEditor?: QueryEditorMode;\n  exemplarsAvailable: boolean;\n  cacheLevel: PrometheusCacheLevel;\n  cache: QueryCache<PromQuery>;\n  metricNamesAutocompleteSuggestionLimit: number;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<PromOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    languageProvider?: PrometheusLanguageProvider\n  ) {\n    super(instanceSettings);\n\n    this.type = 'prometheus';\n    this.id = instanceSettings.id;\n    this.url = instanceSettings.url!;\n    this.access = instanceSettings.access;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = Boolean(instanceSettings.withCredentials);\n    this.interval = instanceSettings.jsonData.timeInterval || '15s';\n    this.httpMethod = instanceSettings.jsonData.httpMethod || 'GET';\n    this.exemplarTraceIdDestinations = instanceSettings.jsonData.exemplarTraceIdDestinations;\n    this.hasIncrementalQuery = instanceSettings.jsonData.incrementalQuerying ?? false;\n    this.ruleMappings = {};\n    this.languageProvider = languageProvider ?? new PrometheusLanguageProvider(this);\n    this.lookupsDisabled = instanceSettings.jsonData.disableMetricsLookup ?? false;\n    this.customQueryParameters = new URLSearchParams(instanceSettings.jsonData.customQueryParameters);\n    this.datasourceConfigurationPrometheusFlavor = instanceSettings.jsonData.prometheusType;\n    this.datasourceConfigurationPrometheusVersion = instanceSettings.jsonData.prometheusVersion;\n    this.defaultEditor = instanceSettings.jsonData.defaultEditor;\n    this.disableRecordingRules = instanceSettings.jsonData.disableRecordingRules ?? false;\n    this.variables = new PrometheusVariableSupport(this, this.templateSrv);\n    this.exemplarsAvailable = true;\n    this.cacheLevel = instanceSettings.jsonData.cacheLevel ?? PrometheusCacheLevel.Low;\n    this.metricNamesAutocompleteSuggestionLimit =\n      instanceSettings.jsonData.codeModeMetricNamesSuggestionLimit ?? SUGGESTIONS_LIMIT;\n\n    this.cache = new QueryCache({\n      getTargetSignature: this.getPrometheusTargetSignature.bind(this),\n      overlapString: instanceSettings.jsonData.incrementalQueryOverlapWindow ?? defaultPrometheusQueryOverlapWindow,\n      profileFunction: this.getPrometheusProfileData.bind(this),\n    });\n\n    // This needs to be here and cannot be static because of how annotations typing affects casting of data source\n    // objects to DataSourceApi types.\n    // We don't use the default processing for prometheus.\n    // See standardAnnotationSupport.ts/[shouldUseMappingUI|shouldUseLegacyRunner]\n    this.annotations = {\n      QueryEditor: AnnotationQueryEditor,\n    };\n  }\n\n  init = async () => {\n    if (!this.disableRecordingRules) {\n      this.loadRules();\n    }\n    this.exemplarsAvailable = await this.areExemplarsAvailable();\n  };\n\n  getQueryDisplayText(query: PromQuery) {\n    return query.expr;\n  }\n\n  getPrometheusProfileData(request: DataQueryRequest<PromQuery>, targ: PromQuery) {\n    return {\n      interval: targ.interval ?? request.interval,\n      expr: this.interpolateString(targ.expr),\n      datasource: 'Prometheus',\n    };\n  }\n\n  /**\n   * Get target signature for query caching\n   * @param request\n   * @param query\n   */\n  getPrometheusTargetSignature(request: DataQueryRequest<PromQuery>, query: PromQuery) {\n    const targExpr = this.interpolateString(query.expr);\n    return `${targExpr}|${query.interval ?? request.interval}|${JSON.stringify(request.rangeRaw ?? '')}|${\n      query.exemplar\n    }`;\n  }\n\n  hasLabelsMatchAPISupport(): boolean {\n    return (\n      // https://github.com/prometheus/prometheus/releases/tag/v2.24.0\n      this._isDatasourceVersionGreaterOrEqualTo('2.24.0', PromApplication.Prometheus) ||\n      // All versions of Mimir support matchers for labels API\n      this._isDatasourceVersionGreaterOrEqualTo('2.0.0', PromApplication.Mimir) ||\n      // https://github.com/cortexproject/cortex/discussions/4542\n      this._isDatasourceVersionGreaterOrEqualTo('1.11.0', PromApplication.Cortex) ||\n      // https://github.com/thanos-io/thanos/pull/3566\n      //https://github.com/thanos-io/thanos/releases/tag/v0.18.0\n      this._isDatasourceVersionGreaterOrEqualTo('0.18.0', PromApplication.Thanos)\n    );\n  }\n\n  _isDatasourceVersionGreaterOrEqualTo(targetVersion: string, targetFlavor: PromApplication): boolean {\n    // User hasn't configured flavor/version yet, default behavior is to support labels match api support\n    if (!this.datasourceConfigurationPrometheusVersion || !this.datasourceConfigurationPrometheusFlavor) {\n      return true;\n    }\n\n    if (targetFlavor !== this.datasourceConfigurationPrometheusFlavor) {\n      return false;\n    }\n\n    return semver.gte(this.datasourceConfigurationPrometheusVersion, targetVersion);\n  }\n\n  _addTracingHeaders(httpOptions: PromQueryRequest, options: DataQueryRequest<PromQuery>) {\n    httpOptions.headers = {};\n    if (this.access === 'proxy') {\n      httpOptions.headers['X-Dashboard-UID'] = options.dashboardUID;\n      httpOptions.headers['X-Panel-Id'] = options.panelId;\n    }\n  }\n\n  directAccessError() {\n    return throwError(\n      () =>\n        new Error(\n          'Browser access mode in the Prometheus datasource is no longer available. Switch to server access mode.'\n        )\n    );\n  }\n\n  /**\n   * Any request done from this data source should go through here as it contains some common processing for the\n   * request. Any processing done here needs to be also copied on the backend as this goes through data source proxy\n   * but not through the same code as alerting.\n   */\n  _request<T = unknown>(\n    url: string,\n    data: Record<string, string> | null,\n    overrides: Partial<BackendSrvRequest> = {}\n  ): Observable<FetchResponse<T>> {\n    if (this.access === 'direct') {\n      return this.directAccessError();\n    }\n\n    data = data || {};\n    for (const [key, value] of this.customQueryParameters) {\n      if (data[key] == null) {\n        data[key] = value;\n      }\n    }\n\n    let queryUrl = this.url + url;\n    if (url.startsWith(`/api/datasources/uid/${this.uid}`)) {\n      // This url is meant to be a replacement for the whole URL. Replace the entire URL\n      queryUrl = url;\n    }\n\n    const options: BackendSrvRequest = defaults(overrides, {\n      url: queryUrl,\n      method: this.httpMethod,\n      headers: {},\n    });\n\n    if (options.method === 'GET') {\n      if (data && Object.keys(data).length) {\n        options.url =\n          options.url +\n          (options.url.search(/\\?/) >= 0 ? '&' : '?') +\n          Object.entries(data)\n            .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)\n            .join('&');\n      }\n    } else {\n      options.headers!['Content-Type'] = 'application/x-www-form-urlencoded';\n      options.data = data;\n    }\n\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n\n    if (this.basicAuth) {\n      options.headers!.Authorization = this.basicAuth;\n    }\n\n    return getBackendSrv().fetch<T>(options);\n  }\n\n  async importFromAbstractQueries(abstractQueries: AbstractQuery[]): Promise<PromQuery[]> {\n    return abstractQueries.map((abstractQuery) => this.languageProvider.importFromAbstractQuery(abstractQuery));\n  }\n\n  async exportToAbstractQueries(queries: PromQuery[]): Promise<AbstractQuery[]> {\n    return queries.map((query) => this.languageProvider.exportToAbstractQuery(query));\n  }\n\n  // Use this for tab completion features, wont publish response to other components\n  async metadataRequest<T = any>(url: string, params = {}, options?: Partial<BackendSrvRequest>) {\n    // If URL includes endpoint that supports POST and GET method, try to use configured method. This might fail as POST is supported only in v2.10+.\n    if (GET_AND_POST_METADATA_ENDPOINTS.some((endpoint) => url.includes(endpoint))) {\n      try {\n        return await lastValueFrom(\n          this._request<T>(`/api/datasources/uid/${this.uid}/resources${url}`, params, {\n            method: this.httpMethod,\n            hideFromInspector: true,\n            showErrorAlert: false,\n            ...options,\n          })\n        );\n      } catch (err) {\n        // If status code of error is Method Not Allowed (405) and HTTP method is POST, retry with GET\n        if (this.httpMethod === 'POST' && isFetchError(err) && (err.status === 405 || err.status === 400)) {\n          console.warn(`Couldn't use configured POST HTTP method for this request. Trying to use GET method instead.`);\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    return await lastValueFrom(\n      this._request<T>(`/api/datasources/uid/${this.uid}/resources${url}`, params, {\n        method: 'GET',\n        hideFromInspector: true,\n        ...options,\n      })\n    ); // toPromise until we change getTagValues, getLabelNames to Observable\n  }\n\n  interpolateQueryExpr(value: string | string[] = [], variable: QueryVariableModel | CustomVariableModel) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return prometheusRegularEscape(value);\n    }\n\n    if (typeof value === 'string') {\n      return prometheusSpecialRegexEscape(value);\n    }\n\n    const escapedValues = value.map((val) => prometheusSpecialRegexEscape(val));\n\n    if (escapedValues.length === 1) {\n      return escapedValues[0];\n    }\n\n    return '(' + escapedValues.join('|') + ')';\n  }\n\n  targetContainsTemplate(target: PromQuery) {\n    return this.templateSrv.containsTemplate(target.expr);\n  }\n\n  shouldRunExemplarQuery(target: PromQuery, request: DataQueryRequest<PromQuery>): boolean {\n    if (target.exemplar) {\n      // We check all already processed targets and only create exemplar target for not used metric names\n      const metricName = this.languageProvider.histogramMetrics.find((m) => target.expr.includes(m));\n      // Remove targets that weren't processed yet (in targets array they are after current target)\n      const currentTargetIdx = request.targets.findIndex((t) => t.refId === target.refId);\n      const targets = request.targets.slice(0, currentTargetIdx).filter((t) => !t.hide);\n\n      if (!metricName || (metricName && !targets.some((t) => t.expr.includes(metricName)))) {\n        return true;\n      }\n      return false;\n    }\n    return false;\n  }\n\n  processTargetV2(target: PromQuery, request: DataQueryRequest<PromQuery>) {\n    const processedTargets: PromQuery[] = [];\n    const processedTarget = {\n      ...target,\n      exemplar: this.shouldRunExemplarQuery(target, request),\n      requestId: request.panelId + target.refId,\n      // We need to pass utcOffsetSec to backend to calculate aligned range\n      utcOffsetSec: request.range.to.utcOffset() * 60,\n    };\n\n    if (config.featureToggles.promQLScope) {\n      processedTarget.scopes = (request.scopes ?? []).map((scope) => ({\n        name: scope.metadata.name,\n        ...scope.spec,\n      }));\n    }\n\n    if (config.featureToggles.groupByVariable) {\n      processedTarget.groupByKeys = request.groupByKeys;\n    }\n\n    if (target.instant && target.range) {\n      // We have query type \"Both\" selected\n      // We should send separate queries with different refId\n      processedTargets.push(\n        {\n          ...processedTarget,\n          refId: processedTarget.refId,\n          instant: false,\n        },\n        {\n          ...processedTarget,\n          refId: processedTarget.refId + InstantQueryRefIdIndex,\n          range: false,\n        }\n      );\n    } else {\n      processedTargets.push(processedTarget);\n    }\n\n    return processedTargets;\n  }\n\n  query(request: DataQueryRequest<PromQuery>): Observable<DataQueryResponse> {\n    if (this.access === 'direct') {\n      return this.directAccessError();\n    }\n\n    let fullOrPartialRequest: DataQueryRequest<PromQuery>;\n    let requestInfo: CacheRequestInfo<PromQuery> | undefined = undefined;\n    const hasInstantQuery = request.targets.some((target) => target.instant);\n\n    // Don't cache instant queries\n    if (this.hasIncrementalQuery && !hasInstantQuery) {\n      requestInfo = this.cache.requestInfo(request);\n      fullOrPartialRequest = requestInfo.requests[0];\n    } else {\n      fullOrPartialRequest = request;\n    }\n\n    const targets = fullOrPartialRequest.targets.map((target) => this.processTargetV2(target, fullOrPartialRequest));\n    const startTime = new Date();\n    return super.query({ ...fullOrPartialRequest, targets: targets.flat() }).pipe(\n      map((response) => {\n        const amendedResponse = {\n          ...response,\n          data: this.cache.procFrames(request, requestInfo, response.data),\n        };\n        return transformV2(amendedResponse, request, {\n          exemplarTraceIdDestinations: this.exemplarTraceIdDestinations,\n        });\n      }),\n      tap((response: DataQueryResponse) => {\n        trackQuery(response, request, startTime);\n      })\n    );\n  }\n\n  metricFindQuery(query: string, options?: LegacyMetricFindQueryOptions) {\n    if (!query) {\n      return Promise.resolve([]);\n    }\n\n    const scopedVars = {\n      __interval: { text: this.interval, value: this.interval },\n      __interval_ms: { text: rangeUtil.intervalToMs(this.interval), value: rangeUtil.intervalToMs(this.interval) },\n      ...this.getRangeScopedVars(options?.range ?? getDefaultTimeRange()),\n    };\n    const interpolated = this.templateSrv.replace(query, scopedVars, this.interpolateQueryExpr);\n    const metricFindQuery = new PrometheusMetricFindQuery(this, interpolated);\n    return metricFindQuery.process(options?.range ?? getDefaultTimeRange());\n  }\n\n  getRangeScopedVars(range: TimeRange) {\n    const msRange = range.to.diff(range.from);\n    const sRange = Math.round(msRange / 1000);\n    return {\n      __range_ms: { text: msRange, value: msRange },\n      __range_s: { text: sRange, value: sRange },\n      __range: { text: sRange + 's', value: sRange + 's' },\n    };\n  }\n\n  async annotationQuery(options: AnnotationQueryRequest<PromQuery>): Promise<AnnotationEvent[]> {\n    if (this.access === 'direct') {\n      const error = new Error(\n        'Browser access mode in the Prometheus datasource is no longer available. Switch to server access mode.'\n      );\n      return Promise.reject(error);\n    }\n\n    const annotation = options.annotation;\n    const { expr = '' } = annotation;\n\n    if (!expr) {\n      return Promise.resolve([]);\n    }\n\n    const step = options.annotation.step || ANNOTATION_QUERY_STEP_DEFAULT;\n    const queryModel = {\n      expr,\n      range: true,\n      instant: false,\n      exemplar: false,\n      interval: step,\n      refId: 'X',\n      datasource: this.getRef(),\n    };\n\n    return await lastValueFrom(\n      getBackendSrv()\n        .fetch<BackendDataSourceResponse>({\n          url: '/api/ds/query',\n          method: 'POST',\n          headers: this.getRequestHeaders(),\n          data: {\n            from: (getPrometheusTime(options.range.from, false) * 1000).toString(),\n            to: (getPrometheusTime(options.range.to, true) * 1000).toString(),\n            queries: [this.applyTemplateVariables(queryModel, {})],\n          },\n          requestId: `prom-query-${annotation.name}`,\n        })\n        .pipe(\n          map((rsp: FetchResponse<BackendDataSourceResponse>) => {\n            return this.processAnnotationResponse(options, rsp.data);\n          })\n        )\n    );\n  }\n\n  processAnnotationResponse = (options: AnnotationQueryRequest<PromQuery>, data: BackendDataSourceResponse) => {\n    const frames: DataFrame[] = toDataQueryResponse({ data: data }).data;\n    if (!frames || !frames.length) {\n      return [];\n    }\n\n    const annotation = options.annotation;\n    const { tagKeys = '', titleFormat = '', textFormat = '' } = annotation;\n\n    const step = rangeUtil.intervalToSeconds(annotation.step || ANNOTATION_QUERY_STEP_DEFAULT) * 1000;\n    const tagKeysArray = tagKeys.split(',');\n\n    const eventList: AnnotationEvent[] = [];\n\n    for (const frame of frames) {\n      if (frame.fields.length === 0) {\n        continue;\n      }\n      const timeField = frame.fields[0];\n      const valueField = frame.fields[1];\n      const labels = valueField?.labels || {};\n\n      const tags = Object.keys(labels)\n        .filter((label) => tagKeysArray.includes(label))\n        .map((label) => labels[label]);\n\n      const timeValueTuple: Array<[number, number]> = [];\n\n      let idx = 0;\n      valueField.values.forEach((value: string) => {\n        let timeStampValue: number;\n        let valueValue: number;\n        const time = timeField.values[idx];\n\n        // If we want to use value as a time, we use value as timeStampValue and valueValue will be 1\n        if (options.annotation.useValueForTime) {\n          timeStampValue = Math.floor(parseFloat(value));\n          valueValue = 1;\n        } else {\n          timeStampValue = Math.floor(parseFloat(time));\n          valueValue = parseFloat(value);\n        }\n\n        idx++;\n        timeValueTuple.push([timeStampValue, valueValue]);\n      });\n\n      const activeValues = timeValueTuple.filter((value) => value[1] > 0);\n      const activeValuesTimestamps = activeValues.map((value) => value[0]);\n\n      // Instead of creating singular annotation for each active event we group events into region if they are less\n      // or equal to `step` apart.\n      let latestEvent: AnnotationEvent | null = null;\n\n      for (const timestamp of activeValuesTimestamps) {\n        // We already have event `open` and we have new event that is inside the `step` so we just update the end.\n        if (latestEvent && (latestEvent.timeEnd ?? 0) + step >= timestamp) {\n          latestEvent.timeEnd = timestamp;\n          continue;\n        }\n\n        // Event exists but new one is outside of the `step` so we add it to eventList.\n        if (latestEvent) {\n          eventList.push(latestEvent);\n        }\n\n        // We start a new region.\n        latestEvent = {\n          time: timestamp,\n          timeEnd: timestamp,\n          annotation,\n          title: renderLegendFormat(titleFormat, labels),\n          tags,\n          text: renderLegendFormat(textFormat, labels),\n        };\n      }\n\n      if (latestEvent) {\n        // Finish up last point if we have one\n        latestEvent.timeEnd = activeValuesTimestamps[activeValuesTimestamps.length - 1];\n        eventList.push(latestEvent);\n      }\n    }\n\n    return eventList;\n  };\n\n  // By implementing getTagKeys and getTagValues we add ad-hoc filters functionality\n  // this is used to get label keys, a.k.a label names\n  // it is used in metric_find_query.ts\n  // and in Tempo here grafana/public/app/plugins/datasource/tempo/QueryEditor/ServiceGraphSection.tsx\n  async getTagKeys(options: DataSourceGetTagKeysOptions<PromQuery>): Promise<MetricFindValue[]> {\n    if (!options || options.filters.length === 0) {\n      await this.languageProvider.fetchLabels(options.timeRange, options.queries);\n      return this.languageProvider.getLabelKeys().map((k) => ({ value: k, text: k }));\n    }\n\n    const labelFilters: QueryBuilderLabelFilter[] = options.filters.map((f) => ({\n      label: f.key,\n      value: f.value,\n      op: f.operator,\n    }));\n    const expr = promQueryModeller.renderLabels(labelFilters);\n\n    let labelsIndex: Record<string, string[]> = await this.languageProvider.fetchLabelsWithMatch(expr);\n\n    // filter out already used labels\n    return Object.keys(labelsIndex)\n      .filter((labelName) => !options.filters.find((filter) => filter.key === labelName))\n      .map((k) => ({ value: k, text: k }));\n  }\n\n  // By implementing getTagKeys and getTagValues we add ad-hoc filters functionality\n  async getTagValues(options: DataSourceGetTagValuesOptions<PromQuery>) {\n    const labelFilters: QueryBuilderLabelFilter[] = options.filters.map((f) => ({\n      label: f.key,\n      value: f.value,\n      op: f.operator,\n    }));\n\n    const expr = promQueryModeller.renderLabels(labelFilters);\n\n    if (this.hasLabelsMatchAPISupport()) {\n      const requestId = `[${this.uid}][${options.key}]`;\n      return (\n        await this.languageProvider.fetchSeriesValuesWithMatch(options.key, expr, requestId, options.timeRange)\n      ).map((v) => ({\n        value: v,\n        text: v,\n      }));\n    }\n\n    const params = this.getTimeRangeParams(options.timeRange ?? getDefaultTimeRange());\n    const result = await this.metadataRequest(`/api/v1/label/${options.key}/values`, params);\n    return result?.data?.data?.map((value: any) => ({ text: value })) ?? [];\n  }\n\n  interpolateVariablesInQueries(\n    queries: PromQuery[],\n    scopedVars: ScopedVars,\n    filters?: AdHocVariableFilter[]\n  ): PromQuery[] {\n    let expandedQueries = queries;\n    if (queries && queries.length) {\n      expandedQueries = queries.map((query) => {\n        const interpolatedQuery = this.templateSrv.replace(query.expr, scopedVars, this.interpolateQueryExpr);\n        const replacedInterpolatedQuery = config.featureToggles.promQLScope\n          ? interpolatedQuery\n          : this.templateSrv.replace(\n              this.enhanceExprWithAdHocFilters(filters, interpolatedQuery),\n              scopedVars,\n              this.interpolateQueryExpr\n            );\n\n        const expandedQuery = {\n          ...query,\n          ...(config.featureToggles.promQLScope ? { adhocFilters: this.generateScopeFilters(filters) } : {}),\n          datasource: this.getRef(),\n          expr: replacedInterpolatedQuery,\n          interval: this.templateSrv.replace(query.interval, scopedVars),\n        };\n\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  getQueryHints(query: PromQuery, result: unknown[]) {\n    return getQueryHints(query.expr ?? '', result, this);\n  }\n\n  getInitHints() {\n    return getInitHints(this);\n  }\n\n  async loadRules() {\n    try {\n      const res = await this.metadataRequest('/api/v1/rules', {}, { showErrorAlert: false });\n      const groups = res.data?.data?.groups;\n\n      if (groups) {\n        this.ruleMappings = extractRuleMappingFromGroups(groups);\n      }\n    } catch (e) {\n      console.log('Rules API is experimental. Ignore next error.');\n      console.error(e);\n    }\n  }\n\n  async areExemplarsAvailable() {\n    try {\n      const res = await this.metadataRequest(\n        '/api/v1/query_exemplars',\n        {\n          query: 'test',\n          start: dateTime().subtract(30, 'minutes').valueOf().toString(),\n          end: dateTime().valueOf().toString(),\n        },\n        {\n          // Avoid alerting the user if this test fails\n          showErrorAlert: false,\n        }\n      );\n      if (res.data.status === 'success') {\n        return true;\n      }\n      return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  modifyQuery(query: PromQuery, action: QueryFixAction): PromQuery {\n    let expression = query.expr ?? '';\n    switch (action.type) {\n      case 'ADD_FILTER': {\n        const { key, value } = action.options ?? {};\n        if (key && value) {\n          expression = addLabelToQuery(expression, key, value);\n        }\n\n        break;\n      }\n      case 'ADD_FILTER_OUT': {\n        const { key, value } = action.options ?? {};\n        if (key && value) {\n          expression = addLabelToQuery(expression, key, value, '!=');\n        }\n        break;\n      }\n      case 'ADD_HISTOGRAM_QUANTILE': {\n        expression = `histogram_quantile(0.95, sum(rate(${expression}[$__rate_interval])) by (le))`;\n        break;\n      }\n      case 'ADD_HISTOGRAM_AVG': {\n        expression = `histogram_avg(rate(${expression}[$__rate_interval]))`;\n        break;\n      }\n      case 'ADD_HISTOGRAM_FRACTION': {\n        expression = `histogram_fraction(0,0.2,rate(${expression}[$__rate_interval]))`;\n        break;\n      }\n      case 'ADD_HISTOGRAM_COUNT': {\n        expression = `histogram_count(rate(${expression}[$__rate_interval]))`;\n        break;\n      }\n      case 'ADD_HISTOGRAM_SUM': {\n        expression = `histogram_sum(rate(${expression}[$__rate_interval]))`;\n        break;\n      }\n      case 'ADD_HISTOGRAM_STDDEV': {\n        expression = `histogram_stddev(rate(${expression}[$__rate_interval]))`;\n        break;\n      }\n      case 'ADD_HISTOGRAM_STDVAR': {\n        expression = `histogram_stdvar(rate(${expression}[$__rate_interval]))`;\n        break;\n      }\n      case 'ADD_RATE': {\n        expression = `rate(${expression}[$__rate_interval])`;\n        break;\n      }\n      case 'ADD_SUM': {\n        expression = `sum(${expression.trim()}) by ($1)`;\n        break;\n      }\n      case 'EXPAND_RULES': {\n        if (action.options) {\n          expression = expandRecordingRules(expression, action.options);\n        }\n        break;\n      }\n      default:\n        break;\n    }\n    return { ...query, expr: expression };\n  }\n\n  /**\n   * Returns the adjusted \"snapped\" interval parameters\n   */\n  getAdjustedInterval(timeRange: TimeRange): { start: string; end: string } {\n    return getRangeSnapInterval(this.cacheLevel, timeRange);\n  }\n\n  /**\n   * This will return a time range that always includes the users current time range,\n   * and then a little extra padding to round up/down to the nearest nth minute,\n   * defined by the result of the getCacheDurationInMinutes.\n   *\n   * For longer cache durations, and shorter query durations,\n   * the window we're calculating might be much bigger then the user's current window,\n   * resulting in us returning labels/values that might not be applicable for the given window,\n   * this is a necessary trade-off if we want to cache larger durations\n   */\n  getTimeRangeParams(timeRange: TimeRange): { start: string; end: string } {\n    return {\n      start: getPrometheusTime(timeRange.from, false).toString(),\n      end: getPrometheusTime(timeRange.to, true).toString(),\n    };\n  }\n\n  getOriginalMetricName(labelData: { [key: string]: string }) {\n    return getOriginalMetricName(labelData);\n  }\n\n  /**\n   * This converts the adhocVariableFilter array and converts it to scopeFilter array\n   * @param filters\n   */\n  generateScopeFilters(filters?: AdHocVariableFilter[]): ScopeSpecFilter[] {\n    if (!filters) {\n      return [];\n    }\n\n    return filters.map((f) => ({\n      ...f,\n      value: this.templateSrv.replace(f.value, {}, this.interpolateQueryExpr),\n      operator: scopeFilterOperatorMap[f.operator],\n    }));\n  }\n\n  enhanceExprWithAdHocFilters(filters: AdHocVariableFilter[] | undefined, expr: string) {\n    if (!filters || filters.length === 0) {\n      return expr;\n    }\n\n    const finalQuery = filters.reduce((acc, filter) => {\n      const { key, operator } = filter;\n      let { value } = filter;\n      if (operator === '=~' || operator === '!~') {\n        value = prometheusRegularEscape(value);\n      }\n      return addLabelToQuery(acc, key, value, operator);\n    }, expr);\n    return finalQuery;\n  }\n\n  // Used when running queries through backend\n  filterQuery(query: PromQuery): boolean {\n    if (query.hide || !query.expr) {\n      return false;\n    }\n    return true;\n  }\n\n  // Used when running queries through backend\n  applyTemplateVariables(target: PromQuery, scopedVars: ScopedVars, filters?: AdHocVariableFilter[]) {\n    const variables = { ...scopedVars };\n\n    // We want to interpolate these variables on backend.\n    // The pre-calculated values are replaced withe the variable strings.\n    variables.__interval = {\n      value: '$__interval',\n    };\n    variables.__interval_ms = {\n      value: '$__interval_ms',\n    };\n\n    // interpolate expression\n\n    // We need a first replace to evaluate variables before applying adhoc filters\n    // This is required for an expression like `metric > $VAR` where $VAR is a float to which we must not add adhoc filters\n    const expr = this.templateSrv.replace(target.expr, variables, this.interpolateQueryExpr);\n\n    // Apply ad-hoc filters\n    // When ad-hoc filters are applied, we replace again the variables in case the ad-hoc filters also reference a variable\n    const exprWithAdhoc = config.featureToggles.promQLScope\n      ? expr\n      : this.templateSrv.replace(this.enhanceExprWithAdHocFilters(filters, expr), variables, this.interpolateQueryExpr);\n\n    return {\n      ...target,\n      ...(config.featureToggles.promQLScope ? { adhocFilters: this.generateScopeFilters(filters) } : {}),\n      expr: exprWithAdhoc,\n      interval: this.templateSrv.replace(target.interval, variables),\n      legendFormat: this.templateSrv.replace(target.legendFormat, variables),\n    };\n  }\n\n  getVariables(): string[] {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  interpolateString(string: string, scopedVars?: ScopedVars) {\n    return this.templateSrv.replace(string, scopedVars, this.interpolateQueryExpr);\n  }\n\n  getDebounceTimeInMilliseconds(): number {\n    switch (this.cacheLevel) {\n      case PrometheusCacheLevel.Medium:\n        return 600;\n      case PrometheusCacheLevel.High:\n        return 1200;\n      default:\n        return 350;\n    }\n  }\n\n  getDaysToCacheMetadata(): number {\n    switch (this.cacheLevel) {\n      case PrometheusCacheLevel.Medium:\n        return 7;\n      case PrometheusCacheLevel.High:\n        return 30;\n      default:\n        return 1;\n    }\n  }\n\n  getCacheDurationInMinutes(): number {\n    return getClientCacheDurationInMinutes(this.cacheLevel);\n  }\n\n  getDefaultQuery(app: CoreApp): PromQuery {\n    const defaults = {\n      refId: 'A',\n      expr: '',\n      range: true,\n      instant: false,\n    };\n\n    if (app === CoreApp.UnifiedAlerting) {\n      return {\n        ...defaults,\n        instant: true,\n        range: false,\n      };\n    }\n\n    if (app === CoreApp.Explore) {\n      return {\n        ...defaults,\n        instant: true,\n        range: true,\n      };\n    }\n\n    return defaults;\n  }\n}\n\n/**\n * Align query range to step.\n * Rounds start and end down to a multiple of step.\n * @param start Timestamp marking the beginning of the range.\n * @param end Timestamp marking the end of the range.\n * @param step Interval to align start and end with.\n * @param utcOffsetSec Number of seconds current timezone is offset from UTC\n */\nexport function alignRange(\n  start: number,\n  end: number,\n  step: number,\n  utcOffsetSec: number\n): { end: number; start: number } {\n  const alignedEnd = Math.floor((end + utcOffsetSec) / step) * step - utcOffsetSec;\n  const alignedStart = Math.floor((start + utcOffsetSec) / step) * step - utcOffsetSec;\n  return {\n    end: alignedEnd,\n    start: alignedStart,\n  };\n}\n\nexport function extractRuleMappingFromGroups(groups: any[]) {\n  return groups.reduce(\n    (mapping, group) =>\n      group.rules\n        .filter((rule: any) => rule.type === 'recording')\n        .reduce(\n          (acc: { [key: string]: string }, rule: any) => ({\n            ...acc,\n            [rule.name]: rule.query,\n          }),\n          mapping\n        ),\n    {}\n  );\n}\n\n// NOTE: these two functions are very similar to the escapeLabelValueIn* functions\n// in language_utils.ts, but they are not exactly the same algorithm, and we found\n// no way to reuse one in the another or vice versa.\nexport function prometheusRegularEscape<T>(value: T) {\n  return typeof value === 'string' ? value.replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"\\\\\\\\'\") : value;\n}\n\nexport function prometheusSpecialRegexEscape<T>(value: T) {\n  return typeof value === 'string' ? value.replace(/\\\\/g, '\\\\\\\\\\\\\\\\').replace(/[$^*{}\\[\\]\\'+?.()|]/g, '\\\\\\\\$&') : value;\n}\n"],"names":["useState","React","Select","toOption","value","PromVisualQueryOperationCategory","PromOperationId","PromQueryPatternType","__spreadProps","capitalize","__spreadValues","pluralize","operationWithRangeVectorRenderer","__publicField","Registry","useTheme2","getStyles","Prism","cx","css","useStyles2","Card","Button","ErrorId","query","parser","Identifier","LabelMatcher","getLabel","FunctionCall","AggregateExpr","BinaryExpr","ParenExpr","VectorSelector","LabelName","MatchOp","StringLiteral","FunctionIdentifier","FunctionCallBody","AggregateOp","AggregateModifier","Without","NumberLiteral","BoolModifier","MatchingModifierClause","GroupingLabels","On","useMemo","reportInteraction","Modal","Collapse","useCallback","QueryEditorMode","RadioButtonGroup","__objRest","useRef","uniqueId","Stack","Switch","PrometheusCacheLevel","PromApplication","LegendFormatMode","PromVariableQueryType","CoreApp","renderMarkdown","offset","flip","shift","useFloating","autoUpdate","useClick","useDismiss","useInteractions","Portal","FlexItem","AutoSizeInput","Checkbox","useId","Tooltip","Icon","Draggable","useEffect","DragDropContext","Droppable","Cascader","useMountedState","usePrevious","hints","_a","data","getSelectStyles","toIconName","results","ConfigSubSection","InlineField","convertLegacyAuthProps","ConnectionSettings","Auth","AuthMethod","SecureSocksProxySettings","closestIdx","config","faro","isValidDuration","parseDuration","durationToMilliseconds","_b","_c","dateTime","incrRoundDn","respFrames","DataSourcePicker","Input","onUpdateDatasourceJsonDataOptionChecked","updateDatasourcePluginJsonDataOption","Alert","DataSourceDescription","ConfigSection","AdvancedHttpSettings","FieldValidationMessage","Highlighter","state","initialState","uFuzzy","debounceLodash","useReducer","stateSlice","debounce","MultiSelect","Spinner","Toggletip","ButtonGroup","Pagination","createSlice","labelsFilters","CustomScrollbar","AsyncSelect","InlineFieldRow","EditorFieldGroup","EditorField","p","AbstractLabelOperator","invert","Token","dateMath","EMPTY_SELECTOR","LanguageProvider","getDefaultTimeRange","once","PromqlSyntax","operators","item","InputGroup","change","AccessoryButton","isEqual","EditorList","InlineLabel","response","result","IconButton","EditorRows","RadioButtonList","TextArea","SuggestionType","qs","llms","familyMetrics","Drawer","EditorRow","memo","InlineFormLabel","useToggle","EditorSwitch","stylesFactory","label","LoadingPlaceholder","HorizontalGroup","Label","FixedSizeList","PromLabel","withTheme2","UFuzzy","LabelMatchers","PromQL","MatrixSelector","EqlSingle","EqlRegex","Neq","NeqRegex","promLanguageDefinition","uuidv4","useLatest","ReactMonacoEditor","Suspense","isDataFrame","toLegacyResponseData","clearButtonStyles","Text","map","ConfirmModal","EditorHeader","LoadingState","Space","QueryType","_map","metric","uniq","chain","size","target","DataFrameType","TIME_SERIES_VALUE_FIELD_NAME","getFieldDisplayName","partition","DataTopic","f","FieldType","groupBy","forOwn","flatten","getDataSourceSrv","TIME_SERIES_TIME_FIELD_NAME","getDisplayProcessor","field","CustomVariableSupport","getTemplateSrv","of","rangeUtil","from","DataSourceWithBackend","toDataQueryResponse","renderLegendFormat","PrometheusLanguageProvider","semver","throwError","defaults","getBackendSrv","lastValueFrom","isFetchError","tap","scopeFilterOperatorMap"],"mappings":"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U,EAAA,KAAA,EAAO,QAAS,EAAA;AAAA,IACnC,EAAE,KAAA,EAAO,QAAU,EAAA,KAAA,EAAO,QAAS,EAAA;AAAA,IACnC,EAAE,KAAA,EAAO,QAAU,EAAA,KAAA,EAAO,QAAS,EAAA;AAAA,IACnC,EAAE,KAAA,EAAO,QAAU,EAAA,KAAA,EAAO,QAAS,EAAA;AAAA,IACnC,EAAE,KAAA,EAAO,QAAU,EAAA,KAAA,EAAO,QAAS,EAAA;AAAA,IACnC,EAAE,KAAA,EAAO,QAAU,EAAA,KAAA,EAAO,QAAS,EAAA;AAAA,IACnC,EAAE,KAAA,EAAO,QAAU,EAAA,KAAA,EAAO,QAAS,EAAA;AAAA,IACnC,EAAE,KAAA,EAAO,QAAU,EAAA,KAAA,EAAO,QAAS,EAAA;AAAA,IACnC,EAAE,KAAA,EAAO,QAAU,EAAA,KAAA,EAAO,QAAS,EAAA;AAAA,IACnC,EAAE,KAAA,EAAO,QAAU,EAAA,KAAA,EAAO,QAAS,EAAA;AAAA,IACnC,EAAE,KAAA,EAAO,QAAU,EAAA,KAAA,EAAO,QAAS,EAAA;AAAA,IACnC,EAAE,KAAA,EAAO,QAAU,EAAA,KAAA,EAAO,QAAS,EAAA;AAAA,IACnC,EAAE,KAAA,EAAO,QAAU,EAAA,KAAA,EAAO,QAAS,EAAA;AAAA,IACnC,EAAE,KAAA,EAAO,QAAU,EAAA,KAAA,EAAO,QAAS,EAAA;AAAA,IACnC,EAAE,KAAA,EAAO,QAAU,EAAA,KAAA,EAAO,QAAS,EAAA;AAAA,IACnC,EAAE,KAAA,EAAO,QAAU,EAAA,KAAA,EAAO,QAAS,EAAA;AAAA,IACnC,EAAE,KAAA,EAAO,QAAU,EAAA,KAAA,EAAO,QAAS,EAAA;AAAA,IACnC,EAAE,KAAA,EAAO,QAAU,EAAA,KAAA,EAAO,QAAS,EAAA;AAAA,IACnC,EAAE,KAAA,EAAO,QAAU,EAAA,KAAA,EAAO,QAAS,EAAA;AAAA,IACnC,EAAE,KAAA,EAAO,QAAU,EAAA,KAAA,EAAO,QAAS,EAAA;AAAA,IACnC,EAAE,KAAA,EAAO,QAAU,EAAA,KAAA,EAAO,QAAS,EAAA;AAAA,IACnC,EAAE,KAAA,EAAO,QAAU,EAAA,KAAA,EAAO,QAAS,EA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"}