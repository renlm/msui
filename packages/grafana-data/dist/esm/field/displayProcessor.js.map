{"version":3,"file":"displayProcessor.js","sources":["../../../src/field/displayProcessor.ts"],"sourcesContent":["// Libraries\nimport { toString, toNumber as _toNumber, isEmpty, isBoolean, isArray, join } from 'lodash';\n\n// Types\nimport { getFieldTypeFromValue } from '../dataframe/processDataFrame';\nimport { toUtc, dateTimeParse } from '../datetime';\nimport { GrafanaTheme2 } from '../themes/types';\nimport { KeyValue, TimeZone } from '../types';\nimport { Field, FieldType } from '../types/dataFrame';\nimport { DecimalCount, DisplayProcessor, DisplayValue } from '../types/displayValue';\nimport { anyToNumber } from '../utils/anyToNumber';\nimport { getValueMappingResult } from '../utils/valueMappings';\nimport { FormattedValue, getValueFormat, isBooleanUnit } from '../valueFormats/valueFormats';\n\nimport { getScaleCalculator } from './scale';\n\ninterface DisplayProcessorOptions {\n  field: Partial<Field>;\n  /**\n   * Will pick browser timezone if not defined\n   */\n  timeZone?: TimeZone;\n  /**\n   * Will pick 'dark' if not defined\n   */\n  theme: GrafanaTheme2;\n}\n\n// Reasonable units for time\nconst timeFormats: KeyValue<boolean> = {\n  dateTimeAsIso: true,\n  dateTimeAsIsoNoDateIfToday: true,\n  dateTimeAsUS: true,\n  dateTimeAsUSNoDateIfToday: true,\n  dateTimeAsLocal: true,\n  dateTimeAsLocalNoDateIfToday: true,\n  dateTimeFromNow: true,\n};\n\nexport function getDisplayProcessor(options?: DisplayProcessorOptions): DisplayProcessor {\n  if (!options || isEmpty(options) || !options.field) {\n    return toStringProcessor;\n  }\n\n  const field = options.field as Field;\n  const config = field.config ?? {};\n  const { palette } = options.theme.visualization;\n\n  let unit = config.unit;\n  let hasDateUnit = unit && (timeFormats[unit] || unit.startsWith('time:'));\n  let showMs = false;\n\n  if (field.type === FieldType.time && !hasDateUnit) {\n    unit = `dateTimeAsSystem`;\n    hasDateUnit = true;\n    if (field.values && field.values.length > 1) {\n      let start = field.values[0];\n      let end = field.values[field.values.length - 1];\n      if (typeof start === 'string') {\n        start = dateTimeParse(start).unix();\n        end = dateTimeParse(end).unix();\n      } else {\n        start /= 1e3;\n        end /= 1e3;\n      }\n      showMs = Math.abs(end - start) < 60; //show ms when minute or less\n    }\n  } else if (field.type === FieldType.boolean) {\n    if (!isBooleanUnit(unit)) {\n      unit = 'bool';\n    }\n  } else if (!unit && field.type === FieldType.string) {\n    unit = 'string';\n  }\n\n  const hasCurrencyUnit = unit?.startsWith('currency');\n  const hasBoolUnit = isBooleanUnit(unit);\n  const isNumType = field.type === FieldType.number;\n  const isLocaleFormat = unit === 'locale';\n  const canTrimTrailingDecimalZeros =\n    !hasDateUnit && !hasCurrencyUnit && !hasBoolUnit && !isLocaleFormat && isNumType && config.decimals == null;\n\n  const formatFunc = getValueFormat(unit || 'none');\n  const scaleFunc = getScaleCalculator(field, options.theme);\n\n  return (value: unknown, adjacentDecimals?: DecimalCount) => {\n    const { mappings } = config;\n    const isStringUnit = unit === 'string';\n\n    if (hasDateUnit && typeof value === 'string') {\n      value = toUtc(value).valueOf();\n    }\n\n    let numeric = isStringUnit ? NaN : anyToNumber(value);\n    let text: string | undefined;\n    let prefix: string | undefined;\n    let suffix: string | undefined;\n    let color: string | undefined;\n    let icon: string | undefined;\n    let percent: number | undefined;\n\n    if (mappings && mappings.length > 0) {\n      const mappingResult = getValueMappingResult(mappings, value);\n\n      if (mappingResult) {\n        if (mappingResult.text != null) {\n          text = mappingResult.text;\n        }\n\n        if (mappingResult.color != null) {\n          color = options.theme.visualization.getColorByName(mappingResult.color);\n        }\n\n        if (mappingResult.icon != null) {\n          icon = mappingResult.icon;\n        }\n      }\n    } else if (field.type === FieldType.enum) {\n      // Apply enum display handling if field is enum type and no mappings are specified\n      if (value == null) {\n        return {\n          text: '',\n          numeric: NaN,\n        };\n      }\n\n      const enumIndex = +value;\n      if (config && config.type && config.type.enum) {\n        const { text: enumText, color: enumColor } = config.type.enum;\n\n        text = enumText ? enumText[enumIndex] : `${value}`;\n        // If no color specified in enum field config we will fallback to iterating through the theme palette\n        color = enumColor ? enumColor[enumIndex] : undefined;\n\n        if (color == null) {\n          const namedColor = palette[enumIndex % palette.length];\n          color = options.theme.visualization.getColorByName(namedColor);\n        }\n      }\n    }\n\n    if (!Number.isNaN(numeric)) {\n      if (text == null && !isBoolean(value)) {\n        let v: FormattedValue;\n\n        if (canTrimTrailingDecimalZeros && adjacentDecimals != null) {\n          v = formatFunc(numeric, adjacentDecimals, null, options.timeZone, showMs);\n\n          // if no explicit decimals config, we strip trailing zeros e.g. 60.00 -> 60\n          // this is needed because we may have determined the minimum determined `adjacentDecimals` for y tick increments based on\n          // e.g. 'seconds' field unit (0.15s, 0.20s, 0.25s), but then formatFunc decided to return milli or nanos (150, 200, 250)\n          // so we end up with excess precision: 150.00, 200.00, 250.00\n          v.text = +v.text + '';\n        } else {\n          v = formatFunc(numeric, config.decimals, null, options.timeZone, showMs);\n        }\n\n        text = v.text;\n        suffix = v.suffix;\n        prefix = v.prefix;\n      }\n\n      // Return the value along with scale info\n      if (color == null) {\n        const scaleResult = scaleFunc(numeric);\n        color = scaleResult.color;\n        percent = scaleResult.percent;\n      }\n    }\n\n    if (text == null && isArray(value)) {\n      text = join(value, ', ');\n    }\n\n    if (text == null) {\n      text = toString(value);\n      if (!text) {\n        if (config.noValue) {\n          text = config.noValue;\n        } else {\n          text = ''; // No data?\n        }\n      }\n    }\n\n    if (!color) {\n      const scaleResult = scaleFunc(-Infinity);\n      color = scaleResult.color;\n      percent = scaleResult.percent;\n    }\n\n    const display: DisplayValue = {\n      text,\n      numeric,\n      prefix,\n      suffix,\n      color,\n    };\n\n    if (icon != null) {\n      display.icon = icon;\n    }\n\n    if (percent != null) {\n      display.percent = percent;\n    }\n\n    return display;\n  };\n}\n\nfunction toStringProcessor(value: unknown): DisplayValue {\n  return { text: toString(value), numeric: anyToNumber(value) };\n}\n\nexport function getRawDisplayProcessor(): DisplayProcessor {\n  return (value: unknown) => ({\n    text: getFieldTypeFromValue(value) === 'other' ? `${JSON.stringify(value, getCircularReplacer())}` : `${value}`,\n    numeric: null as unknown as number,\n  });\n}\n\nconst getCircularReplacer = () => {\n  const seen = new WeakSet();\n  return (_key: string, value: object | null) => {\n    if (typeof value === 'object' && value !== null) {\n      if (seen.has(value)) {\n        return;\n      }\n      seen.add(value);\n    }\n    return value;\n  };\n};\n"],"names":[],"mappings":"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"}