{"version":3,"file":"scale.js","sources":["../../../src/field/scale.ts"],"sourcesContent":["import { isNumber } from 'lodash';\n\nimport { GrafanaTheme2 } from '../themes/types';\nimport { reduceField, ReducerID } from '../transformations/fieldReducer';\nimport { Field, FieldConfig, FieldType, NumericRange, Threshold } from '../types';\n\nimport { getFieldColorModeForField } from './fieldColor';\nimport { getActiveThresholdForValue } from './thresholds';\n\nexport interface ColorScaleValue {\n  percent: number; // 0-1\n  threshold: Threshold | undefined;\n  color: string;\n}\n\nexport type ScaleCalculator = (value: number) => ColorScaleValue;\n\nexport function getScaleCalculator(field: Field, theme: GrafanaTheme2): ScaleCalculator {\n  if (field.type === FieldType.boolean) {\n    return getBooleanScaleCalculator(field, theme);\n  }\n\n  const mode = getFieldColorModeForField(field);\n  const getColor = mode.getCalculator(field, theme);\n  const info = field.state?.range ?? getMinMaxAndDelta(field);\n\n  return (value: number) => {\n    let percent = 0;\n\n    if (value !== -Infinity) {\n      percent = (value - info.min!) / info.delta;\n\n      if (Number.isNaN(percent)) {\n        percent = 0;\n      }\n    }\n\n    const threshold = getActiveThresholdForValue(field, value, percent);\n\n    return {\n      percent,\n      threshold,\n      color: getColor(value, percent, threshold),\n    };\n  };\n}\n\nfunction getBooleanScaleCalculator(field: Field, theme: GrafanaTheme2): ScaleCalculator {\n  const trueValue: ColorScaleValue = {\n    color: theme.visualization.getColorByName('green'),\n    percent: 1,\n    threshold: undefined,\n  };\n\n  const falseValue: ColorScaleValue = {\n    color: theme.visualization.getColorByName('red'),\n    percent: 0,\n    threshold: undefined,\n  };\n\n  const mode = getFieldColorModeForField(field);\n  if (mode.isContinuous && mode.getColors) {\n    const colors = mode.getColors(theme);\n    trueValue.color = colors[colors.length - 1];\n    falseValue.color = colors[0];\n  }\n\n  return (value: number) => {\n    return Boolean(value) ? trueValue : falseValue;\n  };\n}\n\nexport function getMinMaxAndDelta(field: Field): NumericRange {\n  if (field.type !== FieldType.number) {\n    return { min: 0, max: 100, delta: 100 };\n  }\n\n  // Calculate min/max if required\n  let min = field.config.min;\n  let max = field.config.max;\n\n  if (!isNumber(min) || !isNumber(max)) {\n    if (field.values && field.values.length) {\n      const stats = reduceField({ field, reducers: [ReducerID.min, ReducerID.max] });\n      if (!isNumber(min)) {\n        min = stats[ReducerID.min];\n      }\n      if (!isNumber(max)) {\n        max = stats[ReducerID.max];\n      }\n    } else {\n      min = 0;\n      max = 100;\n    }\n  }\n\n  return {\n    min,\n    max,\n    delta: max! - min!,\n  };\n}\n\n/**\n * @internal\n */\nexport function getFieldConfigWithMinMax(field: Field, local?: boolean): FieldConfig {\n  const { config } = field;\n  let { min, max } = config;\n\n  if (isNumber(min) && isNumber(max)) {\n    return config;\n  }\n\n  if (local || !field.state?.range) {\n    return { ...config, ...getMinMaxAndDelta(field) };\n  }\n\n  return { ...config, ...field.state.range };\n}\n"],"names":[],"mappings":"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"}