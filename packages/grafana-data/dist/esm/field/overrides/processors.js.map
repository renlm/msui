{"version":3,"file":"processors.js","sources":["../../../../src/field/overrides/processors.ts"],"sourcesContent":["import {\n  DataLink,\n  Field,\n  FieldOverrideContext,\n  SelectableValue,\n  SliderMarks,\n  ThresholdsConfig,\n  ValueMapping,\n} from '../../types';\n\nexport const identityOverrideProcessor = <T>(value: T) => {\n  return value;\n};\n\nexport interface NumberFieldConfigSettings {\n  placeholder?: string;\n  integer?: boolean;\n  min?: number;\n  max?: number;\n  step?: number;\n}\n\nexport const numberOverrideProcessor = (\n  value: any,\n  context: FieldOverrideContext,\n  settings?: NumberFieldConfigSettings\n) => {\n  if (value === undefined || value === null) {\n    return undefined;\n  }\n\n  return parseFloat(value);\n};\n\nexport const displayNameOverrideProcessor = (\n  value: unknown,\n  context: FieldOverrideContext,\n  settings?: StringFieldConfigSettings\n) => {\n  // clear the cached display name\n  delete context.field?.state?.displayName;\n  return stringOverrideProcessor(value, context, settings);\n};\n\nexport interface SliderFieldConfigSettings {\n  min: number;\n  max: number;\n  step?: number;\n  included?: boolean;\n  marks?: SliderMarks;\n  ariaLabelForHandle?: string;\n}\n\nexport interface DataLinksFieldConfigSettings {}\n\nexport const dataLinksOverrideProcessor = (\n  value: any,\n  _context: FieldOverrideContext,\n  _settings?: DataLinksFieldConfigSettings\n): DataLink[] => {\n  return value;\n};\n\nexport interface ValueMappingFieldConfigSettings {}\n\nexport const valueMappingsOverrideProcessor = (\n  value: any,\n  _context: FieldOverrideContext,\n  _settings?: ValueMappingFieldConfigSettings\n): ValueMapping[] => {\n  return value; // !!!! likely not !!!!\n};\n\nexport interface SelectFieldConfigSettings<T> {\n  allowCustomValue?: boolean;\n\n  isClearable?: boolean;\n\n  /** The default options */\n  options: Array<SelectableValue<T>>;\n\n  /** Optionally use the context to define the options */\n  getOptions?: (context: FieldOverrideContext) => Promise<Array<SelectableValue<T>>>;\n}\n\nexport const selectOverrideProcessor = (\n  value: any,\n  _context: FieldOverrideContext,\n  _settings?: SelectFieldConfigSettings<any>\n) => {\n  return value;\n};\n\nexport interface StringFieldConfigSettings {\n  placeholder?: string;\n  maxLength?: number;\n  expandTemplateVars?: boolean;\n  useTextarea?: boolean;\n  rows?: number;\n}\n\nexport const stringOverrideProcessor = (\n  value: unknown,\n  context: FieldOverrideContext,\n  settings?: StringFieldConfigSettings\n) => {\n  if (value === null || value === undefined) {\n    return value;\n  }\n  if (settings && settings.expandTemplateVars && context.replaceVariables && typeof value === 'string') {\n    return context.replaceVariables(value, context.field!.state!.scopedVars);\n  }\n  return `${value}`;\n};\n\nexport interface ThresholdsFieldConfigSettings {\n  // Anything?\n}\n\nexport const thresholdsOverrideProcessor = (\n  value: any,\n  _context: FieldOverrideContext,\n  _settings?: ThresholdsFieldConfigSettings\n): ThresholdsConfig => {\n  return value; // !!!! likely not !!!!\n};\n\nexport interface UnitFieldConfigSettings {\n  isClearable?: boolean;\n}\n\nexport const unitOverrideProcessor = (\n  value: boolean,\n  _context: FieldOverrideContext,\n  _settings?: UnitFieldConfigSettings\n) => {\n  return value;\n};\n\nexport const booleanOverrideProcessor = (\n  value: boolean,\n  _context: FieldOverrideContext,\n  _settings?: ThresholdsFieldConfigSettings\n) => {\n  return value; // !!!! likely not !!!!\n};\n\nexport interface FieldColorConfigSettings {\n  /**\n   * When switching to a visualization that does not support by value coloring then Grafana will\n   * switch to a by series palette based color mode\n   */\n  byValueSupport?: boolean;\n  /**\n   * When switching to a visualization that has this set to true then Grafana will change color mode\n   * to from thresholds if it was set to a by series palette\n   */\n  preferThresholdsMode?: boolean;\n  /**\n   * Set to true if the visualization supports both by value and by series\n   * This will enable the Color by series UI option that sets the `color.seriesBy` option.\n   */\n  bySeriesSupport?: boolean;\n}\n\nexport interface StatsPickerConfigSettings {\n  /**\n   * Enable multi-selection in the stats picker\n   */\n  allowMultiple: boolean;\n  /**\n   * Default stats to be use in the stats picker\n   */\n  defaultStat?: string;\n}\n\nexport enum FieldNamePickerBaseNameMode {\n  IncludeAll = 'all',\n  ExcludeBaseNames = 'exclude',\n  OnlyBaseNames = 'only',\n}\n\nexport interface FieldNamePickerConfigSettings {\n  /**\n   * Function is a predicate, to test each element of the array.\n   * Return a value that coerces to true to keep the field, or to false otherwise.\n   */\n  filter?: (field: Field) => boolean;\n\n  /**\n   * Show this text when no values are found\n   */\n  noFieldsMessage?: string;\n\n  /**\n   * Sets the width to a pixel value.\n   */\n  width?: number;\n\n  /**\n   * Exclude names that can match a collection of values\n   */\n  baseNameMode?: FieldNamePickerBaseNameMode;\n\n  /**\n   * Placeholder text to display when nothing is selected.\n   */\n  placeholderText?: string;\n\n  /** When set to false, the value can not be removed */\n  isClearable?: boolean;\n}\n"],"names":["FieldNamePickerBaseNameMode"],"mappings":"AAUa,MAAA,yBAAA,GAA4B,CAAI,KAAa,KAAA;AACxD,EAAO,OAAA,KAAA,CAAA;AACT,EAAA;AAUO,MAAM,uBAA0B,GAAA,CACrC,KACA,EAAA,OAAA,EACA,QACG,KAAA;AACH,EAAI,IAAA,KAAA,KAAU,KAAa,CAAA,IAAA,KAAA,KAAU,IAAM,EAAA;AACzC,IAAO,OAAA,KAAA,CAAA,CAAA;AAAA,GACT;AAEA,EAAA,OAAO,WAAW,KAAK,CAAA,CAAA;AACzB,EAAA;AAEO,MAAM,4BAA+B,GAAA,CAC1C,KACA,EAAA,OAAA,EACA,QACG,KAAA;AAtCL,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAwCE,EAAA,CAAA,EAAA,GAAA,CAAO,EAAQ,GAAA,OAAA,CAAA,KAAA,KAAR,IAAe,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,KAAA,KAAtB,IAA6B,GAAA,IAAA,GAAA,OAAA,EAAA,CAAA,WAAA,CAAA;AAC7B,EAAO,OAAA,uBAAA,CAAwB,KAAO,EAAA,OAAA,EAAS,QAAQ,CAAA,CAAA;AACzD,EAAA;AAaO,MAAM,0BAA6B,GAAA,CACxC,KACA,EAAA,QAAA,EACA,SACe,KAAA;AACf,EAAO,OAAA,KAAA,CAAA;AACT,EAAA;AAIO,MAAM,8BAAiC,GAAA,CAC5C,KACA,EAAA,QAAA,EACA,SACmB,KAAA;AACnB,EAAO,OAAA,KAAA,CAAA;AACT,EAAA;AAcO,MAAM,uBAA0B,GAAA,CACrC,KACA,EAAA,QAAA,EACA,SACG,KAAA;AACH,EAAO,OAAA,KAAA,CAAA;AACT,EAAA;AAUO,MAAM,uBAA0B,GAAA,CACrC,KACA,EAAA,OAAA,EACA,QACG,KAAA;AACH,EAAI,IAAA,KAAA,KAAU,IAAQ,IAAA,KAAA,KAAU,KAAW,CAAA,EAAA;AACzC,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AACA,EAAA,IAAI,YAAY,QAAS,CAAA,kBAAA,IAAsB,QAAQ,gBAAoB,IAAA,OAAO,UAAU,QAAU,EAAA;AACpG,IAAA,OAAO,QAAQ,gBAAiB,CAAA,KAAA,EAAO,OAAQ,CAAA,KAAA,CAAO,MAAO,UAAU,CAAA,CAAA;AAAA,GACzE;AACA,EAAA,OAAO,GAAG,KAAK,CAAA,CAAA,CAAA;AACjB,EAAA;AAMO,MAAM,2BAA8B,GAAA,CACzC,KACA,EAAA,QAAA,EACA,SACqB,KAAA;AACrB,EAAO,OAAA,KAAA,CAAA;AACT,EAAA;AAMO,MAAM,qBAAwB,GAAA,CACnC,KACA,EAAA,QAAA,EACA,SACG,KAAA;AACH,EAAO,OAAA,KAAA,CAAA;AACT,EAAA;AAEO,MAAM,wBAA2B,GAAA,CACtC,KACA,EAAA,QAAA,EACA,SACG,KAAA;AACH,EAAO,OAAA,KAAA,CAAA;AACT,EAAA;AA+BY,IAAA,2BAAA,qBAAAA,4BAAL,KAAA;AACL,EAAAA,6BAAA,YAAa,CAAA,GAAA,KAAA,CAAA;AACb,EAAAA,6BAAA,kBAAmB,CAAA,GAAA,SAAA,CAAA;AACnB,EAAAA,6BAAA,eAAgB,CAAA,GAAA,MAAA,CAAA;AAHN,EAAAA,OAAAA,4BAAAA,CAAAA;AAAA,CAAA,EAAA,2BAAA,IAAA,EAAA;;;;"}