{"version":3,"file":"getFieldDisplayValuesProxy.js","sources":["../../../src/field/getFieldDisplayValuesProxy.ts"],"sourcesContent":["import { toNumber } from 'lodash';\n\nimport { DataFrame, DisplayValue, TimeZone } from '../types';\nimport { formattedValueToString } from '../valueFormats';\n\nimport { getDisplayProcessor } from './displayProcessor';\n\n/**\n * Creates a proxy object that allows accessing fields on dataFrame through various means and then returns it's\n * display value. This is mainly useful for example in data links interpolation where you can easily create a scoped\n * variable that will allow you to access dataFrame data with ${__data.fields.fieldName}.\n * Allows accessing fields by name, index, displayName or 'name' label\n *\n * @param options\n * @internal\n */\nexport function getFieldDisplayValuesProxy(options: {\n  frame: DataFrame;\n  rowIndex: number;\n  timeZone?: TimeZone;\n}): Record<string, DisplayValue> {\n  return new Proxy(\n    {},\n    {\n      get: (obj, key): DisplayValue | undefined => {\n        // 1. Match the name\n        let field = options.frame.fields.find((f) => key === f.name);\n        if (!field) {\n          // 2. Match the array index\n          const k = toNumber(key);\n          field = options.frame.fields[k];\n        }\n        if (!field) {\n          // 3. Match the config displayName\n          field = options.frame.fields.find((f) => key === f.config.displayName);\n        }\n        if (!field) {\n          // 4. Match the name label\n          field = options.frame.fields.find((f) => {\n            if (f.labels) {\n              return key === f.labels.name;\n            }\n            return false;\n          });\n        }\n        if (!field) {\n          return undefined;\n        }\n        // TODO: we could supply the field here for the getDisplayProcessor fallback but we would also need theme which\n        //  we do not have access to here\n        const displayProcessor = field.display ?? getDisplayProcessor();\n        const raw = field.values[options.rowIndex];\n        const disp = displayProcessor(raw);\n        disp.toString = () => formattedValueToString(disp);\n        return disp;\n      },\n    }\n  );\n}\n"],"names":[],"mappings":";;;;AAgBO,SAAS,2BAA2B,OAIV,EAAA;AAC/B,EAAA,OAAO,IAAI,KAAA;AAAA,IACT,EAAC;AAAA,IACD;AAAA,MACE,GAAA,EAAK,CAAC,GAAA,EAAK,GAAkC,KAAA;AAxBnD,QAAA,IAAA,EAAA,CAAA;AA0BQ,QAAI,IAAA,KAAA,GAAQ,QAAQ,KAAM,CAAA,MAAA,CAAO,KAAK,CAAC,CAAA,KAAM,GAAQ,KAAA,CAAA,CAAE,IAAI,CAAA,CAAA;AAC3D,QAAA,IAAI,CAAC,KAAO,EAAA;AAEV,UAAM,MAAA,CAAA,GAAI,SAAS,GAAG,CAAA,CAAA;AACtB,UAAQ,KAAA,GAAA,OAAA,CAAQ,KAAM,CAAA,MAAA,CAAO,CAAC,CAAA,CAAA;AAAA,SAChC;AACA,QAAA,IAAI,CAAC,KAAO,EAAA;AAEV,UAAQ,KAAA,GAAA,OAAA,CAAQ,MAAM,MAAO,CAAA,IAAA,CAAK,CAAC,CAAM,KAAA,GAAA,KAAQ,CAAE,CAAA,MAAA,CAAO,WAAW,CAAA,CAAA;AAAA,SACvE;AACA,QAAA,IAAI,CAAC,KAAO,EAAA;AAEV,UAAA,KAAA,GAAQ,OAAQ,CAAA,KAAA,CAAM,MAAO,CAAA,IAAA,CAAK,CAAC,CAAM,KAAA;AACvC,YAAA,IAAI,EAAE,MAAQ,EAAA;AACZ,cAAO,OAAA,GAAA,KAAQ,EAAE,MAAO,CAAA,IAAA,CAAA;AAAA,aAC1B;AACA,YAAO,OAAA,KAAA,CAAA;AAAA,WACR,CAAA,CAAA;AAAA,SACH;AACA,QAAA,IAAI,CAAC,KAAO,EAAA;AACV,UAAO,OAAA,KAAA,CAAA,CAAA;AAAA,SACT;AAGA,QAAA,MAAM,gBAAmB,GAAA,CAAA,EAAA,GAAA,KAAA,CAAM,OAAN,KAAA,IAAA,GAAA,EAAA,GAAiB,mBAAoB,EAAA,CAAA;AAC9D,QAAA,MAAM,GAAM,GAAA,KAAA,CAAM,MAAO,CAAA,OAAA,CAAQ,QAAQ,CAAA,CAAA;AACzC,QAAM,MAAA,IAAA,GAAO,iBAAiB,GAAG,CAAA,CAAA;AACjC,QAAK,IAAA,CAAA,QAAA,GAAW,MAAM,sBAAA,CAAuB,IAAI,CAAA,CAAA;AACjD,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAAA,KACF;AAAA,GACF,CAAA;AACF;;;;"}