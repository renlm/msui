{"version":3,"file":"fieldColor.js","sources":["../../../src/field/fieldColor.ts"],"sourcesContent":["import { interpolateRgbBasis } from 'd3-interpolate';\nimport stringHash from 'string-hash';\nimport tinycolor from 'tinycolor2';\n\nimport { colorManipulator } from '../themes';\nimport { GrafanaTheme2 } from '../themes/types';\nimport { reduceField } from '../transformations/fieldReducer';\nimport { FALLBACK_COLOR, Field, FieldColorModeId, Threshold } from '../types';\nimport { RegistryItem } from '../utils';\nimport { Registry } from '../utils/Registry';\n\nimport { getScaleCalculator, ColorScaleValue } from './scale';\nimport { fallBackThreshold } from './thresholds';\n\n/** @beta */\nexport type FieldValueColorCalculator = (value: number, percent: number, Threshold?: Threshold) => string;\n\n/** @beta */\nexport interface FieldColorMode extends RegistryItem {\n  getCalculator: (field: Field, theme: GrafanaTheme2) => FieldValueColorCalculator;\n  getColors?: (theme: GrafanaTheme2) => string[];\n  isContinuous?: boolean;\n  isByValue?: boolean;\n  useSeriesName?: boolean;\n}\n\n/** @internal */\nexport const fieldColorModeRegistry = new Registry<FieldColorMode>(() => {\n  return [\n    {\n      id: FieldColorModeId.Fixed,\n      name: 'Single color',\n      description: 'Set a specific color',\n      getCalculator: getFixedColor,\n    },\n    {\n      id: FieldColorModeId.Shades,\n      name: 'Shades of a color',\n      description: 'Select shades of a specific color',\n      getCalculator: getShadedColor,\n    },\n    {\n      id: FieldColorModeId.Thresholds,\n      name: 'From thresholds',\n      isByValue: true,\n      description: 'Derive colors from thresholds',\n      getCalculator: (_field, theme) => {\n        return (_value, _percent, threshold) => {\n          const thresholdSafe = threshold ?? fallBackThreshold;\n          return theme.visualization.getColorByName(thresholdSafe.color);\n        };\n      },\n    },\n    new FieldColorSchemeMode({\n      id: FieldColorModeId.PaletteClassic,\n      name: 'Classic palette',\n      isContinuous: false,\n      isByValue: false,\n      getColors: (theme: GrafanaTheme2) => {\n        return theme.visualization.palette;\n      },\n    }),\n    new FieldColorSchemeMode({\n      id: FieldColorModeId.PaletteClassicByName,\n      name: 'Classic palette (by series name)',\n      isContinuous: false,\n      isByValue: false,\n      useSeriesName: true,\n      getColors: (theme: GrafanaTheme2) => {\n        return theme.visualization.palette.filter(\n          (color) =>\n            colorManipulator.getContrastRatio(\n              theme.visualization.getColorByName(color),\n              theme.colors.background.primary\n            ) >= theme.colors.contrastThreshold\n        );\n      },\n    }),\n    new FieldColorSchemeMode({\n      id: FieldColorModeId.ContinuousGrYlRd,\n      name: 'Green-Yellow-Red',\n      isContinuous: true,\n      isByValue: true,\n      getColors: (theme: GrafanaTheme2) => ['green', 'yellow', 'red'],\n    }),\n    new FieldColorSchemeMode({\n      id: FieldColorModeId.ContinuousRdYlGr,\n      name: 'Red-Yellow-Green',\n      isContinuous: true,\n      isByValue: true,\n      getColors: (theme: GrafanaTheme2) => ['red', 'yellow', 'green'],\n    }),\n    new FieldColorSchemeMode({\n      id: FieldColorModeId.ContinuousBlYlRd,\n      name: 'Blue-Yellow-Red',\n      isContinuous: true,\n      isByValue: true,\n      getColors: (theme: GrafanaTheme2) => ['dark-blue', 'super-light-yellow', 'dark-red'],\n    }),\n    new FieldColorSchemeMode({\n      id: FieldColorModeId.ContinuousYlRd,\n      name: 'Yellow-Red',\n      isContinuous: true,\n      isByValue: true,\n      getColors: (theme: GrafanaTheme2) => ['super-light-yellow', 'dark-red'],\n    }),\n    new FieldColorSchemeMode({\n      id: FieldColorModeId.ContinuousBlPu,\n      name: 'Blue-Purple',\n      isContinuous: true,\n      isByValue: true,\n      getColors: (theme: GrafanaTheme2) => ['blue', 'purple'],\n    }),\n    new FieldColorSchemeMode({\n      id: FieldColorModeId.ContinuousYlBl,\n      name: 'Yellow-Blue',\n      isContinuous: true,\n      isByValue: true,\n      getColors: (theme: GrafanaTheme2) => ['super-light-yellow', 'dark-blue'],\n    }),\n    new FieldColorSchemeMode({\n      id: FieldColorModeId.ContinuousBlues,\n      name: 'Blues',\n      isContinuous: true,\n      isByValue: true,\n      getColors: (theme: GrafanaTheme2) => ['panel-bg', 'dark-blue'],\n    }),\n    new FieldColorSchemeMode({\n      id: FieldColorModeId.ContinuousReds,\n      name: 'Reds',\n      isContinuous: true,\n      isByValue: true,\n      getColors: (theme: GrafanaTheme2) => ['panel-bg', 'dark-red'],\n    }),\n    new FieldColorSchemeMode({\n      id: FieldColorModeId.ContinuousGreens,\n      name: 'Greens',\n      isContinuous: true,\n      isByValue: true,\n      getColors: (theme: GrafanaTheme2) => ['panel-bg', 'dark-green'],\n    }),\n    new FieldColorSchemeMode({\n      id: FieldColorModeId.ContinuousPurples,\n      name: 'Purples',\n      isContinuous: true,\n      isByValue: true,\n      getColors: (theme: GrafanaTheme2) => ['panel-bg', 'dark-purple'],\n    }),\n  ];\n});\n\ninterface FieldColorSchemeModeOptions {\n  id: FieldColorModeId;\n  name: string;\n  description?: string;\n  getColors: (theme: GrafanaTheme2) => string[];\n  isContinuous: boolean;\n  isByValue: boolean;\n  useSeriesName?: boolean;\n}\n\nexport class FieldColorSchemeMode implements FieldColorMode {\n  id: FieldColorModeId;\n  name: string;\n  description?: string;\n  isContinuous: boolean;\n  isByValue: boolean;\n  useSeriesName?: boolean;\n  colorCache?: string[];\n  colorCacheTheme?: GrafanaTheme2;\n  interpolator?: (value: number) => string;\n  getNamedColors?: (theme: GrafanaTheme2) => string[];\n\n  constructor(options: FieldColorSchemeModeOptions) {\n    this.id = options.id;\n    this.name = options.name;\n    this.description = options.description;\n    this.getNamedColors = options.getColors;\n    this.isContinuous = options.isContinuous;\n    this.isByValue = options.isByValue;\n    this.useSeriesName = options.useSeriesName;\n  }\n\n  getColors(theme: GrafanaTheme2): string[] {\n    if (!this.getNamedColors) {\n      return [];\n    }\n\n    if (this.colorCache && this.colorCacheTheme === theme) {\n      return this.colorCache;\n    }\n\n    this.colorCache = this.getNamedColors(theme).map(theme.visualization.getColorByName);\n    this.colorCacheTheme = theme;\n\n    return this.colorCache;\n  }\n\n  private getInterpolator() {\n    if (!this.interpolator) {\n      this.interpolator = interpolateRgbBasis(this.colorCache!);\n    }\n\n    return this.interpolator;\n  }\n\n  getCalculator(field: Field, theme: GrafanaTheme2) {\n    const colors = this.getColors(theme);\n\n    if (this.isByValue) {\n      if (this.isContinuous) {\n        return (_: number, percent: number, _threshold?: Threshold) => {\n          return this.getInterpolator()(percent);\n        };\n      } else {\n        return (_: number, percent: number, _threshold?: Threshold) => {\n          return colors[percent * (colors.length - 1)];\n        };\n      }\n    } else if (this.useSeriesName) {\n      return (_: number, _percent: number, _threshold?: Threshold) => {\n        return colors[Math.abs(stringHash(field.name)) % colors.length];\n      };\n    } else {\n      return (_: number, _percent: number, _threshold?: Threshold) => {\n        const seriesIndex = field.state?.seriesIndex ?? 0;\n        return colors[seriesIndex % colors.length];\n      };\n    }\n  }\n}\n\n/** @beta */\nexport function getFieldColorModeForField(field: Field): FieldColorMode {\n  return fieldColorModeRegistry.get(field.config.color?.mode ?? FieldColorModeId.Thresholds);\n}\n\n/** @beta */\nexport function getFieldColorMode(mode?: FieldColorModeId | string): FieldColorMode {\n  return fieldColorModeRegistry.get(mode ?? FieldColorModeId.Thresholds);\n}\n\n/**\n * @alpha\n * Function that will return a series color for any given color mode. If the color mode is a by value color\n * mode it will use the field.config.color.seriesBy property to figure out which value to use\n */\nexport function getFieldSeriesColor(field: Field, theme: GrafanaTheme2): ColorScaleValue {\n  const mode = getFieldColorModeForField(field);\n\n  if (!mode.isByValue) {\n    return {\n      color: mode.getCalculator(field, theme)(0, 0),\n      threshold: fallBackThreshold,\n      percent: 1,\n    };\n  }\n\n  const scale = getScaleCalculator(field, theme);\n  const stat = field.config.color?.seriesBy ?? 'last';\n  const calcs = reduceField({ field, reducers: [stat] });\n  const value = calcs[stat] ?? 0;\n\n  return scale(value);\n}\n\nfunction getFixedColor(field: Field, theme: GrafanaTheme2) {\n  return () => {\n    return theme.visualization.getColorByName(field.config.color?.fixedColor ?? FALLBACK_COLOR);\n  };\n}\n\nfunction getShadedColor(field: Field, theme: GrafanaTheme2) {\n  return () => {\n    const baseColorString: string = theme.visualization.getColorByName(\n      field.config.color?.fixedColor ?? FALLBACK_COLOR\n    );\n\n    const colors: string[] = [\n      baseColorString, // start with base color\n    ];\n\n    const shadesCount = 6;\n    const maxHueSpin = 10; // hue spin, max is 360\n    const maxDarken = 35; // max 100%\n    const maxBrighten = 35; // max 100%\n\n    for (let i = 1; i < shadesCount; i++) {\n      // push alternating darker and brighter shades\n      colors.push(\n        tinycolor(baseColorString)\n          .spin((i / shadesCount) * maxHueSpin)\n          .brighten((i / shadesCount) * maxDarken)\n          .toHexString()\n      );\n      colors.push(\n        tinycolor(baseColorString)\n          .spin(-(i / shadesCount) * maxHueSpin)\n          .darken((i / shadesCount) * maxBrighten)\n          .toHexString()\n      );\n    }\n\n    const seriesIndex = field.state?.seriesIndex ?? 0;\n    return colors[seriesIndex % colors.length];\n  };\n}\n"],"names":["colorManipulator.getContrastRatio"],"mappings":"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"}