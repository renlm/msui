{"version":3,"file":"fieldState.js","sources":["../../../src/field/fieldState.ts"],"sourcesContent":["import { getFieldMatcher } from '../transformations';\nimport {\n  DataFrame,\n  Field,\n  TIME_SERIES_VALUE_FIELD_NAME,\n  FieldType,\n  TIME_SERIES_TIME_FIELD_NAME,\n  FieldConfigSource,\n} from '../types';\nimport { formatLabels } from '../utils/labels';\n\n/**\n * Get an appropriate display title\n */\nexport function getFrameDisplayName(frame: DataFrame, index?: number) {\n  if (frame.name) {\n    return frame.name;\n  }\n\n  const valueFieldNames: string[] = [];\n  for (const field of frame.fields) {\n    if (field.type === FieldType.time) {\n      continue;\n    }\n\n    // No point in doing more\n    if (valueFieldNames.length > 1) {\n      break;\n    }\n\n    valueFieldNames.push(getFieldDisplayName(field, frame));\n  }\n\n  // If the frame has a single value field then use the name of that field as the frame name\n  if (valueFieldNames.length === 1) {\n    return valueFieldNames[0];\n  }\n\n  // list all the\n  if (index === undefined && frame.fields.length > 0) {\n    return frame.fields\n      .filter((f) => f.type !== FieldType.time)\n      .map((f) => getFieldDisplayName(f, frame))\n      .join(', ');\n  }\n\n  if (frame.refId) {\n    return `Series (${frame.refId})`;\n  }\n\n  return `Series (${index})`;\n}\n\nexport function cacheFieldDisplayNames(frames: DataFrame[]) {\n  frames.forEach((frame) => {\n    frame.fields.forEach((field) => {\n      getFieldDisplayName(field, frame, frames);\n    });\n  });\n}\n\n/**\n *\n * moves each field's config.custom.hideFrom to field.state.hideFrom\n * and mutates orgiginal field.config.custom.hideFrom to one with explicit overrides only, (without the ad-hoc stateful __system override from legend toggle)\n */\nexport function decoupleHideFromState(frames: DataFrame[], fieldConfig: FieldConfigSource<any>) {\n  frames.forEach((frame) => {\n    frame.fields.forEach((field) => {\n      const hideFrom = {\n        legend: false,\n        tooltip: false,\n        viz: false,\n        ...fieldConfig.defaults.custom?.hideFrom,\n      };\n\n      // with ad hoc __system override applied\n      const hideFromState = field.config.custom?.hideFrom;\n\n      fieldConfig.overrides.forEach((o) => {\n        if ('__systemRef' in o) {\n          return;\n        }\n\n        const m = getFieldMatcher(o.matcher);\n\n        if (m(field, frame, frames)) {\n          for (const p of o.properties) {\n            if (p.id === 'custom.hideFrom') {\n              Object.assign(hideFrom, p.value);\n            }\n          }\n        }\n      });\n\n      field.state = {\n        ...field.state,\n        hideFrom: {\n          ...hideFromState,\n        },\n      };\n\n      // original with perm overrides\n      field.config.custom.hideFrom = hideFrom;\n    });\n  });\n}\n\nexport function getFieldDisplayName(field: Field, frame?: DataFrame, allFrames?: DataFrame[]): string {\n  const existingTitle = field.state?.displayName;\n  const multipleFrames = Boolean(allFrames && allFrames.length > 1);\n\n  if (existingTitle && multipleFrames === field.state?.multipleFrames) {\n    return existingTitle;\n  }\n\n  const displayName = calculateFieldDisplayName(field, frame, allFrames);\n  field.state = field.state || {};\n  field.state.displayName = displayName;\n  field.state.multipleFrames = multipleFrames;\n\n  return displayName;\n}\n\n/**\n * Get an appropriate display name. If the 'displayName' field config is set, use that.\n */\nexport function calculateFieldDisplayName(field: Field, frame?: DataFrame, allFrames?: DataFrame[]): string {\n  const hasConfigTitle = field.config?.displayName && field.config?.displayName.length;\n  const isComparisonSeries = Boolean(frame?.meta?.timeCompare?.isTimeShiftQuery);\n  let displayName = hasConfigTitle ? field.config!.displayName! : field.name;\n\n  if (hasConfigTitle) {\n    return isComparisonSeries ? `${displayName} (comparison)` : displayName;\n  }\n\n  if (frame && field.config?.displayNameFromDS) {\n    return isComparisonSeries ? `${field.config.displayNameFromDS} (comparison)` : field.config.displayNameFromDS;\n  }\n\n  // This is an ugly exception for time field\n  // For time series we should normally treat time field with same name\n  // But in case it has a join source we should handle it as normal field\n  if (field.type === FieldType.time && !field.labels) {\n    return displayName ?? TIME_SERIES_TIME_FIELD_NAME;\n  }\n\n  let parts: string[] = [];\n  let frameNamesDiffer = false;\n\n  if (allFrames && allFrames.length > 1) {\n    for (let i = 1; i < allFrames.length; i++) {\n      const frame = allFrames[i];\n      if (frame.name !== allFrames[i - 1].name) {\n        frameNamesDiffer = true;\n        break;\n      }\n    }\n  }\n\n  let frameNameAdded = false;\n  let labelsAdded = false;\n\n  if (frameNamesDiffer && frame?.name) {\n    parts.push(frame.name);\n    frameNameAdded = true;\n  }\n\n  if (field.name && field.name !== TIME_SERIES_VALUE_FIELD_NAME) {\n    parts.push(field.name);\n  }\n\n  if (field.labels && frame) {\n    let singleLabelName = getSingleLabelName(allFrames ?? [frame]);\n\n    if (!singleLabelName) {\n      let allLabels = formatLabels(field.labels);\n      if (allLabels) {\n        parts.push(allLabels);\n        labelsAdded = true;\n      }\n    } else if (field.labels[singleLabelName]) {\n      parts.push(field.labels[singleLabelName]);\n      labelsAdded = true;\n    }\n  }\n\n  // if we have not added frame name and no labels, and field name = Value, we should add frame name\n  if (frame && !frameNameAdded && !labelsAdded && field.name === TIME_SERIES_VALUE_FIELD_NAME) {\n    if (frame.name && frame.name.length > 0) {\n      parts.push(frame.name);\n      frameNameAdded = true;\n    }\n  }\n\n  if (parts.length) {\n    displayName = parts.join(' ');\n  } else if (field.name) {\n    displayName = field.name;\n  } else {\n    displayName = TIME_SERIES_VALUE_FIELD_NAME;\n  }\n\n  // Ensure unique field name\n  if (displayName === field.name) {\n    displayName = getUniqueFieldName(field, frame);\n  }\n\n  if (isComparisonSeries) {\n    displayName = `${displayName} (comparison)`;\n  }\n  return displayName;\n}\n\nexport function getUniqueFieldName(field: Field, frame?: DataFrame) {\n  let dupeCount = 0;\n  let foundSelf = false;\n\n  if (frame) {\n    for (let i = 0; i < frame.fields.length; i++) {\n      const otherField = frame.fields[i];\n\n      if (field === otherField) {\n        foundSelf = true;\n\n        if (dupeCount > 0) {\n          dupeCount++;\n          break;\n        }\n      } else if (field.name === otherField.name) {\n        dupeCount++;\n\n        if (foundSelf) {\n          break;\n        }\n      }\n    }\n  }\n\n  if (dupeCount) {\n    return `${field.name} ${dupeCount}`;\n  }\n\n  return field.name;\n}\n\n/**\n * Checks all data frames and return name of label if there is only one label name in all frames\n */\nfunction getSingleLabelName(frames: DataFrame[]): string | null {\n  let singleName: string | null = null;\n\n  for (let i = 0; i < frames.length; i++) {\n    const frame = frames[i];\n\n    for (const field of frame.fields) {\n      if (!field.labels) {\n        continue;\n      }\n\n      // yes this should be in!\n      for (const labelKey in field.labels) {\n        if (singleName === null) {\n          singleName = labelKey;\n        } else if (labelKey !== singleName) {\n          return null;\n        }\n      }\n    }\n  }\n\n  return singleName;\n}\n"],"names":["frame"],"mappings":"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"}