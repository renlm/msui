{"version":3,"file":"sanitize.js","sources":["../../../src/text/sanitize.ts"],"sourcesContent":["import { sanitizeUrl as braintreeSanitizeUrl } from '@braintree/sanitize-url';\nimport DOMPurify from 'dompurify';\nimport * as xss from 'xss';\n\nconst XSSWL = Object.keys(xss.whiteList).reduce<xss.IWhiteList>((acc, element) => {\n  acc[element] = xss.whiteList[element]?.concat(['class', 'style']);\n  return acc;\n}, {});\n\nconst sanitizeTextPanelWhitelist = new xss.FilterXSS({\n  whiteList: XSSWL,\n  css: {\n    whiteList: {\n      ...xss.getDefaultCSSWhiteList(),\n      'flex-direction': true,\n      'flex-wrap': true,\n      'flex-basis': true,\n      'flex-grow': true,\n      'flex-shrink': true,\n      'flex-flow': true,\n      gap: true,\n      order: true,\n      'justify-content': true,\n      'justify-items': true,\n      'justify-self': true,\n      'align-items': true,\n      'align-content': true,\n      'align-self': true,\n    },\n  },\n});\n\n/**\n * Return a sanitized string that is going to be rendered in the browser to prevent XSS attacks.\n * Note that sanitized tags will be removed, such as \"<script>\".\n * We don't allow form or input elements.\n */\nexport function sanitize(unsanitizedString: string): string {\n  try {\n    return DOMPurify.sanitize(unsanitizedString, {\n      USE_PROFILES: { html: true },\n      FORBID_TAGS: ['form', 'input'],\n    });\n  } catch (error) {\n    console.error('String could not be sanitized', unsanitizedString);\n    return escapeHtml(unsanitizedString);\n  }\n}\n\nexport function sanitizeTrustedTypesRSS(unsanitizedString: string): TrustedHTML {\n  return DOMPurify.sanitize(unsanitizedString, {\n    RETURN_TRUSTED_TYPE: true,\n    ADD_ATTR: ['xmlns:atom', 'version', 'property', 'content'],\n    ADD_TAGS: ['rss', 'meta', 'channel', 'title', 'link', 'description', 'atom:link', 'item', 'pubDate', 'guid'],\n    PARSER_MEDIA_TYPE: 'application/xhtml+xml',\n  });\n}\n\nexport function sanitizeTrustedTypes(unsanitizedString: string): TrustedHTML {\n  return DOMPurify.sanitize(unsanitizedString, { RETURN_TRUSTED_TYPE: true });\n}\n\n/**\n * Returns string safe from XSS attacks to be used in the Text panel plugin.\n *\n * Even though we allow the style-attribute, there's still default filtering applied to it\n * Info: https://github.com/leizongmin/js-xss#customize-css-filter\n * Whitelist: https://github.com/leizongmin/js-css-filter/blob/master/lib/default.js\n */\nexport function sanitizeTextPanelContent(unsanitizedString: string): string {\n  try {\n    return sanitizeTextPanelWhitelist.process(unsanitizedString);\n  } catch (error) {\n    console.error('String could not be sanitized', unsanitizedString);\n    return 'Text string could not be sanitized';\n  }\n}\n\n// Returns sanitized SVG, free from XSS attacks to be used when rendering SVG content.\nexport function sanitizeSVGContent(unsanitizedString: string): string {\n  return DOMPurify.sanitize(unsanitizedString, { USE_PROFILES: { svg: true, svgFilters: true } });\n}\n\n// Return a sanitized URL, free from XSS attacks, such as javascript:alert(1)\nexport function sanitizeUrl(url: string): string {\n  return braintreeSanitizeUrl(url);\n}\n\n// Returns true if the string contains ANSI color codes.\nexport function hasAnsiCodes(input: string): boolean {\n  return /\\u001b\\[\\d{1,2}m/.test(input);\n}\n\n// Returns a string with HTML entities escaped.\nexport function escapeHtml(str: string): string {\n  return String(str)\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/'/g, '&#39;')\n    .replace(/\"/g, '&quot;');\n}\n"],"names":["braintreeSanitizeUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAIA,MAAM,KAAA,GAAQ,OAAO,IAAK,CAAA,GAAA,CAAI,SAAS,CAAE,CAAA,MAAA,CAAuB,CAAC,GAAA,EAAK,OAAY,KAAA;AAJlF,EAAA,IAAA,EAAA,CAAA;AAKE,EAAI,GAAA,CAAA,OAAO,CAAI,GAAA,CAAA,EAAA,GAAA,GAAA,CAAI,SAAU,CAAA,OAAO,MAArB,IAAwB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAA,CAAO,CAAC,OAAA,EAAS,OAAO,CAAA,CAAA,CAAA;AAC/D,EAAO,OAAA,GAAA,CAAA;AACT,CAAA,EAAG,EAAE,CAAA,CAAA;AAEL,MAAM,0BAAA,GAA6B,IAAI,GAAA,CAAI,SAAU,CAAA;AAAA,EACnD,SAAW,EAAA,KAAA;AAAA,EACX,GAAK,EAAA;AAAA,IACH,SAAW,EAAA,aAAA,CAAA,cAAA,CAAA,EAAA,EACN,GAAI,CAAA,sBAAA,EADE,CAAA,EAAA;AAAA,MAET,gBAAkB,EAAA,IAAA;AAAA,MAClB,WAAa,EAAA,IAAA;AAAA,MACb,YAAc,EAAA,IAAA;AAAA,MACd,WAAa,EAAA,IAAA;AAAA,MACb,aAAe,EAAA,IAAA;AAAA,MACf,WAAa,EAAA,IAAA;AAAA,MACb,GAAK,EAAA,IAAA;AAAA,MACL,KAAO,EAAA,IAAA;AAAA,MACP,iBAAmB,EAAA,IAAA;AAAA,MACnB,eAAiB,EAAA,IAAA;AAAA,MACjB,cAAgB,EAAA,IAAA;AAAA,MAChB,aAAe,EAAA,IAAA;AAAA,MACf,eAAiB,EAAA,IAAA;AAAA,MACjB,YAAc,EAAA,IAAA;AAAA,KAChB,CAAA;AAAA,GACF;AACF,CAAC,CAAA,CAAA;AAOM,SAAS,SAAS,iBAAmC,EAAA;AAC1D,EAAI,IAAA;AACF,IAAO,OAAA,SAAA,CAAU,SAAS,iBAAmB,EAAA;AAAA,MAC3C,YAAA,EAAc,EAAE,IAAA,EAAM,IAAK,EAAA;AAAA,MAC3B,WAAA,EAAa,CAAC,MAAA,EAAQ,OAAO,CAAA;AAAA,KAC9B,CAAA,CAAA;AAAA,WACM,KAAO,EAAA;AACd,IAAQ,OAAA,CAAA,KAAA,CAAM,iCAAiC,iBAAiB,CAAA,CAAA;AAChE,IAAA,OAAO,WAAW,iBAAiB,CAAA,CAAA;AAAA,GACrC;AACF,CAAA;AAEO,SAAS,wBAAwB,iBAAwC,EAAA;AAC9E,EAAO,OAAA,SAAA,CAAU,SAAS,iBAAmB,EAAA;AAAA,IAC3C,mBAAqB,EAAA,IAAA;AAAA,IACrB,QAAU,EAAA,CAAC,YAAc,EAAA,SAAA,EAAW,YAAY,SAAS,CAAA;AAAA,IACzD,QAAA,EAAU,CAAC,KAAA,EAAO,MAAQ,EAAA,SAAA,EAAW,OAAS,EAAA,MAAA,EAAQ,aAAe,EAAA,WAAA,EAAa,MAAQ,EAAA,SAAA,EAAW,MAAM,CAAA;AAAA,IAC3G,iBAAmB,EAAA,uBAAA;AAAA,GACpB,CAAA,CAAA;AACH,CAAA;AAEO,SAAS,qBAAqB,iBAAwC,EAAA;AAC3E,EAAA,OAAO,UAAU,QAAS,CAAA,iBAAA,EAAmB,EAAE,mBAAA,EAAqB,MAAM,CAAA,CAAA;AAC5E,CAAA;AASO,SAAS,yBAAyB,iBAAmC,EAAA;AAC1E,EAAI,IAAA;AACF,IAAO,OAAA,0BAAA,CAA2B,QAAQ,iBAAiB,CAAA,CAAA;AAAA,WACpD,KAAO,EAAA;AACd,IAAQ,OAAA,CAAA,KAAA,CAAM,iCAAiC,iBAAiB,CAAA,CAAA;AAChE,IAAO,OAAA,oCAAA,CAAA;AAAA,GACT;AACF,CAAA;AAGO,SAAS,mBAAmB,iBAAmC,EAAA;AACpE,EAAO,OAAA,SAAA,CAAU,QAAS,CAAA,iBAAA,EAAmB,EAAE,YAAA,EAAc,EAAE,GAAA,EAAK,IAAM,EAAA,UAAA,EAAY,IAAK,EAAA,EAAG,CAAA,CAAA;AAChG,CAAA;AAGO,SAAS,YAAY,GAAqB,EAAA;AAC/C,EAAA,OAAOA,cAAqB,GAAG,CAAA,CAAA;AACjC,CAAA;AAGO,SAAS,aAAa,KAAwB,EAAA;AACnD,EAAO,OAAA,kBAAA,CAAmB,KAAK,KAAK,CAAA,CAAA;AACtC,CAAA;AAGO,SAAS,WAAW,GAAqB,EAAA;AAC9C,EAAO,OAAA,MAAA,CAAO,GAAG,CACd,CAAA,OAAA,CAAQ,MAAM,OAAO,CAAA,CACrB,QAAQ,IAAM,EAAA,MAAM,EACpB,OAAQ,CAAA,IAAA,EAAM,MAAM,CACpB,CAAA,OAAA,CAAQ,MAAM,OAAO,CAAA,CACrB,OAAQ,CAAA,IAAA,EAAM,QAAQ,CAAA,CAAA;AAC3B;;;;"}