{"version":3,"file":"text.js","sources":["../../../src/text/text.ts"],"sourcesContent":["export interface TextMatch {\n  text: string;\n  start: number;\n  length: number;\n  end: number;\n}\n\n/**\n * Adapt findMatchesInText for react-highlight-words findChunks handler.\n * See https://github.com/bvaughn/react-highlight-words#props\n */\nexport function findHighlightChunksInText({\n  searchWords,\n  textToHighlight,\n}: {\n  searchWords: Array<string | RegExp>;\n  textToHighlight: string;\n}) {\n  const chunks: TextMatch[] = [];\n  for (const term of searchWords) {\n    if (typeof term === 'string') {\n      chunks.push(...findMatchesInText(textToHighlight, term));\n    }\n  }\n  return chunks;\n}\n\nconst cleanNeedle = (needle: string): string => {\n  return needle.replace(/[[{(][\\w,.\\/:;<=>?:*+]+$/, '');\n};\n\n/**\n * Returns a list of substring regexp matches.\n */\nexport function findMatchesInText(haystack: string, needle: string): TextMatch[] {\n  // Empty search can send re.exec() into infinite loop, exit early\n  if (!haystack || !needle) {\n    return [];\n  }\n\n  const matches: TextMatch[] = [];\n  const { cleaned, flags } = parseFlags(cleanNeedle(needle));\n  let regexp: RegExp;\n\n  try {\n    regexp = new RegExp(`(?:${cleaned})`, flags);\n  } catch (error) {\n    return matches;\n  }\n\n  haystack.replace(regexp, (substring, ...rest) => {\n    if (substring) {\n      const offset = rest[rest.length - 2];\n      matches.push({\n        text: substring,\n        start: offset,\n        length: substring.length,\n        end: offset + substring.length,\n      });\n    }\n    return '';\n  });\n\n  return matches;\n}\n\nconst CLEAR_FLAG = '-';\nconst FLAGS_REGEXP = /\\(\\?([ims-]+)\\)/g;\n\n/**\n * Converts any mode modifiers in the text to the Javascript equivalent flag\n */\nexport function parseFlags(text: string): { cleaned: string; flags: string } {\n  const flags: Set<string> = new Set(['g']);\n\n  const cleaned = text.replace(FLAGS_REGEXP, (str, group) => {\n    const clearAll = group.startsWith(CLEAR_FLAG);\n\n    for (let i = 0; i < group.length; ++i) {\n      const flag = group.charAt(i);\n      if (clearAll || group.charAt(i - 1) === CLEAR_FLAG) {\n        flags.delete(flag);\n      } else if (flag !== CLEAR_FLAG) {\n        flags.add(flag);\n      }\n    }\n    return ''; // Remove flag from text\n  });\n\n  return {\n    cleaned: cleaned,\n    flags: Array.from(flags).join(''),\n  };\n}\n"],"names":[],"mappings":"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"}