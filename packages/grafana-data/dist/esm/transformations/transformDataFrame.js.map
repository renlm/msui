{"version":3,"file":"transformDataFrame.js","sources":["../../../src/transformations/transformDataFrame.ts"],"sourcesContent":["import { MonoTypeOperatorFunction, Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\nimport {\n  DataFrame,\n  DataTransformContext,\n  DataTransformerConfig,\n  FrameMatcher,\n  CustomTransformOperator,\n} from '../types';\n\nimport { getFrameMatchers } from './matchers';\nimport { standardTransformersRegistry, TransformerRegistryItem } from './standardTransformersRegistry';\n\nconst getOperator =\n  (config: DataTransformerConfig, ctx: DataTransformContext): MonoTypeOperatorFunction<DataFrame[]> =>\n  (source) => {\n    const info = standardTransformersRegistry.get(config.id);\n\n    if (!info) {\n      return source;\n    }\n\n    const defaultOptions = info.transformation.defaultOptions ?? {};\n    const options = { ...defaultOptions, ...config.options };\n\n    const matcher = config.filter?.options ? getFrameMatchers(config.filter) : undefined;\n    return source.pipe(\n      mergeMap((before) =>\n        of(filterInput(before, matcher)).pipe(\n          info.transformation.operator(options, ctx),\n          postProcessTransform(before, info, matcher)\n        )\n      )\n    );\n  };\n\nfunction filterInput(data: DataFrame[], matcher?: FrameMatcher) {\n  if (matcher) {\n    return data.filter((v) => matcher(v));\n  }\n  return data;\n}\n\nconst postProcessTransform =\n  (\n    before: DataFrame[],\n    info: TransformerRegistryItem<any>,\n    matcher?: FrameMatcher\n  ): MonoTypeOperatorFunction<DataFrame[]> =>\n  (source) =>\n    source.pipe(\n      map((after) => {\n        if (after === before) {\n          return after;\n        }\n\n        // Add back the filtered out frames\n        if (matcher) {\n          // keep the frame order the same\n          let insert = 0;\n          const append = before.filter((v, idx) => {\n            const keep = !matcher(v);\n            if (keep && !insert) {\n              insert = idx;\n            }\n            return keep;\n          });\n          if (append.length) {\n            after.splice(insert, 0, ...append);\n          }\n        }\n        return after;\n      })\n    );\n\n/**\n * Apply configured transformations to the input data\n */\nexport function transformDataFrame(\n  options: Array<DataTransformerConfig | CustomTransformOperator>,\n  data: DataFrame[],\n  ctx?: DataTransformContext\n): Observable<DataFrame[]> {\n  const stream = of<DataFrame[]>(data);\n\n  if (!options.length) {\n    return stream;\n  }\n\n  const operators: Array<MonoTypeOperatorFunction<DataFrame[]>> = [];\n  const context = ctx ?? { interpolate: (str) => str };\n\n  for (let index = 0; index < options.length; index++) {\n    const config = options[index];\n\n    if (isCustomTransformation(config)) {\n      operators.push(config(context));\n    } else {\n      if (config.disabled) {\n        continue;\n      }\n      operators.push(getOperator(config, context));\n    }\n  }\n\n  // @ts-ignore TypeScript has a hard time understanding this construct\n  return stream.pipe.apply(stream, operators);\n}\n\nfunction isCustomTransformation(t: DataTransformerConfig | CustomTransformOperator): t is CustomTransformOperator {\n  return typeof t === 'function';\n}\n"],"names":[],"mappings":"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"}