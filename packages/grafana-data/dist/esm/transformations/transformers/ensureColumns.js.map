{"version":3,"file":"ensureColumns.js","sources":["../../../../src/transformations/transformers/ensureColumns.ts"],"sourcesContent":["import { map } from 'rxjs/operators';\n\nimport { getTimeField } from '../../dataframe/processDataFrame';\nimport { DataFrame } from '../../types/dataFrame';\nimport { SynchronousDataTransformerInfo } from '../../types/transformations';\n\nimport { DataTransformerID } from './ids';\nimport { joinByFieldTransformer } from './joinByField';\n\nexport const ensureColumnsTransformer: SynchronousDataTransformerInfo = {\n  id: DataTransformerID.ensureColumns,\n  name: 'Ensure Columns Transformer',\n  description: 'Will check if current data frames is series or columns. If in series it will convert to columns.',\n\n  operator: (options, ctx) => (source) =>\n    source.pipe(map((data) => ensureColumnsTransformer.transformer(options, ctx)(data))),\n\n  transformer: (_options, ctx) => (frames: DataFrame[]) => {\n    // Assume timeseries should first be joined by time\n    const timeFieldName = findConsistentTimeFieldName(frames);\n\n    if (frames.length > 1 && timeFieldName) {\n      return joinByFieldTransformer.transformer(\n        {\n          byField: timeFieldName,\n        },\n        ctx\n      )(frames);\n    }\n    return frames;\n  },\n};\n\n/**\n * Find the name for the time field used in all frames (if one exists)\n */\nfunction findConsistentTimeFieldName(data: DataFrame[]): string | undefined {\n  let name: string | undefined = undefined;\n  for (const frame of data) {\n    const { timeField } = getTimeField(frame);\n    if (!timeField) {\n      return undefined; // Not timeseries\n    }\n    if (!name) {\n      name = timeField.name;\n    } else if (name !== timeField.name) {\n      // Second frame has a different time column?!\n      return undefined;\n    }\n  }\n  return name;\n}\n"],"names":[],"mappings":";;;;;AASO,MAAM,wBAA2D,GAAA;AAAA,EACtE,IAAI,iBAAkB,CAAA,aAAA;AAAA,EACtB,IAAM,EAAA,4BAAA;AAAA,EACN,WAAa,EAAA,kGAAA;AAAA,EAEb,UAAU,CAAC,OAAA,EAAS,QAAQ,CAAC,MAAA,KAC3B,OAAO,IAAK,CAAA,GAAA,CAAI,CAAC,IAAA,KAAS,yBAAyB,WAAY,CAAA,OAAA,EAAS,GAAG,CAAE,CAAA,IAAI,CAAC,CAAC,CAAA;AAAA,EAErF,WAAa,EAAA,CAAC,QAAU,EAAA,GAAA,KAAQ,CAAC,MAAwB,KAAA;AAEvD,IAAM,MAAA,aAAA,GAAgB,4BAA4B,MAAM,CAAA,CAAA;AAExD,IAAI,IAAA,MAAA,CAAO,MAAS,GAAA,CAAA,IAAK,aAAe,EAAA;AACtC,MAAA,OAAO,sBAAuB,CAAA,WAAA;AAAA,QAC5B;AAAA,UACE,OAAS,EAAA,aAAA;AAAA,SACX;AAAA,QACA,GAAA;AAAA,QACA,MAAM,CAAA,CAAA;AAAA,KACV;AACA,IAAO,OAAA,MAAA,CAAA;AAAA,GACT;AACF,EAAA;AAKA,SAAS,4BAA4B,IAAuC,EAAA;AAC1E,EAAA,IAAI,IAA2B,GAAA,KAAA,CAAA,CAAA;AAC/B,EAAA,KAAA,MAAW,SAAS,IAAM,EAAA;AACxB,IAAA,MAAM,EAAE,SAAA,EAAc,GAAA,YAAA,CAAa,KAAK,CAAA,CAAA;AACxC,IAAA,IAAI,CAAC,SAAW,EAAA;AACd,MAAO,OAAA,KAAA,CAAA,CAAA;AAAA,KACT;AACA,IAAA,IAAI,CAAC,IAAM,EAAA;AACT,MAAA,IAAA,GAAO,SAAU,CAAA,IAAA,CAAA;AAAA,KACnB,MAAA,IAAW,IAAS,KAAA,SAAA,CAAU,IAAM,EAAA;AAElC,MAAO,OAAA,KAAA,CAAA,CAAA;AAAA,KACT;AAAA,GACF;AACA,EAAO,OAAA,IAAA,CAAA;AACT;;;;"}