{"version":3,"file":"seriesToRows.js","sources":["../../../../src/transformations/transformers/seriesToRows.ts"],"sourcesContent":["import { omit } from 'lodash';\nimport { map } from 'rxjs/operators';\n\nimport { MutableDataFrame, sortDataFrame } from '../../dataframe';\nimport { isTimeSeriesFrames } from '../../dataframe/utils';\nimport { getFrameDisplayName } from '../../field/fieldState';\nimport {\n  Field,\n  FieldType,\n  TIME_SERIES_METRIC_FIELD_NAME,\n  TIME_SERIES_TIME_FIELD_NAME,\n  TIME_SERIES_VALUE_FIELD_NAME,\n} from '../../types/dataFrame';\nimport { DataTransformerInfo } from '../../types/transformations';\n\nimport { DataTransformerID } from './ids';\n\nexport interface SeriesToRowsTransformerOptions {}\n\nexport const seriesToRowsTransformer: DataTransformerInfo<SeriesToRowsTransformerOptions> = {\n  id: DataTransformerID.seriesToRows,\n  name: 'Series to rows',\n  description: 'Combines multiple series into a single serie and appends a column with metric name per value.',\n  defaultOptions: {},\n  operator: (options) => (source) =>\n    source.pipe(\n      map((data) => {\n        if (!Array.isArray(data) || data.length === 0) {\n          return data;\n        }\n\n        data = data.filter((frame) => frame.length > 0);\n        if (!isTimeSeriesFrames(data)) {\n          return data;\n        }\n\n        const timeFieldByIndex: Record<number, number> = {};\n        const targetFields = new Set<string>();\n        const dataFrame = new MutableDataFrame();\n        const metricField: Field = {\n          name: TIME_SERIES_METRIC_FIELD_NAME,\n          values: [],\n          config: {},\n          type: FieldType.string,\n        };\n\n        for (let frameIndex = 0; frameIndex < data.length; frameIndex++) {\n          const frame = data[frameIndex];\n\n          for (let fieldIndex = 0; fieldIndex < frame.fields.length; fieldIndex++) {\n            const field = frame.fields[fieldIndex];\n\n            if (field.type === FieldType.time) {\n              timeFieldByIndex[frameIndex] = fieldIndex;\n\n              if (!targetFields.has(TIME_SERIES_TIME_FIELD_NAME)) {\n                dataFrame.addField(copyFieldStructure(field, TIME_SERIES_TIME_FIELD_NAME));\n                dataFrame.addField(metricField);\n                targetFields.add(TIME_SERIES_TIME_FIELD_NAME);\n              }\n              continue;\n            }\n\n            if (!targetFields.has(TIME_SERIES_VALUE_FIELD_NAME)) {\n              dataFrame.addField(copyFieldStructure(field, TIME_SERIES_VALUE_FIELD_NAME));\n              targetFields.add(TIME_SERIES_VALUE_FIELD_NAME);\n            }\n          }\n        }\n\n        for (let frameIndex = 0; frameIndex < data.length; frameIndex++) {\n          const frame = data[frameIndex];\n\n          for (let valueIndex = 0; valueIndex < frame.length; valueIndex++) {\n            const timeFieldIndex = timeFieldByIndex[frameIndex];\n            const valueFieldIndex = timeFieldIndex === 0 ? 1 : 0;\n\n            dataFrame.add({\n              [TIME_SERIES_TIME_FIELD_NAME]: frame.fields[timeFieldIndex].values[valueIndex],\n              [TIME_SERIES_METRIC_FIELD_NAME]: getFrameDisplayName(frame),\n              [TIME_SERIES_VALUE_FIELD_NAME]: frame.fields[valueFieldIndex].values[valueIndex],\n            });\n          }\n        }\n\n        return [sortDataFrame(dataFrame, 0, true)];\n      })\n    ),\n};\n\nconst copyFieldStructure = (field: Field, name: string): Field => {\n  return {\n    ...omit(field, ['values', 'state', 'labels', 'config', 'name']),\n    name: name,\n    values: [],\n    config: {\n      ...omit(field.config, ['displayName', 'displayNameFromDS']),\n    },\n  };\n};\n"],"names":[],"mappings":"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"}