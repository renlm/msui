{"version":3,"file":"renameByRegex.js","sources":["../../../../src/transformations/transformers/renameByRegex.ts"],"sourcesContent":["import { map } from 'rxjs/operators';\n\nimport { getFieldDisplayName } from '../../field/fieldState';\nimport { stringToJsRegex } from '../../text/string';\nimport { DataFrame } from '../../types/dataFrame';\nimport { DataTransformerInfo } from '../../types/transformations';\n\nimport { DataTransformerID } from './ids';\n\n/**\n * Options for renameByRegexTransformer\n *\n * @public\n */\nexport interface RenameByRegexTransformerOptions {\n  regex: string;\n  renamePattern: string;\n}\n\n/**\n * Replaces the displayName of a field by applying a regular expression\n * to match the name and a pattern for the replacement.\n *\n * @public\n */\nexport const renameByRegexTransformer: DataTransformerInfo<RenameByRegexTransformerOptions> = {\n  id: DataTransformerID.renameByRegex,\n  name: 'Rename fields by regex',\n  description: 'Rename fields based on regular expression by users.',\n  defaultOptions: {\n    regex: '(.*)',\n    renamePattern: '$1',\n  },\n\n  /**\n   * Return a modified copy of the series. If the transform is not or should not\n   * be applied, just return the input series\n   */\n  operator: (options) => (source) =>\n    source.pipe(\n      map((data) => {\n        if (!Array.isArray(data) || data.length === 0) {\n          return data;\n        }\n        return data.map(renameFieldsByRegex(options));\n      })\n    ),\n};\n\nconst renameFieldsByRegex = (options: RenameByRegexTransformerOptions) => (frame: DataFrame) => {\n  const regex = stringToJsRegex(options.regex);\n  const fields = frame.fields.map((field) => {\n    const displayName = getFieldDisplayName(field, frame);\n    if (!regex.test(displayName)) {\n      return field;\n    }\n    const newDisplayName = displayName.replace(regex, options.renamePattern);\n    return {\n      ...field,\n      config: { ...field.config, displayName: newDisplayName },\n      state: { ...field.state, displayName: newDisplayName },\n    };\n  });\n  return { ...frame, fields };\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAyBO,MAAM,wBAAiF,GAAA;AAAA,EAC5F,IAAI,iBAAkB,CAAA,aAAA;AAAA,EACtB,IAAM,EAAA,wBAAA;AAAA,EACN,WAAa,EAAA,qDAAA;AAAA,EACb,cAAgB,EAAA;AAAA,IACd,KAAO,EAAA,MAAA;AAAA,IACP,aAAe,EAAA,IAAA;AAAA,GACjB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,QAAU,EAAA,CAAC,OAAY,KAAA,CAAC,WACtB,MAAO,CAAA,IAAA;AAAA,IACL,GAAA,CAAI,CAAC,IAAS,KAAA;AACZ,MAAA,IAAI,CAAC,KAAM,CAAA,OAAA,CAAQ,IAAI,CAAK,IAAA,IAAA,CAAK,WAAW,CAAG,EAAA;AAC7C,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AACA,MAAA,OAAO,IAAK,CAAA,GAAA,CAAI,mBAAoB,CAAA,OAAO,CAAC,CAAA,CAAA;AAAA,KAC7C,CAAA;AAAA,GACH;AACJ,EAAA;AAEA,MAAM,mBAAsB,GAAA,CAAC,OAA6C,KAAA,CAAC,KAAqB,KAAA;AAC9F,EAAM,MAAA,KAAA,GAAQ,eAAgB,CAAA,OAAA,CAAQ,KAAK,CAAA,CAAA;AAC3C,EAAA,MAAM,MAAS,GAAA,KAAA,CAAM,MAAO,CAAA,GAAA,CAAI,CAAC,KAAU,KAAA;AACzC,IAAM,MAAA,WAAA,GAAc,mBAAoB,CAAA,KAAA,EAAO,KAAK,CAAA,CAAA;AACpD,IAAA,IAAI,CAAC,KAAA,CAAM,IAAK,CAAA,WAAW,CAAG,EAAA;AAC5B,MAAO,OAAA,KAAA,CAAA;AAAA,KACT;AACA,IAAA,MAAM,cAAiB,GAAA,WAAA,CAAY,OAAQ,CAAA,KAAA,EAAO,QAAQ,aAAa,CAAA,CAAA;AACvE,IAAA,OAAO,iCACF,KADE,CAAA,EAAA;AAAA,MAEL,QAAQ,aAAK,CAAA,cAAA,CAAA,EAAA,EAAA,KAAA,CAAM,MAAX,CAAA,EAAA,EAAmB,aAAa,cAAe,EAAA,CAAA;AAAA,MACvD,OAAO,aAAK,CAAA,cAAA,CAAA,EAAA,EAAA,KAAA,CAAM,KAAX,CAAA,EAAA,EAAkB,aAAa,cAAe,EAAA,CAAA;AAAA,KACvD,CAAA,CAAA;AAAA,GACD,CAAA,CAAA;AACD,EAAO,OAAA,aAAA,CAAA,cAAA,CAAA,EAAA,EAAK,KAAL,CAAA,EAAA,EAAY,MAAO,EAAA,CAAA,CAAA;AAC5B,CAAA;;;;"}