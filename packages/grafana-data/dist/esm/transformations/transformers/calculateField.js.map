{"version":3,"file":"calculateField.js","sources":["../../../../src/transformations/transformers/calculateField.ts"],"sourcesContent":["import { defaults } from 'lodash';\nimport { map } from 'rxjs/operators';\n\nimport { getTimeField } from '../../dataframe/processDataFrame';\nimport { getFieldDisplayName } from '../../field';\nimport { DataFrame, DataTransformerInfo, Field, FieldType, NullValueMode } from '../../types';\nimport { BinaryOperationID, binaryOperators } from '../../utils/binaryOperators';\nimport { UnaryOperationID, unaryOperators } from '../../utils/unaryOperators';\nimport { doStandardCalcs, fieldReducers, ReducerID } from '../fieldReducer';\nimport { getFieldMatcher } from '../matchers';\nimport { FieldMatcherID } from '../matchers/ids';\n\nimport { ensureColumnsTransformer } from './ensureColumns';\nimport { DataTransformerID } from './ids';\nimport { noopTransformer } from './noop';\n\nexport enum CalculateFieldMode {\n  ReduceRow = 'reduceRow',\n  CumulativeFunctions = 'cumulativeFunctions',\n  WindowFunctions = 'windowFunctions',\n  BinaryOperation = 'binary',\n  UnaryOperation = 'unary',\n  Index = 'index',\n}\n\nexport enum WindowSizeMode {\n  Percentage = 'percentage',\n  Fixed = 'fixed',\n}\n\nexport enum WindowAlignment {\n  Trailing = 'trailing',\n  Centered = 'centered',\n}\n\nexport interface ReduceOptions {\n  include?: string[]; // Assume all fields\n  reducer: ReducerID;\n  nullValueMode?: NullValueMode;\n}\n\nexport interface CumulativeOptions {\n  field?: string;\n  reducer: ReducerID;\n}\n\nexport interface WindowOptions extends CumulativeOptions {\n  windowSize?: number;\n  windowSizeMode?: WindowSizeMode;\n  windowAlignment?: WindowAlignment;\n}\n\nexport interface UnaryOptions {\n  operator: UnaryOperationID;\n  fieldName: string;\n}\n\nexport interface BinaryOptions {\n  left: string;\n  operator: BinaryOperationID;\n  right: string;\n}\n\ninterface IndexOptions {\n  asPercentile: boolean;\n}\n\nconst defaultReduceOptions: ReduceOptions = {\n  reducer: ReducerID.sum,\n};\n\nexport const defaultWindowOptions: WindowOptions = {\n  reducer: ReducerID.mean,\n  windowAlignment: WindowAlignment.Trailing,\n  windowSizeMode: WindowSizeMode.Percentage,\n  windowSize: 0.1,\n};\n\nconst defaultBinaryOptions: BinaryOptions = {\n  left: '',\n  operator: BinaryOperationID.Add,\n  right: '',\n};\n\nconst defaultUnaryOptions: UnaryOptions = {\n  operator: UnaryOperationID.Abs,\n  fieldName: '',\n};\n\nexport interface CalculateFieldTransformerOptions {\n  // True/False or auto\n  timeSeries?: boolean;\n  mode: CalculateFieldMode; // defaults to 'reduce'\n\n  // Only one should be filled\n  reduce?: ReduceOptions;\n  window?: WindowOptions;\n  cumulative?: CumulativeOptions;\n  binary?: BinaryOptions;\n  unary?: UnaryOptions;\n  index?: IndexOptions;\n\n  // Remove other fields\n  replaceFields?: boolean;\n\n  // Output field properties\n  alias?: string; // The output field name\n  // TODO: config?: FieldConfig; or maybe field overrides? since the UI exists\n}\n\ntype ValuesCreator = (data: DataFrame) => unknown[] | undefined;\n\nexport const calculateFieldTransformer: DataTransformerInfo<CalculateFieldTransformerOptions> = {\n  id: DataTransformerID.calculateField,\n  name: 'Add field from calculation',\n  description: 'Use the row values to calculate a new field',\n  defaultOptions: {\n    mode: CalculateFieldMode.ReduceRow,\n    reduce: {\n      reducer: ReducerID.sum,\n    },\n  },\n  operator: (options, ctx) => (outerSource) => {\n    const operator =\n      options && options.timeSeries !== false\n        ? ensureColumnsTransformer.operator(null, ctx)\n        : noopTransformer.operator({}, ctx);\n\n    if (options.alias != null) {\n      options.alias = ctx.interpolate(options.alias);\n    }\n\n    return outerSource.pipe(\n      operator,\n      map((data) => {\n        const mode = options.mode ?? CalculateFieldMode.ReduceRow;\n        let creator: ValuesCreator | undefined = undefined;\n\n        switch (mode) {\n          case CalculateFieldMode.ReduceRow:\n            creator = getReduceRowCreator(defaults(options.reduce, defaultReduceOptions), data);\n            break;\n          case CalculateFieldMode.CumulativeFunctions:\n            creator = getCumulativeCreator(defaults(options.cumulative, defaultReduceOptions), data);\n            break;\n          case CalculateFieldMode.WindowFunctions:\n            creator = getWindowCreator(defaults(options.window, defaultWindowOptions), data);\n            break;\n          case CalculateFieldMode.UnaryOperation:\n            creator = getUnaryCreator(defaults(options.unary, defaultUnaryOptions), data);\n            break;\n          case CalculateFieldMode.BinaryOperation:\n            const binaryOptions = {\n              ...options.binary,\n              left: ctx.interpolate(options.binary?.left!),\n              right: ctx.interpolate(options.binary?.right!),\n            };\n\n            creator = getBinaryCreator(defaults(binaryOptions, defaultBinaryOptions), data);\n            break;\n          case CalculateFieldMode.Index:\n            return data.map((frame) => {\n              const indexArr = [...Array(frame.length).keys()];\n\n              if (options.index?.asPercentile) {\n                for (let i = 0; i < indexArr.length; i++) {\n                  indexArr[i] = indexArr[i] / indexArr.length;\n                }\n              }\n\n              const f = {\n                name: options.alias ?? 'Row',\n                type: FieldType.number,\n                values: indexArr,\n                config: options.index?.asPercentile ? { unit: 'percentunit' } : {},\n              };\n              return {\n                ...frame,\n                fields: options.replaceFields ? [f] : [...frame.fields, f],\n              };\n            });\n        }\n\n        // Nothing configured\n        if (!creator) {\n          return data;\n        }\n\n        return data.map((frame) => {\n          // delegate field creation to the specific function\n          const values = creator!(frame);\n          if (!values) {\n            return frame;\n          }\n\n          const field = {\n            name: getNameFromOptions(options),\n            type: FieldType.number,\n            config: {},\n            values,\n          };\n          let fields: Field[] = [];\n\n          // Replace all fields with the single field\n          if (options.replaceFields) {\n            const { timeField } = getTimeField(frame);\n            if (timeField && options.timeSeries !== false) {\n              fields = [timeField, field];\n            } else {\n              fields = [field];\n            }\n          } else {\n            fields = [...frame.fields, field];\n          }\n          return {\n            ...frame,\n            fields,\n          };\n        });\n      })\n    );\n  },\n};\n\nfunction getWindowCreator(options: WindowOptions, allFrames: DataFrame[]): ValuesCreator {\n  if (options.windowSize! <= 0) {\n    throw new Error('Add field from calculation transformation - Window size must be larger than 0');\n  }\n\n  let matcher = getFieldMatcher({\n    id: FieldMatcherID.numeric,\n  });\n\n  if (options.field) {\n    matcher = getFieldMatcher({\n      id: FieldMatcherID.byNames,\n      options: {\n        names: [options.field],\n      },\n    });\n  }\n\n  return (frame: DataFrame) => {\n    const window = Math.ceil(\n      options.windowSize! * (options.windowSizeMode === WindowSizeMode.Percentage ? frame.length : 1)\n    );\n\n    // Find the columns that should be examined\n    let selectedField: Field | null = null;\n    for (const field of frame.fields) {\n      if (matcher(field, frame, allFrames)) {\n        selectedField = field;\n        break;\n      }\n    }\n\n    if (!selectedField) {\n      return;\n    }\n\n    if (![ReducerID.mean, ReducerID.stdDev, ReducerID.variance].includes(options.reducer)) {\n      throw new Error(`Add field from calculation transformation - Unsupported reducer: ${options.reducer}`);\n    }\n\n    if (options.windowAlignment === WindowAlignment.Centered) {\n      return getCenteredWindowValues(frame, options.reducer, selectedField, window);\n    } else {\n      return getTrailingWindowValues(frame, options.reducer, selectedField, window);\n    }\n  };\n}\n\nfunction getTrailingWindowValues(frame: DataFrame, reducer: ReducerID, selectedField: Field, window: number) {\n  const vals: number[] = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < frame.length; i++) {\n    if (reducer === ReducerID.mean) {\n      const currentValue = selectedField.values[i];\n      if (currentValue !== null && currentValue !== undefined) {\n        count++;\n        sum += currentValue;\n\n        if (i > window - 1) {\n          sum -= selectedField.values[i - window];\n          count--;\n        }\n      }\n      vals.push(count === 0 ? 0 : sum / count);\n    } else if (reducer === ReducerID.variance) {\n      const start = Math.max(0, i - window + 1);\n      const end = i + 1;\n      vals.push(calculateVariance(selectedField.values.slice(start, end)));\n    } else if (reducer === ReducerID.stdDev) {\n      const start = Math.max(0, i - window + 1);\n      const end = i + 1;\n      vals.push(calculateStdDev(selectedField.values.slice(start, end)));\n    }\n  }\n  return vals;\n}\n\nfunction getCenteredWindowValues(frame: DataFrame, reducer: ReducerID, selectedField: Field, window: number) {\n  const vals: number[] = [];\n  let sum = 0;\n  let count = 0;\n  // Current value (i) is included in the leading part of the window. Which means if the window size is odd,\n  // the leading part of the window will be larger than the trailing part.\n  const leadingPartOfWindow = Math.ceil(window / 2) - 1;\n  const trailingPartOfWindow = Math.floor(window / 2);\n  for (let i = 0; i < frame.length; i++) {\n    const first = i - trailingPartOfWindow;\n    const last = i + leadingPartOfWindow;\n    if (reducer === ReducerID.mean) {\n      if (i === 0) {\n        // We're at the start and need to prime the leading part of the window\n        for (let x = 0; x < leadingPartOfWindow + 1 && x < selectedField.values.length; x++) {\n          if (selectedField.values[x] != null) {\n            sum += selectedField.values[x];\n            count++;\n          }\n        }\n      } else {\n        if (last < selectedField.values.length) {\n          // Last is inside the data and should be added.\n          if (selectedField.values[last] != null) {\n            sum += selectedField.values[last];\n            count++;\n          }\n        }\n        if (first > 0) {\n          // Remove values that have fallen outside of the window, if the start of the window isn't outside of the data.\n          if (selectedField.values[first - 1] != null) {\n            sum -= selectedField.values[first - 1];\n            count--;\n          }\n        }\n      }\n      vals.push(count === 0 ? 0 : sum / count);\n    } else if (reducer === ReducerID.variance) {\n      const windowVals = selectedField.values.slice(\n        Math.max(0, first),\n        Math.min(last + 1, selectedField.values.length)\n      );\n      vals.push(calculateVariance(windowVals));\n    } else if (reducer === ReducerID.stdDev) {\n      const windowVals = selectedField.values.slice(\n        Math.max(0, first),\n        Math.min(last + 1, selectedField.values.length)\n      );\n      vals.push(calculateStdDev(windowVals));\n    }\n  }\n  return vals;\n}\n\nfunction calculateVariance(vals: number[]): number {\n  if (vals.length < 1) {\n    return 0;\n  }\n  let squareSum = 0;\n  let runningMean = 0;\n  let nonNullCount = 0;\n  for (let i = 0; i < vals.length; i++) {\n    const currentValue = vals[i];\n    if (currentValue != null) {\n      nonNullCount++;\n      let _oldMean = runningMean;\n      runningMean += (currentValue - _oldMean) / nonNullCount;\n      squareSum += (currentValue - _oldMean) * (currentValue - runningMean);\n    }\n  }\n  if (nonNullCount === 0) {\n    return 0;\n  }\n  const variance = squareSum / nonNullCount;\n  return variance;\n}\n\nfunction calculateStdDev(vals: number[]): number {\n  return Math.sqrt(calculateVariance(vals));\n}\n\nfunction getCumulativeCreator(options: CumulativeOptions, allFrames: DataFrame[]): ValuesCreator {\n  let matcher = getFieldMatcher({\n    id: FieldMatcherID.numeric,\n  });\n\n  if (options.field) {\n    matcher = getFieldMatcher({\n      id: FieldMatcherID.byNames,\n      options: {\n        names: [options.field],\n      },\n    });\n  }\n\n  if (![ReducerID.mean, ReducerID.sum].includes(options.reducer)) {\n    throw new Error(`Add field from calculation transformation - Unsupported reducer: ${options.reducer}`);\n  }\n\n  return (frame: DataFrame) => {\n    // Find the columns that should be examined\n    let selectedField: Field | null = null;\n    for (const field of frame.fields) {\n      if (matcher(field, frame, allFrames)) {\n        selectedField = field;\n        break;\n      }\n    }\n\n    if (!selectedField) {\n      return;\n    }\n\n    const vals: number[] = [];\n\n    let total = 0;\n    for (let i = 0; i < frame.length; i++) {\n      total += selectedField.values[i] ?? 0;\n      if (options.reducer === ReducerID.sum) {\n        vals.push(total);\n      } else if (options.reducer === ReducerID.mean) {\n        vals.push(total / (i + 1));\n      }\n    }\n\n    return vals;\n  };\n}\n\nfunction getReduceRowCreator(options: ReduceOptions, allFrames: DataFrame[]): ValuesCreator {\n  let matcher = getFieldMatcher({\n    id: FieldMatcherID.numeric,\n  });\n\n  if (options.include && options.include.length) {\n    matcher = getFieldMatcher({\n      id: FieldMatcherID.byNames,\n      options: {\n        names: options.include,\n      },\n    });\n  }\n\n  const info = fieldReducers.get(options.reducer);\n\n  if (!info) {\n    throw new Error(`Unknown reducer: ${options.reducer}`);\n  }\n\n  const reducer = info.reduce ?? doStandardCalcs;\n  const ignoreNulls = options.nullValueMode === NullValueMode.Ignore;\n  const nullAsZero = options.nullValueMode === NullValueMode.AsZero;\n\n  return (frame: DataFrame) => {\n    // Find the columns that should be examined\n    const columns = [];\n    for (const field of frame.fields) {\n      if (matcher(field, frame, allFrames)) {\n        columns.push(field.values);\n      }\n    }\n\n    // Prepare a \"fake\" field for the row\n    const size = columns.length;\n    const row: Field = {\n      name: 'temp',\n      values: new Array(size),\n      type: FieldType.number,\n      config: {},\n    };\n    const vals: number[] = [];\n\n    for (let i = 0; i < frame.length; i++) {\n      for (let j = 0; j < size; j++) {\n        row.values[j] = columns[j][i];\n      }\n\n      vals.push(reducer(row, ignoreNulls, nullAsZero)[options.reducer]);\n    }\n\n    return vals;\n  };\n}\n\nfunction findFieldValuesWithNameOrConstant(\n  frame: DataFrame,\n  name: string,\n  allFrames: DataFrame[]\n): number[] | undefined {\n  if (!name) {\n    return undefined;\n  }\n\n  for (const f of frame.fields) {\n    if (name === getFieldDisplayName(f, frame, allFrames)) {\n      if (f.type === FieldType.boolean) {\n        return f.values.map((v) => (v ? 1 : 0));\n      }\n      return f.values;\n    }\n  }\n\n  const v = parseFloat(name);\n  if (!isNaN(v)) {\n    return new Array(frame.length).fill(v);\n  }\n\n  return undefined;\n}\n\nfunction getBinaryCreator(options: BinaryOptions, allFrames: DataFrame[]): ValuesCreator {\n  const operator = binaryOperators.getIfExists(options.operator);\n\n  return (frame: DataFrame) => {\n    const left = findFieldValuesWithNameOrConstant(frame, options.left, allFrames);\n    const right = findFieldValuesWithNameOrConstant(frame, options.right, allFrames);\n    if (!left || !right || !operator) {\n      return undefined;\n    }\n\n    const arr = new Array(left.length);\n    for (let i = 0; i < arr.length; i++) {\n      arr[i] = operator.operation(left[i], right[i]);\n    }\n    return arr;\n  };\n}\n\nfunction getUnaryCreator(options: UnaryOptions, allFrames: DataFrame[]): ValuesCreator {\n  const operator = unaryOperators.getIfExists(options.operator);\n\n  return (frame: DataFrame) => {\n    let value: number[] = [];\n\n    for (const f of frame.fields) {\n      if (options.fieldName === getFieldDisplayName(f, frame, allFrames) && f.type === FieldType.number) {\n        value = f.values;\n      }\n    }\n\n    if (!value.length || !operator) {\n      return undefined;\n    }\n\n    const arr = new Array(value.length);\n    for (let i = 0; i < arr.length; i++) {\n      arr[i] = operator.operation(value[i]);\n    }\n\n    return arr;\n  };\n}\n\nexport function getNameFromOptions(options: CalculateFieldTransformerOptions) {\n  if (options.alias?.length) {\n    return options.alias;\n  }\n\n  switch (options.mode) {\n    case CalculateFieldMode.CumulativeFunctions: {\n      const { cumulative } = options;\n      return `cumulative ${cumulative?.reducer ?? ''}${cumulative?.field ? `(${cumulative.field})` : ''}`;\n    }\n    case CalculateFieldMode.WindowFunctions: {\n      const { window } = options;\n      return `${window?.windowAlignment ?? ''} moving ${window?.reducer ?? ''}${\n        window?.field ? `(${window.field})` : ''\n      }`;\n    }\n    case CalculateFieldMode.UnaryOperation: {\n      const { unary } = options;\n      return `${unary?.operator ?? ''}${unary?.fieldName ? `(${unary.fieldName})` : ''}`;\n    }\n    case CalculateFieldMode.BinaryOperation: {\n      const { binary } = options;\n      const alias = `${binary?.left ?? ''} ${binary?.operator ?? ''} ${binary?.right ?? ''}`;\n\n      //Remove $ signs as they will be interpolated and cause issues. Variables can still be used\n      //in alias but shouldn't in the autogenerated name\n      return alias.replace(/\\$/g, '');\n    }\n    case CalculateFieldMode.ReduceRow:\n      {\n        const r = fieldReducers.getIfExists(options.reduce?.reducer);\n        if (r) {\n          return r.name;\n        }\n      }\n      break;\n    case CalculateFieldMode.Index:\n      return 'Row';\n  }\n\n  return 'math';\n}\n"],"names":["_a","_b","_c","v"],"mappings":"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"}