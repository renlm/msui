{"version":3,"file":"organize.js","sources":["../../../../src/transformations/transformers/organize.ts"],"sourcesContent":["import { DataFrame, DataTransformerInfo, TransformationApplicabilityLevels } from '../../types';\n\nimport { filterFieldsByNameTransformer } from './filterByName';\nimport { DataTransformerID } from './ids';\nimport { orderFieldsTransformer, OrderFieldsTransformerOptions } from './order';\nimport { renameFieldsTransformer, RenameFieldsTransformerOptions } from './rename';\n\nexport interface OrganizeFieldsTransformerOptions\n  extends OrderFieldsTransformerOptions,\n    RenameFieldsTransformerOptions {\n  excludeByName: Record<string, boolean>;\n  includeByName?: Record<string, boolean>;\n}\n\nexport const organizeFieldsTransformer: DataTransformerInfo<OrganizeFieldsTransformerOptions> = {\n  id: DataTransformerID.organize,\n  name: 'Organize fields by name',\n  description: 'Order, filter and rename fields based on configuration given by user',\n  defaultOptions: {\n    excludeByName: {},\n    indexByName: {},\n    renameByName: {},\n    includeByName: {},\n  },\n  isApplicable: (data: DataFrame[]) => {\n    return data.length > 1\n      ? TransformationApplicabilityLevels.NotPossible\n      : TransformationApplicabilityLevels.Applicable;\n  },\n  /**\n   * Return a modified copy of the series. If the transform is not or should not\n   * be applied, just return the input series\n   */\n  operator: (options, ctx) => (source) =>\n    source.pipe(\n      filterFieldsByNameTransformer.operator(\n        {\n          include: options.includeByName ? { names: mapToExcludeArray(options.includeByName) } : undefined,\n          exclude: { names: mapToExcludeArray(options.excludeByName) },\n        },\n        ctx\n      ),\n      orderFieldsTransformer.operator(options, ctx),\n      renameFieldsTransformer.operator(options, ctx)\n    ),\n};\n\nconst mapToExcludeArray = (excludeByName: Record<string, boolean>): string[] => {\n  if (!excludeByName) {\n    return [];\n  }\n\n  return Object.keys(excludeByName).filter((name) => excludeByName[name]);\n};\n"],"names":[],"mappings":";;;;;;;;;;;;AAcO,MAAM,yBAAmF,GAAA;AAAA,EAC9F,IAAI,iBAAkB,CAAA,QAAA;AAAA,EACtB,IAAM,EAAA,yBAAA;AAAA,EACN,WAAa,EAAA,sEAAA;AAAA,EACb,cAAgB,EAAA;AAAA,IACd,eAAe,EAAC;AAAA,IAChB,aAAa,EAAC;AAAA,IACd,cAAc,EAAC;AAAA,IACf,eAAe,EAAC;AAAA,GAClB;AAAA,EACA,YAAA,EAAc,CAAC,IAAsB,KAAA;AACnC,IAAA,OAAO,IAAK,CAAA,MAAA,GAAS,CACjB,GAAA,iCAAA,CAAkC,cAClC,iCAAkC,CAAA,UAAA,CAAA;AAAA,GACxC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU,CAAC,OAAA,EAAS,GAAQ,KAAA,CAAC,WAC3B,MAAO,CAAA,IAAA;AAAA,IACL,6BAA8B,CAAA,QAAA;AAAA,MAC5B;AAAA,QACE,OAAA,EAAS,QAAQ,aAAgB,GAAA,EAAE,OAAO,iBAAkB,CAAA,OAAA,CAAQ,aAAa,CAAA,EAAM,GAAA,KAAA,CAAA;AAAA,QACvF,SAAS,EAAE,KAAA,EAAO,iBAAkB,CAAA,OAAA,CAAQ,aAAa,CAAE,EAAA;AAAA,OAC7D;AAAA,MACA,GAAA;AAAA,KACF;AAAA,IACA,sBAAA,CAAuB,QAAS,CAAA,OAAA,EAAS,GAAG,CAAA;AAAA,IAC5C,uBAAA,CAAwB,QAAS,CAAA,OAAA,EAAS,GAAG,CAAA;AAAA,GAC/C;AACJ,EAAA;AAEA,MAAM,iBAAA,GAAoB,CAAC,aAAqD,KAAA;AAC9E,EAAA,IAAI,CAAC,aAAe,EAAA;AAClB,IAAA,OAAO,EAAC,CAAA;AAAA,GACV;AAEA,EAAO,OAAA,MAAA,CAAO,KAAK,aAAa,CAAA,CAAE,OAAO,CAAC,IAAA,KAAS,aAAc,CAAA,IAAI,CAAC,CAAA,CAAA;AACxE,CAAA;;;;"}