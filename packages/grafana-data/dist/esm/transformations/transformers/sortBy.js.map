{"version":3,"file":"sortBy.js","sources":["../../../../src/transformations/transformers/sortBy.ts"],"sourcesContent":["import { map } from 'rxjs/operators';\n\nimport { sortDataFrame } from '../../dataframe';\nimport { getFieldDisplayName } from '../../field';\nimport { DataFrame } from '../../types';\nimport { DataTransformContext, DataTransformerInfo } from '../../types/transformations';\n\nimport { DataTransformerID } from './ids';\nimport { transformationsVariableSupport } from './utils';\n\nexport interface SortByField {\n  field: string;\n  desc?: boolean;\n  index?: number;\n}\n\nexport interface SortByTransformerOptions {\n  // NOTE: this structure supports an array, however only the first entry is used\n  // future versions may support multi-sort options\n  sort: SortByField[];\n}\n\nexport const sortByTransformer: DataTransformerInfo<SortByTransformerOptions> = {\n  id: DataTransformerID.sortBy,\n  name: 'Sort by',\n  description: 'Sort fields in a frame.',\n  defaultOptions: {\n    fields: {},\n  },\n\n  /**\n   * Return a modified copy of the series. If the transform is not or should not\n   * be applied, just return the input series\n   */\n  operator: (options, ctx) => (source) =>\n    source.pipe(\n      map((data) => {\n        if (!Array.isArray(data) || data.length === 0 || !options?.sort?.length) {\n          return data;\n        }\n        return sortDataFrames(data, options.sort, ctx);\n      })\n    ),\n};\n\nfunction sortDataFrames(data: DataFrame[], sort: SortByField[], ctx: DataTransformContext): DataFrame[] {\n  return data.map((frame) => {\n    const s = attachFieldIndex(frame, sort, ctx);\n    if (s.length && s[0].index != null) {\n      return sortDataFrame(frame, s[0].index, s[0].desc);\n    }\n    return frame;\n  });\n}\n\nfunction attachFieldIndex(frame: DataFrame, sort: SortByField[], ctx: DataTransformContext): SortByField[] {\n  return sort.map((s) => {\n    if (s.index != null) {\n      // null or undefined\n      return s;\n    }\n    if (transformationsVariableSupport()) {\n      return {\n        ...s,\n        index: frame.fields.findIndex((f) => ctx.interpolate(s.field) === getFieldDisplayName(f, frame)),\n      };\n    }\n    return {\n      ...s,\n      index: frame.fields.findIndex((f) => s.field === getFieldDisplayName(f, frame)),\n    };\n  });\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBO,MAAM,iBAAmE,GAAA;AAAA,EAC9E,IAAI,iBAAkB,CAAA,MAAA;AAAA,EACtB,IAAM,EAAA,SAAA;AAAA,EACN,WAAa,EAAA,yBAAA;AAAA,EACb,cAAgB,EAAA;AAAA,IACd,QAAQ,EAAC;AAAA,GACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,UAAU,CAAC,OAAA,EAAS,GAAQ,KAAA,CAAC,WAC3B,MAAO,CAAA,IAAA;AAAA,IACL,GAAA,CAAI,CAAC,IAAS,KAAA;AApCpB,MAAA,IAAA,EAAA,CAAA;AAqCQ,MAAA,IAAI,CAAC,KAAA,CAAM,OAAQ,CAAA,IAAI,CAAK,IAAA,IAAA,CAAK,MAAW,KAAA,CAAA,IAAK,EAAC,CAAA,EAAA,GAAA,OAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAS,IAAT,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAe,MAAQ,CAAA,EAAA;AACvE,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AACA,MAAA,OAAO,cAAe,CAAA,IAAA,EAAM,OAAQ,CAAA,IAAA,EAAM,GAAG,CAAA,CAAA;AAAA,KAC9C,CAAA;AAAA,GACH;AACJ,EAAA;AAEA,SAAS,cAAA,CAAe,IAAmB,EAAA,IAAA,EAAqB,GAAwC,EAAA;AACtG,EAAO,OAAA,IAAA,CAAK,GAAI,CAAA,CAAC,KAAU,KAAA;AACzB,IAAA,MAAM,CAAI,GAAA,gBAAA,CAAiB,KAAO,EAAA,IAAA,EAAM,GAAG,CAAA,CAAA;AAC3C,IAAA,IAAI,EAAE,MAAU,IAAA,CAAA,CAAE,CAAC,CAAA,CAAE,SAAS,IAAM,EAAA;AAClC,MAAO,OAAA,aAAA,CAAc,OAAO,CAAE,CAAA,CAAC,EAAE,KAAO,EAAA,CAAA,CAAE,CAAC,CAAA,CAAE,IAAI,CAAA,CAAA;AAAA,KACnD;AACA,IAAO,OAAA,KAAA,CAAA;AAAA,GACR,CAAA,CAAA;AACH,CAAA;AAEA,SAAS,gBAAA,CAAiB,KAAkB,EAAA,IAAA,EAAqB,GAA0C,EAAA;AACzG,EAAO,OAAA,IAAA,CAAK,GAAI,CAAA,CAAC,CAAM,KAAA;AACrB,IAAI,IAAA,CAAA,CAAE,SAAS,IAAM,EAAA;AAEnB,MAAO,OAAA,CAAA,CAAA;AAAA,KACT;AACA,IAAA,IAAI,gCAAkC,EAAA;AACpC,MAAA,OAAO,iCACF,CADE,CAAA,EAAA;AAAA,QAEL,KAAO,EAAA,KAAA,CAAM,MAAO,CAAA,SAAA,CAAU,CAAC,CAAM,KAAA,GAAA,CAAI,WAAY,CAAA,CAAA,CAAE,KAAK,CAAA,KAAM,mBAAoB,CAAA,CAAA,EAAG,KAAK,CAAC,CAAA;AAAA,OACjG,CAAA,CAAA;AAAA,KACF;AACA,IAAA,OAAO,iCACF,CADE,CAAA,EAAA;AAAA,MAEL,KAAA,EAAO,KAAM,CAAA,MAAA,CAAO,SAAU,CAAA,CAAC,CAAM,KAAA,CAAA,CAAE,KAAU,KAAA,mBAAA,CAAoB,CAAG,EAAA,KAAK,CAAC,CAAA;AAAA,KAChF,CAAA,CAAA;AAAA,GACD,CAAA,CAAA;AACH;;;;"}