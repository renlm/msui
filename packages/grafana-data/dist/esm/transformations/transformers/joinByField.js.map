{"version":3,"file":"joinByField.js","sources":["../../../../src/transformations/transformers/joinByField.ts"],"sourcesContent":["import { map } from 'rxjs/operators';\n\nimport { DataFrame, SynchronousDataTransformerInfo, FieldMatcher, DataTransformContext } from '../../types';\nimport { fieldMatchers } from '../matchers';\nimport { FieldMatcherID } from '../matchers/ids';\n\nimport { DataTransformerID } from './ids';\nimport { joinDataFrames } from './joinDataFrames';\n\nexport enum JoinMode {\n  outer = 'outer', // best for time series, non duplicated join on values\n  inner = 'inner',\n  outerTabular = 'outerTabular', // best for tabular data where the join on value can be duplicated\n}\n\nexport interface JoinByFieldOptions {\n  byField?: string; // empty will pick the field automatically\n  mode?: JoinMode;\n}\n\nexport const joinByFieldTransformer: SynchronousDataTransformerInfo<JoinByFieldOptions> = {\n  id: DataTransformerID.joinByField,\n  aliasIds: [DataTransformerID.seriesToColumns],\n  name: 'Join by field',\n  description:\n    'Combine rows from two or more tables, based on a related field between them.  This can be used to outer join multiple time series on the _time_ field to show many time series in one table.',\n  defaultOptions: {\n    byField: undefined, // DEFAULT_KEY_FIELD,\n    mode: JoinMode.outer,\n  },\n\n  operator: (options, ctx) => (source) =>\n    source.pipe(map((data) => joinByFieldTransformer.transformer(options, ctx)(data))),\n\n  transformer: (options: JoinByFieldOptions, ctx: DataTransformContext) => {\n    let joinBy: FieldMatcher | undefined = undefined;\n    return (data: DataFrame[]) => {\n      if (data.length > 1) {\n        if (options.byField && !joinBy) {\n          joinBy = fieldMatchers.get(FieldMatcherID.byName).get(ctx.interpolate(options.byField));\n        }\n        const joined = joinDataFrames({ frames: data, joinBy, mode: options.mode });\n        if (joined) {\n          return [joined];\n        }\n      }\n      return data;\n    };\n  },\n};\n"],"names":["JoinMode"],"mappings":";;;;;;AASY,IAAA,QAAA,qBAAAA,SAAL,KAAA;AACL,EAAAA,UAAA,OAAQ,CAAA,GAAA,OAAA,CAAA;AACR,EAAAA,UAAA,OAAQ,CAAA,GAAA,OAAA,CAAA;AACR,EAAAA,UAAA,cAAe,CAAA,GAAA,cAAA,CAAA;AAHL,EAAAA,OAAAA,SAAAA,CAAAA;AAAA,CAAA,EAAA,QAAA,IAAA,EAAA,EAAA;AAWL,MAAM,sBAA6E,GAAA;AAAA,EACxF,IAAI,iBAAkB,CAAA,WAAA;AAAA,EACtB,QAAA,EAAU,CAAC,iBAAA,CAAkB,eAAe,CAAA;AAAA,EAC5C,IAAM,EAAA,eAAA;AAAA,EACN,WACE,EAAA,8LAAA;AAAA,EACF,cAAgB,EAAA;AAAA,IACd,OAAS,EAAA,KAAA,CAAA;AAAA;AAAA,IACT,IAAM,EAAA,OAAA;AAAA,GACR;AAAA,EAEA,UAAU,CAAC,OAAA,EAAS,QAAQ,CAAC,MAAA,KAC3B,OAAO,IAAK,CAAA,GAAA,CAAI,CAAC,IAAA,KAAS,uBAAuB,WAAY,CAAA,OAAA,EAAS,GAAG,CAAE,CAAA,IAAI,CAAC,CAAC,CAAA;AAAA,EAEnF,WAAA,EAAa,CAAC,OAAA,EAA6B,GAA8B,KAAA;AACvE,IAAA,IAAI,MAAmC,GAAA,KAAA,CAAA,CAAA;AACvC,IAAA,OAAO,CAAC,IAAsB,KAAA;AAC5B,MAAI,IAAA,IAAA,CAAK,SAAS,CAAG,EAAA;AACnB,QAAI,IAAA,OAAA,CAAQ,OAAW,IAAA,CAAC,MAAQ,EAAA;AAC9B,UAAS,MAAA,GAAA,aAAA,CAAc,GAAI,CAAA,cAAA,CAAe,MAAM,CAAA,CAAE,IAAI,GAAI,CAAA,WAAA,CAAY,OAAQ,CAAA,OAAO,CAAC,CAAA,CAAA;AAAA,SACxF;AACA,QAAM,MAAA,MAAA,GAAS,eAAe,EAAE,MAAA,EAAQ,MAAM,MAAQ,EAAA,IAAA,EAAM,OAAQ,CAAA,IAAA,EAAM,CAAA,CAAA;AAC1E,QAAA,IAAI,MAAQ,EAAA;AACV,UAAA,OAAO,CAAC,MAAM,CAAA,CAAA;AAAA,SAChB;AAAA,OACF;AACA,MAAO,OAAA,IAAA,CAAA;AAAA,KACT,CAAA;AAAA,GACF;AACF;;;;"}