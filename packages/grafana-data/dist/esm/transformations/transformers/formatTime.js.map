{"version":3,"file":"formatTime.js","sources":["../../../../src/transformations/transformers/formatTime.ts"],"sourcesContent":["import { map } from 'rxjs/operators';\n\nimport { TimeZone } from '@grafana/schema';\n\nimport { cacheFieldDisplayNames } from '../../field';\nimport { DataFrame, TransformationApplicabilityLevels } from '../../types';\nimport { DataTransformContext, DataTransformerInfo } from '../../types/transformations';\n\nimport { fieldToStringField } from './convertFieldType';\nimport { DataTransformerID } from './ids';\n\nexport interface FormatTimeTransformerOptions {\n  timeField: string;\n  outputFormat: string;\n  timezone: TimeZone;\n}\n\nexport const formatTimeTransformer: DataTransformerInfo<FormatTimeTransformerOptions> = {\n  id: DataTransformerID.formatTime,\n  name: 'Format time',\n  description: 'Set the output format of a time field',\n  defaultOptions: { timeField: '', outputFormat: '', useTimezone: true },\n  isApplicable: (data: DataFrame[]) => {\n    // Search for a time field\n    // if there is one then we can use this transformation\n    for (const frame of data) {\n      for (const field of frame.fields) {\n        if (field.type === 'time') {\n          return TransformationApplicabilityLevels.Applicable;\n        }\n      }\n    }\n\n    return TransformationApplicabilityLevels.NotApplicable;\n  },\n  isApplicableDescription:\n    'The Format time transformation requires a time field to work. No time field could be found.',\n  operator: (options, ctx) => (source) =>\n    source.pipe(\n      map((data) => {\n        return applyFormatTime(options, data, ctx);\n      })\n    ),\n};\n\n/**\n * @internal\n */\nexport const applyFormatTime = (\n  { timeField, outputFormat, timezone }: FormatTimeTransformerOptions,\n  data: DataFrame[],\n  ctx?: DataTransformContext\n) => {\n  if (!Array.isArray(data) || data.length === 0) {\n    return data;\n  }\n\n  cacheFieldDisplayNames(data);\n\n  outputFormat = ctx?.interpolate(outputFormat) ?? outputFormat;\n\n  return data.map((frame) => ({\n    ...frame,\n    fields: frame.fields.map((field) => {\n      if (field.state?.displayName === timeField) {\n        field = fieldToStringField(field, outputFormat, { timeZone: timezone });\n      }\n\n      return field;\n    }),\n  }));\n};\n"],"names":["_a"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBO,MAAM,qBAA2E,GAAA;AAAA,EACtF,IAAI,iBAAkB,CAAA,UAAA;AAAA,EACtB,IAAM,EAAA,aAAA;AAAA,EACN,WAAa,EAAA,uCAAA;AAAA,EACb,gBAAgB,EAAE,SAAA,EAAW,IAAI,YAAc,EAAA,EAAA,EAAI,aAAa,IAAK,EAAA;AAAA,EACrE,YAAA,EAAc,CAAC,IAAsB,KAAA;AAGnC,IAAA,KAAA,MAAW,SAAS,IAAM,EAAA;AACxB,MAAW,KAAA,MAAA,KAAA,IAAS,MAAM,MAAQ,EAAA;AAChC,QAAI,IAAA,KAAA,CAAM,SAAS,MAAQ,EAAA;AACzB,UAAA,OAAO,iCAAkC,CAAA,UAAA,CAAA;AAAA,SAC3C;AAAA,OACF;AAAA,KACF;AAEA,IAAA,OAAO,iCAAkC,CAAA,aAAA,CAAA;AAAA,GAC3C;AAAA,EACA,uBACE,EAAA,6FAAA;AAAA,EACF,UAAU,CAAC,OAAA,EAAS,GAAQ,KAAA,CAAC,WAC3B,MAAO,CAAA,IAAA;AAAA,IACL,GAAA,CAAI,CAAC,IAAS,KAAA;AACZ,MAAO,OAAA,eAAA,CAAgB,OAAS,EAAA,IAAA,EAAM,GAAG,CAAA,CAAA;AAAA,KAC1C,CAAA;AAAA,GACH;AACJ,EAAA;AAKa,MAAA,eAAA,GAAkB,CAC7B,EAAE,SAAA,EAAW,cAAc,QAAS,EAAA,EACpC,MACA,GACG,KAAA;AApDL,EAAA,IAAA,EAAA,CAAA;AAqDE,EAAA,IAAI,CAAC,KAAM,CAAA,OAAA,CAAQ,IAAI,CAAK,IAAA,IAAA,CAAK,WAAW,CAAG,EAAA;AAC7C,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAEA,EAAA,sBAAA,CAAuB,IAAI,CAAA,CAAA;AAE3B,EAAe,YAAA,GAAA,CAAA,EAAA,GAAA,GAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,GAAA,CAAK,WAAY,CAAA,YAAA,CAAA,KAAjB,IAAkC,GAAA,EAAA,GAAA,YAAA,CAAA;AAEjD,EAAA,OAAO,IAAK,CAAA,GAAA,CAAI,CAAC,KAAA,KAAW,iCACvB,KADuB,CAAA,EAAA;AAAA,IAE1B,MAAQ,EAAA,KAAA,CAAM,MAAO,CAAA,GAAA,CAAI,CAAC,KAAU,KAAA;AA/DxC,MAAAA,IAAAA,GAAAA,CAAAA;AAgEM,MAAA,IAAA,CAAA,CAAIA,MAAA,KAAM,CAAA,KAAA,KAAN,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,GAAAA,CAAa,iBAAgB,SAAW,EAAA;AAC1C,QAAA,KAAA,GAAQ,mBAAmB,KAAO,EAAA,YAAA,EAAc,EAAE,QAAA,EAAU,UAAU,CAAA,CAAA;AAAA,OACxE;AAEA,MAAO,OAAA,KAAA,CAAA;AAAA,KACR,CAAA;AAAA,GACD,CAAA,CAAA,CAAA;AACJ;;;;"}