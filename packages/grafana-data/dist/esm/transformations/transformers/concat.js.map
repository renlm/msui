{"version":3,"file":"concat.js","sources":["../../../../src/transformations/transformers/concat.ts"],"sourcesContent":["import { map } from 'rxjs/operators';\n\nimport { DataFrame, Field, TIME_SERIES_VALUE_FIELD_NAME } from '../../types/dataFrame';\nimport { DataTransformerInfo } from '../../types/transformations';\n\nimport { DataTransformerID } from './ids';\n\nexport enum ConcatenateFrameNameMode {\n  /**\n   * Ignore the source frame name when moving to the destination\n   */\n  Drop = 'drop',\n\n  /**\n   * Copy the source frame name to the destination field.  The final field will contain\n   * both the frame and field name\n   */\n  FieldName = 'field',\n\n  /**\n   * Copy the source frame name to a label on the field.  The label key is controlled\n   * by frameNameLabel\n   */\n  Label = 'label',\n}\n\nexport interface ConcatenateTransformerOptions {\n  frameNameMode?: ConcatenateFrameNameMode;\n  frameNameLabel?: string;\n}\n\nexport const concatenateTransformer: DataTransformerInfo<ConcatenateTransformerOptions> = {\n  id: DataTransformerID.concatenate,\n  name: 'Concatenate fields',\n  description:\n    'Combine all fields into a single frame.  Values will be appended with undefined values if not the same length.',\n  defaultOptions: {\n    frameNameMode: ConcatenateFrameNameMode.FieldName,\n    frameNameLabel: 'frame',\n  },\n  operator: (options) => (source) =>\n    source.pipe(\n      map((dataFrames) => {\n        if (!Array.isArray(dataFrames) || dataFrames.length < 2) {\n          return dataFrames; // noop with single frame\n        }\n        return [concatenateFields(dataFrames, options)];\n      })\n    ),\n};\n\n/**\n * @internal only exported for tests\n */\nexport function concatenateFields(data: DataFrame[], opts: ConcatenateTransformerOptions): DataFrame {\n  let sameLength = true;\n  let maxLength = data[0].length;\n  const frameNameLabel = opts.frameNameLabel ?? 'frame';\n  let fields: Field[] = [];\n\n  for (const frame of data) {\n    if (maxLength !== frame.length) {\n      sameLength = false;\n      maxLength = Math.max(maxLength, frame.length);\n    }\n\n    for (const f of frame.fields) {\n      const copy = { ...f };\n      copy.state = undefined;\n      if (frame.name) {\n        if (opts.frameNameMode === ConcatenateFrameNameMode.Drop) {\n          // nothing -- skip the name\n        } else if (opts.frameNameMode === ConcatenateFrameNameMode.Label) {\n          copy.labels = { ...f.labels };\n          copy.labels[frameNameLabel] = frame.name;\n        } else if (!copy.name || copy.name === TIME_SERIES_VALUE_FIELD_NAME) {\n          copy.name = frame.name;\n        } else {\n          copy.name = `${frame.name} Â· ${f.name}`;\n        }\n      }\n      fields.push(copy);\n    }\n  }\n\n  // Make sure all fields have the same length\n  if (!sameLength) {\n    fields = fields.map((f) => {\n      if (f.values.length === maxLength) {\n        return f;\n      }\n      const values = f.values.slice();\n      values.length = maxLength;\n      return {\n        ...f,\n        values: values,\n      };\n    });\n  }\n\n  return {\n    fields,\n    length: maxLength,\n  };\n}\n"],"names":[],"mappings":"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"}