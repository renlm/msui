{"version":3,"file":"filter.js","sources":["../../../../src/transformations/transformers/filter.ts"],"sourcesContent":["import { map } from 'rxjs/operators';\n\nimport { DataFrame, Field } from '../../types/dataFrame';\nimport { DataTransformerInfo, MatcherConfig } from '../../types/transformations';\nimport { getFieldMatcher, getFrameMatchers } from '../matchers';\n\nimport { DataTransformerID } from './ids';\nimport { noopTransformer } from './noop';\n\nexport interface FilterOptions {\n  include?: MatcherConfig;\n  exclude?: MatcherConfig;\n}\n\nexport const filterFieldsTransformer: DataTransformerInfo<FilterOptions> = {\n  id: DataTransformerID.filterFields,\n  name: 'Filter Fields',\n  description: 'select a subset of fields',\n  defaultOptions: {},\n\n  /**\n   * Return a modified copy of the series. If the transform is not or should not\n   * be applied, just return the input series\n   */\n  operator: (options: FilterOptions, ctx) => (source) => {\n    if (!options.include && !options.exclude) {\n      return source.pipe(noopTransformer.operator({}, ctx));\n    }\n\n    if (typeof options.include?.options === 'string') {\n      options.include.options = ctx.interpolate(options.include?.options);\n    } else if (typeof options.include?.options?.pattern === 'string') {\n      options.include.options.pattern = ctx.interpolate(options.include?.options.pattern);\n    }\n\n    if (typeof options.exclude?.options === 'string') {\n      options.exclude.options = ctx.interpolate(options.exclude?.options);\n    } else if (typeof options.exclude?.options?.pattern === 'string') {\n      options.exclude.options.pattern = ctx.interpolate(options.exclude?.options.pattern);\n    }\n\n    return source.pipe(\n      map((data) => {\n        const include = options.include ? getFieldMatcher(options.include) : null;\n        const exclude = options.exclude ? getFieldMatcher(options.exclude) : null;\n\n        const processed: DataFrame[] = [];\n        for (const series of data) {\n          // Find the matching field indexes\n          const fields: Field[] = [];\n          for (let i = 0; i < series.fields.length; i++) {\n            const field = series.fields[i];\n\n            if (exclude) {\n              if (exclude(field, series, data)) {\n                continue;\n              }\n              if (!include) {\n                fields.push(field);\n              }\n            }\n            if (include && include(field, series, data)) {\n              fields.push(field);\n            }\n          }\n\n          if (!fields.length) {\n            continue;\n          }\n          const copy = {\n            ...series, // all the other properties\n            fields, // but a different set of fields\n          };\n          processed.push(copy);\n        }\n        return processed;\n      })\n    );\n  },\n};\n\nexport const filterFramesTransformer: DataTransformerInfo<FilterOptions> = {\n  id: DataTransformerID.filterFrames,\n  name: 'Filter Frames',\n  description: 'select a subset of frames',\n  defaultOptions: {},\n\n  /**\n   * Return a modified copy of the series. If the transform is not or should not\n   * be applied, just return the input series\n   */\n  operator: (options, ctx) => (source) => {\n    if (!options.include && !options.exclude) {\n      return source.pipe(noopTransformer.operator({}, ctx));\n    }\n\n    return source.pipe(\n      map((data) => {\n        const include = options.include ? getFrameMatchers(options.include) : null;\n        const exclude = options.exclude ? getFrameMatchers(options.exclude) : null;\n\n        const processed: DataFrame[] = [];\n        for (const series of data) {\n          if (exclude) {\n            if (exclude(series)) {\n              continue;\n            }\n            if (!include) {\n              processed.push(series);\n            }\n          }\n          if (include && include(series)) {\n            processed.push(series);\n          }\n        }\n        return processed;\n      })\n    );\n  },\n};\n"],"names":[],"mappings":"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"}