{"version":3,"file":"formatString.js","sources":["../../../../src/transformations/transformers/formatString.ts"],"sourcesContent":["import { map } from 'rxjs/operators';\n\nimport { DataFrame, Field, FieldType } from '../../types';\nimport { DataTransformerInfo, FieldMatcher, TransformationApplicabilityLevels } from '../../types/transformations';\nimport { fieldMatchers } from '../matchers';\nimport { FieldMatcherID } from '../matchers/ids';\n\nimport { DataTransformerID } from './ids';\n\nexport enum FormatStringOutput {\n  UpperCase = 'Upper Case',\n  LowerCase = 'Lower Case',\n  SentenceCase = 'Sentence Case',\n  TitleCase = 'Title Case',\n  PascalCase = 'Pascal Case',\n  CamelCase = 'Camel Case',\n  SnakeCase = 'Snake Case',\n  KebabCase = 'Kebab Case',\n  Trim = 'Trim',\n  Substring = 'Substring',\n}\n\nexport interface FormatStringTransformerOptions {\n  stringField: string;\n  substringStart: number;\n  substringEnd: number;\n  outputFormat: FormatStringOutput;\n}\n\nconst splitToCapitalWords = (input: string) => {\n  const arr = input.split(' ');\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1).toLowerCase();\n  }\n  return arr;\n};\n\nexport const getFormatStringFunction = (options: FormatStringTransformerOptions) => {\n  return (field: Field) =>\n    field.values.map((value: string) => {\n      switch (options.outputFormat) {\n        case FormatStringOutput.UpperCase:\n          return value.toUpperCase();\n        case FormatStringOutput.LowerCase:\n          return value.toLowerCase();\n        case FormatStringOutput.SentenceCase:\n          return value.charAt(0).toUpperCase() + value.slice(1);\n        case FormatStringOutput.TitleCase:\n          return splitToCapitalWords(value).join(' ');\n        case FormatStringOutput.PascalCase:\n          return splitToCapitalWords(value).join('');\n        case FormatStringOutput.CamelCase:\n          value = splitToCapitalWords(value).join('');\n          return value.charAt(0).toLowerCase() + value.slice(1);\n        case FormatStringOutput.SnakeCase:\n          return value.toLowerCase().split(' ').join('_');\n        case FormatStringOutput.KebabCase:\n          return value.toLowerCase().split(' ').join('-');\n        case FormatStringOutput.Trim:\n          return value.trim();\n        case FormatStringOutput.Substring:\n          return value.substring(options.substringStart, options.substringEnd);\n      }\n    });\n};\n\nexport const formatStringTransformer: DataTransformerInfo<FormatStringTransformerOptions> = {\n  id: DataTransformerID.formatString,\n  name: 'Format string',\n  description: 'Manipulate string fields formatting',\n  defaultOptions: { stringField: '', outputFormat: FormatStringOutput.UpperCase },\n  isApplicable: (data: DataFrame[]) => {\n    // Search for a string field\n    // if there is one then we can use this transformation\n    for (const frame of data) {\n      for (const field of frame.fields) {\n        if (field.type === 'string') {\n          return TransformationApplicabilityLevels.Applicable;\n        }\n      }\n    }\n\n    return TransformationApplicabilityLevels.NotApplicable;\n  },\n  operator: (options) => (source) =>\n    source.pipe(\n      map((data) => {\n        if (data.length === 0) {\n          return data;\n        }\n\n        const fieldMatches = fieldMatchers.get(FieldMatcherID.byName).get(options.stringField);\n        const formatStringFunction = getFormatStringFunction(options);\n\n        const formatter = createStringFormatter(fieldMatches, formatStringFunction);\n\n        return data.map((frame) => ({\n          ...frame,\n          fields: formatter(frame, data),\n        }));\n      })\n    ),\n};\n\n/**\n * @internal\n */\nexport const createStringFormatter =\n  (fieldMatches: FieldMatcher, formatStringFunction: (field: Field) => string[]) =>\n  (frame: DataFrame, allFrames: DataFrame[]) => {\n    return frame.fields.map((field) => {\n      // Find the configured field\n      if (fieldMatches(field, frame, allFrames)) {\n        const newVals = formatStringFunction(field);\n\n        return {\n          ...field,\n          type: FieldType.string,\n          values: newVals,\n        };\n      }\n\n      return field;\n    });\n  };\n"],"names":[],"mappings":"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"}