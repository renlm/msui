{"version":3,"file":"predicates.js","sources":["../../../../src/transformations/matchers/predicates.ts"],"sourcesContent":["import { Field, DataFrame, FieldType } from '../../types/dataFrame';\nimport { FieldMatcherInfo, MatcherConfig, FrameMatcherInfo } from '../../types/transformations';\nimport { getFieldMatcher, fieldMatchers, getFrameMatchers, frameMatchers } from '../matchers';\n\nimport { MatcherID } from './ids';\n\nconst anyFieldMatcher: FieldMatcherInfo<MatcherConfig[]> = {\n  id: MatcherID.anyMatch,\n  name: 'Any',\n  description: 'Any child matches (OR)',\n  excludeFromPicker: true,\n  defaultOptions: [], // empty array\n\n  get: (options: MatcherConfig[]) => {\n    const children = options.map((option) => {\n      return getFieldMatcher(option);\n    });\n    return (field: Field, frame: DataFrame, allFrames: DataFrame[]) => {\n      for (const child of children) {\n        if (child(field, frame, allFrames)) {\n          return true;\n        }\n      }\n      return false;\n    };\n  },\n\n  getOptionsDisplayText: (options: MatcherConfig[]) => {\n    let text = '';\n    for (const sub of options) {\n      if (text.length > 0) {\n        text += ' OR ';\n      }\n      const matcher = fieldMatchers.get(sub.id);\n      text += matcher.getOptionsDisplayText ? matcher.getOptionsDisplayText(sub) : matcher.name;\n    }\n    return text;\n  },\n};\n\nconst anyFrameMatcher: FrameMatcherInfo<MatcherConfig[]> = {\n  id: MatcherID.anyMatch,\n  name: 'Any',\n  description: 'Any child matches (OR)',\n  excludeFromPicker: true,\n  defaultOptions: [], // empty array\n\n  get: (options: MatcherConfig[]) => {\n    const children = options.map((option) => {\n      return getFrameMatchers(option);\n    });\n    return (frame: DataFrame) => {\n      for (const child of children) {\n        if (child(frame)) {\n          return true;\n        }\n      }\n      return false;\n    };\n  },\n\n  getOptionsDisplayText: (options: MatcherConfig[]) => {\n    let text = '';\n    for (const sub of options) {\n      if (text.length > 0) {\n        text += ' OR ';\n      }\n      const matcher = frameMatchers.get(sub.id);\n      text += matcher.getOptionsDisplayText ? matcher.getOptionsDisplayText(sub) : matcher.name;\n    }\n    return text;\n  },\n};\n\nconst allFieldsMatcher: FieldMatcherInfo<MatcherConfig[]> = {\n  id: MatcherID.allMatch,\n  name: 'All',\n  description: 'Everything matches (AND)',\n  excludeFromPicker: true,\n  defaultOptions: [], // empty array\n\n  get: (options: MatcherConfig[]) => {\n    const children = options.map((option) => {\n      return getFieldMatcher(option);\n    });\n    return (field: Field, frame: DataFrame, allFrames: DataFrame[]) => {\n      for (const child of children) {\n        if (!child(field, frame, allFrames)) {\n          return false;\n        }\n      }\n      return true;\n    };\n  },\n\n  getOptionsDisplayText: (options: MatcherConfig[]) => {\n    let text = '';\n    for (const sub of options) {\n      if (text.length > 0) {\n        text += ' AND ';\n      }\n      const matcher = fieldMatchers.get(sub.id); // Ugho what about frame\n      text += matcher.getOptionsDisplayText ? matcher.getOptionsDisplayText(sub) : matcher.name;\n    }\n    return text;\n  },\n};\n\nconst allFramesMatcher: FrameMatcherInfo<MatcherConfig[]> = {\n  id: MatcherID.allMatch,\n  name: 'All',\n  description: 'Everything matches (AND)',\n  excludeFromPicker: true,\n  defaultOptions: [], // empty array\n\n  get: (options: MatcherConfig[]) => {\n    const children = options.map((option) => {\n      return getFrameMatchers(option);\n    });\n    return (frame: DataFrame) => {\n      for (const child of children) {\n        if (!child(frame)) {\n          return false;\n        }\n      }\n      return true;\n    };\n  },\n\n  getOptionsDisplayText: (options: MatcherConfig[]) => {\n    let text = '';\n    for (const sub of options) {\n      if (text.length > 0) {\n        text += ' AND ';\n      }\n      const matcher = frameMatchers.get(sub.id);\n      text += matcher.getOptionsDisplayText ? matcher.getOptionsDisplayText(sub) : matcher.name;\n    }\n    return text;\n  },\n};\n\nconst notFieldMatcher: FieldMatcherInfo<MatcherConfig> = {\n  id: MatcherID.invertMatch,\n  name: 'NOT',\n  description: 'Inverts other matchers',\n  excludeFromPicker: true,\n\n  get: (option: MatcherConfig) => {\n    const check = getFieldMatcher(option);\n    return (field: Field, frame: DataFrame, allFrames: DataFrame[]) => {\n      return !check(field, frame, allFrames);\n    };\n  },\n\n  getOptionsDisplayText: (options: MatcherConfig) => {\n    const matcher = fieldMatchers.get(options.id);\n    const text = matcher.getOptionsDisplayText ? matcher.getOptionsDisplayText(options.options) : matcher.name;\n    return 'NOT ' + text;\n  },\n};\n\nconst notFrameMatcher: FrameMatcherInfo<MatcherConfig> = {\n  id: MatcherID.invertMatch,\n  name: 'NOT',\n  description: 'Inverts other matchers',\n  excludeFromPicker: true,\n\n  get: (option: MatcherConfig) => {\n    const check = getFrameMatchers(option);\n    return (frame: DataFrame) => {\n      return !check(frame);\n    };\n  },\n\n  getOptionsDisplayText: (options: MatcherConfig) => {\n    const matcher = frameMatchers.get(options.id);\n    const text = matcher.getOptionsDisplayText ? matcher.getOptionsDisplayText(options.options) : matcher.name;\n    return 'NOT ' + text;\n  },\n};\n\nexport const alwaysFieldMatcher = (field: Field) => {\n  return true;\n};\n\nconst alwaysFrameMatcher = (frame: DataFrame) => {\n  return true;\n};\n\nconst neverFieldMatcher = (field: Field) => {\n  return false;\n};\n\nexport const notTimeFieldMatcher = (field: Field) => {\n  return field.type !== FieldType.time;\n};\n\nconst neverFrameMatcher = (frame: DataFrame) => {\n  return false;\n};\n\nconst alwaysFieldMatcherInfo: FieldMatcherInfo = {\n  id: MatcherID.alwaysMatch,\n  name: 'All Fields',\n  description: 'Always Match',\n\n  get: (_option) => {\n    return alwaysFieldMatcher;\n  },\n\n  getOptionsDisplayText: (_options) => {\n    return 'Always';\n  },\n};\n\nconst alwaysFrameMatcherInfo: FrameMatcherInfo = {\n  id: MatcherID.alwaysMatch,\n  name: 'All Frames',\n  description: 'Always Match',\n\n  get: (_option) => {\n    return alwaysFrameMatcher;\n  },\n\n  getOptionsDisplayText: (_options) => {\n    return 'Always';\n  },\n};\n\nconst neverFieldMatcherInfo: FieldMatcherInfo = {\n  id: MatcherID.neverMatch,\n  name: 'No Fields',\n  description: 'Never Match',\n  excludeFromPicker: true,\n\n  get: (_option) => {\n    return neverFieldMatcher;\n  },\n\n  getOptionsDisplayText: (_options) => {\n    return 'Never';\n  },\n};\n\nconst neverFrameMatcherInfo: FrameMatcherInfo = {\n  id: MatcherID.neverMatch,\n  name: 'No Frames',\n  description: 'Never Match',\n\n  get: (_option) => {\n    return neverFrameMatcher;\n  },\n\n  getOptionsDisplayText: (_options) => {\n    return 'Never';\n  },\n};\n\nexport function getFieldPredicateMatchers(): FieldMatcherInfo[] {\n  return [anyFieldMatcher, allFieldsMatcher, notFieldMatcher, alwaysFieldMatcherInfo, neverFieldMatcherInfo];\n}\n\nexport function getFramePredicateMatchers(): FrameMatcherInfo[] {\n  return [anyFrameMatcher, allFramesMatcher, notFrameMatcher, alwaysFrameMatcherInfo, neverFrameMatcherInfo];\n}\n"],"names":[],"mappings":"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"}