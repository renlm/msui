{"version":3,"file":"fieldTypeMatcher.js","sources":["../../../../src/transformations/matchers/fieldTypeMatcher.ts"],"sourcesContent":["import { Field, FieldType, DataFrame } from '../../types/dataFrame';\nimport { FieldMatcherInfo } from '../../types/transformations';\n\nimport { FieldMatcherID } from './ids';\n\n// General Field matcher\nconst fieldTypeMatcher: FieldMatcherInfo<FieldType> = {\n  id: FieldMatcherID.byType,\n  name: 'Field Type',\n  description: 'match based on the field type',\n  defaultOptions: FieldType.number,\n\n  get: (type: FieldType) => {\n    return (field: Field, frame: DataFrame, allFrames: DataFrame[]) => {\n      return type === field.type;\n    };\n  },\n\n  getOptionsDisplayText: (type: FieldType) => {\n    return `Field type: ${type}`;\n  },\n};\n\n// General Field matcher (multiple types)\nconst fieldTypesMatcher: FieldMatcherInfo<Set<FieldType>> = {\n  id: FieldMatcherID.byTypes,\n  name: 'Field Type',\n  description: 'match based on the field types',\n  defaultOptions: new Set(),\n\n  get: (types) => {\n    return (field: Field, frame: DataFrame, allFrames: DataFrame[]) => {\n      return types.has(field.type);\n    };\n  },\n\n  getOptionsDisplayText: (types) => {\n    return `Field types: ${[...types].join(' | ')}`;\n  },\n};\n\n// Numeric Field matcher\n// This gets its own entry so it shows up in the dropdown\nconst numericMatcher: FieldMatcherInfo = {\n  id: FieldMatcherID.numeric,\n  name: 'Numeric Fields',\n  description: 'Fields with type number',\n\n  get: () => {\n    return fieldTypeMatcher.get(FieldType.number);\n  },\n\n  getOptionsDisplayText: () => {\n    return 'Numeric Fields';\n  },\n};\n\n// Time Field matcher\nconst timeMatcher: FieldMatcherInfo = {\n  id: FieldMatcherID.time,\n  name: 'Time Fields',\n  description: 'Fields with type time',\n\n  get: () => {\n    return fieldTypeMatcher.get(FieldType.time);\n  },\n\n  getOptionsDisplayText: () => {\n    return 'Time Fields';\n  },\n};\n\n/**\n * Registry Initialization\n */\nexport function getFieldTypeMatchers(): FieldMatcherInfo[] {\n  return [fieldTypeMatcher, fieldTypesMatcher, numericMatcher, timeMatcher];\n}\n"],"names":[],"mappings":";;;AAMA,MAAM,gBAAgD,GAAA;AAAA,EACpD,IAAI,cAAe,CAAA,MAAA;AAAA,EACnB,IAAM,EAAA,YAAA;AAAA,EACN,WAAa,EAAA,+BAAA;AAAA,EACb,gBAAgB,SAAU,CAAA,MAAA;AAAA,EAE1B,GAAA,EAAK,CAAC,IAAoB,KAAA;AACxB,IAAO,OAAA,CAAC,KAAc,EAAA,KAAA,EAAkB,SAA2B,KAAA;AACjE,MAAA,OAAO,SAAS,KAAM,CAAA,IAAA,CAAA;AAAA,KACxB,CAAA;AAAA,GACF;AAAA,EAEA,qBAAA,EAAuB,CAAC,IAAoB,KAAA;AAC1C,IAAA,OAAO,eAAe,IAAI,CAAA,CAAA,CAAA;AAAA,GAC5B;AACF,CAAA,CAAA;AAGA,MAAM,iBAAsD,GAAA;AAAA,EAC1D,IAAI,cAAe,CAAA,OAAA;AAAA,EACnB,IAAM,EAAA,YAAA;AAAA,EACN,WAAa,EAAA,gCAAA;AAAA,EACb,cAAA,sBAAoB,GAAI,EAAA;AAAA,EAExB,GAAA,EAAK,CAAC,KAAU,KAAA;AACd,IAAO,OAAA,CAAC,KAAc,EAAA,KAAA,EAAkB,SAA2B,KAAA;AACjE,MAAO,OAAA,KAAA,CAAM,GAAI,CAAA,KAAA,CAAM,IAAI,CAAA,CAAA;AAAA,KAC7B,CAAA;AAAA,GACF;AAAA,EAEA,qBAAA,EAAuB,CAAC,KAAU,KAAA;AAChC,IAAA,OAAO,gBAAgB,CAAC,GAAG,KAAK,CAAE,CAAA,IAAA,CAAK,KAAK,CAAC,CAAA,CAAA,CAAA;AAAA,GAC/C;AACF,CAAA,CAAA;AAIA,MAAM,cAAmC,GAAA;AAAA,EACvC,IAAI,cAAe,CAAA,OAAA;AAAA,EACnB,IAAM,EAAA,gBAAA;AAAA,EACN,WAAa,EAAA,yBAAA;AAAA,EAEb,KAAK,MAAM;AACT,IAAO,OAAA,gBAAA,CAAiB,GAAI,CAAA,SAAA,CAAU,MAAM,CAAA,CAAA;AAAA,GAC9C;AAAA,EAEA,uBAAuB,MAAM;AAC3B,IAAO,OAAA,gBAAA,CAAA;AAAA,GACT;AACF,CAAA,CAAA;AAGA,MAAM,WAAgC,GAAA;AAAA,EACpC,IAAI,cAAe,CAAA,IAAA;AAAA,EACnB,IAAM,EAAA,aAAA;AAAA,EACN,WAAa,EAAA,uBAAA;AAAA,EAEb,KAAK,MAAM;AACT,IAAO,OAAA,gBAAA,CAAiB,GAAI,CAAA,SAAA,CAAU,IAAI,CAAA,CAAA;AAAA,GAC5C;AAAA,EAEA,uBAAuB,MAAM;AAC3B,IAAO,OAAA,aAAA,CAAA;AAAA,GACT;AACF,CAAA,CAAA;AAKO,SAAS,oBAA2C,GAAA;AACzD,EAAA,OAAO,CAAC,gBAAA,EAAkB,iBAAmB,EAAA,cAAA,EAAgB,WAAW,CAAA,CAAA;AAC1E;;;;"}