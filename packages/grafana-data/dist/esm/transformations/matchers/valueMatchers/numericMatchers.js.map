{"version":3,"file":"numericMatchers.js","sources":["../../../../../src/transformations/matchers/valueMatchers/numericMatchers.ts"],"sourcesContent":["import { Field, FieldType } from '../../../types/dataFrame';\nimport { ValueMatcherInfo } from '../../../types/transformations';\nimport { ValueMatcherID } from '../ids';\n\nimport { BasicValueMatcherOptions } from './types';\n\nconst isGreaterValueMatcher: ValueMatcherInfo<BasicValueMatcherOptions> = {\n  id: ValueMatcherID.greater,\n  name: 'Is greater',\n  description: 'Match when field value is greater than option.',\n  get: (options) => {\n    return (valueIndex: number, field: Field) => {\n      const value = field.values[valueIndex];\n      if (isNaN(value)) {\n        return false;\n      }\n      return value > options.value;\n    };\n  },\n  getOptionsDisplayText: (options) => {\n    return `Matches all rows where field value is greater than: ${options.value}.`;\n  },\n  isApplicable: (field) => field.type === FieldType.number,\n  getDefaultOptions: () => ({ value: 0 }),\n};\n\nconst isGreaterOrEqualValueMatcher: ValueMatcherInfo<BasicValueMatcherOptions> = {\n  id: ValueMatcherID.greaterOrEqual,\n  name: 'Is greater or equal',\n  description: 'Match when field value is greater than or equal to option.',\n  get: (options) => {\n    return (valueIndex: number, field: Field) => {\n      const value = field.values[valueIndex];\n      if (isNaN(value)) {\n        return false;\n      }\n      return value >= options.value;\n    };\n  },\n  getOptionsDisplayText: (options) => {\n    return `Matches all rows where field value is greater than or equal to: ${options.value}.`;\n  },\n  isApplicable: (field) => field.type === FieldType.number,\n  getDefaultOptions: () => ({ value: 0 }),\n};\n\nconst isLowerValueMatcher: ValueMatcherInfo<BasicValueMatcherOptions> = {\n  id: ValueMatcherID.lower,\n  name: 'Is lower',\n  description: 'Match when field value is lower than option.',\n  get: (options) => {\n    return (valueIndex: number, field: Field) => {\n      const value = field.values[valueIndex];\n      if (isNaN(value)) {\n        return false;\n      }\n      return value < options.value;\n    };\n  },\n  getOptionsDisplayText: (options) => {\n    return `Matches all rows where field value is lower than: ${options.value}.`;\n  },\n  isApplicable: (field) => field.type === FieldType.number,\n  getDefaultOptions: () => ({ value: 0 }),\n};\n\nconst isLowerOrEqualValueMatcher: ValueMatcherInfo<BasicValueMatcherOptions> = {\n  id: ValueMatcherID.lowerOrEqual,\n  name: 'Is lower or equal',\n  description: 'Match when field value is lower or equal than option.',\n  get: (options) => {\n    return (valueIndex: number, field: Field) => {\n      const value = field.values[valueIndex];\n      if (isNaN(value)) {\n        return false;\n      }\n      return value <= options.value;\n    };\n  },\n  getOptionsDisplayText: (options) => {\n    return `Matches all rows where field value is lower or equal than: ${options.value}.`;\n  },\n  isApplicable: (field) => field.type === FieldType.number,\n  getDefaultOptions: () => ({ value: 0 }),\n};\n\nexport const getNumericValueMatchers = (): ValueMatcherInfo[] => [\n  isGreaterValueMatcher,\n  isGreaterOrEqualValueMatcher,\n  isLowerValueMatcher,\n  isLowerOrEqualValueMatcher,\n];\n"],"names":[],"mappings":";;;AAMA,MAAM,qBAAoE,GAAA;AAAA,EACxE,IAAI,cAAe,CAAA,OAAA;AAAA,EACnB,IAAM,EAAA,YAAA;AAAA,EACN,WAAa,EAAA,gDAAA;AAAA,EACb,GAAA,EAAK,CAAC,OAAY,KAAA;AAChB,IAAO,OAAA,CAAC,YAAoB,KAAiB,KAAA;AAC3C,MAAM,MAAA,KAAA,GAAQ,KAAM,CAAA,MAAA,CAAO,UAAU,CAAA,CAAA;AACrC,MAAI,IAAA,KAAA,CAAM,KAAK,CAAG,EAAA;AAChB,QAAO,OAAA,KAAA,CAAA;AAAA,OACT;AACA,MAAA,OAAO,QAAQ,OAAQ,CAAA,KAAA,CAAA;AAAA,KACzB,CAAA;AAAA,GACF;AAAA,EACA,qBAAA,EAAuB,CAAC,OAAY,KAAA;AAClC,IAAO,OAAA,CAAA,oDAAA,EAAuD,QAAQ,KAAK,CAAA,CAAA,CAAA,CAAA;AAAA,GAC7E;AAAA,EACA,YAAc,EAAA,CAAC,KAAU,KAAA,KAAA,CAAM,SAAS,SAAU,CAAA,MAAA;AAAA,EAClD,iBAAmB,EAAA,OAAO,EAAE,KAAA,EAAO,CAAE,EAAA,CAAA;AACvC,CAAA,CAAA;AAEA,MAAM,4BAA2E,GAAA;AAAA,EAC/E,IAAI,cAAe,CAAA,cAAA;AAAA,EACnB,IAAM,EAAA,qBAAA;AAAA,EACN,WAAa,EAAA,4DAAA;AAAA,EACb,GAAA,EAAK,CAAC,OAAY,KAAA;AAChB,IAAO,OAAA,CAAC,YAAoB,KAAiB,KAAA;AAC3C,MAAM,MAAA,KAAA,GAAQ,KAAM,CAAA,MAAA,CAAO,UAAU,CAAA,CAAA;AACrC,MAAI,IAAA,KAAA,CAAM,KAAK,CAAG,EAAA;AAChB,QAAO,OAAA,KAAA,CAAA;AAAA,OACT;AACA,MAAA,OAAO,SAAS,OAAQ,CAAA,KAAA,CAAA;AAAA,KAC1B,CAAA;AAAA,GACF;AAAA,EACA,qBAAA,EAAuB,CAAC,OAAY,KAAA;AAClC,IAAO,OAAA,CAAA,gEAAA,EAAmE,QAAQ,KAAK,CAAA,CAAA,CAAA,CAAA;AAAA,GACzF;AAAA,EACA,YAAc,EAAA,CAAC,KAAU,KAAA,KAAA,CAAM,SAAS,SAAU,CAAA,MAAA;AAAA,EAClD,iBAAmB,EAAA,OAAO,EAAE,KAAA,EAAO,CAAE,EAAA,CAAA;AACvC,CAAA,CAAA;AAEA,MAAM,mBAAkE,GAAA;AAAA,EACtE,IAAI,cAAe,CAAA,KAAA;AAAA,EACnB,IAAM,EAAA,UAAA;AAAA,EACN,WAAa,EAAA,8CAAA;AAAA,EACb,GAAA,EAAK,CAAC,OAAY,KAAA;AAChB,IAAO,OAAA,CAAC,YAAoB,KAAiB,KAAA;AAC3C,MAAM,MAAA,KAAA,GAAQ,KAAM,CAAA,MAAA,CAAO,UAAU,CAAA,CAAA;AACrC,MAAI,IAAA,KAAA,CAAM,KAAK,CAAG,EAAA;AAChB,QAAO,OAAA,KAAA,CAAA;AAAA,OACT;AACA,MAAA,OAAO,QAAQ,OAAQ,CAAA,KAAA,CAAA;AAAA,KACzB,CAAA;AAAA,GACF;AAAA,EACA,qBAAA,EAAuB,CAAC,OAAY,KAAA;AAClC,IAAO,OAAA,CAAA,kDAAA,EAAqD,QAAQ,KAAK,CAAA,CAAA,CAAA,CAAA;AAAA,GAC3E;AAAA,EACA,YAAc,EAAA,CAAC,KAAU,KAAA,KAAA,CAAM,SAAS,SAAU,CAAA,MAAA;AAAA,EAClD,iBAAmB,EAAA,OAAO,EAAE,KAAA,EAAO,CAAE,EAAA,CAAA;AACvC,CAAA,CAAA;AAEA,MAAM,0BAAyE,GAAA;AAAA,EAC7E,IAAI,cAAe,CAAA,YAAA;AAAA,EACnB,IAAM,EAAA,mBAAA;AAAA,EACN,WAAa,EAAA,uDAAA;AAAA,EACb,GAAA,EAAK,CAAC,OAAY,KAAA;AAChB,IAAO,OAAA,CAAC,YAAoB,KAAiB,KAAA;AAC3C,MAAM,MAAA,KAAA,GAAQ,KAAM,CAAA,MAAA,CAAO,UAAU,CAAA,CAAA;AACrC,MAAI,IAAA,KAAA,CAAM,KAAK,CAAG,EAAA;AAChB,QAAO,OAAA,KAAA,CAAA;AAAA,OACT;AACA,MAAA,OAAO,SAAS,OAAQ,CAAA,KAAA,CAAA;AAAA,KAC1B,CAAA;AAAA,GACF;AAAA,EACA,qBAAA,EAAuB,CAAC,OAAY,KAAA;AAClC,IAAO,OAAA,CAAA,2DAAA,EAA8D,QAAQ,KAAK,CAAA,CAAA,CAAA,CAAA;AAAA,GACpF;AAAA,EACA,YAAc,EAAA,CAAC,KAAU,KAAA,KAAA,CAAM,SAAS,SAAU,CAAA,MAAA;AAAA,EAClD,iBAAmB,EAAA,OAAO,EAAE,KAAA,EAAO,CAAE,EAAA,CAAA;AACvC,CAAA,CAAA;AAEO,MAAM,0BAA0B,MAA0B;AAAA,EAC/D,qBAAA;AAAA,EACA,4BAAA;AAAA,EACA,mBAAA;AAAA,EACA,0BAAA;AACF;;;;"}