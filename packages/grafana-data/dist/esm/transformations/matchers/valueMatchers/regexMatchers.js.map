{"version":3,"file":"regexMatchers.js","sources":["../../../../../src/transformations/matchers/valueMatchers/regexMatchers.ts"],"sourcesContent":["import { Field } from '../../../types/dataFrame';\nimport { ValueMatcherInfo } from '../../../types/transformations';\nimport { ValueMatcherID } from '../ids';\n\nimport { BasicValueMatcherOptions } from './types';\n\nconst regexValueMatcher: ValueMatcherInfo<BasicValueMatcherOptions<string>> = {\n  id: ValueMatcherID.regex,\n  name: 'Regex',\n  description: 'Match when field value is matching regex.',\n  get: (options) => {\n    const regex = new RegExp(options.value);\n\n    return (valueIndex: number, field: Field) => {\n      const value = field.values[valueIndex];\n      return regex.test(value);\n    };\n  },\n  getOptionsDisplayText: (options) => {\n    return `Matches all rows where field value is matching regex: ${options.value}`;\n  },\n  isApplicable: () => true,\n  getDefaultOptions: () => ({ value: '.*' }),\n};\n\nexport const getRegexValueMatcher = (): ValueMatcherInfo[] => [regexValueMatcher];\n"],"names":[],"mappings":";;AAMA,MAAM,iBAAwE,GAAA;AAAA,EAC5E,IAAI,cAAe,CAAA,KAAA;AAAA,EACnB,IAAM,EAAA,OAAA;AAAA,EACN,WAAa,EAAA,2CAAA;AAAA,EACb,GAAA,EAAK,CAAC,OAAY,KAAA;AAChB,IAAA,MAAM,KAAQ,GAAA,IAAI,MAAO,CAAA,OAAA,CAAQ,KAAK,CAAA,CAAA;AAEtC,IAAO,OAAA,CAAC,YAAoB,KAAiB,KAAA;AAC3C,MAAM,MAAA,KAAA,GAAQ,KAAM,CAAA,MAAA,CAAO,UAAU,CAAA,CAAA;AACrC,MAAO,OAAA,KAAA,CAAM,KAAK,KAAK,CAAA,CAAA;AAAA,KACzB,CAAA;AAAA,GACF;AAAA,EACA,qBAAA,EAAuB,CAAC,OAAY,KAAA;AAClC,IAAO,OAAA,CAAA,sDAAA,EAAyD,QAAQ,KAAK,CAAA,CAAA,CAAA;AAAA,GAC/E;AAAA,EACA,cAAc,MAAM,IAAA;AAAA,EACpB,iBAAmB,EAAA,OAAO,EAAE,KAAA,EAAO,IAAK,EAAA,CAAA;AAC1C,CAAA,CAAA;AAEa,MAAA,oBAAA,GAAuB,MAA0B,CAAC,iBAAiB;;;;"}