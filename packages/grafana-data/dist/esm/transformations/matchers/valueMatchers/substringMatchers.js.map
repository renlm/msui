{"version":3,"file":"substringMatchers.js","sources":["../../../../../src/transformations/matchers/valueMatchers/substringMatchers.ts"],"sourcesContent":["import { Field, FieldType } from '../../../types/dataFrame';\nimport { ValueMatcherInfo } from '../../../types/transformations';\nimport { ValueMatcherID } from '../ids';\n\nimport { BasicValueMatcherOptions } from './types';\n\nconst isSubstringMatcher: ValueMatcherInfo<BasicValueMatcherOptions> = {\n  id: ValueMatcherID.substring,\n  name: 'Contains substring',\n  description: 'Match where value for given field is a substring to options value.',\n  get: (options) => {\n    return (valueIndex: number, field: Field) => {\n      const value = field.values[valueIndex];\n      return (\n        (value &&\n          options.value &&\n          typeof value === 'string' &&\n          value.toLowerCase().includes(options.value.toLowerCase())) ||\n        options.value === ''\n      );\n    };\n  },\n  getOptionsDisplayText: () => {\n    return `Matches all rows where field is similar to the value.`;\n  },\n  isApplicable: (field) => field.type === FieldType.string,\n  getDefaultOptions: () => ({ value: '' }),\n};\n\nconst isNotSubstringValueMatcher: ValueMatcherInfo<BasicValueMatcherOptions> = {\n  id: ValueMatcherID.notSubstring,\n  name: 'Does not contain substring',\n  description: 'Match where value for given field is not a substring to options value.',\n  get: (options) => {\n    return (valueIndex: number, field: Field) => {\n      const value = field.values[valueIndex];\n      return (\n        typeof value === 'string' &&\n        options.value &&\n        value &&\n        options.value !== '' &&\n        !value.toLowerCase().includes(options.value.toLowerCase())\n      );\n    };\n  },\n  getOptionsDisplayText: () => {\n    return `Matches all rows where field is not similar to the value.`;\n  },\n  isApplicable: (field) => field.type === FieldType.string,\n  getDefaultOptions: () => ({ value: '' }),\n};\n\nexport const getSubstringValueMatchers = (): ValueMatcherInfo[] => [isSubstringMatcher, isNotSubstringValueMatcher];\n"],"names":[],"mappings":";;;AAMA,MAAM,kBAAiE,GAAA;AAAA,EACrE,IAAI,cAAe,CAAA,SAAA;AAAA,EACnB,IAAM,EAAA,oBAAA;AAAA,EACN,WAAa,EAAA,oEAAA;AAAA,EACb,GAAA,EAAK,CAAC,OAAY,KAAA;AAChB,IAAO,OAAA,CAAC,YAAoB,KAAiB,KAAA;AAC3C,MAAM,MAAA,KAAA,GAAQ,KAAM,CAAA,MAAA,CAAO,UAAU,CAAA,CAAA;AACrC,MAAA,OACG,SACC,OAAQ,CAAA,KAAA,IACR,OAAO,KAAA,KAAU,YACjB,KAAM,CAAA,WAAA,EAAc,CAAA,QAAA,CAAS,QAAQ,KAAM,CAAA,WAAA,EAAa,CAAA,IAC1D,QAAQ,KAAU,KAAA,EAAA,CAAA;AAAA,KAEtB,CAAA;AAAA,GACF;AAAA,EACA,uBAAuB,MAAM;AAC3B,IAAO,OAAA,CAAA,qDAAA,CAAA,CAAA;AAAA,GACT;AAAA,EACA,YAAc,EAAA,CAAC,KAAU,KAAA,KAAA,CAAM,SAAS,SAAU,CAAA,MAAA;AAAA,EAClD,iBAAmB,EAAA,OAAO,EAAE,KAAA,EAAO,EAAG,EAAA,CAAA;AACxC,CAAA,CAAA;AAEA,MAAM,0BAAyE,GAAA;AAAA,EAC7E,IAAI,cAAe,CAAA,YAAA;AAAA,EACnB,IAAM,EAAA,4BAAA;AAAA,EACN,WAAa,EAAA,wEAAA;AAAA,EACb,GAAA,EAAK,CAAC,OAAY,KAAA;AAChB,IAAO,OAAA,CAAC,YAAoB,KAAiB,KAAA;AAC3C,MAAM,MAAA,KAAA,GAAQ,KAAM,CAAA,MAAA,CAAO,UAAU,CAAA,CAAA;AACrC,MAAA,OACE,OAAO,KAAU,KAAA,QAAA,IACjB,OAAQ,CAAA,KAAA,IACR,SACA,OAAQ,CAAA,KAAA,KAAU,EAClB,IAAA,CAAC,MAAM,WAAY,EAAA,CAAE,SAAS,OAAQ,CAAA,KAAA,CAAM,aAAa,CAAA,CAAA;AAAA,KAE7D,CAAA;AAAA,GACF;AAAA,EACA,uBAAuB,MAAM;AAC3B,IAAO,OAAA,CAAA,yDAAA,CAAA,CAAA;AAAA,GACT;AAAA,EACA,YAAc,EAAA,CAAC,KAAU,KAAA,KAAA,CAAM,SAAS,SAAU,CAAA,MAAA;AAAA,EAClD,iBAAmB,EAAA,OAAO,EAAE,KAAA,EAAO,EAAG,EAAA,CAAA;AACxC,CAAA,CAAA;AAEO,MAAM,yBAA4B,GAAA,MAA0B,CAAC,kBAAA,EAAoB,0BAA0B;;;;"}