{"version":3,"file":"common.js","sources":["../../../src/events/common.ts"],"sourcesContent":["import { AnnotationEvent, DataFrame } from '../types';\n\nimport { BusEventBase, BusEventWithPayload } from './types';\n\n/**\n * When hovering over an element this will identify\n *\n * For performance reasons, this object will usually be mutated between updates.  This\n * will avoid creating new objects for events that fire frequently (ie each mouse pixel)\n *\n * @alpha\n */\nexport interface DataHoverPayload {\n  data?: DataFrame; // source data\n  rowIndex?: number; // the hover row\n  columnIndex?: number; // the hover column\n  dataId?: string; // identifying string to correlate data between publishers and subscribers\n\n  // When dragging, this will capture the point when the mouse was down\n  point: Record<string, number | null>; // { time: 5678, lengthft: 456 }  // each axis|scale gets a value\n  down?: Record<string, number | null>;\n}\n\n/** @alpha */\nexport class DataHoverEvent extends BusEventWithPayload<DataHoverPayload> {\n  static type = 'data-hover';\n}\n\n/** @alpha */\nexport class DataHoverClearEvent extends BusEventBase {\n  static type = 'data-hover-clear';\n}\n\n/** @alpha */\nexport class DataSelectEvent extends BusEventWithPayload<DataHoverPayload> {\n  static type = 'data-select';\n}\n\n/** @alpha */\nexport class AnnotationChangeEvent extends BusEventWithPayload<Partial<AnnotationEvent>> {\n  static type = 'annotation-event';\n}\n\n// Loaded the first time a dashboard is loaded (not on every render)\nexport type DashboardLoadedEventPayload<T> = {\n  dashboardId: string; // eeep, this should be UID\n  orgId?: number;\n  userId?: number;\n  grafanaVersion?: string;\n  queries: Record<string, T[]>;\n};\n\n/** @alpha */\nexport class DashboardLoadedEvent<T> extends BusEventWithPayload<DashboardLoadedEventPayload<T>> {\n  static type = 'dashboard-loaded';\n}\nexport class DataSourceUpdatedSuccessfully extends BusEventBase {\n  static type = 'datasource-updated-successfully';\n}\nexport class DataSourceTestSucceeded extends BusEventBase {\n  static type = 'datasource-test-succeeded';\n}\n\nexport class DataSourceTestFailed extends BusEventBase {\n  static type = 'datasource-test-failed';\n}\n\nexport class SetPanelAttentionEvent extends BusEventWithPayload<{ panelId: string | number }> {\n  static type = 'set-panel-attention';\n}\n"],"names":[],"mappings":";;;;;;;;AAwBO,MAAM,uBAAuB,mBAAsC,CAAA;AAE1E,CAAA;AADE,aAAA,CADW,gBACJ,MAAO,EAAA,YAAA,CAAA,CAAA;AAIT,MAAM,4BAA4B,YAAa,CAAA;AAEtD,CAAA;AADE,aAAA,CADW,qBACJ,MAAO,EAAA,kBAAA,CAAA,CAAA;AAIT,MAAM,wBAAwB,mBAAsC,CAAA;AAE3E,CAAA;AADE,aAAA,CADW,iBACJ,MAAO,EAAA,aAAA,CAAA,CAAA;AAIT,MAAM,8BAA8B,mBAA8C,CAAA;AAEzF,CAAA;AADE,aAAA,CADW,uBACJ,MAAO,EAAA,kBAAA,CAAA,CAAA;AAaT,MAAM,6BAAgC,mBAAoD,CAAA;AAEjG,CAAA;AADE,aAAA,CADW,sBACJ,MAAO,EAAA,kBAAA,CAAA,CAAA;AAET,MAAM,sCAAsC,YAAa,CAAA;AAEhE,CAAA;AADE,aAAA,CADW,+BACJ,MAAO,EAAA,iCAAA,CAAA,CAAA;AAET,MAAM,gCAAgC,YAAa,CAAA;AAE1D,CAAA;AADE,aAAA,CADW,yBACJ,MAAO,EAAA,2BAAA,CAAA,CAAA;AAGT,MAAM,6BAA6B,YAAa,CAAA;AAEvD,CAAA;AADE,aAAA,CADW,sBACJ,MAAO,EAAA,wBAAA,CAAA,CAAA;AAGT,MAAM,+BAA+B,mBAAkD,CAAA;AAE9F,CAAA;AADE,aAAA,CADW,wBACJ,MAAO,EAAA,qBAAA,CAAA;;;;"}