{"version":3,"file":"valueFormats.js","sources":["../../../src/valueFormats/valueFormats.ts"],"sourcesContent":["import { clamp } from 'lodash';\n\nimport { TimeZone } from '../types';\nimport { DecimalCount } from '../types/displayValue';\n\nimport { getCategories } from './categories';\nimport { toDateTimeValueFormatter } from './dateTimeFormatters';\nimport { getOffsetFromSIPrefix, SIPrefix, currency } from './symbolFormatters';\n\nexport interface FormattedValue {\n  text: string;\n  prefix?: string;\n  suffix?: string;\n}\n\nexport function formattedValueToString(val: FormattedValue): string {\n  return `${val.prefix ?? ''}${val.text}${val.suffix ?? ''}`;\n}\n\nexport type ValueFormatter = (\n  value: number,\n  decimals?: DecimalCount,\n  scaledDecimals?: DecimalCount,\n  timeZone?: TimeZone,\n  showMs?: boolean\n) => FormattedValue;\n\nexport interface ValueFormat {\n  name: string;\n  id: string;\n  fn: ValueFormatter;\n}\n\nexport interface ValueFormatCategory {\n  name: string;\n  formats: ValueFormat[];\n}\n\nexport interface ValueFormatterIndex {\n  [id: string]: ValueFormatter;\n}\n\n// Globals & formats cache\nlet categories: ValueFormatCategory[] = [];\nconst index: ValueFormatterIndex = {};\nlet hasBuiltIndex = false;\n\nexport function toFixed(value: number, decimals?: DecimalCount): string {\n  if (value === null) {\n    return '';\n  }\n\n  if (value === Number.NEGATIVE_INFINITY || value === Number.POSITIVE_INFINITY) {\n    return value.toLocaleString();\n  }\n\n  if (decimals === null || decimals === undefined) {\n    decimals = getDecimalsForValue(value);\n  }\n\n  if (value === 0) {\n    return value.toFixed(decimals);\n  }\n\n  const factor = decimals ? Math.pow(10, Math.max(0, decimals)) : 1;\n  const formatted = String(Math.round(value * factor) / factor);\n\n  // if exponent return directly\n  if (formatted.indexOf('e') !== -1 || value === 0) {\n    return formatted;\n  }\n\n  const decimalPos = formatted.indexOf('.');\n  const precision = decimalPos === -1 ? 0 : formatted.length - decimalPos - 1;\n  if (precision < decimals) {\n    return (precision ? formatted : formatted + '.') + String(factor).slice(1, decimals - precision + 1);\n  }\n\n  return formatted;\n}\n\nfunction getDecimalsForValue(value: number): number {\n  const absValue = Math.abs(value);\n  const log10 = Math.floor(Math.log(absValue) / Math.LN10);\n  let dec = -log10 + 1;\n  const magn = Math.pow(10, -dec);\n  const norm = absValue / magn; // norm is between 1.0 and 10.0\n\n  // special case for 2.5, requires an extra decimal\n  if (norm > 2.25) {\n    ++dec;\n  }\n\n  if (value % 1 === 0) {\n    dec = 0;\n  }\n\n  const decimals = Math.max(0, dec);\n  return decimals;\n}\n\nexport function toFixedScaled(value: number, decimals: DecimalCount, ext?: string): FormattedValue {\n  return {\n    text: toFixed(value, decimals),\n    suffix: appendPluralIf(ext, Math.abs(value) > 1),\n  };\n}\n\nfunction appendPluralIf(ext: string | undefined, condition: boolean): string | undefined {\n  if (!condition) {\n    return ext;\n  }\n\n  switch (ext) {\n    case ' min':\n    case ' hour':\n    case ' day':\n    case ' week':\n    case ' year':\n      return `${ext}s`;\n    default:\n      return ext;\n  }\n}\n\nexport function toFixedUnit(unit: string, asPrefix?: boolean): ValueFormatter {\n  return (size: number, decimals?: DecimalCount) => {\n    if (size === null) {\n      return { text: '' };\n    }\n    const text = toFixed(size, decimals);\n    if (unit) {\n      if (asPrefix) {\n        return { text, prefix: unit };\n      }\n      return { text, suffix: ' ' + unit };\n    }\n    return { text };\n  };\n}\n\nexport function isBooleanUnit(unit?: string) {\n  return unit && unit.startsWith('bool');\n}\n\nexport function booleanValueFormatter(t: string, f: string): ValueFormatter {\n  return (value) => {\n    return { text: value ? t : f };\n  };\n}\n\nconst logb = (b: number, x: number) => Math.log10(x) / Math.log10(b);\n\nexport function scaledUnits(factor: number, extArray: string[], offset = 0): ValueFormatter {\n  return (size: number, decimals?: DecimalCount) => {\n    if (size === null || size === undefined) {\n      return { text: '' };\n    }\n\n    if (size === Number.NEGATIVE_INFINITY || size === Number.POSITIVE_INFINITY || isNaN(size)) {\n      return { text: size.toLocaleString() };\n    }\n\n    const siIndex = size === 0 ? 0 : Math.floor(logb(factor, Math.abs(size)));\n    const suffix = extArray[clamp(offset + siIndex, 0, extArray.length - 1)];\n\n    return {\n      text: toFixed(size / factor ** clamp(siIndex, -offset, extArray.length - offset - 1), decimals),\n      suffix,\n    };\n  };\n}\n\nexport function locale(value: number, decimals: DecimalCount): FormattedValue {\n  if (value == null) {\n    return { text: '' };\n  }\n  return {\n    text: value.toLocaleString(undefined, { maximumFractionDigits: decimals ?? undefined }),\n  };\n}\n\nexport function simpleCountUnit(symbol: string): ValueFormatter {\n  const units = ['', 'K', 'M', 'B', 'T'];\n  const scaler = scaledUnits(1000, units);\n  return (size: number, decimals?: DecimalCount, scaledDecimals?: DecimalCount) => {\n    if (size === null) {\n      return { text: '' };\n    }\n    const v = scaler(size, decimals, scaledDecimals);\n    v.suffix += ' ' + symbol;\n    return v;\n  };\n}\n\nexport function stringFormater(value: number): FormattedValue {\n  return { text: `${value}` };\n}\n\nfunction buildFormats() {\n  categories = getCategories();\n\n  for (const cat of categories) {\n    for (const format of cat.formats) {\n      index[format.id] = format.fn;\n    }\n  }\n\n  // Resolve units pointing to old IDs\n  [{ from: 'farenheit', to: 'fahrenheit' }].forEach((alias) => {\n    const f = index[alias.to];\n    if (f) {\n      index[alias.from] = f;\n    }\n  });\n\n  hasBuiltIndex = true;\n}\n\nexport function getValueFormat(id?: string | null): ValueFormatter {\n  if (!id) {\n    return toFixedUnit('');\n  }\n\n  if (!hasBuiltIndex) {\n    buildFormats();\n  }\n\n  const fmt = index[id];\n\n  if (!fmt && id) {\n    let idx = id.indexOf(':');\n\n    if (idx > 0) {\n      const key = id.substring(0, idx);\n      const sub = id.substring(idx + 1);\n\n      if (key === 'prefix') {\n        return toFixedUnit(sub, true);\n      }\n\n      if (key === 'suffix') {\n        return toFixedUnit(sub, false);\n      }\n\n      if (key === 'time') {\n        return toDateTimeValueFormatter(sub);\n      }\n\n      if (key === 'si') {\n        const offset = getOffsetFromSIPrefix(sub.charAt(0));\n        const unit = offset === 0 ? sub : sub.substring(1);\n        return SIPrefix(unit, offset);\n      }\n\n      if (key === 'count') {\n        return simpleCountUnit(sub);\n      }\n\n      if (key === 'currency') {\n        return currency(sub);\n      }\n\n      if (key === 'bool') {\n        idx = sub.indexOf('/');\n        if (idx >= 0) {\n          const t = sub.substring(0, idx);\n          const f = sub.substring(idx + 1);\n          return booleanValueFormatter(t, f);\n        }\n        return booleanValueFormatter(sub, '-');\n      }\n    }\n\n    return toFixedUnit(id);\n  }\n\n  return fmt;\n}\n\nexport function getValueFormatterIndex(): ValueFormatterIndex {\n  if (!hasBuiltIndex) {\n    buildFormats();\n  }\n\n  return index;\n}\n\nexport function getValueFormats() {\n  if (!hasBuiltIndex) {\n    buildFormats();\n  }\n\n  return categories.map((cat) => {\n    return {\n      text: cat.name,\n      submenu: cat.formats.map((format) => {\n        return {\n          text: format.name,\n          value: format.id,\n        };\n      }),\n    };\n  });\n}\n"],"names":[],"mappings":"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"}