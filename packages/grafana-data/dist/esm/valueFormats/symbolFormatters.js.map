{"version":3,"file":"symbolFormatters.js","sources":["../../../src/valueFormats/symbolFormatters.ts"],"sourcesContent":["import { DecimalCount } from '../types/displayValue';\n\nimport { scaledUnits, ValueFormatter } from './valueFormats';\n\nexport function currency(symbol: string, asSuffix?: boolean): ValueFormatter {\n  const units = ['', 'K', 'M', 'B', 'T'];\n  const scaler = scaledUnits(1000, units);\n  return (value: number, decimals?: DecimalCount, scaledDecimals?: DecimalCount) => {\n    if (value == null) {\n      return { text: '' };\n    }\n    const isNegative = value < 0;\n    if (isNegative) {\n      value = Math.abs(value);\n    }\n    const scaled = scaler(value, decimals, scaledDecimals);\n    if (asSuffix) {\n      scaled.suffix = scaled.suffix !== undefined ? `${scaled.suffix}${symbol}` : undefined;\n    } else {\n      scaled.prefix = symbol;\n    }\n    if (isNegative) {\n      scaled.prefix = `-${scaled.prefix?.length ? scaled.prefix : ''}`;\n    }\n    return scaled;\n  };\n}\n\nconst SI_PREFIXES = ['f', 'p', 'n', 'Âµ', 'm', '', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];\nconst SI_BASE_INDEX = SI_PREFIXES.indexOf('');\n\nexport function getOffsetFromSIPrefix(c: string): number {\n  const charIndex = SI_PREFIXES.findIndex((prefix) => prefix.normalize('NFKD') === c.normalize('NFKD'));\n  return charIndex < 0 ? 0 : charIndex - SI_BASE_INDEX;\n}\n\nconst BIN_PREFIXES = ['', 'Ki', 'Mi', 'Gi', 'Ti', 'Pi', 'Ei', 'Zi', 'Yi'];\n\nexport function binaryPrefix(unit: string, offset = 0): ValueFormatter {\n  const units = BIN_PREFIXES.map((p) => ' ' + p + unit);\n  return scaledUnits(1024, units, offset);\n}\n\nexport function SIPrefix(unit: string, offset = 0): ValueFormatter {\n  const units = SI_PREFIXES.map((p) => ' ' + p + unit);\n  return scaledUnits(1000, units, SI_BASE_INDEX + offset);\n}\n"],"names":[],"mappings":";;AAIgB,SAAA,QAAA,CAAS,QAAgB,QAAoC,EAAA;AAC3E,EAAA,MAAM,QAAQ,CAAC,EAAA,EAAI,GAAK,EAAA,GAAA,EAAK,KAAK,GAAG,CAAA,CAAA;AACrC,EAAM,MAAA,MAAA,GAAS,WAAY,CAAA,GAAA,EAAM,KAAK,CAAA,CAAA;AACtC,EAAO,OAAA,CAAC,KAAe,EAAA,QAAA,EAAyB,cAAkC,KAAA;AAPpF,IAAA,IAAA,EAAA,CAAA;AAQI,IAAA,IAAI,SAAS,IAAM,EAAA;AACjB,MAAO,OAAA,EAAE,MAAM,EAAG,EAAA,CAAA;AAAA,KACpB;AACA,IAAA,MAAM,aAAa,KAAQ,GAAA,CAAA,CAAA;AAC3B,IAAA,IAAI,UAAY,EAAA;AACd,MAAQ,KAAA,GAAA,IAAA,CAAK,IAAI,KAAK,CAAA,CAAA;AAAA,KACxB;AACA,IAAA,MAAM,MAAS,GAAA,MAAA,CAAO,KAAO,EAAA,QAAA,EAAU,cAAc,CAAA,CAAA;AACrD,IAAA,IAAI,QAAU,EAAA;AACZ,MAAO,MAAA,CAAA,MAAA,GAAS,OAAO,MAAW,KAAA,KAAA,CAAA,GAAY,GAAG,MAAO,CAAA,MAAM,CAAG,EAAA,MAAM,CAAK,CAAA,GAAA,KAAA,CAAA,CAAA;AAAA,KACvE,MAAA;AACL,MAAA,MAAA,CAAO,MAAS,GAAA,MAAA,CAAA;AAAA,KAClB;AACA,IAAA,IAAI,UAAY,EAAA;AACd,MAAO,MAAA,CAAA,MAAA,GAAS,MAAI,EAAO,GAAA,MAAA,CAAA,MAAA,KAAP,mBAAe,MAAS,IAAA,MAAA,CAAO,SAAS,EAAE,CAAA,CAAA,CAAA;AAAA,KAChE;AACA,IAAO,OAAA,MAAA,CAAA;AAAA,GACT,CAAA;AACF,CAAA;AAEA,MAAM,WAAc,GAAA,CAAC,GAAK,EAAA,GAAA,EAAK,KAAK,MAAK,EAAA,GAAA,EAAK,EAAI,EAAA,GAAA,EAAK,KAAK,GAAK,EAAA,GAAA,EAAK,GAAK,EAAA,GAAA,EAAK,KAAK,GAAG,CAAA,CAAA;AACxF,MAAM,aAAA,GAAgB,WAAY,CAAA,OAAA,CAAQ,EAAE,CAAA,CAAA;AAErC,SAAS,sBAAsB,CAAmB,EAAA;AACvD,EAAA,MAAM,SAAY,GAAA,WAAA,CAAY,SAAU,CAAA,CAAC,MAAW,KAAA,MAAA,CAAO,SAAU,CAAA,MAAM,CAAM,KAAA,CAAA,CAAE,SAAU,CAAA,MAAM,CAAC,CAAA,CAAA;AACpG,EAAO,OAAA,SAAA,GAAY,CAAI,GAAA,CAAA,GAAI,SAAY,GAAA,aAAA,CAAA;AACzC,CAAA;AAEA,MAAM,YAAA,GAAe,CAAC,EAAA,EAAI,IAAM,EAAA,IAAA,EAAM,MAAM,IAAM,EAAA,IAAA,EAAM,IAAM,EAAA,IAAA,EAAM,IAAI,CAAA,CAAA;AAExD,SAAA,YAAA,CAAa,IAAc,EAAA,MAAA,GAAS,CAAmB,EAAA;AACrE,EAAA,MAAM,QAAQ,YAAa,CAAA,GAAA,CAAI,CAAC,CAAM,KAAA,GAAA,GAAM,IAAI,IAAI,CAAA,CAAA;AACpD,EAAO,OAAA,WAAA,CAAY,IAAM,EAAA,KAAA,EAAO,MAAM,CAAA,CAAA;AACxC,CAAA;AAEgB,SAAA,QAAA,CAAS,IAAc,EAAA,MAAA,GAAS,CAAmB,EAAA;AACjE,EAAA,MAAM,QAAQ,WAAY,CAAA,GAAA,CAAI,CAAC,CAAM,KAAA,GAAA,GAAM,IAAI,IAAI,CAAA,CAAA;AACnD,EAAA,OAAO,WAAY,CAAA,GAAA,EAAM,KAAO,EAAA,aAAA,GAAgB,MAAM,CAAA,CAAA;AACxD;;;;"}