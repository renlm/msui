{"version":3,"file":"dateTimeFormatters.js","sources":["../../../src/valueFormats/dateTimeFormatters.ts"],"sourcesContent":["import { dateTimeFormat, dateTimeFormatTimeAgo, localTimeFormat, systemDateFormats } from '../datetime';\nimport { toDuration as duration, toUtc, dateTime } from '../datetime/moment_wrapper';\nimport { TimeZone } from '../types';\nimport { DecimalCount } from '../types/displayValue';\n\nimport { toFixed, toFixedScaled, FormattedValue, ValueFormatter } from './valueFormats';\n\ninterface IntervalsInSeconds {\n  [interval: string]: number;\n}\n\nexport enum Interval {\n  Year = 'year',\n  Month = 'month',\n  Week = 'week',\n  Day = 'day',\n  Hour = 'hour',\n  Minute = 'minute',\n  Second = 'second',\n  Millisecond = 'millisecond',\n}\n\nconst UNITS = [\n  Interval.Year,\n  Interval.Month,\n  Interval.Week,\n  Interval.Day,\n  Interval.Hour,\n  Interval.Minute,\n  Interval.Second,\n  Interval.Millisecond,\n];\n\nconst INTERVALS_IN_SECONDS: IntervalsInSeconds = {\n  [Interval.Year]: 31536000,\n  [Interval.Month]: 2592000,\n  [Interval.Week]: 604800,\n  [Interval.Day]: 86400,\n  [Interval.Hour]: 3600,\n  [Interval.Minute]: 60,\n  [Interval.Second]: 1,\n  [Interval.Millisecond]: 0.001,\n};\n\nexport function toNanoSeconds(size: number, decimals?: DecimalCount): FormattedValue {\n  if (size === null) {\n    return { text: '' };\n  }\n\n  if (Math.abs(size) < 1000) {\n    return { text: toFixed(size, decimals), suffix: ' ns' };\n  } else if (Math.abs(size) < 1000000) {\n    return toFixedScaled(size / 1000, decimals, ' µs');\n  } else if (Math.abs(size) < 1000000000) {\n    return toFixedScaled(size / 1000000, decimals, ' ms');\n  } else if (Math.abs(size) < 60000000000) {\n    return toFixedScaled(size / 1000000000, decimals, ' s');\n  } else if (Math.abs(size) < 3600000000000) {\n    return toFixedScaled(size / 60000000000, decimals, ' min');\n  } else if (Math.abs(size) < 86400000000000) {\n    return toFixedScaled(size / 3600000000000, decimals, ' hour');\n  } else {\n    return toFixedScaled(size / 86400000000000, decimals, ' day');\n  }\n}\n\nexport function toMicroSeconds(size: number, decimals?: DecimalCount): FormattedValue {\n  if (size === null) {\n    return { text: '' };\n  }\n\n  if (Math.abs(size) < 1000) {\n    return { text: toFixed(size, decimals), suffix: ' µs' };\n  } else if (Math.abs(size) < 1000000) {\n    return toFixedScaled(size / 1000, decimals, ' ms');\n  } else {\n    return toFixedScaled(size / 1000000, decimals, ' s');\n  }\n}\n\nexport function toMilliSeconds(size: number, decimals?: DecimalCount, scaledDecimals?: DecimalCount): FormattedValue {\n  if (size === null) {\n    return { text: '' };\n  }\n\n  if (Math.abs(size) < 1000) {\n    return { text: toFixed(size, decimals), suffix: ' ms' };\n  } else if (Math.abs(size) < 60000) {\n    // Less than 1 min\n    return toFixedScaled(size / 1000, decimals, ' s');\n  } else if (Math.abs(size) < 3600000) {\n    // Less than 1 hour, divide in minutes\n    return toFixedScaled(size / 60000, decimals, ' min');\n  } else if (Math.abs(size) < 86400000) {\n    // Less than one day, divide in hours\n    return toFixedScaled(size / 3600000, decimals, ' hour');\n  } else if (Math.abs(size) < 31536000000) {\n    // Less than one year, divide in days\n    return toFixedScaled(size / 86400000, decimals, ' day');\n  }\n\n  return toFixedScaled(size / 31536000000, decimals, ' year');\n}\n\nexport function toSeconds(size: number, decimals?: DecimalCount): FormattedValue {\n  if (size === null) {\n    return { text: '' };\n  }\n\n  // If 0, use s unit instead of ns\n  if (size === 0) {\n    return { text: '0', suffix: ' s' };\n  }\n\n  // Less than 1 µs, divide in ns\n  if (Math.abs(size) < 0.000001) {\n    return toFixedScaled(size * 1e9, decimals, ' ns');\n  }\n  // Less than 1 ms, divide in µs\n  if (Math.abs(size) < 0.001) {\n    return toFixedScaled(size * 1e6, decimals, ' µs');\n  }\n  // Less than 1 second, divide in ms\n  if (Math.abs(size) < 1) {\n    return toFixedScaled(size * 1e3, decimals, ' ms');\n  }\n\n  if (Math.abs(size) < 60) {\n    return { text: toFixed(size, decimals), suffix: ' s' };\n  } else if (Math.abs(size) < 3600) {\n    // Less than 1 hour, divide in minutes\n    return toFixedScaled(size / 60, decimals, ' min');\n  } else if (Math.abs(size) < 86400) {\n    // Less than one day, divide in hours\n    return toFixedScaled(size / 3600, decimals, ' hour');\n  } else if (Math.abs(size) < 604800) {\n    // Less than one week, divide in days\n    return toFixedScaled(size / 86400, decimals, ' day');\n  } else if (Math.abs(size) < 31536000) {\n    // Less than one year, divide in week\n    return toFixedScaled(size / 604800, decimals, ' week');\n  }\n\n  return toFixedScaled(size / 3.15569e7, decimals, ' year');\n}\n\nexport function toMinutes(size: number, decimals?: DecimalCount): FormattedValue {\n  if (size === null) {\n    return { text: '' };\n  }\n\n  if (Math.abs(size) < 60) {\n    return { text: toFixed(size, decimals), suffix: ' min' };\n  } else if (Math.abs(size) < 1440) {\n    return toFixedScaled(size / 60, decimals, ' hour');\n  } else if (Math.abs(size) < 10080) {\n    return toFixedScaled(size / 1440, decimals, ' day');\n  } else if (Math.abs(size) < 604800) {\n    return toFixedScaled(size / 10080, decimals, ' week');\n  } else {\n    return toFixedScaled(size / 5.25948e5, decimals, ' year');\n  }\n}\n\nexport function toHours(size: number, decimals?: DecimalCount): FormattedValue {\n  if (size === null) {\n    return { text: '' };\n  }\n\n  if (Math.abs(size) < 24) {\n    return { text: toFixed(size, decimals), suffix: ' hour' };\n  } else if (Math.abs(size) < 168) {\n    return toFixedScaled(size / 24, decimals, ' day');\n  } else if (Math.abs(size) < 8760) {\n    return toFixedScaled(size / 168, decimals, ' week');\n  } else {\n    return toFixedScaled(size / 8760, decimals, ' year');\n  }\n}\n\nexport function toDays(size: number, decimals?: DecimalCount): FormattedValue {\n  if (size === null) {\n    return { text: '' };\n  }\n\n  if (Math.abs(size) < 7) {\n    return { text: toFixed(size, decimals), suffix: ' day' };\n  } else if (Math.abs(size) < 365) {\n    return toFixedScaled(size / 7, decimals, ' week');\n  } else {\n    return toFixedScaled(size / 365, decimals, ' year');\n  }\n}\n\nexport function toDuration(size: number, decimals: DecimalCount, timeScale: Interval): FormattedValue {\n  if (size === null) {\n    return { text: '' };\n  }\n\n  if (size === 0) {\n    return { text: '0', suffix: ' ' + timeScale + 's' };\n  }\n\n  if (size < 0) {\n    const v = toDuration(-size, decimals, timeScale);\n    if (!v.suffix) {\n      v.suffix = '';\n    }\n    v.suffix += ' ago';\n    return v;\n  }\n\n  // convert $size to milliseconds\n  // intervals_in_seconds uses seconds (duh), convert them to milliseconds here to minimize floating point errors\n  size *= INTERVALS_IN_SECONDS[timeScale] * 1000;\n\n  const strings = [];\n\n  // after first value >= 1 print only $decimals more\n  let decrementDecimals = false;\n  let decimalsCount = 0;\n\n  if (decimals !== null && decimals !== undefined) {\n    decimalsCount = decimals;\n  }\n\n  for (let i = 0; i < UNITS.length && decimalsCount >= 0; i++) {\n    const interval = INTERVALS_IN_SECONDS[UNITS[i]] * 1000;\n    const value = size / interval;\n    if (value >= 1 || decrementDecimals) {\n      decrementDecimals = true;\n      const floor = Math.floor(value);\n      const unit = UNITS[i] + (floor !== 1 ? 's' : '');\n      strings.push(floor + ' ' + unit);\n      size = size % interval;\n      decimalsCount--;\n    }\n  }\n\n  return { text: strings.join(', ') };\n}\n\nexport function toClock(size: number, decimals?: DecimalCount): FormattedValue {\n  if (size === null) {\n    return { text: '' };\n  }\n\n  // < 1 second\n  if (size < 1000) {\n    return {\n      text: toUtc(size).format('SSS\\\\m\\\\s'),\n    };\n  }\n\n  // < 1 minute\n  if (size < 60000) {\n    let format = 'ss\\\\s:SSS\\\\m\\\\s';\n    if (decimals === 0) {\n      format = 'ss\\\\s';\n    }\n    return { text: toUtc(size).format(format) };\n  }\n\n  // < 1 hour\n  if (size < 3600000) {\n    let format = 'mm\\\\m:ss\\\\s:SSS\\\\m\\\\s';\n    if (decimals === 0) {\n      format = 'mm\\\\m';\n    } else if (decimals === 1) {\n      format = 'mm\\\\m:ss\\\\s';\n    }\n    return { text: toUtc(size).format(format) };\n  }\n\n  let format = 'mm\\\\m:ss\\\\s:SSS\\\\m\\\\s';\n\n  const hours = `${('0' + Math.floor(duration(size, 'milliseconds').asHours())).slice(-2)}h`;\n\n  if (decimals === 0) {\n    format = '';\n  } else if (decimals === 1) {\n    format = 'mm\\\\m';\n  } else if (decimals === 2) {\n    format = 'mm\\\\m:ss\\\\s';\n  }\n\n  const text = format ? `${hours}:${toUtc(size).format(format)}` : hours;\n  return { text };\n}\n\nexport function toDurationInMilliseconds(size: number, decimals: DecimalCount): FormattedValue {\n  return toDuration(size, decimals, Interval.Millisecond);\n}\n\nexport function toDurationInSeconds(size: number, decimals: DecimalCount): FormattedValue {\n  return toDuration(size, decimals, Interval.Second);\n}\n\nexport function toDurationInHoursMinutesSeconds(size: number): FormattedValue {\n  if (size < 0) {\n    const v = toDurationInHoursMinutesSeconds(-size);\n    if (!v.suffix) {\n      v.suffix = '';\n    }\n    v.suffix += ' ago';\n    return v;\n  }\n  const strings = [];\n  const numHours = Math.floor(size / 3600);\n  const numMinutes = Math.floor((size % 3600) / 60);\n  const numSeconds = Math.floor((size % 3600) % 60);\n  numHours > 9 ? strings.push('' + numHours) : strings.push('0' + numHours);\n  numMinutes > 9 ? strings.push('' + numMinutes) : strings.push('0' + numMinutes);\n  numSeconds > 9 ? strings.push('' + numSeconds) : strings.push('0' + numSeconds);\n  return { text: strings.join(':') };\n}\n\nexport function toDurationInDaysHoursMinutesSeconds(size: number): FormattedValue {\n  if (size < 0) {\n    const v = toDurationInDaysHoursMinutesSeconds(-size);\n    if (!v.suffix) {\n      v.suffix = '';\n    }\n    v.suffix += ' ago';\n    return v;\n  }\n  let dayString = '';\n  const numDays = Math.floor(size / (24 * 3600));\n  if (numDays > 0) {\n    dayString = numDays + ' d ';\n  }\n  const hmsString = toDurationInHoursMinutesSeconds(size - numDays * 24 * 3600);\n  return { text: dayString + hmsString.text };\n}\n\nexport function toTimeTicks(size: number, decimals: DecimalCount): FormattedValue {\n  return toSeconds(size / 100, decimals);\n}\n\nexport function toClockMilliseconds(size: number, decimals: DecimalCount): FormattedValue {\n  return toClock(size, decimals);\n}\n\nexport function toClockSeconds(size: number, decimals: DecimalCount): FormattedValue {\n  return toClock(size * 1000, decimals);\n}\n\nexport function toDateTimeValueFormatter(pattern: string, todayPattern?: string): ValueFormatter {\n  return (value: number, decimals: DecimalCount, scaledDecimals: DecimalCount, timeZone?: TimeZone): FormattedValue => {\n    if (todayPattern) {\n      if (dateTime().isSame(value, 'day')) {\n        return {\n          text: dateTimeFormat(value, { format: todayPattern, timeZone }),\n        };\n      }\n    }\n    return { text: dateTimeFormat(value, { format: pattern, timeZone }) };\n  };\n}\n\nexport const dateTimeAsIso = toDateTimeValueFormatter('YYYY-MM-DD HH:mm:ss');\nexport const dateTimeAsIsoNoDateIfToday = toDateTimeValueFormatter('YYYY-MM-DD HH:mm:ss', 'HH:mm:ss');\nexport const dateTimeAsUS = toDateTimeValueFormatter('MM/DD/YYYY h:mm:ss a');\nexport const dateTimeAsUSNoDateIfToday = toDateTimeValueFormatter('MM/DD/YYYY h:mm:ss a', 'h:mm:ss a');\n\nexport function getDateTimeAsLocalFormat() {\n  return toDateTimeValueFormatter(\n    localTimeFormat({\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n    })\n  );\n}\n\nexport function getDateTimeAsLocalFormatNoDateIfToday() {\n  return toDateTimeValueFormatter(\n    localTimeFormat({\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n    }),\n    localTimeFormat({\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n    })\n  );\n}\n\nexport function dateTimeSystemFormatter(\n  value: number,\n  decimals: DecimalCount,\n  scaledDecimals: DecimalCount,\n  timeZone?: TimeZone,\n  showMs?: boolean\n): FormattedValue {\n  return {\n    text: dateTimeFormat(value, {\n      format: showMs ? systemDateFormats.fullDateMS : systemDateFormats.fullDate,\n      timeZone,\n    }),\n  };\n}\n\nexport function dateTimeFromNow(\n  value: number,\n  decimals: DecimalCount,\n  scaledDecimals: DecimalCount,\n  timeZone?: TimeZone\n): FormattedValue {\n  return { text: dateTimeFormatTimeAgo(value, { timeZone }) };\n}\n"],"names":["format","duration"],"mappings":"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"}