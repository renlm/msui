{"version":3,"file":"DataFrameView.js","sources":["../../../src/dataframe/DataFrameView.ts"],"sourcesContent":["import { DisplayProcessor } from '../types';\nimport { DataFrame, Field } from '../types/dataFrame';\nimport { FunctionalVector } from '../vector/FunctionalVector';\n\n/**\n * This abstraction will present the contents of a DataFrame as if\n * it were a well typed javascript object Vector.\n *\n * @remarks\n * The {@link DataFrameView.get} is optimized for use in a loop and will return same object.\n * See function for more details.\n *\n * @typeParam T - Type of object stored in the DataFrame.\n * @beta\n */\nexport class DataFrameView<T extends object = any> extends FunctionalVector<T> {\n  private index = 0;\n  private obj: T;\n  readonly fields: {\n    readonly [Property in keyof T]: Field<T[Property]>;\n  };\n\n  constructor(private data: DataFrame) {\n    super();\n    const obj = {} as T;\n    const fields = {} as any;\n\n    for (let i = 0; i < data.fields.length; i++) {\n      const field = data.fields[i];\n      if (!field.name) {\n        continue; // unsupported\n      }\n\n      fields[field.name] = field;\n      const getter = () => field.values.get(this.index); // .get() to support all Vector types\n\n      if (!obj.hasOwnProperty(field.name)) {\n        Object.defineProperty(obj, field.name, {\n          enumerable: true, // Shows up as enumerable property\n          get: getter,\n        });\n      }\n\n      if (!obj.hasOwnProperty(i.toString())) {\n        Object.defineProperty(obj, i, {\n          enumerable: false, // Don't enumerate array index\n          get: getter,\n        });\n      }\n    }\n\n    this.obj = obj;\n    this.fields = fields;\n  }\n\n  get dataFrame() {\n    return this.data;\n  }\n\n  get length() {\n    return this.data.length;\n  }\n\n  /**\n   * Helper function to return the {@link DisplayProcessor} for a given field column.\n   * @param colIndex - the field column index for the data frame.\n   */\n  getFieldDisplayProcessor(colIndex: number): DisplayProcessor | undefined {\n    if (!this.dataFrame || !this.dataFrame.fields) {\n      return undefined;\n    }\n\n    const field = this.dataFrame.fields[colIndex];\n\n    if (!field || !field.display) {\n      return undefined;\n    }\n\n    return field.display;\n  }\n\n  /**\n   * The contents of the object returned from this function\n   * are optimized for use in a loop. All calls return the same object\n   * but the index has changed.\n   *\n   * @example\n   * ```typescript\n   *   // `first`, `second` and `third` will all point to the same contents at index 2:\n   *   const first = view.get(0);\n   *   const second = view.get(1);\n   *   const third = view.get(2);\n   *\n   *   // If you need three different objects, consider something like:\n   *   const first = { ...view.get(0) };\n   *   const second = { ...view.get(1) };\n   *   const third = { ...view.get(2) };\n   * ```\n   * @param idx - The index of the object you currently are inspecting\n   */\n  get(idx: number) {\n    this.index = idx;\n    return this.obj;\n  }\n\n  toArray(): T[] {\n    return new Array(this.data.length)\n      .fill(0) // Needs to make a full copy\n      .map((_, i) => ({ ...this.get(i) }));\n  }\n}\n"],"names":[],"mappings":"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"}