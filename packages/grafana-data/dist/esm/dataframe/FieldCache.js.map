{"version":3,"file":"FieldCache.js","sources":["../../../src/dataframe/FieldCache.ts"],"sourcesContent":["import { Field, DataFrame, FieldType, guessFieldTypeForField } from '../index';\n\nexport interface FieldWithIndex extends Field {\n  index: number;\n}\n\nexport class FieldCache {\n  fields: FieldWithIndex[] = [];\n\n  private fieldByName: { [key: string]: FieldWithIndex } = {};\n  private fieldByType: { [key: string]: FieldWithIndex[] } = {};\n\n  constructor(data: DataFrame) {\n    this.fields = data.fields.map((field, idx) => ({\n      ...field,\n      index: idx,\n    }));\n\n    for (let i = 0; i < data.fields.length; i++) {\n      const field = data.fields[i];\n      // Make sure it has a type\n      if (field.type === FieldType.other) {\n        const t = guessFieldTypeForField(field);\n        if (t) {\n          field.type = t;\n        }\n      }\n      if (!this.fieldByType[field.type]) {\n        this.fieldByType[field.type] = [];\n      }\n      this.fieldByType[field.type].push({\n        ...field,\n        index: i,\n      });\n\n      if (this.fieldByName[field.name]) {\n        console.warn('Duplicate field names in DataFrame: ', field.name);\n      } else {\n        this.fieldByName[field.name] = { ...field, index: i };\n      }\n    }\n  }\n\n  getFields(type?: FieldType): FieldWithIndex[] {\n    if (!type) {\n      return [...this.fields]; // All fields\n    }\n    const fields = this.fieldByType[type];\n    if (fields) {\n      return [...fields];\n    }\n    return [];\n  }\n\n  hasFieldOfType(type: FieldType): boolean {\n    const types = this.fieldByType[type];\n    return types && types.length > 0;\n  }\n\n  getFirstFieldOfType(type: FieldType, includeHidden = false): FieldWithIndex | undefined {\n    const fields = this.fieldByType[type];\n    const firstField = fields?.find((field) => includeHidden || !field.config.custom?.hidden);\n    return firstField;\n  }\n\n  hasFieldNamed(name: string): boolean {\n    return !!this.fieldByName[name];\n  }\n\n  hasFieldWithNameAndType(name: string, type: FieldType): boolean {\n    return !!this.fieldByName[name] && this.fieldByType[type].filter((field) => field.name === name).length > 0;\n  }\n\n  /**\n   * Returns the first field with the given name.\n   */\n  getFieldByName(name: string): FieldWithIndex | undefined {\n    return this.fieldByName[name];\n  }\n\n  /**\n   * Returns the fields with the given label.\n   */\n  getFieldsByLabel(label: string, value: string): FieldWithIndex[] {\n    return Object.values(this.fieldByName).filter((f) => {\n      return f.labels && f.labels[label] === value;\n    });\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAMO,MAAM,UAAW,CAAA;AAAA,EAMtB,YAAY,IAAiB,EAAA;AAL7B,IAAA,aAAA,CAAA,IAAA,EAAA,QAAA,EAA2B,EAAC,CAAA,CAAA;AAE5B,IAAA,aAAA,CAAA,IAAA,EAAQ,eAAiD,EAAC,CAAA,CAAA;AAC1D,IAAA,aAAA,CAAA,IAAA,EAAQ,eAAmD,EAAC,CAAA,CAAA;AAG1D,IAAK,IAAA,CAAA,MAAA,GAAS,KAAK,MAAO,CAAA,GAAA,CAAI,CAAC,KAAO,EAAA,GAAA,KAAS,iCAC1C,KAD0C,CAAA,EAAA;AAAA,MAE7C,KAAO,EAAA,GAAA;AAAA,KACP,CAAA,CAAA,CAAA;AAEF,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,IAAK,CAAA,MAAA,CAAO,QAAQ,CAAK,EAAA,EAAA;AAC3C,MAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,MAAA,CAAO,CAAC,CAAA,CAAA;AAE3B,MAAI,IAAA,KAAA,CAAM,IAAS,KAAA,SAAA,CAAU,KAAO,EAAA;AAClC,QAAM,MAAA,CAAA,GAAI,uBAAuB,KAAK,CAAA,CAAA;AACtC,QAAA,IAAI,CAAG,EAAA;AACL,UAAA,KAAA,CAAM,IAAO,GAAA,CAAA,CAAA;AAAA,SACf;AAAA,OACF;AACA,MAAA,IAAI,CAAC,IAAA,CAAK,WAAY,CAAA,KAAA,CAAM,IAAI,CAAG,EAAA;AACjC,QAAA,IAAA,CAAK,WAAY,CAAA,KAAA,CAAM,IAAI,CAAA,GAAI,EAAC,CAAA;AAAA,OAClC;AACA,MAAA,IAAA,CAAK,YAAY,KAAM,CAAA,IAAI,CAAE,CAAA,IAAA,CAAK,iCAC7B,KAD6B,CAAA,EAAA;AAAA,QAEhC,KAAO,EAAA,CAAA;AAAA,OACR,CAAA,CAAA,CAAA;AAED,MAAA,IAAI,IAAK,CAAA,WAAA,CAAY,KAAM,CAAA,IAAI,CAAG,EAAA;AAChC,QAAQ,OAAA,CAAA,IAAA,CAAK,sCAAwC,EAAA,KAAA,CAAM,IAAI,CAAA,CAAA;AAAA,OAC1D,MAAA;AACL,QAAK,IAAA,CAAA,WAAA,CAAY,MAAM,IAAI,CAAA,GAAI,iCAAK,KAAL,CAAA,EAAA,EAAY,OAAO,CAAE,EAAA,CAAA,CAAA;AAAA,OACtD;AAAA,KACF;AAAA,GACF;AAAA,EAEA,UAAU,IAAoC,EAAA;AAC5C,IAAA,IAAI,CAAC,IAAM,EAAA;AACT,MAAO,OAAA,CAAC,GAAG,IAAA,CAAK,MAAM,CAAA,CAAA;AAAA,KACxB;AACA,IAAM,MAAA,MAAA,GAAS,IAAK,CAAA,WAAA,CAAY,IAAI,CAAA,CAAA;AACpC,IAAA,IAAI,MAAQ,EAAA;AACV,MAAO,OAAA,CAAC,GAAG,MAAM,CAAA,CAAA;AAAA,KACnB;AACA,IAAA,OAAO,EAAC,CAAA;AAAA,GACV;AAAA,EAEA,eAAe,IAA0B,EAAA;AACvC,IAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,WAAA,CAAY,IAAI,CAAA,CAAA;AACnC,IAAO,OAAA,KAAA,IAAS,MAAM,MAAS,GAAA,CAAA,CAAA;AAAA,GACjC;AAAA,EAEA,mBAAA,CAAoB,IAAiB,EAAA,aAAA,GAAgB,KAAmC,EAAA;AACtF,IAAM,MAAA,MAAA,GAAS,IAAK,CAAA,WAAA,CAAY,IAAI,CAAA,CAAA;AACpC,IAAA,MAAM,UAAa,GAAA,MAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,MAAA,CAAQ,IAAK,CAAA,CAAC,KAAO,KAAA;AA7D5C,MAAA,IAAA,EAAA,CAAA;AA6D+C,MAAA,OAAA,aAAA,IAAiB,EAAC,CAAA,EAAA,GAAA,KAAA,CAAM,MAAO,CAAA,MAAA,KAAb,IAAqB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAA,CAAA,CAAA;AAAA,KAAA,CAAA,CAAA;AAClF,IAAO,OAAA,UAAA,CAAA;AAAA,GACT;AAAA,EAEA,cAAc,IAAuB,EAAA;AACnC,IAAA,OAAO,CAAC,CAAC,IAAK,CAAA,WAAA,CAAY,IAAI,CAAA,CAAA;AAAA,GAChC;AAAA,EAEA,uBAAA,CAAwB,MAAc,IAA0B,EAAA;AAC9D,IAAA,OAAO,CAAC,CAAC,IAAA,CAAK,WAAY,CAAA,IAAI,KAAK,IAAK,CAAA,WAAA,CAAY,IAAI,CAAA,CAAE,OAAO,CAAC,KAAA,KAAU,MAAM,IAAS,KAAA,IAAI,EAAE,MAAS,GAAA,CAAA,CAAA;AAAA,GAC5G;AAAA;AAAA;AAAA;AAAA,EAKA,eAAe,IAA0C,EAAA;AACvD,IAAO,OAAA,IAAA,CAAK,YAAY,IAAI,CAAA,CAAA;AAAA,GAC9B;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAA,CAAiB,OAAe,KAAiC,EAAA;AAC/D,IAAA,OAAO,OAAO,MAAO,CAAA,IAAA,CAAK,WAAW,CAAE,CAAA,MAAA,CAAO,CAAC,CAAM,KAAA;AACnD,MAAA,OAAO,CAAE,CAAA,MAAA,IAAU,CAAE,CAAA,MAAA,CAAO,KAAK,CAAM,KAAA,KAAA,CAAA;AAAA,KACxC,CAAA,CAAA;AAAA,GACH;AACF;;;;"}