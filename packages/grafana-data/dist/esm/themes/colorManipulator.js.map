{"version":3,"file":"colorManipulator.js","sources":["../../../src/themes/colorManipulator.ts"],"sourcesContent":["// Code based on Material-UI\n// https://github.com/mui-org/material-ui/blob/1b096070faf102281f8e3c4f9b2bf50acf91f412/packages/material-ui/src/styles/colorManipulator.js#L97\n// MIT License Copyright (c) 2014 Call-Em-All\n\nimport tinycolor from 'tinycolor2';\n\n/**\n * Returns a number whose value is limited to the given range.\n * @param value The value to be clamped\n * @param min The lower boundary of the output range\n * @param max The upper boundary of the output range\n * @returns A number in the range [min, max]\n * @beta\n */\nfunction clamp(value: number, min = 0, max = 1) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(`The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n\n  return Math.min(Math.max(min, value), max);\n}\n\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param color - Hex color, i.e. #nnn or #nnnnnn\n * @returns A CSS rgb color string\n * @beta\n */\nexport function hexToRgb(color: string) {\n  color = color.slice(1);\n\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let result = color.match(re);\n\n  if (!result) {\n    return '';\n  }\n\n  let colors = Array.from(result);\n\n  if (colors[0].length === 1) {\n    colors = colors.map((n) => n + n);\n  }\n\n  return colors\n    ? `rgb${colors.length === 4 ? 'a' : ''}(${colors\n        .map((n, index) => {\n          return index < 3 ? parseInt(n, 16) : Math.round((parseInt(n, 16) / 255) * 1000) / 1000;\n        })\n        .join(', ')})`\n    : '';\n}\n\nfunction intToHex(int: number) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param color - RGB color, i.e. rgb(n, n, n)\n * @returns A CSS rgb color string, i.e. #nnnnnn\n * @beta\n */\nexport function rgbToHex(color: string) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  const { values } = decomposeColor(color);\n  return `#${values.map((n: number) => intToHex(n)).join('')}`;\n}\n\n/**\n * Converts a color to hex6 format if there is no alpha, hex8 if there is.\n * @param color - Hex, RGB, HSL color\n * @returns A hex color string, i.e. #ff0000 or #ff0000ff\n */\nexport function asHexString(color: string): string {\n  if (color[0] === '#') {\n    return color;\n  }\n  const tColor = tinycolor(color);\n  return tColor.getAlpha() === 1 ? tColor.toHexString() : tColor.toHex8String();\n}\n\n/**\n * Converts a color to rgb string\n */\nexport function asRgbString(color: string) {\n  if (color.startsWith('rgb')) {\n    return color;\n  }\n\n  return tinycolor(color).toRgbString();\n}\n\n/**\n * Converts a color from hsl format to rgb format.\n * @param color - HSL color values\n * @returns rgb color values\n * @beta\n */\nexport function hslToRgb(color: string | DecomposeColor) {\n  const parts = decomposeColor(color);\n  const { values } = parts;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n  const f = (n: number, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (parts.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({ type, values: rgb });\n}\n\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n * @beta\n */\nexport function decomposeColor(color: string | DecomposeColor): DecomposeColor {\n  // Idempotent\n  if (typeof color !== 'string') {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\n    throw new Error(\n      `Unsupported '${color}' color. The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()`\n    );\n  }\n\n  let values: any = color.substring(marker + 1, color.length - 1);\n  let colorSpace;\n\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].slice(1);\n    }\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\n      throw new Error(\n        `Unsupported ${colorSpace} color space. The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.`\n      );\n    }\n  } else {\n    values = values.split(',');\n  }\n\n  values = values.map((value: string) => parseFloat(value));\n  return { type, values, colorSpace };\n}\n\n/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns A CSS color string\n * @beta\n */\nexport function recomposeColor(color: DecomposeColor) {\n  const { type, colorSpace } = color;\n  let values = color.values;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n: string, i: number) => (i < 3 ? parseInt(n, 10) : n));\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n  if (type.indexOf('color') !== -1) {\n    values = `${colorSpace} ${values.join(' ')}`;\n  } else {\n    values = `${values.join(', ')}`;\n  }\n\n  return `${type}(${values})`;\n}\n\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param canvas - A CSS color that alpha based backgrounds blends into\n * @returns A contrast ratio value in the range 0 - 21.\n * @beta\n */\nexport function getContrastRatio(foreground: string, background: string, canvas?: string) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background, canvas);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param background - CSS color that needs to be take in to account to calculate luminance for colors with opacity\n * @returns The relative brightness of the color in the range 0 - 1\n * @beta\n */\nexport function getLuminance(color: string, background?: string) {\n  const parts = decomposeColor(color);\n\n  let rgb = parts.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : parts.values;\n\n  if (background && parts.type === 'rgba') {\n    const backgroundParts = decomposeColor(background);\n    const alpha = rgb[3];\n    rgb[0] = rgb[0] * alpha + backgroundParts.values[0] * (1 - alpha);\n    rgb[1] = rgb[1] * alpha + backgroundParts.values[1] * (1 - alpha);\n    rgb[2] = rgb[2] * alpha + backgroundParts.values[2] * (1 - alpha);\n  }\n\n  const rgbNumbers = rgb.map((val: any) => {\n    if (parts.type !== 'color') {\n      val /= 255; // normalized\n    }\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  });\n\n  // Truncate at 3 digits\n  return Number((0.2126 * rgbNumbers[0] + 0.7152 * rgbNumbers[1] + 0.0722 * rgbNumbers[2]).toFixed(3));\n}\n\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param coefficient=0.15 - multiplier in the range 0 - 1\n * @returns A CSS color string. Hex input values are returned as rgb\n * @beta\n */\nexport function emphasize(color: string, coefficient = 0.15) {\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param value - value to set the alpha channel to in the range 0 - 1\n * @returns A CSS color string. Hex input values are returned as rgb\n * @beta\n */\nexport function alpha(color: string, value: number) {\n  if (color === '') {\n    return '#000000';\n  }\n\n  value = clamp(value);\n\n  // hex 3, hex 4 (w/alpha), hex 6, hex 8 (w/alpha)\n  if (color[0] === '#') {\n    if (color.length === 9) {\n      color = color.substring(0, 7);\n    } else if (color.length <= 5) {\n      let c = '#';\n      for (let i = 1; i < 4; i++) {\n        c += color[i] + color[i];\n      }\n      color = c;\n    }\n\n    return (\n      color +\n      Math.round(value * 255)\n        .toString(16)\n        .padStart(2, '0')\n    );\n  }\n  // rgb(, hsl(\n  else if (color[3] === '(') {\n    // rgb() and hsl() do not require the \"a\" suffix to accept alpha values in modern browsers:\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/rgb()#accepts_alpha_value\n    return color.replace(')', `, ${value})`);\n  }\n  // rgba(, hsla(\n  else if (color[4] === '(') {\n    return color.substring(0, color.lastIndexOf(',')) + `, ${value})`;\n  }\n\n  const parts = decomposeColor(color);\n\n  if (parts.type === 'color') {\n    parts.values[3] = `/${value}`;\n  } else {\n    parts.values[3] = value;\n  }\n\n  return recomposeColor(parts);\n}\n\n/**\n * Darkens a color.\n * @param color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param coefficient - multiplier in the range 0 - 1\n * @returns A CSS color string. Hex input values are returned as rgb\n * @beta\n */\nexport function darken(color: string, coefficient: number) {\n  const parts = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (parts.type.indexOf('hsl') !== -1) {\n    parts.values[2] *= 1 - coefficient;\n  } else if (parts.type.indexOf('rgb') !== -1 || parts.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      parts.values[i] *= 1 - coefficient;\n    }\n  }\n  return recomposeColor(parts);\n}\n\n/**\n * Lightens a color.\n * @param color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param coefficient - multiplier in the range 0 - 1\n * @returns A CSS color string. Hex input values are returned as rgb\n * @beta\n */\nexport function lighten(color: string, coefficient: number) {\n  const parts = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (parts.type.indexOf('hsl') !== -1) {\n    parts.values[2] += (100 - parts.values[2]) * coefficient;\n  } else if (parts.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      parts.values[i] += (255 - parts.values[i]) * coefficient;\n    }\n  } else if (parts.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      parts.values[i] += (1 - parts.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(parts);\n}\n\ninterface DecomposeColor {\n  type: string;\n  values: any;\n  colorSpace?: string;\n}\n"],"names":["alpha"],"mappings":";;AAcA,SAAS,KAAM,CAAA,KAAA,EAAe,GAAM,GAAA,CAAA,EAAG,MAAM,CAAG,EAAA;AAC9C,EAAI,IAAA,OAAA,CAAQ,GAAI,CAAA,QAAA,KAAa,YAAc,EAAA;AACzC,IAAI,IAAA,KAAA,GAAQ,GAAO,IAAA,KAAA,GAAQ,GAAK,EAAA;AAC9B,MAAA,OAAA,CAAQ,MAAM,CAAsB,mBAAA,EAAA,KAAK,qBAAqB,GAAG,CAAA,EAAA,EAAK,GAAG,CAAI,EAAA,CAAA,CAAA,CAAA;AAAA,KAC/E;AAAA,GACF;AAEA,EAAA,OAAO,KAAK,GAAI,CAAA,IAAA,CAAK,IAAI,GAAK,EAAA,KAAK,GAAG,GAAG,CAAA,CAAA;AAC3C,CAAA;AAQO,SAAS,SAAS,KAAe,EAAA;AACtC,EAAQ,KAAA,GAAA,KAAA,CAAM,MAAM,CAAC,CAAA,CAAA;AAErB,EAAM,MAAA,EAAA,GAAK,IAAI,MAAA,CAAO,CAAO,IAAA,EAAA,KAAA,CAAM,UAAU,CAAI,GAAA,CAAA,GAAI,CAAC,CAAA,CAAA,CAAA,EAAK,GAAG,CAAA,CAAA;AAC9D,EAAI,IAAA,MAAA,GAAS,KAAM,CAAA,KAAA,CAAM,EAAE,CAAA,CAAA;AAE3B,EAAA,IAAI,CAAC,MAAQ,EAAA;AACX,IAAO,OAAA,EAAA,CAAA;AAAA,GACT;AAEA,EAAI,IAAA,MAAA,GAAS,KAAM,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAE9B,EAAA,IAAI,MAAO,CAAA,CAAC,CAAE,CAAA,MAAA,KAAW,CAAG,EAAA;AAC1B,IAAA,MAAA,GAAS,MAAO,CAAA,GAAA,CAAI,CAAC,CAAA,KAAM,IAAI,CAAC,CAAA,CAAA;AAAA,GAClC;AAEA,EAAA,OAAO,MACH,GAAA,CAAA,GAAA,EAAM,MAAO,CAAA,MAAA,KAAW,CAAI,GAAA,GAAA,GAAM,EAAE,CAAA,CAAA,EAAI,MACrC,CAAA,GAAA,CAAI,CAAC,CAAA,EAAG,KAAU,KAAA;AACjB,IAAA,OAAO,KAAQ,GAAA,CAAA,GAAI,QAAS,CAAA,CAAA,EAAG,EAAE,CAAI,GAAA,IAAA,CAAK,KAAO,CAAA,QAAA,CAAS,CAAG,EAAA,EAAE,CAAI,GAAA,GAAA,GAAO,GAAI,CAAI,GAAA,GAAA,CAAA;AAAA,GACnF,CAAA,CACA,IAAK,CAAA,IAAI,CAAC,CACb,CAAA,CAAA,GAAA,EAAA,CAAA;AACN,CAAA;AAEA,SAAS,SAAS,GAAa,EAAA;AAC7B,EAAM,MAAA,GAAA,GAAM,GAAI,CAAA,QAAA,CAAS,EAAE,CAAA,CAAA;AAC3B,EAAA,OAAO,GAAI,CAAA,MAAA,KAAW,CAAI,GAAA,CAAA,CAAA,EAAI,GAAG,CAAK,CAAA,GAAA,GAAA,CAAA;AACxC,CAAA;AAQO,SAAS,SAAS,KAAe,EAAA;AAEtC,EAAA,IAAI,KAAM,CAAA,OAAA,CAAQ,GAAG,CAAA,KAAM,CAAG,EAAA;AAC5B,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AAEA,EAAA,MAAM,EAAE,MAAA,EAAW,GAAA,cAAA,CAAe,KAAK,CAAA,CAAA;AACvC,EAAO,OAAA,CAAA,CAAA,EAAI,MAAO,CAAA,GAAA,CAAI,CAAC,CAAA,KAAc,QAAS,CAAA,CAAC,CAAC,CAAA,CAAE,IAAK,CAAA,EAAE,CAAC,CAAA,CAAA,CAAA;AAC5D,CAAA;AAOO,SAAS,YAAY,KAAuB,EAAA;AACjD,EAAI,IAAA,KAAA,CAAM,CAAC,CAAA,KAAM,GAAK,EAAA;AACpB,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AACA,EAAM,MAAA,MAAA,GAAS,UAAU,KAAK,CAAA,CAAA;AAC9B,EAAO,OAAA,MAAA,CAAO,UAAe,KAAA,CAAA,GAAI,OAAO,WAAY,EAAA,GAAI,OAAO,YAAa,EAAA,CAAA;AAC9E,CAAA;AAKO,SAAS,YAAY,KAAe,EAAA;AACzC,EAAI,IAAA,KAAA,CAAM,UAAW,CAAA,KAAK,CAAG,EAAA;AAC3B,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AAEA,EAAO,OAAA,SAAA,CAAU,KAAK,CAAA,CAAE,WAAY,EAAA,CAAA;AACtC,CAAA;AAQO,SAAS,SAAS,KAAgC,EAAA;AACvD,EAAM,MAAA,KAAA,GAAQ,eAAe,KAAK,CAAA,CAAA;AAClC,EAAM,MAAA,EAAE,QAAW,GAAA,KAAA,CAAA;AACnB,EAAM,MAAA,CAAA,GAAI,OAAO,CAAC,CAAA,CAAA;AAClB,EAAM,MAAA,CAAA,GAAI,MAAO,CAAA,CAAC,CAAI,GAAA,GAAA,CAAA;AACtB,EAAM,MAAA,CAAA,GAAI,MAAO,CAAA,CAAC,CAAI,GAAA,GAAA,CAAA;AACtB,EAAA,MAAM,IAAI,CAAI,GAAA,IAAA,CAAK,GAAI,CAAA,CAAA,EAAG,IAAI,CAAC,CAAA,CAAA;AAC/B,EAAM,MAAA,CAAA,GAAI,CAAC,CAAW,EAAA,CAAA,GAAA,CAAK,IAAI,CAAI,GAAA,EAAA,IAAM,OAAO,CAAI,GAAA,CAAA,GAAI,KAAK,GAAI,CAAA,IAAA,CAAK,IAAI,CAAI,GAAA,CAAA,EAAG,IAAI,CAAG,EAAA,CAAC,GAAG,CAAE,CAAA,CAAA,CAAA;AAE9F,EAAA,IAAI,IAAO,GAAA,KAAA,CAAA;AACX,EAAM,MAAA,GAAA,GAAM,CAAC,IAAK,CAAA,KAAA,CAAM,EAAE,CAAC,CAAA,GAAI,GAAG,CAAA,EAAG,IAAK,CAAA,KAAA,CAAM,EAAE,CAAC,CAAA,GAAI,GAAG,CAAG,EAAA,IAAA,CAAK,MAAM,CAAE,CAAA,CAAC,CAAI,GAAA,GAAG,CAAC,CAAA,CAAA;AAEnF,EAAI,IAAA,KAAA,CAAM,SAAS,MAAQ,EAAA;AACzB,IAAQ,IAAA,IAAA,GAAA,CAAA;AACR,IAAI,GAAA,CAAA,IAAA,CAAK,MAAO,CAAA,CAAC,CAAC,CAAA,CAAA;AAAA,GACpB;AAEA,EAAA,OAAO,cAAe,CAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,KAAK,CAAA,CAAA;AAC7C,CAAA;AAUO,SAAS,eAAe,KAAgD,EAAA;AAE7E,EAAI,IAAA,OAAO,UAAU,QAAU,EAAA;AAC7B,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AAEA,EAAA,IAAI,KAAM,CAAA,MAAA,CAAO,CAAC,CAAA,KAAM,GAAK,EAAA;AAC3B,IAAO,OAAA,cAAA,CAAe,QAAS,CAAA,KAAK,CAAC,CAAA,CAAA;AAAA,GACvC;AAEA,EAAM,MAAA,MAAA,GAAS,KAAM,CAAA,OAAA,CAAQ,GAAG,CAAA,CAAA;AAChC,EAAA,MAAM,IAAO,GAAA,KAAA,CAAM,SAAU,CAAA,CAAA,EAAG,MAAM,CAAA,CAAA;AAEtC,EAAI,IAAA,CAAC,KAAO,EAAA,MAAA,EAAQ,KAAO,EAAA,MAAA,EAAQ,OAAO,CAAE,CAAA,OAAA,CAAQ,IAAI,CAAA,KAAM,CAAI,CAAA,EAAA;AAChE,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,gBAAgB,KAAK,CAAA,kGAAA,CAAA;AAAA,KACvB,CAAA;AAAA,GACF;AAEA,EAAA,IAAI,SAAc,KAAM,CAAA,SAAA,CAAU,SAAS,CAAG,EAAA,KAAA,CAAM,SAAS,CAAC,CAAA,CAAA;AAC9D,EAAI,IAAA,UAAA,CAAA;AAEJ,EAAA,IAAI,SAAS,OAAS,EAAA;AACpB,IAAS,MAAA,GAAA,MAAA,CAAO,MAAM,GAAG,CAAA,CAAA;AACzB,IAAA,UAAA,GAAa,OAAO,KAAM,EAAA,CAAA;AAC1B,IAAI,IAAA,MAAA,CAAO,WAAW,CAAK,IAAA,MAAA,CAAO,CAAC,CAAE,CAAA,MAAA,CAAO,CAAC,CAAA,KAAM,GAAK,EAAA;AACtD,MAAA,MAAA,CAAO,CAAC,CAAI,GAAA,MAAA,CAAO,CAAC,CAAA,CAAE,MAAM,CAAC,CAAA,CAAA;AAAA,KAC/B;AACA,IAAI,IAAA,CAAC,MAAQ,EAAA,YAAA,EAAc,SAAW,EAAA,cAAA,EAAgB,UAAU,CAAE,CAAA,OAAA,CAAQ,UAAU,CAAA,KAAM,CAAI,CAAA,EAAA;AAC5F,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,eAAe,UAAU,CAAA,0GAAA,CAAA;AAAA,OAC3B,CAAA;AAAA,KACF;AAAA,GACK,MAAA;AACL,IAAS,MAAA,GAAA,MAAA,CAAO,MAAM,GAAG,CAAA,CAAA;AAAA,GAC3B;AAEA,EAAA,MAAA,GAAS,OAAO,GAAI,CAAA,CAAC,KAAkB,KAAA,UAAA,CAAW,KAAK,CAAC,CAAA,CAAA;AACxD,EAAO,OAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,UAAW,EAAA,CAAA;AACpC,CAAA;AAUO,SAAS,eAAe,KAAuB,EAAA;AACpD,EAAM,MAAA,EAAE,IAAM,EAAA,UAAA,EAAe,GAAA,KAAA,CAAA;AAC7B,EAAA,IAAI,SAAS,KAAM,CAAA,MAAA,CAAA;AAEnB,EAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,KAAK,CAAA,KAAM,CAAI,CAAA,EAAA;AAE9B,IAAS,MAAA,GAAA,MAAA,CAAO,GAAI,CAAA,CAAC,CAAW,EAAA,CAAA,KAAe,CAAI,GAAA,CAAA,GAAI,QAAS,CAAA,CAAA,EAAG,EAAE,CAAA,GAAI,CAAE,CAAA,CAAA;AAAA,GAClE,MAAA,IAAA,IAAA,CAAK,OAAQ,CAAA,KAAK,MAAM,CAAI,CAAA,EAAA;AACrC,IAAA,MAAA,CAAO,CAAC,CAAA,GAAI,CAAG,EAAA,MAAA,CAAO,CAAC,CAAC,CAAA,CAAA,CAAA,CAAA;AACxB,IAAA,MAAA,CAAO,CAAC,CAAA,GAAI,CAAG,EAAA,MAAA,CAAO,CAAC,CAAC,CAAA,CAAA,CAAA,CAAA;AAAA,GAC1B;AACA,EAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,OAAO,CAAA,KAAM,CAAI,CAAA,EAAA;AAChC,IAAA,MAAA,GAAS,GAAG,UAAU,CAAA,CAAA,EAAI,MAAO,CAAA,IAAA,CAAK,GAAG,CAAC,CAAA,CAAA,CAAA;AAAA,GACrC,MAAA;AACL,IAAA,MAAA,GAAS,CAAG,EAAA,MAAA,CAAO,IAAK,CAAA,IAAI,CAAC,CAAA,CAAA,CAAA;AAAA,GAC/B;AAEA,EAAO,OAAA,CAAA,EAAG,IAAI,CAAA,CAAA,EAAI,MAAM,CAAA,CAAA,CAAA,CAAA;AAC1B,CAAA;AAYgB,SAAA,gBAAA,CAAiB,UAAoB,EAAA,UAAA,EAAoB,MAAiB,EAAA;AACxF,EAAM,MAAA,IAAA,GAAO,aAAa,UAAU,CAAA,CAAA;AACpC,EAAM,MAAA,IAAA,GAAO,YAAa,CAAA,UAAA,EAAY,MAAM,CAAA,CAAA;AAC5C,EAAQ,OAAA,CAAA,IAAA,CAAK,GAAI,CAAA,IAAA,EAAM,IAAI,CAAA,GAAI,SAAS,IAAK,CAAA,GAAA,CAAI,IAAM,EAAA,IAAI,CAAI,GAAA,IAAA,CAAA,CAAA;AACjE,CAAA;AAYgB,SAAA,YAAA,CAAa,OAAe,UAAqB,EAAA;AAC/D,EAAM,MAAA,KAAA,GAAQ,eAAe,KAAK,CAAA,CAAA;AAElC,EAAI,IAAA,GAAA,GAAM,KAAM,CAAA,IAAA,KAAS,KAAQ,GAAA,cAAA,CAAe,SAAS,KAAK,CAAC,CAAE,CAAA,MAAA,GAAS,KAAM,CAAA,MAAA,CAAA;AAEhF,EAAI,IAAA,UAAA,IAAc,KAAM,CAAA,IAAA,KAAS,MAAQ,EAAA;AACvC,IAAM,MAAA,eAAA,GAAkB,eAAe,UAAU,CAAA,CAAA;AACjD,IAAMA,MAAAA,MAAAA,GAAQ,IAAI,CAAC,CAAA,CAAA;AACnB,IAAI,GAAA,CAAA,CAAC,CAAI,GAAA,GAAA,CAAI,CAAC,CAAA,GAAIA,SAAQ,eAAgB,CAAA,MAAA,CAAO,CAAC,CAAA,IAAK,CAAIA,GAAAA,MAAAA,CAAAA,CAAAA;AAC3D,IAAI,GAAA,CAAA,CAAC,CAAI,GAAA,GAAA,CAAI,CAAC,CAAA,GAAIA,SAAQ,eAAgB,CAAA,MAAA,CAAO,CAAC,CAAA,IAAK,CAAIA,GAAAA,MAAAA,CAAAA,CAAAA;AAC3D,IAAI,GAAA,CAAA,CAAC,CAAI,GAAA,GAAA,CAAI,CAAC,CAAA,GAAIA,SAAQ,eAAgB,CAAA,MAAA,CAAO,CAAC,CAAA,IAAK,CAAIA,GAAAA,MAAAA,CAAAA,CAAAA;AAAA,GAC7D;AAEA,EAAA,MAAM,UAAa,GAAA,GAAA,CAAI,GAAI,CAAA,CAAC,GAAa,KAAA;AACvC,IAAI,IAAA,KAAA,CAAM,SAAS,OAAS,EAAA;AAC1B,MAAO,GAAA,IAAA,GAAA,CAAA;AAAA,KACT;AACA,IAAA,OAAO,OAAO,OAAU,GAAA,GAAA,GAAM,KAAU,GAAA,CAAA,CAAA,GAAA,GAAM,SAAS,KAAU,KAAA,GAAA,CAAA;AAAA,GAClE,CAAA,CAAA;AAGD,EAAA,OAAO,MAAQ,CAAA,CAAA,MAAA,GAAS,UAAW,CAAA,CAAC,IAAI,MAAS,GAAA,UAAA,CAAW,CAAC,CAAA,GAAI,SAAS,UAAW,CAAA,CAAC,CAAG,EAAA,OAAA,CAAQ,CAAC,CAAC,CAAA,CAAA;AACrG,CAAA;AAUgB,SAAA,SAAA,CAAU,KAAe,EAAA,WAAA,GAAc,IAAM,EAAA;AAC3D,EAAO,OAAA,YAAA,CAAa,KAAK,CAAA,GAAI,GAAM,GAAA,MAAA,CAAO,OAAO,WAAW,CAAA,GAAI,OAAQ,CAAA,KAAA,EAAO,WAAW,CAAA,CAAA;AAC5F,CAAA;AAUgB,SAAA,KAAA,CAAM,OAAe,KAAe,EAAA;AAClD,EAAA,IAAI,UAAU,EAAI,EAAA;AAChB,IAAO,OAAA,SAAA,CAAA;AAAA,GACT;AAEA,EAAA,KAAA,GAAQ,MAAM,KAAK,CAAA,CAAA;AAGnB,EAAI,IAAA,KAAA,CAAM,CAAC,CAAA,KAAM,GAAK,EAAA;AACpB,IAAI,IAAA,KAAA,CAAM,WAAW,CAAG,EAAA;AACtB,MAAQ,KAAA,GAAA,KAAA,CAAM,SAAU,CAAA,CAAA,EAAG,CAAC,CAAA,CAAA;AAAA,KAC9B,MAAA,IAAW,KAAM,CAAA,MAAA,IAAU,CAAG,EAAA;AAC5B,MAAA,IAAI,CAAI,GAAA,GAAA,CAAA;AACR,MAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,CAAA,EAAG,CAAK,EAAA,EAAA;AAC1B,QAAA,CAAA,IAAK,KAAM,CAAA,CAAC,CAAI,GAAA,KAAA,CAAM,CAAC,CAAA,CAAA;AAAA,OACzB;AACA,MAAQ,KAAA,GAAA,CAAA,CAAA;AAAA,KACV;AAEA,IACE,OAAA,KAAA,GACA,IAAK,CAAA,KAAA,CAAM,KAAQ,GAAA,GAAG,CACnB,CAAA,QAAA,CAAS,EAAE,CAAA,CACX,QAAS,CAAA,CAAA,EAAG,GAAG,CAAA,CAAA;AAAA,GAIb,MAAA,IAAA,KAAA,CAAM,CAAC,CAAA,KAAM,GAAK,EAAA;AAGzB,IAAA,OAAO,KAAM,CAAA,OAAA,CAAQ,GAAK,EAAA,CAAA,EAAA,EAAK,KAAK,CAAG,CAAA,CAAA,CAAA,CAAA;AAAA,GAGhC,MAAA,IAAA,KAAA,CAAM,CAAC,CAAA,KAAM,GAAK,EAAA;AACzB,IAAO,OAAA,KAAA,CAAM,UAAU,CAAG,EAAA,KAAA,CAAM,YAAY,GAAG,CAAC,CAAI,GAAA,CAAA,EAAA,EAAK,KAAK,CAAA,CAAA,CAAA,CAAA;AAAA,GAChE;AAEA,EAAM,MAAA,KAAA,GAAQ,eAAe,KAAK,CAAA,CAAA;AAElC,EAAI,IAAA,KAAA,CAAM,SAAS,OAAS,EAAA;AAC1B,IAAA,KAAA,CAAM,MAAO,CAAA,CAAC,CAAI,GAAA,CAAA,CAAA,EAAI,KAAK,CAAA,CAAA,CAAA;AAAA,GACtB,MAAA;AACL,IAAM,KAAA,CAAA,MAAA,CAAO,CAAC,CAAI,GAAA,KAAA,CAAA;AAAA,GACpB;AAEA,EAAA,OAAO,eAAe,KAAK,CAAA,CAAA;AAC7B,CAAA;AASgB,SAAA,MAAA,CAAO,OAAe,WAAqB,EAAA;AACzD,EAAM,MAAA,KAAA,GAAQ,eAAe,KAAK,CAAA,CAAA;AAClC,EAAA,WAAA,GAAc,MAAM,WAAW,CAAA,CAAA;AAE/B,EAAA,IAAI,KAAM,CAAA,IAAA,CAAK,OAAQ,CAAA,KAAK,MAAM,CAAI,CAAA,EAAA;AACpC,IAAM,KAAA,CAAA,MAAA,CAAO,CAAC,CAAA,IAAK,CAAI,GAAA,WAAA,CAAA;AAAA,GACd,MAAA,IAAA,KAAA,CAAM,IAAK,CAAA,OAAA,CAAQ,KAAK,CAAA,KAAM,CAAM,CAAA,IAAA,KAAA,CAAM,IAAK,CAAA,OAAA,CAAQ,OAAO,CAAA,KAAM,CAAI,CAAA,EAAA;AACjF,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,CAAA,EAAG,KAAK,CAAG,EAAA;AAC7B,MAAM,KAAA,CAAA,MAAA,CAAO,CAAC,CAAA,IAAK,CAAI,GAAA,WAAA,CAAA;AAAA,KACzB;AAAA,GACF;AACA,EAAA,OAAO,eAAe,KAAK,CAAA,CAAA;AAC7B,CAAA;AASgB,SAAA,OAAA,CAAQ,OAAe,WAAqB,EAAA;AAC1D,EAAM,MAAA,KAAA,GAAQ,eAAe,KAAK,CAAA,CAAA;AAClC,EAAA,WAAA,GAAc,MAAM,WAAW,CAAA,CAAA;AAE/B,EAAA,IAAI,KAAM,CAAA,IAAA,CAAK,OAAQ,CAAA,KAAK,MAAM,CAAI,CAAA,EAAA;AACpC,IAAA,KAAA,CAAM,OAAO,CAAC,CAAA,IAAA,CAAM,MAAM,KAAM,CAAA,MAAA,CAAO,CAAC,CAAK,IAAA,WAAA,CAAA;AAAA,aACpC,KAAM,CAAA,IAAA,CAAK,OAAQ,CAAA,KAAK,MAAM,CAAI,CAAA,EAAA;AAC3C,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,CAAA,EAAG,KAAK,CAAG,EAAA;AAC7B,MAAA,KAAA,CAAM,OAAO,CAAC,CAAA,IAAA,CAAM,MAAM,KAAM,CAAA,MAAA,CAAO,CAAC,CAAK,IAAA,WAAA,CAAA;AAAA,KAC/C;AAAA,aACS,KAAM,CAAA,IAAA,CAAK,OAAQ,CAAA,OAAO,MAAM,CAAI,CAAA,EAAA;AAC7C,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,CAAA,EAAG,KAAK,CAAG,EAAA;AAC7B,MAAA,KAAA,CAAM,OAAO,CAAC,CAAA,IAAA,CAAM,IAAI,KAAM,CAAA,MAAA,CAAO,CAAC,CAAK,IAAA,WAAA,CAAA;AAAA,KAC7C;AAAA,GACF;AAEA,EAAA,OAAO,eAAe,KAAK,CAAA,CAAA;AAC7B;;;;"}