{"version":3,"file":"dataLinks.js","sources":["../../../src/utils/dataLinks.ts"],"sourcesContent":["import {\n  DataLink,\n  DataQuery,\n  ExplorePanelsState,\n  Field,\n  InternalDataLink,\n  InterpolateFunction,\n  LinkModel,\n  ScopedVars,\n  SplitOpen,\n  TimeRange,\n} from '../types';\n\nimport { locationUtil } from './location';\nimport { serializeStateToUrlParam, toURLRange } from './url';\n\nexport const DataLinkBuiltInVars = {\n  keepTime: '__url_time_range',\n  timeRangeFrom: '__from',\n  timeRangeTo: '__to',\n  includeVars: '__all_variables',\n  seriesName: '__series.name',\n  fieldName: '__field.name',\n  valueTime: '__value.time',\n  valueNumeric: '__value.numeric',\n  valueText: '__value.text',\n  valueRaw: '__value.raw',\n  // name of the calculation represented by the value\n  valueCalc: '__value.calc',\n};\n\n// We inject these because we cannot import them directly as they reside inside grafana main package.\nexport type LinkToExploreOptions = {\n  link: DataLink;\n  scopedVars: ScopedVars;\n  range?: TimeRange;\n  field: Field;\n  internalLink: InternalDataLink;\n  onClickFn?: SplitOpen;\n  replaceVariables: InterpolateFunction;\n};\n\nexport function mapInternalLinkToExplore(options: LinkToExploreOptions): LinkModel<Field> {\n  const { onClickFn, replaceVariables, link, scopedVars, range, field, internalLink } = options;\n\n  const interpolatedQuery = interpolateObject(link.internal?.query, scopedVars, replaceVariables);\n  const interpolatedPanelsState = interpolateObject(link.internal?.panelsState, scopedVars, replaceVariables);\n  const interpolatedCorrelationData = interpolateObject(\n    link.internal?.meta?.correlationData,\n    scopedVars,\n    replaceVariables\n  );\n  const title = link.title ? link.title : internalLink.datasourceName;\n\n  return {\n    title: replaceVariables(title, scopedVars),\n    // In this case this is meant to be internal link (opens split view by default) the href will also points\n    // to explore but this way you can open it in new tab.\n    href: generateInternalHref(internalLink.datasourceUid, interpolatedQuery, range, interpolatedPanelsState),\n    onClick: onClickFn\n      ? (event) => {\n          // Explore data links can be displayed not only in DataLinkButton but it can be used by the consumer in\n          // other way, for example MenuItem. We want to provide the URL (for opening in the new tab as well as\n          // the onClick to open the split view).\n          if (event.preventDefault) {\n            event.preventDefault();\n          }\n\n          onClickFn({\n            datasourceUid: internalLink.datasourceUid,\n            queries: [interpolatedQuery],\n            panelsState: interpolatedPanelsState,\n            correlationHelperData: interpolatedCorrelationData,\n            range,\n          });\n        }\n      : undefined,\n    target: link?.targetBlank ? '_blank' : '_self',\n    origin: field,\n  };\n}\n\n/**\n * Generates href for internal derived field link.\n */\nfunction generateInternalHref<T extends DataQuery = any>(\n  datasourceUid: string,\n  query: T,\n  range?: TimeRange,\n  panelsState?: ExplorePanelsState\n): string {\n  return locationUtil.assureBaseUrl(\n    `/explore?left=${encodeURIComponent(\n      serializeStateToUrlParam({\n        // @deprecated mapInternalLinkToExplore required passing range. Some consumers to generate the URL\n        // with defaults pass range as `{} as any`. This is why we need to check for `range?.raw` not just\n        // `range ? ...` here. This behavior will be marked as deprecated in #72498\n        ...(range?.raw ? { range: toURLRange(range.raw) } : {}),\n        datasource: datasourceUid,\n        queries: [query],\n        panelsState: panelsState,\n      })\n    )}`\n  );\n}\n\nfunction interpolateObject<T>(\n  obj: T | undefined,\n  scopedVars: ScopedVars,\n  replaceVariables: InterpolateFunction\n): T | undefined {\n  if (!obj) {\n    return obj;\n  }\n  if (typeof obj === 'string') {\n    // @ts-ignore this is complaining we are returning string, but we are checking if obj is a string so should be fine.\n    return replaceVariables(obj, scopedVars);\n  }\n  const copy = JSON.parse(JSON.stringify(obj));\n  return interpolateObjectRecursive(copy, scopedVars, replaceVariables);\n}\n\nfunction interpolateObjectRecursive<T extends Object>(\n  obj: T,\n  scopedVars: ScopedVars,\n  replaceVariables: InterpolateFunction\n): T {\n  for (const k of Object.keys(obj)) {\n    // Honestly not sure how to type this to make TS happy.\n    // @ts-ignore\n    if (typeof obj[k] === 'string') {\n      // @ts-ignore\n      obj[k] = replaceVariables(obj[k], scopedVars);\n      // @ts-ignore\n    } else if (typeof obj[k] === 'object' && obj[k] !== null) {\n      // @ts-ignore\n      obj[k] = interpolateObjectRecursive(obj[k], scopedVars, replaceVariables);\n    }\n  }\n  return obj;\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAgBO,MAAM,mBAAsB,GAAA;AAAA,EACjC,QAAU,EAAA,kBAAA;AAAA,EACV,aAAe,EAAA,QAAA;AAAA,EACf,WAAa,EAAA,MAAA;AAAA,EACb,WAAa,EAAA,iBAAA;AAAA,EACb,UAAY,EAAA,eAAA;AAAA,EACZ,SAAW,EAAA,cAAA;AAAA,EACX,SAAW,EAAA,cAAA;AAAA,EACX,YAAc,EAAA,iBAAA;AAAA,EACd,SAAW,EAAA,cAAA;AAAA,EACX,QAAU,EAAA,aAAA;AAAA;AAAA,EAEV,SAAW,EAAA,cAAA;AACb,EAAA;AAaO,SAAS,yBAAyB,OAAiD,EAAA;AA1C1F,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AA2CE,EAAM,MAAA,EAAE,WAAW,gBAAkB,EAAA,IAAA,EAAM,YAAY,KAAO,EAAA,KAAA,EAAO,cAAiB,GAAA,OAAA,CAAA;AAEtF,EAAA,MAAM,oBAAoB,iBAAkB,CAAA,CAAA,EAAA,GAAA,IAAA,CAAK,aAAL,IAAe,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,KAAA,EAAO,YAAY,gBAAgB,CAAA,CAAA;AAC9F,EAAA,MAAM,0BAA0B,iBAAkB,CAAA,CAAA,EAAA,GAAA,IAAA,CAAK,aAAL,IAAe,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,WAAA,EAAa,YAAY,gBAAgB,CAAA,CAAA;AAC1G,EAAA,MAAM,2BAA8B,GAAA,iBAAA;AAAA,IAAA,CAClC,EAAK,GAAA,CAAA,EAAA,GAAA,IAAA,CAAA,QAAA,KAAL,IAAe,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,KAAf,IAAqB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,eAAA;AAAA,IACrB,UAAA;AAAA,IACA,gBAAA;AAAA,GACF,CAAA;AACA,EAAA,MAAM,KAAQ,GAAA,IAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,QAAQ,YAAa,CAAA,cAAA,CAAA;AAErD,EAAO,OAAA;AAAA,IACL,KAAA,EAAO,gBAAiB,CAAA,KAAA,EAAO,UAAU,CAAA;AAAA;AAAA;AAAA,IAGzC,MAAM,oBAAqB,CAAA,YAAA,CAAa,aAAe,EAAA,iBAAA,EAAmB,OAAO,uBAAuB,CAAA;AAAA,IACxG,OAAA,EAAS,SACL,GAAA,CAAC,KAAU,KAAA;AAIT,MAAA,IAAI,MAAM,cAAgB,EAAA;AACxB,QAAA,KAAA,CAAM,cAAe,EAAA,CAAA;AAAA,OACvB;AAEA,MAAU,SAAA,CAAA;AAAA,QACR,eAAe,YAAa,CAAA,aAAA;AAAA,QAC5B,OAAA,EAAS,CAAC,iBAAiB,CAAA;AAAA,QAC3B,WAAa,EAAA,uBAAA;AAAA,QACb,qBAAuB,EAAA,2BAAA;AAAA,QACvB,KAAA;AAAA,OACD,CAAA,CAAA;AAAA,KAEH,GAAA,KAAA,CAAA;AAAA,IACJ,MAAA,EAAA,CAAQ,IAAM,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,IAAA,CAAA,WAAA,IAAc,QAAW,GAAA,OAAA;AAAA,IACvC,MAAQ,EAAA,KAAA;AAAA,GACV,CAAA;AACF,CAAA;AAKA,SAAS,oBACP,CAAA,aAAA,EACA,KACA,EAAA,KAAA,EACA,WACQ,EAAA;AACR,EAAA,OAAO,YAAa,CAAA,aAAA;AAAA,IAClB,CAAiB,cAAA,EAAA,kBAAA;AAAA,MACf,wBAAyB,CAAA,aAAA,CAAA,cAAA,CAAA,EAAA,EAAA,CAInB,KAAO,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,IAAM,EAAE,KAAA,EAAO,UAAW,CAAA,KAAA,CAAM,GAAG,CAAA,EAAM,GAAA,EAJ7B,CAAA,EAAA;AAAA,QAKvB,UAAY,EAAA,aAAA;AAAA,QACZ,OAAA,EAAS,CAAC,KAAK,CAAA;AAAA,QACf,WAAA;AAAA,OACD,CAAA,CAAA;AAAA,KACF,CAAA,CAAA;AAAA,GACH,CAAA;AACF,CAAA;AAEA,SAAS,iBAAA,CACP,GACA,EAAA,UAAA,EACA,gBACe,EAAA;AACf,EAAA,IAAI,CAAC,GAAK,EAAA;AACR,IAAO,OAAA,GAAA,CAAA;AAAA,GACT;AACA,EAAI,IAAA,OAAO,QAAQ,QAAU,EAAA;AAE3B,IAAO,OAAA,gBAAA,CAAiB,KAAK,UAAU,CAAA,CAAA;AAAA,GACzC;AACA,EAAA,MAAM,OAAO,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,SAAA,CAAU,GAAG,CAAC,CAAA,CAAA;AAC3C,EAAO,OAAA,0BAAA,CAA2B,IAAM,EAAA,UAAA,EAAY,gBAAgB,CAAA,CAAA;AACtE,CAAA;AAEA,SAAS,0BAAA,CACP,GACA,EAAA,UAAA,EACA,gBACG,EAAA;AACH,EAAA,KAAA,MAAW,CAAK,IAAA,MAAA,CAAO,IAAK,CAAA,GAAG,CAAG,EAAA;AAGhC,IAAA,IAAI,OAAO,GAAA,CAAI,CAAC,CAAA,KAAM,QAAU,EAAA;AAE9B,MAAA,GAAA,CAAI,CAAC,CAAI,GAAA,gBAAA,CAAiB,GAAI,CAAA,CAAC,GAAG,UAAU,CAAA,CAAA;AAAA,KAE9C,MAAA,IAAW,OAAO,GAAI,CAAA,CAAC,MAAM,QAAY,IAAA,GAAA,CAAI,CAAC,CAAA,KAAM,IAAM,EAAA;AAExD,MAAA,GAAA,CAAI,CAAC,CAAI,GAAA,0BAAA,CAA2B,IAAI,CAAC,CAAA,EAAG,YAAY,gBAAgB,CAAA,CAAA;AAAA,KAC1E;AAAA,GACF;AACA,EAAO,OAAA,GAAA,CAAA;AACT;;;;"}