{"version":3,"file":"arrayUtils.js","sources":["../../../src/utils/arrayUtils.ts"],"sourcesContent":["import { SortOrder } from '@grafana/schema';\n\n/** @internal */\nexport function moveItemImmutably<T>(arr: T[], from: number, to: number) {\n  const clone = [...arr];\n  Array.prototype.splice.call(clone, to, 0, Array.prototype.splice.call(clone, from, 1)[0]);\n  return clone;\n}\n\n/** @internal */\nexport function insertBeforeImmutably<T>(array: T[], item: T, index: number): T[] {\n  if (index < 0 || index > array.length) {\n    throw new Error('Index out of bounds');\n  }\n\n  const clone = [...array];\n  clone.splice(index, 0, item);\n\n  return clone;\n}\n\n/** @internal */\nexport function insertAfterImmutably<T>(array: T[], item: T, index: number): T[] {\n  if (index < 0 || index > array.length) {\n    throw new Error('Index out of bounds');\n  }\n\n  const clone = [...array];\n  clone.splice(index + 1, 0, item);\n\n  return clone;\n}\n\n/**\n * Given a sort order and a value, return a function that can be used to sort values\n * Null/undefined/empty string values are always sorted to the end regardless of the sort order provided\n */\nconst collator = new Intl.Collator(undefined, { numeric: true, sensitivity: 'base' });\nconst numericCompare = (a: number, b: number) => a - b;\n\nexport function sortValues(sort: SortOrder.Ascending | SortOrder.Descending) {\n  return (a: unknown, b: unknown) => {\n    if (a === b) {\n      return 0;\n    }\n\n    if (b == null || (typeof b === 'string' && b.trim() === '')) {\n      return -1;\n    }\n    if (a == null || (typeof a === 'string' && a?.trim() === '')) {\n      return 1;\n    }\n\n    let compareFn: (a: any, b: any) => number = collator.compare;\n\n    if (typeof a === 'number' && typeof b === 'number') {\n      compareFn = numericCompare;\n    }\n\n    if (sort === SortOrder.Descending) {\n      return compareFn(b, a);\n    }\n\n    return compareFn(a, b);\n  };\n}\n"],"names":[],"mappings":";;AAGgB,SAAA,iBAAA,CAAqB,GAAU,EAAA,IAAA,EAAc,EAAY,EAAA;AACvE,EAAM,MAAA,KAAA,GAAQ,CAAC,GAAG,GAAG,CAAA,CAAA;AACrB,EAAA,KAAA,CAAM,SAAU,CAAA,MAAA,CAAO,IAAK,CAAA,KAAA,EAAO,IAAI,CAAG,EAAA,KAAA,CAAM,SAAU,CAAA,MAAA,CAAO,KAAK,KAAO,EAAA,IAAA,EAAM,CAAC,CAAA,CAAE,CAAC,CAAC,CAAA,CAAA;AACxF,EAAO,OAAA,KAAA,CAAA;AACT,CAAA;AAGgB,SAAA,qBAAA,CAAyB,KAAY,EAAA,IAAA,EAAS,KAAoB,EAAA;AAChF,EAAA,IAAI,KAAQ,GAAA,CAAA,IAAK,KAAQ,GAAA,KAAA,CAAM,MAAQ,EAAA;AACrC,IAAM,MAAA,IAAI,MAAM,qBAAqB,CAAA,CAAA;AAAA,GACvC;AAEA,EAAM,MAAA,KAAA,GAAQ,CAAC,GAAG,KAAK,CAAA,CAAA;AACvB,EAAM,KAAA,CAAA,MAAA,CAAO,KAAO,EAAA,CAAA,EAAG,IAAI,CAAA,CAAA;AAE3B,EAAO,OAAA,KAAA,CAAA;AACT,CAAA;AAGgB,SAAA,oBAAA,CAAwB,KAAY,EAAA,IAAA,EAAS,KAAoB,EAAA;AAC/E,EAAA,IAAI,KAAQ,GAAA,CAAA,IAAK,KAAQ,GAAA,KAAA,CAAM,MAAQ,EAAA;AACrC,IAAM,MAAA,IAAI,MAAM,qBAAqB,CAAA,CAAA;AAAA,GACvC;AAEA,EAAM,MAAA,KAAA,GAAQ,CAAC,GAAG,KAAK,CAAA,CAAA;AACvB,EAAA,KAAA,CAAM,MAAO,CAAA,KAAA,GAAQ,CAAG,EAAA,CAAA,EAAG,IAAI,CAAA,CAAA;AAE/B,EAAO,OAAA,KAAA,CAAA;AACT,CAAA;AAMA,MAAM,QAAA,GAAW,IAAI,IAAA,CAAK,QAAS,CAAA,KAAA,CAAA,EAAW,EAAE,OAAS,EAAA,IAAA,EAAM,WAAa,EAAA,MAAA,EAAQ,CAAA,CAAA;AACpF,MAAM,cAAiB,GAAA,CAAC,CAAW,EAAA,CAAA,KAAc,CAAI,GAAA,CAAA,CAAA;AAE9C,SAAS,WAAW,IAAkD,EAAA;AAC3E,EAAO,OAAA,CAAC,GAAY,CAAe,KAAA;AACjC,IAAA,IAAI,MAAM,CAAG,EAAA;AACX,MAAO,OAAA,CAAA,CAAA;AAAA,KACT;AAEA,IAAI,IAAA,CAAA,IAAK,QAAS,OAAO,CAAA,KAAM,YAAY,CAAE,CAAA,IAAA,OAAW,EAAK,EAAA;AAC3D,MAAO,OAAA,CAAA,CAAA,CAAA;AAAA,KACT;AACA,IAAA,IAAI,KAAK,IAAS,IAAA,OAAO,MAAM,QAAY,IAAA,CAAA,CAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,CAAA,CAAG,YAAW,EAAK,EAAA;AAC5D,MAAO,OAAA,CAAA,CAAA;AAAA,KACT;AAEA,IAAA,IAAI,YAAwC,QAAS,CAAA,OAAA,CAAA;AAErD,IAAA,IAAI,OAAO,CAAA,KAAM,QAAY,IAAA,OAAO,MAAM,QAAU,EAAA;AAClD,MAAY,SAAA,GAAA,cAAA,CAAA;AAAA,KACd;AAEA,IAAI,IAAA,IAAA,KAAS,UAAU,UAAY,EAAA;AACjC,MAAO,OAAA,SAAA,CAAU,GAAG,CAAC,CAAA,CAAA;AAAA,KACvB;AAEA,IAAO,OAAA,SAAA,CAAU,GAAG,CAAC,CAAA,CAAA;AAAA,GACvB,CAAA;AACF;;;;"}