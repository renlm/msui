{"version":3,"file":"fieldParser.js","sources":["../../../src/utils/fieldParser.ts"],"sourcesContent":["import { guessFieldTypeFromValue } from '../dataframe/processDataFrame';\nimport { Field, FieldType } from '../types/dataFrame';\n\nexport function makeFieldParser(value: unknown, field: Field) {\n  if (!field.type) {\n    if (field.name === 'time' || field.name === 'Time') {\n      field.type = FieldType.time;\n    } else {\n      field.type = guessFieldTypeFromValue(value);\n    }\n  }\n\n  if (field.type === FieldType.number) {\n    return (value: string) => {\n      return parseFloat(value);\n    };\n  }\n\n  // Will convert anything that starts with \"T\" to true\n  if (field.type === FieldType.boolean) {\n    return (value: string) => {\n      return !(value[0] === 'F' || value[0] === 'f' || value[0] === '0');\n    };\n  }\n\n  // Just pass the string back\n  return (value: string) => value;\n}\n"],"names":["value"],"mappings":";;;AAGgB,SAAA,eAAA,CAAgB,OAAgB,KAAc,EAAA;AAC5D,EAAI,IAAA,CAAC,MAAM,IAAM,EAAA;AACf,IAAA,IAAI,KAAM,CAAA,IAAA,KAAS,MAAU,IAAA,KAAA,CAAM,SAAS,MAAQ,EAAA;AAClD,MAAA,KAAA,CAAM,OAAO,SAAU,CAAA,IAAA,CAAA;AAAA,KAClB,MAAA;AACL,MAAM,KAAA,CAAA,IAAA,GAAO,wBAAwB,KAAK,CAAA,CAAA;AAAA,KAC5C;AAAA,GACF;AAEA,EAAI,IAAA,KAAA,CAAM,IAAS,KAAA,SAAA,CAAU,MAAQ,EAAA;AACnC,IAAA,OAAO,CAACA,MAAkB,KAAA;AACxB,MAAA,OAAO,WAAWA,MAAK,CAAA,CAAA;AAAA,KACzB,CAAA;AAAA,GACF;AAGA,EAAI,IAAA,KAAA,CAAM,IAAS,KAAA,SAAA,CAAU,OAAS,EAAA;AACpC,IAAA,OAAO,CAACA,MAAkB,KAAA;AACxB,MAAO,OAAA,EAAEA,MAAM,CAAA,CAAC,CAAM,KAAA,GAAA,IAAOA,MAAM,CAAA,CAAC,CAAM,KAAA,GAAA,IAAOA,MAAM,CAAA,CAAC,CAAM,KAAA,GAAA,CAAA,CAAA;AAAA,KAChE,CAAA;AAAA,GACF;AAGA,EAAA,OAAO,CAACA,MAAkBA,KAAAA,MAAAA,CAAAA;AAC5B;;;;"}