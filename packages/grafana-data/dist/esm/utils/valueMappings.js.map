{"version":3,"file":"valueMappings.js","sources":["../../../src/utils/valueMappings.ts"],"sourcesContent":["import { getActiveThreshold } from '../field';\nimport { stringToJsRegex } from '../text/string';\nimport {\n  MappingType,\n  SpecialValueMatch,\n  ThresholdsConfig,\n  ValueMap,\n  ValueMapping,\n  ValueMappingResult,\n  SpecialValueOptions,\n} from '../types';\n\nexport function getValueMappingResult(valueMappings: ValueMapping[], value: any): ValueMappingResult | null {\n  for (const vm of valueMappings) {\n    switch (vm.type) {\n      case MappingType.ValueToText:\n        if (value == null) {\n          continue;\n        }\n\n        const result = vm.options[value];\n        if (result) {\n          return result;\n        }\n\n        break;\n\n      case MappingType.RangeToText:\n        if (value == null) {\n          continue;\n        }\n\n        const valueAsNumber = parseFloat(value);\n        if (isNaN(valueAsNumber)) {\n          continue;\n        }\n\n        const isNumFrom = !isNaN(vm.options.from!);\n        if (isNumFrom && valueAsNumber < vm.options.from!) {\n          continue;\n        }\n\n        const isNumTo = !isNaN(vm.options.to!);\n        if (isNumTo && valueAsNumber > vm.options.to!) {\n          continue;\n        }\n\n        return vm.options.result;\n\n      case MappingType.RegexToText:\n        if (value == null) {\n          continue;\n        }\n\n        if (typeof value !== 'string') {\n          continue;\n        }\n\n        const regex = stringToJsRegex(vm.options.pattern);\n        if (value.match(regex)) {\n          const res = { ...vm.options.result };\n\n          if (res.text != null) {\n            res.text = value.replace(regex, vm.options.result.text || '');\n          }\n\n          return res;\n        }\n\n      case MappingType.SpecialValue:\n        switch ((vm.options as SpecialValueOptions).match) {\n          case SpecialValueMatch.Null: {\n            if (value == null) {\n              return vm.options.result;\n            }\n            break;\n          }\n          case SpecialValueMatch.NaN: {\n            if (typeof value === 'number' && isNaN(value)) {\n              return vm.options.result;\n            }\n            break;\n          }\n          case SpecialValueMatch.NullAndNaN: {\n            if ((typeof value === 'number' && isNaN(value)) || value == null) {\n              return vm.options.result;\n            }\n            break;\n          }\n          case SpecialValueMatch.True: {\n            if (value === true || value === 'true') {\n              return vm.options.result;\n            }\n            break;\n          }\n          case SpecialValueMatch.False: {\n            if (value === false || value === 'false') {\n              return vm.options.result;\n            }\n            break;\n          }\n          case SpecialValueMatch.Empty: {\n            if (value === '') {\n              return vm.options.result;\n            }\n            break;\n          }\n        }\n    }\n  }\n\n  return null;\n}\n\n// Ref https://stackoverflow.com/a/58550111\nexport function isNumeric(num: unknown) {\n  return (typeof num === 'number' || (typeof num === 'string' && num.trim() !== '')) && !isNaN(num as number);\n}\n\n/**\n * @deprecated use MappingType instead\n * @internal\n */\nexport enum LegacyMappingType {\n  ValueToText = 1,\n  RangeToText = 2,\n}\n\n/**\n * @alpha\n * Converts the old Angular value mappings to new react style\n */\nexport function convertOldAngularValueMappings(panel: any, migratedThresholds?: ThresholdsConfig): ValueMapping[] {\n  const mappings: ValueMapping[] = [];\n\n  // Guess the right type based on options\n  let mappingType = panel.mappingType;\n  if (!panel.mappingType) {\n    if (panel.valueMaps && panel.valueMaps.length) {\n      mappingType = 1;\n    } else if (panel.rangeMaps && panel.rangeMaps.length) {\n      mappingType = 2;\n    }\n  }\n  if (mappingType === 1) {\n    for (let i = 0; i < panel.valueMaps.length; i++) {\n      const map = panel.valueMaps[i];\n      mappings.push(\n        upgradeOldAngularValueMapping(\n          {\n            ...map,\n            id: i, // used for order\n            type: MappingType.ValueToText,\n          },\n          panel.fieldConfig?.defaults?.thresholds || migratedThresholds\n        )\n      );\n    }\n  } else if (mappingType === 2) {\n    for (let i = 0; i < panel.rangeMaps.length; i++) {\n      const map = panel.rangeMaps[i];\n      mappings.push(\n        upgradeOldAngularValueMapping(\n          {\n            ...map,\n            id: i, // used for order\n            type: MappingType.RangeToText,\n          },\n          panel.fieldConfig?.defaults?.thresholds || migratedThresholds\n        )\n      );\n    }\n  }\n\n  return mappings;\n}\n\nfunction upgradeOldAngularValueMapping(old: any, thresholds?: ThresholdsConfig): ValueMapping {\n  const valueMaps: ValueMap = { type: MappingType.ValueToText, options: {} };\n  const newMappings: ValueMapping[] = [];\n\n  // Use the color we would have picked from thesholds\n  let color: string | undefined = undefined;\n  const numeric = parseFloat(old.text);\n  if (thresholds && !isNaN(numeric)) {\n    const level = getActiveThreshold(numeric, thresholds.steps);\n    if (level && level.color) {\n      color = level.color;\n    }\n  }\n\n  switch (old.type) {\n    case LegacyMappingType.ValueToText:\n    case MappingType.ValueToText:\n      if (old.value != null) {\n        if (old.value === 'null') {\n          newMappings.push({\n            type: MappingType.SpecialValue,\n            options: {\n              match: SpecialValueMatch.Null,\n              result: { text: old.text, color },\n            },\n          });\n        } else {\n          valueMaps.options[String(old.value)] = {\n            text: old.text,\n            color,\n          };\n        }\n      }\n      break;\n    case LegacyMappingType.RangeToText:\n    case MappingType.RangeToText:\n      if (old.from === 'null' || old.to === 'null') {\n        newMappings.push({\n          type: MappingType.SpecialValue,\n          options: {\n            match: SpecialValueMatch.Null,\n            result: { text: old.text, color },\n          },\n        });\n      } else {\n        newMappings.push({\n          type: MappingType.RangeToText,\n          options: {\n            from: +old.from,\n            to: +old.to,\n            result: { text: old.text, color },\n          },\n        });\n      }\n      break;\n  }\n\n  if (Object.keys(valueMaps.options).length > 0) {\n    newMappings.unshift(valueMaps);\n  }\n\n  return newMappings[0];\n}\n"],"names":["LegacyMappingType"],"mappings":"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"}