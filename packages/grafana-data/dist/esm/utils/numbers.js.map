{"version":3,"file":"numbers.js","sources":["../../../src/utils/numbers.ts"],"sourcesContent":["/**\n * Round half away from zero ('commercial' rounding)\n * Uses correction to offset floating-point inaccuracies.\n * Works symmetrically for positive and negative numbers.\n *\n * ref: https://stackoverflow.com/a/48764436\n */\nexport function roundDecimals(val: number, dec = 0) {\n  if (Number.isInteger(val)) {\n    return val;\n  }\n\n  let p = 10 ** dec;\n  let n = val * p * (1 + Number.EPSILON);\n  return Math.round(n) / p;\n}\n\n/**\n * Tries to guess number of decimals needed to format a number\n *\n * used for determining minimum decimals required to uniformly\n * format a numric sequence, e.g. 10, 10.125, 10.25, 10.5\n *\n * good for precisce increments:  0.125            -> 3\n * bad  for arbitrary floats:     371.499999999999 -> 12\n */\nexport function guessDecimals(num: number) {\n  return (('' + num).split('.')[1] || '').length;\n}\n"],"names":[],"mappings":"AAOgB,SAAA,aAAA,CAAc,GAAa,EAAA,GAAA,GAAM,CAAG,EAAA;AAClD,EAAI,IAAA,MAAA,CAAO,SAAU,CAAA,GAAG,CAAG,EAAA;AACzB,IAAO,OAAA,GAAA,CAAA;AAAA,GACT;AAEA,EAAA,IAAI,IAAI,EAAM,IAAA,GAAA,CAAA;AACd,EAAA,IAAI,CAAI,GAAA,GAAA,GAAM,CAAK,IAAA,CAAA,GAAI,MAAO,CAAA,OAAA,CAAA,CAAA;AAC9B,EAAO,OAAA,IAAA,CAAK,KAAM,CAAA,CAAC,CAAI,GAAA,CAAA,CAAA;AACzB,CAAA;AAWO,SAAS,cAAc,GAAa,EAAA;AACzC,EAAA,OAAA,CAAA,CAAS,KAAK,GAAK,EAAA,KAAA,CAAM,GAAG,CAAE,CAAA,CAAC,KAAK,EAAI,EAAA,MAAA,CAAA;AAC1C;;;;"}