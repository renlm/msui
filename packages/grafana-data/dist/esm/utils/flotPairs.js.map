{"version":3,"file":"flotPairs.js","sources":["../../../src/utils/flotPairs.ts"],"sourcesContent":["import { NullValueMode } from '../types/data';\nimport { Field } from '../types/dataFrame';\nimport { GraphSeriesValue } from '../types/graph';\nimport { TimeRange } from '../types/time';\n\nexport interface FlotPairsOptions {\n  xField: Field;\n  yField: Field;\n  nullValueMode?: NullValueMode;\n}\n\nexport function getFlotPairs({ xField, yField, nullValueMode }: FlotPairsOptions): GraphSeriesValue[][] {\n  const vX = xField.values;\n  const vY = yField.values;\n  const length = vX.length;\n  if (vY.length !== length) {\n    throw new Error('Unexpected field length');\n  }\n\n  const ignoreNulls = nullValueMode === NullValueMode.Ignore;\n  const nullAsZero = nullValueMode === NullValueMode.AsZero;\n\n  const pairs: any[][] = [];\n\n  for (let i = 0; i < length; i++) {\n    const x = vX[i];\n    let y = vY[i];\n\n    if (y === null) {\n      if (ignoreNulls) {\n        continue;\n      }\n      if (nullAsZero) {\n        y = 0;\n      }\n    }\n\n    // X must be a value\n    if (x === null) {\n      continue;\n    }\n\n    pairs.push([x, y]);\n  }\n  return pairs;\n}\n\n/**\n * Returns a constant series based on the first value from the provide series.\n * @param seriesData Series\n * @param range Start and end time for the constant series\n */\nexport function getFlotPairsConstant(seriesData: GraphSeriesValue[][], range: TimeRange): GraphSeriesValue[][] {\n  if (!range.from || !range.to || !seriesData || seriesData.length === 0) {\n    return [];\n  }\n\n  const from = range.from.valueOf();\n  const to = range.to.valueOf();\n  const value = seriesData[0][1];\n  return [\n    [from, value],\n    [to, value],\n  ];\n}\n"],"names":[],"mappings":";;AAWO,SAAS,YAAa,CAAA,EAAE,MAAQ,EAAA,MAAA,EAAQ,eAAyD,EAAA;AACtG,EAAA,MAAM,KAAK,MAAO,CAAA,MAAA,CAAA;AAClB,EAAA,MAAM,KAAK,MAAO,CAAA,MAAA,CAAA;AAClB,EAAA,MAAM,SAAS,EAAG,CAAA,MAAA,CAAA;AAClB,EAAI,IAAA,EAAA,CAAG,WAAW,MAAQ,EAAA;AACxB,IAAM,MAAA,IAAI,MAAM,yBAAyB,CAAA,CAAA;AAAA,GAC3C;AAEA,EAAM,MAAA,WAAA,GAAc,kBAAkB,aAAc,CAAA,MAAA,CAAA;AACpD,EAAM,MAAA,UAAA,GAAa,kBAAkB,aAAc,CAAA,MAAA,CAAA;AAEnD,EAAA,MAAM,QAAiB,EAAC,CAAA;AAExB,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,MAAA,EAAQ,CAAK,EAAA,EAAA;AAC/B,IAAM,MAAA,CAAA,GAAI,GAAG,CAAC,CAAA,CAAA;AACd,IAAI,IAAA,CAAA,GAAI,GAAG,CAAC,CAAA,CAAA;AAEZ,IAAA,IAAI,MAAM,IAAM,EAAA;AACd,MAAA,IAAI,WAAa,EAAA;AACf,QAAA,SAAA;AAAA,OACF;AACA,MAAA,IAAI,UAAY,EAAA;AACd,QAAI,CAAA,GAAA,CAAA,CAAA;AAAA,OACN;AAAA,KACF;AAGA,IAAA,IAAI,MAAM,IAAM,EAAA;AACd,MAAA,SAAA;AAAA,KACF;AAEA,IAAA,KAAA,CAAM,IAAK,CAAA,CAAC,CAAG,EAAA,CAAC,CAAC,CAAA,CAAA;AAAA,GACnB;AACA,EAAO,OAAA,KAAA,CAAA;AACT,CAAA;AAOgB,SAAA,oBAAA,CAAqB,YAAkC,KAAwC,EAAA;AAC7G,EAAI,IAAA,CAAC,KAAM,CAAA,IAAA,IAAQ,CAAC,KAAA,CAAM,MAAM,CAAC,UAAA,IAAc,UAAW,CAAA,MAAA,KAAW,CAAG,EAAA;AACtE,IAAA,OAAO,EAAC,CAAA;AAAA,GACV;AAEA,EAAM,MAAA,IAAA,GAAO,KAAM,CAAA,IAAA,CAAK,OAAQ,EAAA,CAAA;AAChC,EAAM,MAAA,EAAA,GAAK,KAAM,CAAA,EAAA,CAAG,OAAQ,EAAA,CAAA;AAC5B,EAAA,MAAM,KAAQ,GAAA,UAAA,CAAW,CAAC,CAAA,CAAE,CAAC,CAAA,CAAA;AAC7B,EAAO,OAAA;AAAA,IACL,CAAC,MAAM,KAAK,CAAA;AAAA,IACZ,CAAC,IAAI,KAAK,CAAA;AAAA,GACZ,CAAA;AACF;;;;"}