{"version":3,"file":"durationutil.js","sources":["../../../src/datetime/durationutil.ts"],"sourcesContent":["import { add, Duration, intervalToDuration, Interval, isAfter } from 'date-fns';\n\nconst durationMap: { [key in Required<keyof Duration>]: string[] } = {\n  years: ['y', 'Y', 'years'],\n  months: ['M', 'months'],\n  weeks: ['w', 'W', 'weeks'],\n  days: ['d', 'D', 'days'],\n  hours: ['h', 'H', 'hours'],\n  minutes: ['m', 'minutes'],\n  seconds: ['s', 'S', 'seconds'],\n};\n\n/**\n * intervalToAbbreviatedDurationString converts interval to readable duration string\n *\n * @param interval - interval to convert\n * @param includeSeconds - optional, default true. If false, will not include seconds unless interval is less than 1 minute\n *\n * @public\n */\nexport function intervalToAbbreviatedDurationString(interval: Interval, includeSeconds = true): string {\n  // An edge case that causes the app to crash (e.g. browser's clock behind the rule/alert date)\n  // The code will again return a proper duration when the browser's clock >= rule/alert date\n  if (isAfter(interval.start, interval.end)) {\n    return '';\n  }\n\n  const duration = intervalToDuration(interval);\n  return (Object.entries(duration) as Array<[keyof Duration, number | undefined]>).reduce((str, [unit, value]) => {\n    if (value && value !== 0 && !(unit === 'seconds' && !includeSeconds && str)) {\n      const padding = str !== '' ? ' ' : '';\n      return str + `${padding}${value}${durationMap[unit][0]}`;\n    }\n\n    return str;\n  }, '');\n}\n\n/**\n * parseDuration parses duration string into datefns Duration object\n *\n * @param durationString - string to convert. For example '2m', '5h 20s'\n *\n * @public\n */\nexport function parseDuration(durationString: string): Duration {\n  return durationString.split(' ').reduce<Duration>((acc, value) => {\n    const match = value.match(/(\\d+)(.+)/);\n\n    const rawLength = match?.[1];\n    const unit = match?.[2];\n\n    if (!(rawLength && unit)) {\n      return acc;\n    }\n\n    const mapping = Object.entries(durationMap).find(([_, abbreviations]) => abbreviations?.includes(match[2]));\n    const length = parseInt(rawLength, 10);\n\n    return mapping ? { ...acc, [mapping[0]]: length } : acc;\n  }, {});\n}\n\n/**\n * addDurationToDate adds given duration to given date and returns a new Date object\n *\n * @param date - date to add to. Can be either Date object or a number (milliseconds since epoch)\n * @param duration - duration to add. For example '2m', '5h 20s'\n *\n * @public\n */\nexport function addDurationToDate(date: Date | number, duration: Duration): Date {\n  return add(date, duration);\n}\n\n/**\n * durationToMilliseconds convert a duration object to milliseconds\n *\n * @param duration - datefns Duration object\n *\n * @public\n */\nexport function durationToMilliseconds(duration: Duration): number {\n  const now = new Date();\n  return addDurationToDate(now, duration).getTime() - now.getTime();\n}\n\n/**\n * isValidDate returns true if given string can be parsed into valid Date object, false otherwise\n *\n * @param dateString - string representation of a date\n *\n * @public\n */\nexport function isValidDate(dateString: string): boolean {\n  return !isNaN(Date.parse(dateString));\n}\n\n/**\n * isValidDuration returns true if the given string can be parsed into a valid `date-fns` `Duration` object, false otherwise\n *\n * Valid time units are \"y\", \"Y\", \"years\", \"M\", \"months\", \"w\", \"W\", \"weeks\", \"d\", \"D\", \"days\", \"h\", \"H\", \"hours\", \"m\", \"minutes\", \"s\", \"S\", \"seconds\"\n *\n * @see https://date-fns.org/v2.30.0/docs/Duration\n * @param durationString - string representation of a duration\n *\n * @public\n */\nexport function isValidDuration(durationString: string): boolean {\n  for (const value of durationString.trim().split(' ')) {\n    const match = value.match(/(\\d+)(.+)/);\n    if (match === null || match.length !== 3) {\n      return false;\n    }\n\n    const key = Object.entries(durationMap).find(([_, abbreviations]) => abbreviations?.includes(match[2]))?.[0];\n    if (!key) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * isValidGoDuration returns true if the given string can be parsed into a valid Duration object based on\n * Go's time.parseDuration, false otherwise.\n *\n * Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\n *\n * @see https://pkg.go.dev/time#ParseDuration\n *\n * @param durationString - string representation of a duration\n *\n * @internal\n */\nexport function isValidGoDuration(durationString: string): boolean {\n  const timeUnits = ['h', 'm', 's', 'ms', 'us', 'µs', 'ns'];\n  return validateDurationByUnits(durationString, timeUnits);\n}\n\n/**\n * isValidGrafanaDuration returns `true` if the given string can be parsed into a valid Duration object based on\n * the Grafana SDK's gtime.parseDuration, `false` otherwise.\n *\n * Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\", \"d\", \"w\", \"M\", \"y\".\n *\n * @see https://pkg.go.dev/github.com/grafana/grafana-plugin-sdk-go/backend/gtime#ParseDuration\n *\n * @param durationString - string representation of a duration\n *\n * @internal\n */\nexport function isValidGrafanaDuration(durationString: string): boolean {\n  const timeUnits = ['y', 'M', 'w', 'd', 'h', 'm', 's', 'ms', 'us', 'µs', 'ns'];\n  return validateDurationByUnits(durationString, timeUnits);\n}\n\nfunction validateDurationByUnits(durationString: string, timeUnits: string[]): boolean {\n  for (const value of durationString.trim().split(' ')) {\n    const match = value.match(/([0-9]*[.]?[0-9]+)(.+)/);\n    if (match === null || match.length !== 3) {\n      return false;\n    }\n\n    const isValidUnit = timeUnits.includes(match[2]);\n    if (!isValidUnit) {\n      return false;\n    }\n  }\n\n  return true;\n}\n"],"names":[],"mappings":"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"}