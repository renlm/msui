{"version":3,"file":"formatter.js","sources":["../../../src/datetime/formatter.ts"],"sourcesContent":["/* eslint-disable id-blacklist, no-restricted-imports, @typescript-eslint/ban-types */\nimport moment, { Moment } from 'moment-timezone';\n\nimport { TimeZone } from '../types';\n\nimport { DateTimeOptions, getTimeZone } from './common';\nimport { systemDateFormats } from './formats';\nimport { DateTimeInput, toUtc, dateTimeAsMoment } from './moment_wrapper';\n\n/**\n * The type describing the options that can be passed to the {@link dateTimeFormat}\n * helper function to control how the date and time value passed to the function is\n * formatted.\n *\n * @public\n */\nexport interface DateTimeOptionsWithFormat extends DateTimeOptions {\n  /**\n   * Set this value to `true` if you want to include milliseconds when formatting date and time\n   */\n  defaultWithMS?: boolean;\n}\n\ntype DateTimeFormatter<T extends DateTimeOptions = DateTimeOptions> = (dateInUtc: DateTimeInput, options?: T) => string;\n\n/**\n * Helper function to format date and time according to the specified options. If no options\n * are supplied, then default values are used. For more details, see {@link DateTimeOptionsWithFormat}.\n *\n * @param dateInUtc - date in UTC format, e.g. string formatted with UTC offset, UNIX epoch in seconds etc.\n * @param options\n *\n * @public\n */\nexport const dateTimeFormat: DateTimeFormatter<DateTimeOptionsWithFormat> = (dateInUtc, options?) =>\n  toTz(dateInUtc, getTimeZone(options)).format(getFormat(options));\n\n/**\n * Helper function to format date and time according to the standard ISO format e.g. 2013-02-04T22:44:30.652Z.\n * If no options are supplied, then default values are used. For more details, see {@link DateTimeOptionsWithFormat}.\n *\n * @param dateInUtc - date in UTC format, e.g. string formatted with UTC offset, UNIX epoch in seconds etc.\n * @param options\n *\n * @public\n */\nexport const dateTimeFormatISO: DateTimeFormatter = (dateInUtc, options?) =>\n  toTz(dateInUtc, getTimeZone(options)).format();\n\n/**\n * Helper function to return elapsed time since passed date. The returned value will be formatted\n * in a human readable format e.g. 4 years ago. If no options are supplied, then default values are used.\n * For more details, see {@link DateTimeOptions}.\n *\n * @param dateInUtc - date in UTC format, e.g. string formatted with UTC offset, UNIX epoch in seconds etc.\n * @param options\n *\n * @public\n */\nexport const dateTimeFormatTimeAgo: DateTimeFormatter = (dateInUtc, options?) =>\n  toTz(dateInUtc, getTimeZone(options)).fromNow();\n\n/**\n * Helper function to format date and time according to the Grafana default formatting, but it\n * also appends the time zone abbreviation at the end e.g. 2020-05-20 13:37:00 CET. If no options\n * are supplied, then default values are used. For more details please see {@link DateTimeOptions}.\n *\n * @param dateInUtc - date in UTC format, e.g. string formatted with UTC offset, UNIX epoch in seconds etc.\n * @param options\n *\n * @public\n */\nexport const dateTimeFormatWithAbbrevation: DateTimeFormatter = (dateInUtc, options?) =>\n  toTz(dateInUtc, getTimeZone(options)).format(`${systemDateFormats.fullDate} z`);\n\n/**\n * Helper function to return only the time zone abbreviation for a given date and time value. If no options\n * are supplied, then default values are used. For more details please see {@link DateTimeOptions}.\n *\n * @param dateInUtc - date in UTC format, e.g. string formatted with UTC offset, UNIX epoch in seconds etc.\n * @param options\n *\n * @public\n */\nexport const timeZoneAbbrevation: DateTimeFormatter = (dateInUtc, options?) =>\n  toTz(dateInUtc, getTimeZone(options)).format('z');\n\nconst getFormat = <T extends DateTimeOptionsWithFormat>(options?: T): string => {\n  if (options?.defaultWithMS) {\n    return options?.format ?? systemDateFormats.fullDateMS;\n  }\n  return options?.format ?? systemDateFormats.fullDate;\n};\n\nconst toTz = (dateInUtc: DateTimeInput, timeZone: TimeZone): Moment => {\n  const date = dateInUtc;\n  const zone = moment.tz.zone(timeZone);\n\n  if (zone && zone.name) {\n    return dateTimeAsMoment(toUtc(date)).tz(zone.name);\n  }\n\n  switch (timeZone) {\n    case 'utc':\n      return dateTimeAsMoment(toUtc(date));\n    default:\n      return dateTimeAsMoment(toUtc(date)).local();\n  }\n};\n"],"names":[],"mappings":";;;;;AAkCO,MAAM,cAA+D,GAAA,CAAC,SAAW,EAAA,OAAA,KACtF,IAAK,CAAA,SAAA,EAAW,WAAY,CAAA,OAAO,CAAC,CAAA,CAAE,MAAO,CAAA,SAAA,CAAU,OAAO,CAAC,EAAA;AAWpD,MAAA,iBAAA,GAAuC,CAAC,SAAA,EAAW,OAC9D,KAAA,IAAA,CAAK,WAAW,WAAY,CAAA,OAAO,CAAC,CAAA,CAAE,MAAO,GAAA;AAYlC,MAAA,qBAAA,GAA2C,CAAC,SAAA,EAAW,OAClE,KAAA,IAAA,CAAK,WAAW,WAAY,CAAA,OAAO,CAAC,CAAA,CAAE,OAAQ,GAAA;AAYzC,MAAM,6BAAmD,GAAA,CAAC,SAAW,EAAA,OAAA,KAC1E,KAAK,SAAW,EAAA,WAAA,CAAY,OAAO,CAAC,CAAE,CAAA,MAAA,CAAO,CAAG,EAAA,iBAAA,CAAkB,QAAQ,CAAI,EAAA,CAAA,EAAA;AAWnE,MAAA,mBAAA,GAAyC,CAAC,SAAA,EAAW,OAChE,KAAA,IAAA,CAAK,SAAW,EAAA,WAAA,CAAY,OAAO,CAAC,CAAE,CAAA,MAAA,CAAO,GAAG,EAAA;AAElD,MAAM,SAAA,GAAY,CAAsC,OAAwB,KAAA;AAvFhF,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAwFE,EAAA,IAAI,mCAAS,aAAe,EAAA;AAC1B,IAAO,OAAA,CAAA,EAAA,GAAA,OAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAS,MAAT,KAAA,IAAA,GAAA,EAAA,GAAmB,iBAAkB,CAAA,UAAA,CAAA;AAAA,GAC9C;AACA,EAAO,OAAA,CAAA,EAAA,GAAA,OAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAS,MAAT,KAAA,IAAA,GAAA,EAAA,GAAmB,iBAAkB,CAAA,QAAA,CAAA;AAC9C,CAAA,CAAA;AAEA,MAAM,IAAA,GAAO,CAAC,SAAA,EAA0B,QAA+B,KAAA;AACrE,EAAA,MAAM,IAAO,GAAA,SAAA,CAAA;AACb,EAAA,MAAM,IAAO,GAAA,MAAA,CAAO,EAAG,CAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AAEpC,EAAI,IAAA,IAAA,IAAQ,KAAK,IAAM,EAAA;AACrB,IAAA,OAAO,iBAAiB,KAAM,CAAA,IAAI,CAAC,CAAE,CAAA,EAAA,CAAG,KAAK,IAAI,CAAA,CAAA;AAAA,GACnD;AAEA,EAAA,QAAQ,QAAU;AAAA,IAChB,KAAK,KAAA;AACH,MAAO,OAAA,gBAAA,CAAiB,KAAM,CAAA,IAAI,CAAC,CAAA,CAAA;AAAA,IACrC;AACE,MAAA,OAAO,gBAAiB,CAAA,KAAA,CAAM,IAAI,CAAC,EAAE,KAAM,EAAA,CAAA;AAAA,GAC/C;AACF,CAAA;;;;"}