{"version":3,"file":"parser.js","sources":["../../../src/datetime/parser.ts"],"sourcesContent":["/* eslint-disable id-blacklist, no-restricted-imports, @typescript-eslint/ban-types */\nimport { lowerCase } from 'lodash';\nimport moment from 'moment-timezone';\n\nimport { DateTimeOptions, getTimeZone } from './common';\nimport { parse, isValid } from './datemath';\nimport { systemDateFormats } from './formats';\nimport { DateTimeInput, DateTime, isDateTime, dateTime, toUtc, dateTimeForTimeZone } from './moment_wrapper';\n\n/**\n * The type that describes options that can be passed when parsing a date and time value.\n * @public\n */\nexport interface DateTimeOptionsWhenParsing extends DateTimeOptions {\n  /**\n   * If the input is a Grafana quick date, e.g. now-6h, then you can specify this to control\n   * whether the last part of the date and time value is included or excluded.\n   *\n   * Example: now-6h and the current time is 12:20:00 if roundUp is set to true\n   * the returned DateTime value will be 06:00:00.\n   */\n  roundUp?: boolean;\n  fiscalYearStartMonth?: number;\n}\n\ntype DateTimeParser<T extends DateTimeOptions = DateTimeOptions> = (value: DateTimeInput, options?: T) => DateTime;\n\n/**\n * Helper function to parse a number, text or Date to a DateTime value. If a timeZone is supplied the incoming value\n * is parsed with that timeZone as a base. The only exception to this is if the passed value is in a UTC-based\n * format. Then it will use UTC as the base. If no format is specified the current system format will be assumed.\n *\n * It can also parse the Grafana quick date and time format, e.g. now-6h will be parsed as Date.now() - 6 hours and\n * returned as a valid DateTime value.\n *\n * If no options are supplied, then default values are used. For more details please see {@link DateTimeOptions}.\n *\n * @param value - should be a parsable date and time value\n * @param options\n *\n * @public\n */\nexport const dateTimeParse: DateTimeParser<DateTimeOptionsWhenParsing> = (value, options?): DateTime => {\n  if (isDateTime(value)) {\n    return value;\n  }\n\n  if (typeof value === 'string') {\n    return parseString(value, options);\n  }\n\n  return parseOthers(value, options);\n};\n\nconst parseString = (value: string, options?: DateTimeOptionsWhenParsing): DateTime => {\n  if (value.indexOf('now') !== -1) {\n    if (!isValid(value)) {\n      return dateTime();\n    }\n\n    const parsed = parse(value, options?.roundUp, options?.timeZone, options?.fiscalYearStartMonth);\n    return parsed || dateTime();\n  }\n\n  const timeZone = getTimeZone(options);\n  const zone = moment.tz.zone(timeZone);\n  const format = options?.format ?? systemDateFormats.fullDate;\n\n  if (zone && zone.name) {\n    return dateTimeForTimeZone(zone.name, value, format);\n  }\n\n  switch (lowerCase(timeZone)) {\n    case 'utc':\n      return toUtc(value, format);\n    default:\n      return dateTime(value, format);\n  }\n};\n\nconst parseOthers = (value: DateTimeInput, options?: DateTimeOptionsWhenParsing): DateTime => {\n  const date = value;\n  const timeZone = getTimeZone(options);\n  const zone = moment.tz.zone(timeZone);\n\n  if (zone && zone.name) {\n    return dateTimeForTimeZone(zone.name, date);\n  }\n\n  switch (lowerCase(timeZone)) {\n    case 'utc':\n      return toUtc(date);\n    default:\n      return dateTime(date);\n  }\n};\n"],"names":[],"mappings":";;;;;;;AA0Ca,MAAA,aAAA,GAA4D,CAAC,KAAA,EAAO,OAAuB,KAAA;AACtG,EAAI,IAAA,UAAA,CAAW,KAAK,CAAG,EAAA;AACrB,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AAEA,EAAI,IAAA,OAAO,UAAU,QAAU,EAAA;AAC7B,IAAO,OAAA,WAAA,CAAY,OAAO,OAAO,CAAA,CAAA;AAAA,GACnC;AAEA,EAAO,OAAA,WAAA,CAAY,OAAO,OAAO,CAAA,CAAA;AACnC,EAAA;AAEA,MAAM,WAAA,GAAc,CAAC,KAAA,EAAe,OAAmD,KAAA;AAtDvF,EAAA,IAAA,EAAA,CAAA;AAuDE,EAAA,IAAI,KAAM,CAAA,OAAA,CAAQ,KAAK,CAAA,KAAM,CAAI,CAAA,EAAA;AAC/B,IAAI,IAAA,CAAC,OAAQ,CAAA,KAAK,CAAG,EAAA;AACnB,MAAA,OAAO,QAAS,EAAA,CAAA;AAAA,KAClB;AAEA,IAAM,MAAA,MAAA,GAAS,MAAM,KAAO,EAAA,OAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAS,SAAS,OAAS,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAA,QAAA,EAAU,mCAAS,oBAAoB,CAAA,CAAA;AAC9F,IAAA,OAAO,UAAU,QAAS,EAAA,CAAA;AAAA,GAC5B;AAEA,EAAM,MAAA,QAAA,GAAW,YAAY,OAAO,CAAA,CAAA;AACpC,EAAA,MAAM,IAAO,GAAA,MAAA,CAAO,EAAG,CAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AACpC,EAAA,MAAM,MAAS,GAAA,CAAA,EAAA,GAAA,OAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAS,MAAT,KAAA,IAAA,GAAA,EAAA,GAAmB,iBAAkB,CAAA,QAAA,CAAA;AAEpD,EAAI,IAAA,IAAA,IAAQ,KAAK,IAAM,EAAA;AACrB,IAAA,OAAO,mBAAoB,CAAA,IAAA,CAAK,IAAM,EAAA,KAAA,EAAO,MAAM,CAAA,CAAA;AAAA,GACrD;AAEA,EAAQ,QAAA,SAAA,CAAU,QAAQ,CAAG;AAAA,IAC3B,KAAK,KAAA;AACH,MAAO,OAAA,KAAA,CAAM,OAAO,MAAM,CAAA,CAAA;AAAA,IAC5B;AACE,MAAO,OAAA,QAAA,CAAS,OAAO,MAAM,CAAA,CAAA;AAAA,GACjC;AACF,CAAA,CAAA;AAEA,MAAM,WAAA,GAAc,CAAC,KAAA,EAAsB,OAAmD,KAAA;AAC5F,EAAA,MAAM,IAAO,GAAA,KAAA,CAAA;AACb,EAAM,MAAA,QAAA,GAAW,YAAY,OAAO,CAAA,CAAA;AACpC,EAAA,MAAM,IAAO,GAAA,MAAA,CAAO,EAAG,CAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AAEpC,EAAI,IAAA,IAAA,IAAQ,KAAK,IAAM,EAAA;AACrB,IAAO,OAAA,mBAAA,CAAoB,IAAK,CAAA,IAAA,EAAM,IAAI,CAAA,CAAA;AAAA,GAC5C;AAEA,EAAQ,QAAA,SAAA,CAAU,QAAQ,CAAG;AAAA,IAC3B,KAAK,KAAA;AACH,MAAA,OAAO,MAAM,IAAI,CAAA,CAAA;AAAA,IACnB;AACE,MAAA,OAAO,SAAS,IAAI,CAAA,CAAA;AAAA,GACxB;AACF,CAAA;;;;"}