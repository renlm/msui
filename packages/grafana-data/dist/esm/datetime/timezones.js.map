{"version":3,"file":"timezones.js","sources":["../../../src/datetime/timezones.ts"],"sourcesContent":["import { memoize } from 'lodash';\nimport moment from 'moment-timezone';\n\nimport { TimeZone } from '../types';\n\nimport { getTimeZone } from './common';\n\nexport enum InternalTimeZones {\n  default = '',\n  localBrowserTime = 'browser',\n  utc = 'utc',\n}\n\nexport const timeZoneFormatUserFriendly = (timeZone: TimeZone | undefined) => {\n  switch (getTimeZone({ timeZone })) {\n    case 'browser':\n      return 'Local browser time';\n    case 'utc':\n      return 'UTC';\n    default:\n      return timeZone;\n  }\n};\n\nexport const getZone = (timeZone: string) => {\n  return moment.tz.zone(timeZone);\n};\n\nexport interface TimeZoneCountry {\n  code: string;\n  name: string;\n}\nexport interface TimeZoneInfo {\n  name: string;\n  zone: string;\n  countries: TimeZoneCountry[];\n  abbreviation: string;\n  offsetInMins: number;\n  ianaName: string;\n}\n\nexport interface GroupedTimeZones {\n  name: string;\n  zones: TimeZone[];\n}\n\nexport const getTimeZoneInfo = (zone: string, timestamp: number): TimeZoneInfo | undefined => {\n  const internal = mapInternal(zone, timestamp);\n\n  if (internal) {\n    return internal;\n  }\n\n  return mapToInfo(zone, timestamp);\n};\n\nexport const getTimeZones = memoize((includeInternal: boolean | InternalTimeZones[] = false): TimeZone[] => {\n  const initial: TimeZone[] = [];\n\n  if (includeInternal === true) {\n    initial.push(InternalTimeZones.default, InternalTimeZones.localBrowserTime, InternalTimeZones.utc);\n  } else if (includeInternal) {\n    initial.push(...includeInternal);\n  }\n\n  return moment.tz.names().reduce((zones: TimeZone[], zone: string) => {\n    const countriesForZone = countriesByTimeZone[zone];\n\n    if (!Array.isArray(countriesForZone) || countriesForZone.length === 0) {\n      return zones;\n    }\n\n    zones.push(zone);\n    return zones;\n  }, initial);\n});\n\nexport const getTimeZoneGroups = memoize(\n  (includeInternal: boolean | InternalTimeZones[] = false): GroupedTimeZones[] => {\n    const timeZones = getTimeZones(includeInternal);\n\n    const groups = timeZones.reduce((groups: Record<string, TimeZone[]>, zone: TimeZone) => {\n      const delimiter = zone.indexOf('/');\n\n      if (delimiter === -1) {\n        const group = '';\n        groups[group] = groups[group] ?? [];\n        groups[group].push(zone);\n\n        return groups;\n      }\n\n      const group = zone.slice(0, delimiter);\n      groups[group] = groups[group] ?? [];\n      groups[group].push(zone);\n\n      return groups;\n    }, {});\n\n    return Object.keys(groups).map((name) => ({\n      name,\n      zones: groups[name],\n    }));\n  }\n);\n\nconst mapInternal = (zone: string, timestamp: number): TimeZoneInfo | undefined => {\n  switch (zone) {\n    case InternalTimeZones.utc: {\n      return {\n        name: 'Coordinated Universal Time',\n        ianaName: 'UTC',\n        zone,\n        countries: [],\n        abbreviation: 'UTC, GMT',\n        offsetInMins: 0,\n      };\n    }\n\n    case InternalTimeZones.default: {\n      const tz = getTimeZone();\n      const isInternal = tz === 'browser' || tz === 'utc';\n      const info = isInternal ? mapInternal(tz, timestamp) : mapToInfo(tz, timestamp);\n\n      return {\n        countries: countriesByTimeZone[tz] ?? [],\n        abbreviation: '',\n        offsetInMins: 0,\n        ...info,\n        ianaName: info?.ianaName ?? '',\n        name: 'Default',\n        zone,\n      };\n    }\n\n    case InternalTimeZones.localBrowserTime: {\n      const tz = moment.tz.guess(true);\n      const info = mapToInfo(tz, timestamp);\n\n      return {\n        countries: countriesByTimeZone[tz] ?? [],\n        abbreviation: 'Your local time',\n        offsetInMins: new Date().getTimezoneOffset(),\n        ...info,\n        name: 'Browser Time',\n        ianaName: info?.ianaName ?? '',\n        zone,\n      };\n    }\n\n    default:\n      return undefined;\n  }\n};\n\nconst abbrevationWithoutOffset = (abbrevation: string): string => {\n  if (/^(\\+|\\-).+/.test(abbrevation)) {\n    return '';\n  }\n  return abbrevation;\n};\n\nconst mapToInfo = (timeZone: TimeZone, timestamp: number): TimeZoneInfo | undefined => {\n  const momentTz = moment.tz.zone(timeZone);\n  if (!momentTz) {\n    return undefined;\n  }\n\n  return {\n    name: timeZone,\n    ianaName: momentTz.name,\n    zone: timeZone,\n    countries: countriesByTimeZone[timeZone] ?? [],\n    abbreviation: abbrevationWithoutOffset(momentTz.abbr(timestamp)),\n    offsetInMins: momentTz.utcOffset(timestamp),\n  };\n};\n\n// Country names by ISO 3166-1-alpha-2 code\nconst countryByCode: Record<string, string> = {\n  AF: 'Afghanistan',\n  AX: 'Aland Islands',\n  AL: 'Albania',\n  DZ: 'Algeria',\n  AS: 'American Samoa',\n  AD: 'Andorra',\n  AO: 'Angola',\n  AI: 'Anguilla',\n  AQ: 'Antarctica',\n  AG: 'Antigua And Barbuda',\n  AR: 'Argentina',\n  AM: 'Armenia',\n  AW: 'Aruba',\n  AU: 'Australia',\n  AT: 'Austria',\n  AZ: 'Azerbaijan',\n  BS: 'Bahamas',\n  BH: 'Bahrain',\n  BD: 'Bangladesh',\n  BB: 'Barbados',\n  BY: 'Belarus',\n  BE: 'Belgium',\n  BZ: 'Belize',\n  BJ: 'Benin',\n  BM: 'Bermuda',\n  BT: 'Bhutan',\n  BO: 'Bolivia',\n  BA: 'Bosnia And Herzegovina',\n  BW: 'Botswana',\n  BV: 'Bouvet Island',\n  BR: 'Brazil',\n  IO: 'British Indian Ocean Territory',\n  BN: 'Brunei Darussalam',\n  BG: 'Bulgaria',\n  BF: 'Burkina Faso',\n  BI: 'Burundi',\n  KH: 'Cambodia',\n  CM: 'Cameroon',\n  CA: 'Canada',\n  CV: 'Cape Verde',\n  KY: 'Cayman Islands',\n  CF: 'Central African Republic',\n  TD: 'Chad',\n  CL: 'Chile',\n  CN: 'China',\n  CX: 'Christmas Island',\n  CC: 'Cocos (Keeling) Islands',\n  CO: 'Colombia',\n  KM: 'Comoros',\n  CG: 'Congo',\n  CD: 'Congo, Democratic Republic',\n  CK: 'Cook Islands',\n  CR: 'Costa Rica',\n  CI: \"Cote D'Ivoire\",\n  HR: 'Croatia',\n  CU: 'Cuba',\n  CY: 'Cyprus',\n  CZ: 'Czech Republic',\n  DK: 'Denmark',\n  DJ: 'Djibouti',\n  DM: 'Dominica',\n  DO: 'Dominican Republic',\n  EC: 'Ecuador',\n  EG: 'Egypt',\n  SV: 'El Salvador',\n  GQ: 'Equatorial Guinea',\n  ER: 'Eritrea',\n  EE: 'Estonia',\n  ET: 'Ethiopia',\n  FK: 'Falkland Islands (Malvinas)',\n  FO: 'Faroe Islands',\n  FJ: 'Fiji',\n  FI: 'Finland',\n  FR: 'France',\n  GF: 'French Guiana',\n  PF: 'French Polynesia',\n  TF: 'French Southern Territories',\n  GA: 'Gabon',\n  GM: 'Gambia',\n  GE: 'Georgia',\n  DE: 'Germany',\n  GH: 'Ghana',\n  GI: 'Gibraltar',\n  GR: 'Greece',\n  GL: 'Greenland',\n  GD: 'Grenada',\n  GP: 'Guadeloupe',\n  GU: 'Guam',\n  GT: 'Guatemala',\n  GG: 'Guernsey',\n  GN: 'Guinea',\n  GW: 'Guinea-Bissau',\n  GY: 'Guyana',\n  HT: 'Haiti',\n  HM: 'Heard Island & Mcdonald Islands',\n  VA: 'Holy See (Vatican City State)',\n  HN: 'Honduras',\n  HK: 'Hong Kong',\n  HU: 'Hungary',\n  IS: 'Iceland',\n  IN: 'India',\n  ID: 'Indonesia',\n  IR: 'Iran (Islamic Republic Of)',\n  IQ: 'Iraq',\n  IE: 'Ireland',\n  IM: 'Isle Of Man',\n  IL: 'Israel',\n  IT: 'Italy',\n  JM: 'Jamaica',\n  JP: 'Japan',\n  JE: 'Jersey',\n  JO: 'Jordan',\n  KZ: 'Kazakhstan',\n  KE: 'Kenya',\n  KI: 'Kiribati',\n  KR: 'Korea',\n  KW: 'Kuwait',\n  KG: 'Kyrgyzstan',\n  LA: \"Lao People's Democratic Republic\",\n  LV: 'Latvia',\n  LB: 'Lebanon',\n  LS: 'Lesotho',\n  LR: 'Liberia',\n  LY: 'Libyan Arab Jamahiriya',\n  LI: 'Liechtenstein',\n  LT: 'Lithuania',\n  LU: 'Luxembourg',\n  MO: 'Macao',\n  MK: 'Macedonia',\n  MG: 'Madagascar',\n  MW: 'Malawi',\n  MY: 'Malaysia',\n  MV: 'Maldives',\n  ML: 'Mali',\n  MT: 'Malta',\n  MH: 'Marshall Islands',\n  MQ: 'Martinique',\n  MR: 'Mauritania',\n  MU: 'Mauritius',\n  YT: 'Mayotte',\n  MX: 'Mexico',\n  FM: 'Micronesia (Federated States Of)',\n  MD: 'Moldova',\n  MC: 'Monaco',\n  MN: 'Mongolia',\n  ME: 'Montenegro',\n  MS: 'Montserrat',\n  MA: 'Morocco',\n  MZ: 'Mozambique',\n  MM: 'Myanmar',\n  NA: 'Namibia',\n  NR: 'Nauru',\n  NP: 'Nepal',\n  NL: 'Netherlands',\n  AN: 'Netherlands Antilles',\n  NC: 'New Caledonia',\n  NZ: 'New Zealand',\n  NI: 'Nicaragua',\n  NE: 'Niger',\n  NG: 'Nigeria',\n  NU: 'Niue',\n  NF: 'Norfolk Island',\n  MP: 'Northern Mariana Islands',\n  NO: 'Norway',\n  OM: 'Oman',\n  PK: 'Pakistan',\n  PW: 'Palau',\n  PS: 'Palestine, State of',\n  PA: 'Panama',\n  PG: 'Papua New Guinea',\n  PY: 'Paraguay',\n  PE: 'Peru',\n  PH: 'Philippines',\n  PN: 'Pitcairn',\n  PL: 'Poland',\n  PT: 'Portugal',\n  PR: 'Puerto Rico',\n  QA: 'Qatar',\n  RE: 'Reunion',\n  RO: 'Romania',\n  RU: 'Russian Federation',\n  RW: 'Rwanda',\n  BL: 'Saint Barthelemy',\n  SH: 'Saint Helena',\n  KN: 'Saint Kitts And Nevis',\n  LC: 'Saint Lucia',\n  MF: 'Saint Martin',\n  PM: 'Saint Pierre And Miquelon',\n  VC: 'Saint Vincent And Grenadines',\n  WS: 'Samoa',\n  SM: 'San Marino',\n  ST: 'Sao Tome And Principe',\n  SA: 'Saudi Arabia',\n  SN: 'Senegal',\n  RS: 'Serbia',\n  SC: 'Seychelles',\n  SL: 'Sierra Leone',\n  SG: 'Singapore',\n  SK: 'Slovakia',\n  SI: 'Slovenia',\n  SB: 'Solomon Islands',\n  SO: 'Somalia',\n  ZA: 'South Africa',\n  GS: 'South Georgia And Sandwich Isl.',\n  ES: 'Spain',\n  LK: 'Sri Lanka',\n  SD: 'Sudan',\n  SR: 'Suriname',\n  SJ: 'Svalbard And Jan Mayen',\n  SZ: 'Swaziland',\n  SE: 'Sweden',\n  CH: 'Switzerland',\n  SY: 'Syrian Arab Republic',\n  TW: 'Taiwan',\n  TJ: 'Tajikistan',\n  TZ: 'Tanzania',\n  TH: 'Thailand',\n  TL: 'Timor-Leste',\n  TG: 'Togo',\n  TK: 'Tokelau',\n  TO: 'Tonga',\n  TT: 'Trinidad And Tobago',\n  TN: 'Tunisia',\n  TR: 'Turkey',\n  TM: 'Turkmenistan',\n  TC: 'Turks And Caicos Islands',\n  TV: 'Tuvalu',\n  UG: 'Uganda',\n  UA: 'Ukraine',\n  AE: 'United Arab Emirates',\n  GB: 'United Kingdom',\n  US: 'United States',\n  UM: 'United States Outlying Islands',\n  UY: 'Uruguay',\n  UZ: 'Uzbekistan',\n  VU: 'Vanuatu',\n  VE: 'Venezuela',\n  VN: 'Viet Nam',\n  VG: 'Virgin Islands, British',\n  VI: 'Virgin Islands, U.S.',\n  WF: 'Wallis And Futuna',\n  EH: 'Western Sahara',\n  YE: 'Yemen',\n  ZM: 'Zambia',\n  ZW: 'Zimbabwe',\n};\n\nconst countriesByTimeZone = ((): Record<string, TimeZoneCountry[]> => {\n  return moment.tz.countries().reduce((all: Record<string, TimeZoneCountry[]>, code) => {\n    const timeZones = moment.tz.zonesForCountry(code);\n    return timeZones.reduce((all: Record<string, TimeZoneCountry[]>, timeZone) => {\n      if (!all[timeZone]) {\n        all[timeZone] = [];\n      }\n\n      const name = countryByCode[code];\n\n      if (!name) {\n        return all;\n      }\n\n      all[timeZone].push({ code, name });\n      return all;\n    }, all);\n  }, {});\n})();\n"],"names":["InternalTimeZones","groups","group","all"],"mappings":"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"}