{"version":3,"file":"rangeutil.js","sources":["../../../src/datetime/rangeutil.ts"],"sourcesContent":["import { each } from 'lodash';\n\nimport { RawTimeRange, TimeRange, TimeZone, IntervalValues, RelativeTimeRange, TimeOption } from '../types/time';\n\nimport * as dateMath from './datemath';\nimport { timeZoneAbbrevation, dateTimeFormat, dateTimeFormatTimeAgo } from './formatter';\nimport { isDateTime, DateTime, dateTime } from './moment_wrapper';\nimport { dateTimeParse } from './parser';\n\nconst spans: { [key: string]: { display: string; section?: number } } = {\n  s: { display: 'second' },\n  m: { display: 'minute' },\n  h: { display: 'hour' },\n  d: { display: 'day' },\n  w: { display: 'week' },\n  M: { display: 'month' },\n  y: { display: 'year' },\n};\n\nconst rangeOptions: TimeOption[] = [\n  { from: 'now/d', to: 'now/d', display: 'Today' },\n  { from: 'now/d', to: 'now', display: 'Today so far' },\n  { from: 'now/w', to: 'now/w', display: 'This week' },\n  { from: 'now/w', to: 'now', display: 'This week so far' },\n  { from: 'now/M', to: 'now/M', display: 'This month' },\n  { from: 'now/M', to: 'now', display: 'This month so far' },\n  { from: 'now/y', to: 'now/y', display: 'This year' },\n  { from: 'now/y', to: 'now', display: 'This year so far' },\n\n  { from: 'now-1d/d', to: 'now-1d/d', display: 'Yesterday' },\n  {\n    from: 'now-2d/d',\n    to: 'now-2d/d',\n    display: 'Day before yesterday',\n  },\n  {\n    from: 'now-7d/d',\n    to: 'now-7d/d',\n    display: 'This day last week',\n  },\n  { from: 'now-1w/w', to: 'now-1w/w', display: 'Previous week' },\n  { from: 'now-1M/M', to: 'now-1M/M', display: 'Previous month' },\n  { from: 'now-1Q/fQ', to: 'now-1Q/fQ', display: 'Previous fiscal quarter' },\n  { from: 'now-1y/y', to: 'now-1y/y', display: 'Previous year' },\n  { from: 'now-1y/fy', to: 'now-1y/fy', display: 'Previous fiscal year' },\n\n  { from: 'now-5m', to: 'now', display: 'Last 5 minutes' },\n  { from: 'now-15m', to: 'now', display: 'Last 15 minutes' },\n  { from: 'now-30m', to: 'now', display: 'Last 30 minutes' },\n  { from: 'now-1h', to: 'now', display: 'Last 1 hour' },\n  { from: 'now-3h', to: 'now', display: 'Last 3 hours' },\n  { from: 'now-6h', to: 'now', display: 'Last 6 hours' },\n  { from: 'now-12h', to: 'now', display: 'Last 12 hours' },\n  { from: 'now-24h', to: 'now', display: 'Last 24 hours' },\n  { from: 'now-2d', to: 'now', display: 'Last 2 days' },\n  { from: 'now-7d', to: 'now', display: 'Last 7 days' },\n  { from: 'now-30d', to: 'now', display: 'Last 30 days' },\n  { from: 'now-90d', to: 'now', display: 'Last 90 days' },\n  { from: 'now-6M', to: 'now', display: 'Last 6 months' },\n  { from: 'now-1y', to: 'now', display: 'Last 1 year' },\n  { from: 'now-2y', to: 'now', display: 'Last 2 years' },\n  { from: 'now-5y', to: 'now', display: 'Last 5 years' },\n  { from: 'now/fQ', to: 'now', display: 'This fiscal quarter so far' },\n  { from: 'now/fQ', to: 'now/fQ', display: 'This fiscal quarter' },\n  { from: 'now/fy', to: 'now', display: 'This fiscal year so far' },\n  { from: 'now/fy', to: 'now/fy', display: 'This fiscal year' },\n];\n\nconst hiddenRangeOptions: TimeOption[] = [\n  { from: 'now', to: 'now+1m', display: 'Next minute' },\n  { from: 'now', to: 'now+5m', display: 'Next 5 minutes' },\n  { from: 'now', to: 'now+15m', display: 'Next 15 minutes' },\n  { from: 'now', to: 'now+30m', display: 'Next 30 minutes' },\n  { from: 'now', to: 'now+1h', display: 'Next hour' },\n  { from: 'now', to: 'now+3h', display: 'Next 3 hours' },\n  { from: 'now', to: 'now+6h', display: 'Next 6 hours' },\n  { from: 'now', to: 'now+12h', display: 'Next 12 hours' },\n  { from: 'now', to: 'now+24h', display: 'Next 24 hours' },\n  { from: 'now', to: 'now+2d', display: 'Next 2 days' },\n  { from: 'now', to: 'now+7d', display: 'Next 7 days' },\n  { from: 'now', to: 'now+30d', display: 'Next 30 days' },\n  { from: 'now', to: 'now+90d', display: 'Next 90 days' },\n  { from: 'now', to: 'now+6M', display: 'Next 6 months' },\n  { from: 'now', to: 'now+1y', display: 'Next year' },\n  { from: 'now', to: 'now+2y', display: 'Next 2 years' },\n  { from: 'now', to: 'now+5y', display: 'Next 5 years' },\n];\n\nconst rangeIndex: Record<string, TimeOption> = {};\neach(rangeOptions, (frame) => {\n  rangeIndex[frame.from + ' to ' + frame.to] = frame;\n});\neach(hiddenRangeOptions, (frame) => {\n  rangeIndex[frame.from + ' to ' + frame.to] = frame;\n});\n\n// handles expressions like\n// 5m\n// 5m to now/d\n// now/d to now\n// now/d\n// if no to <expr> then to now is assumed\nexport function describeTextRange(expr: string): TimeOption {\n  const isLast = expr.indexOf('+') !== 0;\n  if (expr.indexOf('now') === -1) {\n    expr = (isLast ? 'now-' : 'now') + expr;\n  }\n\n  let opt = rangeIndex[expr + ' to now'];\n  if (opt) {\n    return opt;\n  }\n\n  if (isLast) {\n    opt = { from: expr, to: 'now', display: '' };\n  } else {\n    opt = { from: 'now', to: expr, display: '' };\n  }\n\n  const parts = /^now([-+])(\\d+)(\\w)/.exec(expr);\n  if (parts) {\n    const unit = parts[3];\n    const amount = parseInt(parts[2], 10);\n    const span = spans[unit];\n    if (span) {\n      opt.display = isLast ? 'Last ' : 'Next ';\n      opt.display += amount + ' ' + span.display;\n      opt.section = span.section;\n      if (amount > 1) {\n        opt.display += 's';\n      }\n    }\n  } else {\n    opt.display = opt.from + ' to ' + opt.to;\n    opt.invalid = true;\n  }\n\n  return opt;\n}\n\n/**\n * Use this function to get a properly formatted string representation of a {@link @grafana/data:RawTimeRange | range}.\n *\n * @example\n * ```\n * // Prints \"2\":\n * console.log(add(1,1));\n * ```\n * @category TimeUtils\n * @param range - a time range (usually specified by the TimePicker)\n * @alpha\n */\nexport function describeTimeRange(range: RawTimeRange, timeZone?: TimeZone): string {\n  const option = rangeIndex[range.from.toString() + ' to ' + range.to.toString()];\n\n  if (option) {\n    return option.display;\n  }\n\n  const options = { timeZone };\n\n  if (isDateTime(range.from) && isDateTime(range.to)) {\n    return dateTimeFormat(range.from, options) + ' to ' + dateTimeFormat(range.to, options);\n  }\n\n  if (isDateTime(range.from)) {\n    const parsed = dateMath.parse(range.to, true, 'utc');\n    return parsed ? dateTimeFormat(range.from, options) + ' to ' + dateTimeFormatTimeAgo(parsed, options) : '';\n  }\n\n  if (isDateTime(range.to)) {\n    const parsed = dateMath.parse(range.from, false, 'utc');\n    return parsed ? dateTimeFormatTimeAgo(parsed, options) + ' to ' + dateTimeFormat(range.to, options) : '';\n  }\n\n  if (range.to.toString() === 'now') {\n    const res = describeTextRange(range.from);\n    return res.display;\n  }\n\n  return range.from.toString() + ' to ' + range.to.toString();\n}\n\nexport const isValidTimeSpan = (value: string) => {\n  if (value.indexOf('$') === 0 || value.indexOf('+$') === 0) {\n    return true;\n  }\n\n  const info = describeTextRange(value);\n  return info.invalid !== true;\n};\n\nexport const describeTimeRangeAbbreviation = (range: TimeRange, timeZone?: TimeZone) => {\n  if (isDateTime(range.from)) {\n    return timeZoneAbbrevation(range.from, { timeZone });\n  }\n  const parsed = dateMath.parse(range.from, true);\n  return parsed ? timeZoneAbbrevation(parsed, { timeZone }) : '';\n};\n\nexport const convertRawToRange = (\n  raw: RawTimeRange,\n  timeZone?: TimeZone,\n  fiscalYearStartMonth?: number,\n  format?: string\n): TimeRange => {\n  const from = dateTimeParse(raw.from, { roundUp: false, timeZone, fiscalYearStartMonth, format });\n  const to = dateTimeParse(raw.to, { roundUp: true, timeZone, fiscalYearStartMonth, format });\n\n  if (dateMath.isMathString(raw.from) || dateMath.isMathString(raw.to)) {\n    return { from, to, raw };\n  }\n\n  return { from, to, raw: { from, to } };\n};\n\nexport function isRelativeTime(v: DateTime | string) {\n  if (typeof v === 'string') {\n    return v.indexOf('now') >= 0;\n  }\n  return false;\n}\n\nexport function isFiscal(timeRange: TimeRange) {\n  if (typeof timeRange.raw.from === 'string' && timeRange.raw.from.indexOf('f') > 0) {\n    return true;\n  } else if (typeof timeRange.raw.to === 'string' && timeRange.raw.to.indexOf('f') > 0) {\n    return true;\n  }\n  return false;\n}\n\nexport function isRelativeTimeRange(raw: RawTimeRange): boolean {\n  return isRelativeTime(raw.from) || isRelativeTime(raw.to);\n}\n\nexport function secondsToHms(seconds: number): string {\n  const numYears = Math.floor(seconds / 31536000);\n  if (numYears) {\n    return numYears + 'y';\n  }\n  const numDays = Math.floor((seconds % 31536000) / 86400);\n  if (numDays) {\n    return numDays + 'd';\n  }\n  const numHours = Math.floor(((seconds % 31536000) % 86400) / 3600);\n  if (numHours) {\n    return numHours + 'h';\n  }\n  const numMinutes = Math.floor((((seconds % 31536000) % 86400) % 3600) / 60);\n  if (numMinutes) {\n    return numMinutes + 'm';\n  }\n  const numSeconds = Math.floor((((seconds % 31536000) % 86400) % 3600) % 60);\n  if (numSeconds) {\n    return numSeconds + 's';\n  }\n  const numMilliseconds = Math.floor(seconds * 1000.0);\n  if (numMilliseconds) {\n    return numMilliseconds + 'ms';\n  }\n\n  return 'less than a millisecond'; //'just now' //or other string you like;\n}\n\n// Format timeSpan (in sec) to string used in log's meta info\nexport function msRangeToTimeString(rangeMs: number): string {\n  const rangeSec = Number((rangeMs / 1000).toFixed());\n\n  const h = Math.floor(rangeSec / 60 / 60);\n  const m = Math.floor(rangeSec / 60) - h * 60;\n  const s = Number((rangeSec % 60).toFixed());\n  let formattedH = h ? h + 'h' : '';\n  let formattedM = m ? m + 'min' : '';\n  let formattedS = s ? s + 'sec' : '';\n\n  formattedH && formattedM ? (formattedH = formattedH + ' ') : (formattedH = formattedH);\n  (formattedM || formattedH) && formattedS ? (formattedM = formattedM + ' ') : (formattedM = formattedM);\n\n  return formattedH + formattedM + formattedS || 'less than 1sec';\n}\n\nexport function calculateInterval(range: TimeRange, resolution: number, lowLimitInterval?: string): IntervalValues {\n  let lowLimitMs = 1; // 1 millisecond default low limit\n  if (lowLimitInterval) {\n    lowLimitMs = intervalToMs(lowLimitInterval);\n  }\n\n  let intervalMs = roundInterval((range.to.valueOf() - range.from.valueOf()) / resolution);\n  if (lowLimitMs > intervalMs) {\n    intervalMs = lowLimitMs;\n  }\n  return {\n    intervalMs: intervalMs,\n    interval: secondsToHms(intervalMs / 1000),\n  };\n}\n\nconst interval_regex = /(-?\\d+(?:\\.\\d+)?)(ms|[Mwdhmsy])/;\n// histogram & trends\nconst intervals_in_seconds: Record<string, number> = {\n  y: 31536000,\n  M: 2592000,\n  w: 604800,\n  d: 86400,\n  h: 3600,\n  m: 60,\n  s: 1,\n  ms: 0.001,\n};\n\nexport function describeInterval(str: string) {\n  // Default to seconds if no unit is provided\n  if (Number(str)) {\n    return {\n      sec: intervals_in_seconds.s,\n      type: 's',\n      count: parseInt(str, 10),\n    };\n  }\n\n  const matches = str.match(interval_regex);\n  if (!matches) {\n    throw new Error(\n      `Invalid interval string, has to be either unit-less or end with one of the following units: \"${Object.keys(\n        intervals_in_seconds\n      ).join(', ')}\"`\n    );\n  }\n\n  const sec = intervals_in_seconds[matches[2]];\n  if (sec === undefined) {\n    // this can never happen, because above we\n    // already made sure the key is correct,\n    // but we handle it to be safe.\n    throw new Error('describeInterval failed: invalid interval string');\n  }\n\n  return {\n    sec,\n    type: matches[2],\n    count: parseInt(matches[1], 10),\n  };\n}\n\nexport function intervalToSeconds(str: string): number {\n  const info = describeInterval(str);\n  return info.sec * info.count;\n}\n\nexport function intervalToMs(str: string): number {\n  const info = describeInterval(str);\n  return info.sec * 1000 * info.count;\n}\n\nexport function roundInterval(interval: number) {\n  switch (true) {\n    // 0.01s\n    case interval < 10:\n      return 1; // 0.001s\n    // 0.015s\n    case interval < 15:\n      return 10; // 0.01s\n    // 0.035s\n    case interval < 35:\n      return 20; // 0.02s\n    // 0.075s\n    case interval < 75:\n      return 50; // 0.05s\n    // 0.15s\n    case interval < 150:\n      return 100; // 0.1s\n    // 0.35s\n    case interval < 350:\n      return 200; // 0.2s\n    // 0.75s\n    case interval < 750:\n      return 500; // 0.5s\n    // 1.5s\n    case interval < 1500:\n      return 1000; // 1s\n    // 3.5s\n    case interval < 3500:\n      return 2000; // 2s\n    // 7.5s\n    case interval < 7500:\n      return 5000; // 5s\n    // 12.5s\n    case interval < 12500:\n      return 10000; // 10s\n    // 17.5s\n    case interval < 17500:\n      return 15000; // 15s\n    // 25s\n    case interval < 25000:\n      return 20000; // 20s\n    // 45s\n    case interval < 45000:\n      return 30000; // 30s\n    // 1.5m\n    case interval < 90000:\n      return 60000; // 1m\n    // 3.5m\n    case interval < 210000:\n      return 120000; // 2m\n    // 7.5m\n    case interval < 450000:\n      return 300000; // 5m\n    // 12.5m\n    case interval < 750000:\n      return 600000; // 10m\n    // 17.5m\n    case interval < 1050000:\n      return 900000; // 15m\n    // 25m\n    case interval < 1500000:\n      return 1200000; // 20m\n    // 45m\n    case interval < 2700000:\n      return 1800000; // 30m\n    // 1.5h\n    case interval < 5400000:\n      return 3600000; // 1h\n    // 2.5h\n    case interval < 9000000:\n      return 7200000; // 2h\n    // 4.5h\n    case interval < 16200000:\n      return 10800000; // 3h\n    // 9h\n    case interval < 32400000:\n      return 21600000; // 6h\n    // 1d\n    case interval < 86400000:\n      return 43200000; // 12h\n    // 1w\n    case interval < 604800000:\n      return 86400000; // 1d\n    // 3w\n    case interval < 1814400000:\n      return 604800000; // 1w\n    // 6w\n    case interval < 3628800000:\n      return 2592000000; // 30d\n    default:\n      return 31536000000; // 1y\n  }\n}\n\n/**\n * Converts a TimeRange to a RelativeTimeRange that can be used in\n * e.g. alerting queries/rules.\n *\n * @internal\n */\nexport function timeRangeToRelative(timeRange: TimeRange, now: DateTime = dateTime()): RelativeTimeRange {\n  const from = now.unix() - timeRange.from.unix();\n  const to = now.unix() - timeRange.to.unix();\n\n  return {\n    from,\n    to,\n  };\n}\n\n/**\n * Converts a RelativeTimeRange to a TimeRange\n *\n * @internal\n */\nexport function relativeToTimeRange(relativeTimeRange: RelativeTimeRange, now: DateTime = dateTime()): TimeRange {\n  const from = dateTime(now).subtract(relativeTimeRange.from, 's');\n  const to = relativeTimeRange.to === 0 ? dateTime(now) : dateTime(now).subtract(relativeTimeRange.to, 's');\n\n  return {\n    from,\n    to,\n    raw: { from, to },\n  };\n}\n"],"names":["dateMath.parse","dateMath.isMathString"],"mappings":"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"}