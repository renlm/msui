{"version":3,"file":"common.js","sources":["../../../src/datetime/common.ts"],"sourcesContent":["import { isEmpty } from 'lodash';\n\nimport { TimeZone, DefaultTimeZone } from '../types/time';\n\n/**\n * Used for helper functions handling time zones.\n *\n * @public\n */\nexport interface TimeZoneOptions {\n  /**\n   * Specify this if you want to override the timeZone used when parsing or formatting\n   * a date and time value. If no timeZone is set, the default timeZone for the current\n   * user is used.\n   */\n  timeZone?: TimeZone;\n}\n\n/**\n * The type describing date and time options. Used for all the helper functions\n * available to parse or format date and time values.\n *\n * @public\n */\nexport interface DateTimeOptions extends TimeZoneOptions {\n  /**\n   * Specify a {@link https://momentjs.com/docs/#/displaying/format | momentjs} format to\n   * use a custom formatting pattern or parsing pattern. If no format is set,\n   * then system configured default format is used.\n   */\n  format?: string;\n}\n\n/**\n * The type to describe the time zone resolver function that will be used to access\n * the default time zone of a user.\n *\n * @public\n */\nexport type TimeZoneResolver = () => TimeZone | undefined;\n\nlet defaultTimeZoneResolver: TimeZoneResolver = () => DefaultTimeZone;\n\n/**\n * Used by Grafana internals to set the {@link TimeZoneResolver} to access the current\n * user timeZone.\n *\n * @internal\n */\nexport const setTimeZoneResolver = (resolver: TimeZoneResolver) => {\n  defaultTimeZoneResolver = resolver ?? defaultTimeZoneResolver;\n};\n\n/**\n * Used to get the current selected time zone. If a valid time zone is passed in the\n * options it will be returned. If no valid time zone is passed either the time zone\n * configured for the user account will be returned or the default for Grafana.\n *\n * @public\n */\nexport const getTimeZone = <T extends TimeZoneOptions>(options?: T): TimeZone => {\n  if (options?.timeZone && !isEmpty(options.timeZone)) {\n    return options.timeZone;\n  }\n  return defaultTimeZoneResolver() ?? DefaultTimeZone;\n};\n"],"names":[],"mappings":";;;AAyCA,IAAI,0BAA4C,MAAM,eAAA,CAAA;AAQzC,MAAA,mBAAA,GAAsB,CAAC,QAA+B,KAAA;AACjE,EAAA,uBAAA,GAA0B,QAAY,IAAA,IAAA,GAAA,QAAA,GAAA,uBAAA,CAAA;AACxC,EAAA;AASa,MAAA,WAAA,GAAc,CAA4B,OAA0B,KAAA;AA5DjF,EAAA,IAAA,EAAA,CAAA;AA6DE,EAAA,IAAA,CAAI,mCAAS,QAAY,KAAA,CAAC,OAAQ,CAAA,OAAA,CAAQ,QAAQ,CAAG,EAAA;AACnD,IAAA,OAAO,OAAQ,CAAA,QAAA,CAAA;AAAA,GACjB;AACA,EAAO,OAAA,CAAA,EAAA,GAAA,uBAAA,OAAA,IAA6B,GAAA,EAAA,GAAA,eAAA,CAAA;AACtC;;;;"}