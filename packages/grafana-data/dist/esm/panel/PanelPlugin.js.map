{"version":3,"file":"PanelPlugin.js","sources":["../../../src/panel/PanelPlugin.ts"],"sourcesContent":["import { set } from 'lodash';\nimport { ComponentClass, ComponentType } from 'react';\n\nimport { FieldConfigOptionsRegistry, StandardEditorContext } from '../field';\nimport {\n  FieldConfigProperty,\n  FieldConfigSource,\n  GrafanaPlugin,\n  PanelEditorProps,\n  PanelMigrationHandler,\n  PanelPluginDataSupport,\n  PanelPluginMeta,\n  PanelProps,\n  PanelTypeChangedHandler,\n  VisualizationSuggestionsSupplier,\n} from '../types';\nimport { deprecationWarning } from '../utils';\nimport { FieldConfigEditorBuilder, PanelOptionsEditorBuilder } from '../utils/OptionsUIBuilders';\n\nimport { createFieldConfigRegistry } from './registryFactories';\n\n/** @beta */\nexport type StandardOptionConfig = {\n  defaultValue?: any;\n  settings?: any;\n  hideFromDefaults?: boolean;\n};\n\n/** @beta */\nexport interface SetFieldConfigOptionsArgs<TFieldConfigOptions = any> {\n  /**\n   * Configuration object of the standard field config properites\n   *\n   * @example\n   * ```typescript\n   * {\n   *   standardOptions: {\n   *     [FieldConfigProperty.Decimals]: {\n   *       defaultValue: 3\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  standardOptions?: Partial<Record<FieldConfigProperty, StandardOptionConfig>>;\n\n  /**\n   * Array of standard field config properties that should not be available in the panel\n   * @example\n   * ```typescript\n   * {\n   *   disableStandardOptions: [FieldConfigProperty.Min, FieldConfigProperty.Max, FieldConfigProperty.Unit]\n   * }\n   * ```\n   */\n  disableStandardOptions?: FieldConfigProperty[];\n\n  /**\n   * Function that allows custom field config properties definition.\n   *\n   * @param builder\n   *\n   * @example\n   * ```typescript\n   * useCustomConfig: builder => {\n   *   builder\n   *    .addNumberInput({\n   *      id: 'shapeBorderWidth',\n   *      name: 'Border width',\n   *      description: 'Border width of the shape',\n   *      settings: {\n   *        min: 1,\n   *        max: 5,\n   *      },\n   *    })\n   *    .addSelect({\n   *      id: 'displayMode',\n   *      name: 'Display mode',\n   *      description: 'How the shape shout be rendered'\n   *      settings: {\n   *      options: [{value: 'fill', label: 'Fill' }, {value: 'transparent', label: 'Transparent }]\n   *    },\n   *  })\n   * }\n   * ```\n   */\n  useCustomConfig?: (builder: FieldConfigEditorBuilder<TFieldConfigOptions>) => void;\n}\n\nexport type PanelOptionsSupplier<TOptions> = (\n  builder: PanelOptionsEditorBuilder<TOptions>,\n  context: StandardEditorContext<TOptions>\n) => void;\n\nexport class PanelPlugin<\n  TOptions = any,\n  TFieldConfigOptions extends object = any,\n> extends GrafanaPlugin<PanelPluginMeta> {\n  private _defaults?: TOptions;\n  private _fieldConfigDefaults: FieldConfigSource<TFieldConfigOptions> = {\n    defaults: {},\n    overrides: [],\n  };\n\n  private _fieldConfigRegistry?: FieldConfigOptionsRegistry;\n  private _initConfigRegistry = () => {\n    return new FieldConfigOptionsRegistry();\n  };\n\n  private optionsSupplier?: PanelOptionsSupplier<TOptions>;\n  private suggestionsSupplier?: VisualizationSuggestionsSupplier;\n\n  panel: ComponentType<PanelProps<TOptions>> | null;\n  editor?: ComponentClass<PanelEditorProps<TOptions>>;\n  onPanelMigration?: PanelMigrationHandler<TOptions>;\n  onPanelTypeChanged?: PanelTypeChangedHandler<TOptions>;\n  noPadding?: boolean;\n  dataSupport: PanelPluginDataSupport = {\n    annotations: false,\n    alertStates: false,\n  };\n\n  /**\n   * Legacy angular ctrl. If this exists it will be used instead of the panel\n   */\n  angularPanelCtrl?: any;\n\n  constructor(panel: ComponentType<PanelProps<TOptions>> | null) {\n    super();\n    this.panel = panel;\n  }\n\n  get defaults() {\n    let result = this._defaults || {};\n\n    if (!this._defaults && this.optionsSupplier) {\n      const builder = new PanelOptionsEditorBuilder<TOptions>();\n      this.optionsSupplier(builder, { data: [] });\n      for (const item of builder.getItems()) {\n        if (item.defaultValue != null) {\n          set(result, item.path, item.defaultValue);\n        }\n      }\n    }\n\n    return result;\n  }\n\n  get fieldConfigDefaults(): FieldConfigSource<TFieldConfigOptions> {\n    const configDefaults = this._fieldConfigDefaults.defaults;\n    configDefaults.custom = {} as TFieldConfigOptions;\n\n    for (const option of this.fieldConfigRegistry.list()) {\n      if (option.defaultValue === undefined) {\n        continue;\n      }\n\n      set(configDefaults, option.id, option.defaultValue);\n    }\n\n    return {\n      defaults: {\n        ...configDefaults,\n      },\n      overrides: this._fieldConfigDefaults.overrides,\n    };\n  }\n\n  /**\n   * @deprecated setDefaults is deprecated in favor of setPanelOptions\n   */\n  setDefaults(defaults: TOptions) {\n    deprecationWarning('PanelPlugin', 'setDefaults', 'setPanelOptions');\n    this._defaults = defaults;\n    return this;\n  }\n\n  get fieldConfigRegistry() {\n    if (!this._fieldConfigRegistry) {\n      this._fieldConfigRegistry = this._initConfigRegistry();\n    }\n\n    return this._fieldConfigRegistry;\n  }\n\n  /**\n   * @deprecated setEditor is deprecated in favor of setPanelOptions\n   */\n  setEditor(editor: ComponentClass<PanelEditorProps<TOptions>>) {\n    deprecationWarning('PanelPlugin', 'setEditor', 'setPanelOptions');\n    this.editor = editor;\n    return this;\n  }\n\n  setNoPadding() {\n    this.noPadding = true;\n    return this;\n  }\n\n  /**\n   * This function is called before the panel first loads if\n   * the current version is different than the version that was saved.\n   *\n   * This is a good place to support any changes to the options model\n   */\n  setMigrationHandler(handler: PanelMigrationHandler<TOptions>) {\n    this.onPanelMigration = handler;\n    return this;\n  }\n\n  /**\n   * This function is called when the visualization was changed. This\n   * passes in the panel model for previous visualisation options inspection\n   * and panel model updates.\n   *\n   * This is useful for supporting PanelModel API updates when changing\n   * between Angular and React panels.\n   */\n  setPanelChangeHandler(handler: PanelTypeChangedHandler) {\n    this.onPanelTypeChanged = handler;\n    return this;\n  }\n\n  /**\n   * Enables panel options editor creation\n   *\n   * @example\n   * ```typescript\n   *\n   * import { ShapePanel } from './ShapePanel';\n   *\n   * interface ShapePanelOptions {}\n   *\n   * export const plugin = new PanelPlugin<ShapePanelOptions>(ShapePanel)\n   *   .setPanelOptions(builder => {\n   *     builder\n   *       .addSelect({\n   *         id: 'shape',\n   *         name: 'Shape',\n   *         description: 'Select shape to render'\n   *         settings: {\n   *           options: [\n   *             {value: 'circle', label: 'Circle' },\n   *             {value: 'square', label: 'Square },\n   *             {value: 'triangle', label: 'Triangle }\n   *            ]\n   *         },\n   *       })\n   *   })\n   * ```\n   *\n   * @public\n   **/\n  setPanelOptions(builder: PanelOptionsSupplier<TOptions>) {\n    // builder is applied lazily when options UI is created\n    this.optionsSupplier = builder;\n    return this;\n  }\n\n  /**\n   * This is used while building the panel options editor.\n   *\n   * @internal\n   */\n  getPanelOptionsSupplier(): PanelOptionsSupplier<TOptions> {\n    return this.optionsSupplier ?? (() => {});\n  }\n\n  /**\n   * Tells Grafana if the plugin should subscribe to annotation and alertState results.\n   *\n   * @example\n   * ```typescript\n   *\n   * import { ShapePanel } from './ShapePanel';\n   *\n   * interface ShapePanelOptions {}\n   *\n   * export const plugin = new PanelPlugin<ShapePanelOptions>(ShapePanel)\n   *     .useFieldConfig({})\n   *     ...\n   *     ...\n   *     .setDataSupport({\n   *       annotations: true,\n   *       alertStates: true,\n   *     });\n   * ```\n   *\n   * @public\n   **/\n  setDataSupport(support: Partial<PanelPluginDataSupport>) {\n    this.dataSupport = { ...this.dataSupport, ...support };\n    return this;\n  }\n\n  /**\n   * Allows specifying which standard field config options panel should use and defining default values\n   *\n   * @example\n   * ```typescript\n   *\n   * import { ShapePanel } from './ShapePanel';\n   *\n   * interface ShapePanelOptions {}\n   *\n   * // when plugin should use all standard options\n   * export const plugin = new PanelPlugin<ShapePanelOptions>(ShapePanel)\n   *  .useFieldConfig();\n   *\n   * // when plugin should only display specific standard options\n   * // note, that options will be displayed in the order they are provided\n   * export const plugin = new PanelPlugin<ShapePanelOptions>(ShapePanel)\n   *  .useFieldConfig({\n   *    standardOptions: [FieldConfigProperty.Min, FieldConfigProperty.Max]\n   *   });\n   *\n   * // when standard option's default value needs to be provided\n   * export const plugin = new PanelPlugin<ShapePanelOptions>(ShapePanel)\n   *  .useFieldConfig({\n   *    standardOptions: [FieldConfigProperty.Min, FieldConfigProperty.Max],\n   *    standardOptionsDefaults: {\n   *      [FieldConfigProperty.Min]: 20,\n   *      [FieldConfigProperty.Max]: 100\n   *    }\n   *  });\n   *\n   * // when custom field config options needs to be provided\n   * export const plugin = new PanelPlugin<ShapePanelOptions>(ShapePanel)\n   *  .useFieldConfig({\n   *    useCustomConfig: builder => {\n   *      builder\n   *       .addNumberInput({\n   *         id: 'shapeBorderWidth',\n   *         name: 'Border width',\n   *         description: 'Border width of the shape',\n   *         settings: {\n   *           min: 1,\n   *           max: 5,\n   *         },\n   *       })\n   *       .addSelect({\n   *         id: 'displayMode',\n   *         name: 'Display mode',\n   *         description: 'How the shape shout be rendered'\n   *         settings: {\n   *         options: [{value: 'fill', label: 'Fill' }, {value: 'transparent', label: 'Transparent }]\n   *       },\n   *     })\n   *   },\n   *  });\n   *\n   * ```\n   *\n   * @public\n   */\n  useFieldConfig(config: SetFieldConfigOptionsArgs<TFieldConfigOptions> = {}) {\n    // builder is applied lazily when custom field configs are accessed\n    this._initConfigRegistry = () => createFieldConfigRegistry(config, this.meta.name);\n\n    return this;\n  }\n\n  /**\n   * Sets function that can return visualization examples and suggestions.\n   * @alpha\n   */\n  setSuggestionsSupplier(supplier: VisualizationSuggestionsSupplier) {\n    this.suggestionsSupplier = supplier;\n    return this;\n  }\n\n  /**\n   * Returns the suggestions supplier\n   * @alpha\n   */\n  getSuggestionsSupplier(): VisualizationSuggestionsSupplier | undefined {\n    return this.suggestionsSupplier;\n  }\n\n  hasPluginId(pluginId: string) {\n    return this.meta.id === pluginId;\n  }\n}\n"],"names":[],"mappings":"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"}