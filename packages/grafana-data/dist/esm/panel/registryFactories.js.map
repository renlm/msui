{"version":3,"file":"registryFactories.js","sources":["../../../src/panel/registryFactories.ts"],"sourcesContent":["import { FieldConfigOptionsRegistry } from '../field/FieldConfigOptionsRegistry';\nimport { standardFieldConfigEditorRegistry } from '../field/standardFieldConfigEditorRegistry';\nimport { FieldConfigProperty, FieldConfigPropertyItem } from '../types/fieldOverrides';\nimport { FieldConfigEditorBuilder } from '../utils/OptionsUIBuilders';\n\nimport { SetFieldConfigOptionsArgs } from './PanelPlugin';\n\n/**\n * Helper functionality to create a field config registry.\n *\n * @param config - configuration to base the registry on.\n * @param pluginName - name of the plugin that will use the registry.\n * @internal\n */\nexport function createFieldConfigRegistry<TFieldConfigOptions>(\n  config: SetFieldConfigOptionsArgs<TFieldConfigOptions> = {},\n  pluginName: string\n): FieldConfigOptionsRegistry {\n  const registry = new FieldConfigOptionsRegistry();\n  const standardConfigs = standardFieldConfigEditorRegistry.list();\n  const standardOptionsExtensions: Record<string, FieldConfigPropertyItem[]> = {};\n\n  // Add custom options\n  if (config.useCustomConfig) {\n    const builder = new FieldConfigEditorBuilder<TFieldConfigOptions>();\n    config.useCustomConfig(builder);\n\n    for (const customProp of builder.getRegistry().list()) {\n      customProp.isCustom = true;\n      // need to do something to make the custom items not conflict with standard ones\n      // problem is id (registry index) is used as property path\n      // so sort of need a property path on the FieldPropertyEditorItem\n      customProp.id = 'custom.' + customProp.id;\n\n      if (isStandardConfigExtension(customProp, standardConfigs)) {\n        const currentExtensions = standardOptionsExtensions[customProp.category![0]] ?? [];\n        currentExtensions.push(customProp);\n        standardOptionsExtensions[customProp.category![0]] = currentExtensions;\n      } else {\n        registry.register(customProp);\n      }\n    }\n  }\n\n  for (let fieldConfigProp of standardConfigs) {\n    const id = fieldConfigProp.id as FieldConfigProperty;\n    if (config.disableStandardOptions) {\n      const isDisabled = config.disableStandardOptions.indexOf(id) > -1;\n      if (isDisabled) {\n        continue;\n      }\n    }\n    if (config.standardOptions) {\n      const customHideFromDefaults = config.standardOptions[id]?.hideFromDefaults;\n      const customDefault = config.standardOptions[id]?.defaultValue;\n      const customSettings = config.standardOptions[id]?.settings;\n\n      if (customHideFromDefaults) {\n        fieldConfigProp = {\n          ...fieldConfigProp,\n          hideFromDefaults: customHideFromDefaults,\n        };\n      }\n\n      if (customDefault) {\n        fieldConfigProp = {\n          ...fieldConfigProp,\n          defaultValue: customDefault,\n        };\n      }\n\n      if (customSettings) {\n        fieldConfigProp = {\n          ...fieldConfigProp,\n          settings: fieldConfigProp.settings ? { ...fieldConfigProp.settings, ...customSettings } : customSettings,\n        };\n      }\n    }\n\n    registry.register(fieldConfigProp);\n\n    if (fieldConfigProp.category && standardOptionsExtensions[fieldConfigProp.category[0]]) {\n      for (let extensionProperty of standardOptionsExtensions[fieldConfigProp.category[0]]) {\n        registry.register(extensionProperty);\n      }\n    }\n  }\n\n  // assert that field configs do not use array path syntax\n  for (const item of registry.list()) {\n    if (item.path.indexOf('[') > 0) {\n      throw new Error(`[${pluginName}] Field config paths do not support arrays: ${item.id}`);\n    }\n  }\n\n  return registry;\n}\n\nfunction isStandardConfigExtension(property: FieldConfigPropertyItem, standardProperties: FieldConfigPropertyItem[]) {\n  return Boolean(\n    standardProperties.find((p) => property.category && p.category && property.category[0] === p.category[0])\n  );\n}\n"],"names":[],"mappings":"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"}