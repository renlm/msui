{"version":3,"file":"templateVars.js","sources":["../../../src/types/templateVars.ts"],"sourcesContent":["import { LoadingState } from './data';\nimport { MetricFindValue } from './datasource';\nimport { DataSourceRef } from './query';\n\nexport type VariableType = TypedVariableModel['type'];\n\n/** @deprecated Use TypedVariableModel instead */\nexport interface VariableModel {\n  type: VariableType;\n  name: string;\n  label?: string;\n}\n\nexport type TypedVariableModel =\n  | QueryVariableModel\n  | AdHocVariableModel\n  | GroupByVariableModel\n  | ConstantVariableModel\n  | DataSourceVariableModel\n  | IntervalVariableModel\n  | TextBoxVariableModel\n  | CustomVariableModel\n  | UserVariableModel\n  | OrgVariableModel\n  | DashboardVariableModel;\n\nexport enum VariableRefresh {\n  never, // removed from the UI\n  onDashboardLoad,\n  onTimeRangeChanged,\n}\n\nexport enum VariableSort {\n  disabled,\n  alphabeticalAsc,\n  alphabeticalDesc,\n  numericalAsc,\n  numericalDesc,\n  alphabeticalCaseInsensitiveAsc,\n  alphabeticalCaseInsensitiveDesc,\n  naturalAsc,\n  naturalDesc,\n}\n\nexport enum VariableHide {\n  dontHide,\n  hideLabel,\n  hideVariable,\n}\n\nexport interface AdHocVariableFilter {\n  key: string;\n  operator: string;\n  value: string;\n  /** @deprecated  */\n  condition?: string;\n}\n\nexport interface AdHocVariableModel extends BaseVariableModel {\n  type: 'adhoc';\n  datasource: DataSourceRef | null;\n  filters: AdHocVariableFilter[];\n  /**\n   * Filters that are always applied to the lookup of keys. Not shown in the AdhocFilterBuilder UI.\n   */\n  baseFilters?: AdHocVariableFilter[];\n  /**\n   * Static keys that override any dynamic keys from the datasource.\n   */\n  defaultKeys?: MetricFindValue[];\n}\n\nexport interface GroupByVariableModel extends VariableWithOptions {\n  type: 'groupby';\n  datasource: DataSourceRef | null;\n  multi: true;\n}\n\nexport interface VariableOption {\n  selected: boolean;\n  text: string | string[];\n  value: string | string[];\n  isNone?: boolean;\n}\n\nexport interface IntervalVariableModel extends VariableWithOptions {\n  type: 'interval';\n  auto: boolean;\n  auto_min: string;\n  auto_count: number;\n  refresh: VariableRefresh;\n}\n\nexport interface CustomVariableModel extends VariableWithMultiSupport {\n  type: 'custom';\n}\n\nexport interface DataSourceVariableModel extends VariableWithMultiSupport {\n  type: 'datasource';\n  regex: string;\n  refresh: VariableRefresh;\n}\n\nexport interface QueryVariableModel extends VariableWithMultiSupport {\n  type: 'query';\n  datasource: DataSourceRef | null;\n  definition: string;\n  sort: VariableSort;\n  queryValue?: string;\n  query: any;\n  regex: string;\n  refresh: VariableRefresh;\n}\n\nexport interface TextBoxVariableModel extends VariableWithOptions {\n  type: 'textbox';\n  originalQuery: string | null;\n}\n\nexport interface ConstantVariableModel extends VariableWithOptions {\n  type: 'constant';\n}\n\nexport interface VariableWithMultiSupport extends VariableWithOptions {\n  multi: boolean;\n  includeAll: boolean;\n  allValue?: string | null;\n}\n\nexport interface VariableWithOptions extends BaseVariableModel {\n  current: VariableOption | Record<string, never>;\n  options: VariableOption[];\n  query: string;\n}\n\nexport interface DashboardProps {\n  name: string;\n  uid: string;\n  toString: () => string;\n}\n\nexport interface DashboardVariableModel extends SystemVariable<DashboardProps> {}\n\nexport interface OrgProps {\n  name: string;\n  id: number;\n  toString: () => string;\n}\n\nexport interface OrgVariableModel extends SystemVariable<OrgProps> {}\n\nexport interface UserProps {\n  login: string;\n  id: number;\n  email?: string;\n  toString: () => string;\n}\n\nexport interface UserVariableModel extends SystemVariable<UserProps> {}\n\nexport interface SystemVariable<TProps extends { toString: () => string }> extends BaseVariableModel {\n  type: 'system';\n  current: { value: TProps };\n}\n\nexport interface BaseVariableModel {\n  name: string;\n  label?: string;\n  id: string;\n  type: VariableType;\n  rootStateKey: string | null;\n  global: boolean;\n  hide: VariableHide;\n  skipUrlSync: boolean;\n  index: number;\n  state: LoadingState;\n  error: any | null;\n  description: string | null;\n  usedInRepeat?: boolean;\n}\n"],"names":["VariableRefresh","VariableSort","VariableHide"],"mappings":"AA0BY,IAAA,eAAA,qBAAAA,gBAAL,KAAA;AACL,EAAAA,gBAAA,CAAA,gBAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;AACA,EAAAA,gBAAA,CAAA,gBAAA,CAAA,iBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,iBAAA,CAAA;AACA,EAAAA,gBAAA,CAAA,gBAAA,CAAA,oBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,oBAAA,CAAA;AAHU,EAAAA,OAAAA,gBAAAA,CAAAA;AAAA,CAAA,EAAA,eAAA,IAAA,EAAA,EAAA;AAMA,IAAA,YAAA,qBAAAC,aAAL,KAAA;AACL,EAAAA,aAAA,CAAA,aAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA,CAAA;AACA,EAAAA,aAAA,CAAA,aAAA,CAAA,iBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,iBAAA,CAAA;AACA,EAAAA,aAAA,CAAA,aAAA,CAAA,kBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,kBAAA,CAAA;AACA,EAAAA,aAAA,CAAA,aAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAA,CAAA;AACA,EAAAA,aAAA,CAAA,aAAA,CAAA,eAAA,CAAA,GAAA,CAAA,CAAA,GAAA,eAAA,CAAA;AACA,EAAAA,aAAA,CAAA,aAAA,CAAA,gCAAA,CAAA,GAAA,CAAA,CAAA,GAAA,gCAAA,CAAA;AACA,EAAAA,aAAA,CAAA,aAAA,CAAA,iCAAA,CAAA,GAAA,CAAA,CAAA,GAAA,iCAAA,CAAA;AACA,EAAAA,aAAA,CAAA,aAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA,CAAA;AACA,EAAAA,aAAA,CAAA,aAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA,CAAA;AATU,EAAAA,OAAAA,aAAAA,CAAAA;AAAA,CAAA,EAAA,YAAA,IAAA,EAAA,EAAA;AAYA,IAAA,YAAA,qBAAAC,aAAL,KAAA;AACL,EAAAA,aAAA,CAAA,aAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA,CAAA;AACA,EAAAA,aAAA,CAAA,aAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA,CAAA;AACA,EAAAA,aAAA,CAAA,aAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAA,CAAA;AAHU,EAAAA,OAAAA,aAAAA,CAAAA;AAAA,CAAA,EAAA,YAAA,IAAA,EAAA;;;;"}