{"version":3,"file":"pluginExtensions.js","sources":["../../../src/types/pluginExtensions.ts"],"sourcesContent":["import React from 'react';\n\nimport { DataQuery, DataSourceJsonData } from '@grafana/schema';\n\nimport { ScopedVars } from './ScopedVars';\nimport { DataSourcePluginMeta, DataSourceSettings } from './datasource';\nimport { IconName } from './icon';\nimport { PanelData } from './panel';\nimport { RawTimeRange, TimeZone } from './time';\n\n// Plugin Extensions types\n// ---------------------------------------\n\nexport enum PluginExtensionTypes {\n  link = 'link',\n  component = 'component',\n}\n\ntype PluginExtensionBase = {\n  id: string;\n  type: PluginExtensionTypes;\n  title: string;\n  description: string;\n  pluginId: string;\n};\n\nexport type PluginExtensionLink = PluginExtensionBase & {\n  type: PluginExtensionTypes.link;\n  path?: string;\n  onClick?: (event?: React.MouseEvent) => void;\n  icon?: IconName;\n  category?: string;\n};\n\nexport type PluginExtensionComponent<Props = {}> = PluginExtensionBase & {\n  type: PluginExtensionTypes.component;\n  component: React.ComponentType<Props>;\n};\n\nexport type PluginExtension = PluginExtensionLink | PluginExtensionComponent;\n\n// Objects used for registering extensions (in app plugins)\n// --------------------------------------------------------\nexport type PluginExtensionLinkConfig<Context extends object = object> = {\n  type: PluginExtensionTypes.link;\n  title: string;\n  description: string;\n\n  // A URL path that will be used as the href for the rendered link extension\n  // (It is optional, because in some cases the action will be handled by the `onClick` handler instead of navigating to a new page)\n  path?: string;\n\n  // A function that will be called when the link is clicked\n  // (It is called with the original event object)\n  onClick?: (event: React.MouseEvent | undefined, helpers: PluginExtensionEventHelpers<Context>) => void;\n\n  /**\n   * The unique identifier of the Extension Point\n   * (Core Grafana extension point ids are available in the `PluginExtensionPoints` enum)\n   */\n  extensionPointId: string;\n\n  // (Optional) A function that can be used to configure the extension dynamically based on the extension point's context\n  configure?: (context?: Readonly<Context>) =>\n    | Partial<{\n        title: string;\n        description: string;\n        path: string;\n        onClick: (event: React.MouseEvent | undefined, helpers: PluginExtensionEventHelpers<Context>) => void;\n        icon: IconName;\n        category: string;\n      }>\n    | undefined;\n\n  // (Optional) A icon that can be displayed in the ui for the extension option.\n  icon?: IconName;\n\n  // (Optional) A category to be used when grouping the options in the ui\n  category?: string;\n};\n\nexport type PluginExtensionComponentConfig<Props = {}> = {\n  type: PluginExtensionTypes.component;\n  title: string;\n  description: string;\n\n  // The React component that will be rendered as the extension\n  // (This component receives contextual information as props when it is rendered. You can just return `null` from the component to hide it.)\n  component: React.ComponentType<Props>;\n\n  /**\n   * The unique identifier of the Extension Point\n   * (Core Grafana extension point ids are available in the `PluginExtensionPoints` enum)\n   */\n  extensionPointId: string;\n};\n\nexport type PluginExtensionConfig = PluginExtensionLinkConfig | PluginExtensionComponentConfig;\n\nexport type PluginExtensionOpenModalOptions = {\n  // The title of the modal\n  title: string;\n  // A React element that will be rendered inside the modal\n  body: React.ElementType<{ onDismiss?: () => void }>;\n  // Width of the modal in pixels or percentage\n  width?: string | number;\n  // Height of the modal in pixels or percentage\n  height?: string | number;\n};\n\nexport type PluginExtensionEventHelpers<Context extends object = object> = {\n  context?: Readonly<Context>;\n  // Opens a modal dialog and renders the provided React component inside it\n  openModal: (options: PluginExtensionOpenModalOptions) => void;\n};\n\n// Extension Points & Contexts\n// --------------------------------------------------------\n\n// Extension Points available in core Grafana\nexport enum PluginExtensionPoints {\n  AlertInstanceAction = 'grafana/alerting/instance/action',\n  AlertingHomePage = 'grafana/alerting/home',\n  AlertingAlertingRuleAction = 'grafana/alerting/alertingrule/action',\n  AlertingRecordingRuleAction = 'grafana/alerting/recordingrule/action',\n  CommandPalette = 'grafana/commandpalette/action',\n  DashboardPanelMenu = 'grafana/dashboard/panel/menu',\n  DataSourceConfig = 'grafana/datasources/config',\n  ExploreToolbarAction = 'grafana/explore/toolbar/action',\n  UserProfileTab = 'grafana/user/profile/tab',\n}\n\nexport type PluginExtensionPanelContext = {\n  pluginId: string;\n  id: number;\n  title: string;\n  timeRange: RawTimeRange;\n  timeZone: TimeZone;\n  dashboard: Dashboard;\n  targets: DataQuery[];\n  scopedVars?: ScopedVars;\n  data?: PanelData;\n};\n\nexport type PluginExtensionDataSourceConfigContext<JsonData extends DataSourceJsonData = DataSourceJsonData> = {\n  // The current datasource settings\n  dataSource: DataSourceSettings<JsonData>;\n\n  // Meta information about the datasource plugin\n  dataSourceMeta: DataSourcePluginMeta;\n\n  // Testing status\n  testingStatus?: {\n    message?: string | null;\n    status?: string | null;\n  };\n\n  // Can be used to update the `jsonData` field on the datasource\n  // (Only updates the form, it still needs to be saved by the user)\n  setJsonData: (jsonData: JsonData) => void;\n};\n\nexport type PluginExtensionCommandPaletteContext = {};\n\ntype Dashboard = {\n  uid: string;\n  title: string;\n  tags: string[];\n};\n"],"names":["PluginExtensionTypes","PluginExtensionPoints"],"mappings":"AAaY,IAAA,oBAAA,qBAAAA,qBAAL,KAAA;AACL,EAAAA,sBAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AACP,EAAAA,sBAAA,WAAY,CAAA,GAAA,WAAA,CAAA;AAFF,EAAAA,OAAAA,qBAAAA,CAAAA;AAAA,CAAA,EAAA,oBAAA,IAAA,EAAA,EAAA;AA2GA,IAAA,qBAAA,qBAAAC,sBAAL,KAAA;AACL,EAAAA,uBAAA,qBAAsB,CAAA,GAAA,kCAAA,CAAA;AACtB,EAAAA,uBAAA,kBAAmB,CAAA,GAAA,uBAAA,CAAA;AACnB,EAAAA,uBAAA,4BAA6B,CAAA,GAAA,sCAAA,CAAA;AAC7B,EAAAA,uBAAA,6BAA8B,CAAA,GAAA,uCAAA,CAAA;AAC9B,EAAAA,uBAAA,gBAAiB,CAAA,GAAA,+BAAA,CAAA;AACjB,EAAAA,uBAAA,oBAAqB,CAAA,GAAA,8BAAA,CAAA;AACrB,EAAAA,uBAAA,kBAAmB,CAAA,GAAA,4BAAA,CAAA;AACnB,EAAAA,uBAAA,sBAAuB,CAAA,GAAA,gCAAA,CAAA;AACvB,EAAAA,uBAAA,gBAAiB,CAAA,GAAA,0BAAA,CAAA;AATP,EAAAA,OAAAA,sBAAAA,CAAAA;AAAA,CAAA,EAAA,qBAAA,IAAA,EAAA;;;;"}