{"version":3,"file":"panel.js","sources":["../../../src/types/panel.ts"],"sourcesContent":["import { defaultsDeep } from 'lodash';\n\nimport { EventBus } from '../events';\nimport { StandardEditorProps } from '../field';\nimport { Registry } from '../utils';\n\nimport { OptionsEditorItem } from './OptionsUIRegistryBuilder';\nimport { ScopedVars } from './ScopedVars';\nimport { AlertStateInfo } from './alerts';\nimport { PanelModel } from './dashboard';\nimport { LoadingState, PreferredVisualisationType } from './data';\nimport { DataFrame, FieldType } from './dataFrame';\nimport { DataQueryError, DataQueryRequest, DataQueryTimings } from './datasource';\nimport { FieldConfigSource } from './fieldOverrides';\nimport { IconName } from './icon';\nimport { OptionEditorConfig } from './options';\nimport { PluginMeta } from './plugin';\nimport { AbsoluteTimeRange, TimeRange, TimeZone } from './time';\nimport { DataTransformerConfig } from './transformations';\n\nexport type InterpolateFunction = (value: string, scopedVars?: ScopedVars, format?: string | Function) => string;\n\nexport interface PanelPluginMeta extends PluginMeta {\n  /** Indicates that panel does not issue queries */\n  skipDataQuery?: boolean;\n  /** Indicates that panel should not be available in visualisation picker */\n  hideFromList?: boolean;\n  /** Sort order */\n  sort: number;\n}\n\nexport interface PanelData {\n  /** State of the data (loading, done, error, streaming) */\n  state: LoadingState;\n\n  /** Contains data frames with field overrides applied */\n  series: DataFrame[];\n\n  /**\n   * This is a key that will change when the DataFrame[] structure changes.\n   * The revision is a useful way to know if only data has changed or data+structure\n   */\n  structureRev?: number;\n\n  /** A list of annotation items */\n  annotations?: DataFrame[];\n\n  /**\n   * @internal\n   */\n  alertState?: AlertStateInfo;\n\n  /** Request contains the queries and properties sent to the datasource */\n  request?: DataQueryRequest;\n\n  /** Timing measurements */\n  timings?: DataQueryTimings;\n\n  /** Any query errors */\n  errors?: DataQueryError[];\n  /**\n   * Single error for legacy reasons\n   * @deprecated use errors instead -- will be removed in Grafana 10+\n   */\n  error?: DataQueryError;\n\n  /** Contains the range from the request or a shifted time range if a request uses relative time */\n  timeRange: TimeRange;\n\n  /** traceIds collected during the processing of the requests */\n  traceIds?: string[];\n}\n\nexport interface PanelProps<T = any> {\n  /** Unique ID of the panel within the current dashboard */\n  id: number;\n\n  /** Data available as result of running panel queries, includes dataframes and loading state **/\n  data: PanelData;\n\n  /** Time range of the current dashboard */\n  timeRange: TimeRange;\n\n  /** Time zone of the current dashboard */\n  timeZone: TimeZone;\n\n  /** Panel options set by the user in the panel editor. Includes both default and custom panel options */\n  options: T;\n\n  /** Indicates whether or not panel should be rendered transparent */\n  transparent: boolean;\n\n  /** Current width of the panel in pixels */\n  width: number;\n\n  /** Current height of the panel in pixels */\n  height: number;\n\n  /** Field options configuration. Controls how field values are displayed (e.g., units, min, max, decimals, thresholds) */\n  fieldConfig: FieldConfigSource;\n\n  /** @internal */\n  renderCounter: number;\n\n  /** Panel title */\n  title: string;\n\n  /** Grafana EventBus  */\n  eventBus: EventBus;\n\n  /** Handler for options change. Invoke it to update the panel custom options. */\n  onOptionsChange: (options: T) => void;\n\n  /** Field config change handler. Invoke it to update the panel field config. */\n  onFieldConfigChange: (config: FieldConfigSource) => void;\n\n  /** Template variables interpolation function. Given a string containing template variables, it returns the string with interpolated values. */\n  replaceVariables: InterpolateFunction;\n\n  /** Time range change handler */\n  onChangeTimeRange: (timeRange: AbsoluteTimeRange) => void;\n}\n\nexport interface PanelEditorProps<T = any> {\n  /** Panel options */\n  options: T;\n  /** Panel options change handler */\n  onOptionsChange: (\n    options: T,\n    // callback can be used to run something right after update.\n    callback?: () => void\n  ) => void;\n  /** Result set of panel queries */\n  data?: PanelData;\n}\n\n/**\n * Called when a panel is first loaded with current panel model to migrate panel options if needed.\n * Can return panel options, or a Promise that resolves to panel options for async migrations\n */\nexport type PanelMigrationHandler<TOptions = any> = (\n  panel: PanelModel<TOptions>\n) => Partial<TOptions> | Promise<Partial<TOptions>>;\n\n/**\n * Called before a panel is initialized. Allows panel inspection for any updates before changing the panel type.\n */\nexport type PanelTypeChangedHandler<TOptions = any> = (\n  panel: PanelModel<TOptions>,\n  prevPluginId: string,\n  prevOptions: Record<string, any>,\n  prevFieldConfig: FieldConfigSource\n) => Partial<TOptions>;\n\nexport type PanelOptionEditorsRegistry = Registry<PanelOptionsEditorItem>;\n\nexport interface PanelOptionsEditorProps<TValue> extends StandardEditorProps<TValue> {}\n\nexport interface PanelOptionsEditorItem<TOptions = any, TValue = any, TSettings = any>\n  extends OptionsEditorItem<TOptions, TSettings, PanelOptionsEditorProps<TValue>, TValue> {}\n\nexport interface PanelOptionsEditorConfig<TOptions, TSettings = any, TValue = any>\n  extends OptionEditorConfig<TOptions, TSettings, TValue> {}\n\n/**\n * @internal\n */\nexport interface PanelMenuItem {\n  type?: 'submenu' | 'divider' | 'group';\n  text: string;\n  iconClassName?: IconName;\n  onClick?: (event: React.MouseEvent<any>) => void;\n  shortcut?: string;\n  href?: string;\n  subMenu?: PanelMenuItem[];\n}\n\n/**\n * @internal\n */\nexport interface AngularPanelMenuItem {\n  click: Function;\n  icon: string;\n  href: string;\n  divider: boolean;\n  text: string;\n  shortcut: string;\n  submenu: any[];\n}\n\nexport enum VizOrientation {\n  Auto = 'auto',\n  Vertical = 'vertical',\n  Horizontal = 'horizontal',\n}\n\nexport interface PanelPluginDataSupport {\n  annotations: boolean;\n  alertStates: boolean;\n}\n\n/**\n * @alpha\n */\nexport interface VisualizationSuggestion<TOptions = any, TFieldConfig = any> {\n  /** Name of suggestion */\n  name: string;\n  /** Description */\n  description?: string;\n  /** Panel plugin id */\n  pluginId: string;\n  /** Panel plugin options */\n  options?: Partial<TOptions>;\n  /** Panel plugin field options */\n  fieldConfig?: FieldConfigSource<Partial<TFieldConfig>>;\n  /** Data transformations */\n  transformations?: DataTransformerConfig[];\n  /** Options for how to render suggestion card */\n  cardOptions?: {\n    /** Tweak for small preview */\n    previewModifier?: (suggestion: VisualizationSuggestion) => void;\n    icon?: string;\n    imgSrc?: string;\n  };\n  /** A value between 0-100 how suitable suggestion is */\n  score?: VisualizationSuggestionScore;\n}\n\n/**\n * @alpha\n */\nexport enum VisualizationSuggestionScore {\n  /** We are pretty sure this is the best possible option */\n  Best = 100,\n  /** Should be a really good option */\n  Good = 70,\n  /** Can be visualized but there are likely better options. If no score is set this score is assumed */\n  OK = 50,\n}\n\n/**\n * @alpha\n */\nexport interface PanelDataSummary {\n  hasData?: boolean;\n  rowCountTotal: number;\n  rowCountMax: number;\n  frameCount: number;\n  fieldCount: number;\n  numberFieldCount: number;\n  timeFieldCount: number;\n  stringFieldCount: number;\n  hasNumberField?: boolean;\n  hasTimeField?: boolean;\n  hasStringField?: boolean;\n  /** The first frame that set's this value */\n  preferredVisualisationType?: PreferredVisualisationType;\n}\n\n/**\n * @alpha\n */\nexport class VisualizationSuggestionsBuilder {\n  /** Current data */\n  data?: PanelData;\n  /** Current panel & options */\n  panel?: PanelModel;\n  /** Summary stats for current data */\n  dataSummary: PanelDataSummary;\n\n  private list: VisualizationSuggestion[] = [];\n\n  constructor(data?: PanelData, panel?: PanelModel) {\n    this.data = data;\n    this.panel = panel;\n    this.dataSummary = this.computeDataSummary();\n  }\n\n  getListAppender<TOptions, TFieldConfig>(defaults: VisualizationSuggestion<TOptions, TFieldConfig>) {\n    return new VisualizationSuggestionsListAppender<TOptions, TFieldConfig>(this.list, defaults);\n  }\n\n  private computeDataSummary() {\n    const frames = this.data?.series || [];\n\n    let numberFieldCount = 0;\n    let timeFieldCount = 0;\n    let stringFieldCount = 0;\n    let rowCountTotal = 0;\n    let rowCountMax = 0;\n    let fieldCount = 0;\n    let preferredVisualisationType: PreferredVisualisationType | undefined;\n\n    for (const frame of frames) {\n      rowCountTotal += frame.length;\n\n      if (frame.meta?.preferredVisualisationType) {\n        preferredVisualisationType = frame.meta.preferredVisualisationType;\n      }\n\n      for (const field of frame.fields) {\n        fieldCount++;\n\n        switch (field.type) {\n          case FieldType.number:\n            numberFieldCount += 1;\n            break;\n          case FieldType.time:\n            timeFieldCount += 1;\n            break;\n          case FieldType.string:\n            stringFieldCount += 1;\n            break;\n        }\n      }\n\n      if (frame.length > rowCountMax) {\n        rowCountMax = frame.length;\n      }\n    }\n\n    return {\n      numberFieldCount,\n      timeFieldCount,\n      stringFieldCount,\n      rowCountTotal,\n      rowCountMax,\n      fieldCount,\n      preferredVisualisationType,\n      frameCount: frames.length,\n      hasData: rowCountTotal > 0,\n      hasTimeField: timeFieldCount > 0,\n      hasNumberField: numberFieldCount > 0,\n      hasStringField: stringFieldCount > 0,\n    };\n  }\n\n  getList() {\n    return this.list;\n  }\n}\n\n/**\n * @alpha\n */\nexport type VisualizationSuggestionsSupplier = {\n  /**\n   * Adds good suitable suggestions for the current data\n   */\n  getSuggestionsForData: (builder: VisualizationSuggestionsBuilder) => void;\n};\n\n/**\n * Helps with typings and defaults\n * @alpha\n */\nexport class VisualizationSuggestionsListAppender<TOptions, TFieldConfig> {\n  constructor(\n    private list: VisualizationSuggestion[],\n    private defaults: VisualizationSuggestion<TOptions, TFieldConfig>\n  ) {}\n\n  append(overrides: Partial<VisualizationSuggestion<TOptions, TFieldConfig>>) {\n    this.list.push(defaultsDeep(overrides, this.defaults));\n  }\n}\n"],"names":["VizOrientation","VisualizationSuggestionScore"],"mappings":"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"}